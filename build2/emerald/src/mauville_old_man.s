@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	1, 0
	.type	 sUnknownBardRelated,object
	.size	 sUnknownBardRelated,2
sUnknownBardRelated:
	.short	0x0
	.align	2, 0
	.type	 sStorytellerPtr,object
	.size	 sStorytellerPtr,4
sStorytellerPtr:
	.word	0x0
	.type	 sStorytellerWindowId,object
	.size	 sStorytellerWindowId,1
sStorytellerWindowId:
	.byte	0x0
	.section .rodata
	.align	1, 0
	.type	 sDefaultBardSongLyrics,object
	.size	 sDefaultBardSongLyrics,12
sDefaultBardSongLyrics:
	.short	0x2811
	.short	0x1029
	.short	0x1018
	.short	0xe0d
	.short	0x1a1a
	.short	0x1a1d
	.align	2, 0
	.type	 sGiddyAdjectives,object
sGiddyAdjectives:
	.word	gText_SoPretty
	.word	gText_SoDarling
	.word	gText_SoRelaxed
	.word	gText_SoSunny
	.word	gText_SoDesirable
	.word	gText_SoExciting
	.word	gText_SoAmusing
	.word	gText_SoMagical
	.size	 sGiddyAdjectives,32
	.align	2, 0
	.type	 sGiddyQuestions,object
sGiddyQuestions:
	.word	gMauvilleManText_ISoWantToGoOnAVacation
	.word	gMauvilleManText_IBoughtCrayonsWith120Colors
	.word	gMauvilleManText_WouldntItBeNiceIfWeCouldFloat
	.word	gMauvilleManText_WhenYouWriteOnASandyBeach
	.word	gMauvilleManText_WhatsTheBottomOfTheSeaLike
	.word	gMauvilleManText_WhenYouSeeTheSettingSunDoesIt
	.word	gMauvilleManText_LyingBackInTheGreenGrass
	.word	gMauvilleManText_SecretBasesAreSoWonderful
	.size	 sGiddyQuestions,32
.text
	.align	2, 0
	.type	 SetupBard,function
	.thumb_func
SetupBard:
	push	{r4, lr}
	ldr	r0, .L8
	ldr	r2, [r0]
	ldr	r1, .L8+0x4
	add	r0, r2, r1
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r3, .L8+0x8
	add	r0, r2, r3
	strb	r1, [r0]
	ldr	r0, .L8+0xc
	ldrb	r1, [r0]
	add	r3, r3, #0x1
	add	r0, r2, r3
	strb	r1, [r0]
	mov	r3, #0x0
	ldr	r0, .L8+0x10
	add	r2, r2, r0
	ldr	r4, .L8+0x14
.L6:
	lsl	r0, r3, #0x1
	add	r1, r2, r0
	add	r0, r0, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x5
	bls	.L6	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gSaveBlock1Ptr
	.word	0x2aa8
	.word	0x2ad1
	.word	gGameLanguage
	.word	0x2aaa
	.word	sDefaultBardSongLyrics
.Lfe1:
	.size	 SetupBard,.Lfe1-SetupBard
	.align	2, 0
	.type	 SetupHipster,function
	.thumb_func
SetupHipster:
	ldr	r0, .L11
	ldr	r1, [r0]
	ldr	r0, .L11+0x4
	add	r1, r1, r0
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r1]
	strb	r2, [r1, #0x1]
	ldr	r0, .L11+0x8
	ldrb	r0, [r0]
	strb	r0, [r1, #0x2]
	bx	lr
.L12:
	.align	2, 0
.L11:
	.word	gSaveBlock1Ptr
	.word	0x2aa8
	.word	gGameLanguage
.Lfe2:
	.size	 SetupHipster,.Lfe2-SetupHipster
	.align	2, 0
	.type	 SetupStoryteller,function
	.thumb_func
SetupStoryteller:
	push	{lr}
	bl	StorytellerSetup
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 SetupStoryteller,.Lfe3-SetupStoryteller
	.align	2, 0
	.type	 SetupGiddy,function
	.thumb_func
SetupGiddy:
	ldr	r0, .L15
	ldr	r1, [r0]
	ldr	r0, .L15+0x4
	add	r2, r1, r0
	mov	r3, #0x0
	mov	r0, #0x4
	strb	r0, [r2]
	strb	r3, [r2, #0x1]
	ldr	r0, .L15+0x8
	ldrb	r0, [r0]
	ldr	r2, .L15+0xc
	add	r1, r1, r2
	strb	r0, [r1]
	bx	lr
.L16:
	.align	2, 0
.L15:
	.word	gSaveBlock1Ptr
	.word	0x2aa8
	.word	gGameLanguage
	.word	0x2ac8
.Lfe4:
	.size	 SetupGiddy,.Lfe4-SetupGiddy
	.align	2, 0
	.type	 SetupTrader,function
	.thumb_func
SetupTrader:
	push	{lr}
	bl	TraderSetup
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 SetupTrader,.Lfe5-SetupTrader
	.align	2, 0
	.globl	SetMauvilleOldMan
	.type	 SetMauvilleOldMan,function
	.thumb_func
SetMauvilleOldMan:
	push	{lr}
	ldr	r0, .L27
	ldr	r0, [r0]
	ldrb	r1, [r0, #0xb]
	lsl	r1, r1, #0x8
	ldrb	r0, [r0, #0xa]
	orr	r0, r0, r1
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	cmp	r0, #0x4
	bhi	.L19	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L27+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L28:
	.align	2, 0
.L27:
	.word	gSaveBlock2Ptr
	.word	.L25
	.align	2, 0
	.align	2, 0
.L25:
	.word	.L20
	.word	.L21
	.word	.L22
	.word	.L23
	.word	.L24
.L20:
	bl	SetupBard
	b	.L19
.L21:
	bl	SetupHipster
	b	.L19
.L22:
	bl	SetupTrader
	b	.L19
.L23:
	bl	SetupStoryteller
	b	.L19
.L24:
	bl	SetupGiddy
.L19:
	bl	ScrSpecial_SetMauvilleOldManObjEventGfx
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 SetMauvilleOldMan,.Lfe6-SetMauvilleOldMan
	.align	2, 0
	.globl	GetCurrentMauvilleOldMan
	.type	 GetCurrentMauvilleOldMan,function
	.thumb_func
GetCurrentMauvilleOldMan:
	ldr	r0, .L30
	ldr	r0, [r0]
	ldr	r1, .L30+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L31:
	.align	2, 0
.L30:
	.word	gSaveBlock1Ptr
	.word	0x2aa8
.Lfe7:
	.size	 GetCurrentMauvilleOldMan,.Lfe7-GetCurrentMauvilleOldMan
	.align	2, 0
	.globl	ScrSpecial_GetCurrentMauvilleMan
	.type	 ScrSpecial_GetCurrentMauvilleMan,function
	.thumb_func
ScrSpecial_GetCurrentMauvilleMan:
	push	{r4, lr}
	ldr	r4, .L33
	bl	GetCurrentMauvilleOldMan
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	gSpecialVar_Result
.Lfe8:
	.size	 ScrSpecial_GetCurrentMauvilleMan,.Lfe8-ScrSpecial_GetCurrentMauvilleMan
	.align	2, 0
	.globl	ScrSpecial_HasBardSongBeenChanged
	.type	 ScrSpecial_HasBardSongBeenChanged,function
	.thumb_func
ScrSpecial_HasBardSongBeenChanged:
	ldr	r1, .L36
	ldr	r0, .L36+0x4
	ldr	r0, [r0]
	ldr	r2, .L36+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	strh	r0, [r1]
	bx	lr
.L37:
	.align	2, 0
.L36:
	.word	gSpecialVar_Result
	.word	gSaveBlock1Ptr
	.word	0x2ad1
.Lfe9:
	.size	 ScrSpecial_HasBardSongBeenChanged,.Lfe9-ScrSpecial_HasBardSongBeenChanged
	.align	2, 0
	.globl	ScrSpecial_SaveBardSongLyrics
	.type	 ScrSpecial_SaveBardSongLyrics,function
	.thumb_func
ScrSpecial_SaveBardSongLyrics:
	push	{r4, r5, r6, lr}
	ldr	r0, .L49
	ldr	r4, [r0]
	ldr	r0, .L49+0x4
	add	r6, r4, r0
	ldr	r1, .L49+0x8
	add	r0, r4, r1
	ldr	r5, .L49+0xc
	ldr	r1, [r5]
	bl	StringCopy
	mov	r2, #0x0
	ldr	r0, .L49+0x10
	add	r4, r4, r0
.L42:
	add	r1, r4, r2
	ldr	r0, [r5]
	add	r0, r0, #0xa
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x3
	bls	.L42	@cond_branch
	mov	r2, #0x0
	add	r5, r6, #0
	add	r5, r5, #0x29
	add	r3, r6, #0x2
	add	r4, r6, #0
	add	r4, r4, #0xe
.L47:
	lsl	r0, r2, #0x1
	add	r1, r3, r0
	add	r0, r4, r0
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x5
	bls	.L47	@cond_branch
	mov	r0, #0x1
	strb	r0, [r5]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	gSaveBlock1Ptr
	.word	0x2aa8
	.word	0x2ac2
	.word	gSaveBlock2Ptr
	.word	0x2acd
.Lfe10:
	.size	 ScrSpecial_SaveBardSongLyrics,.Lfe10-ScrSpecial_SaveBardSongLyrics
	.align	2, 0
	.type	 PrepareSongText,function
	.thumb_func
PrepareSongText:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L75
	ldr	r1, [r0]
	ldr	r0, .L75+0x4
	ldrh	r0, [r0]
	ldr	r2, .L75+0x8
	add	r5, r1, r2
	cmp	r0, #0
	bne	.L52	@cond_branch
	ldr	r0, .L75+0xc
	add	r5, r1, r0
.L52:
	ldr	r2, .L75+0x10
	add	r4, r2, #0
	mov	r6, #0x0
.L57:
	ldrh	r1, [r5]
	add	r5, r5, #0x2
	add	r0, r2, #0
	bl	CopyEasyChatWord
	add	r2, r0, #0
	add	r7, r6, #0x1
	cmp	r2, r4
	beq	.L59	@cond_branch
	mov	r1, #0x37
.L60:
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L61	@cond_branch
	strb	r1, [r4]
.L61:
	add	r4, r4, #0x1
	cmp	r2, r4
	bne	.L60	@cond_branch
.L59:
	add	r4, r4, #0x1
	mov	r0, #0x0
	strb	r0, [r2]
	add	r2, r2, #0x1
	ldrh	r1, [r5]
	add	r5, r5, #0x2
	add	r0, r2, #0
	bl	CopyEasyChatWord
	add	r2, r0, #0
	cmp	r2, r4
	beq	.L64	@cond_branch
	mov	r1, #0x37
.L65:
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L66	@cond_branch
	strb	r1, [r4]
.L66:
	add	r4, r4, #0x1
	cmp	r2, r4
	bne	.L65	@cond_branch
.L64:
	add	r4, r4, #0x1
	mov	r0, #0xfe
	strb	r0, [r2]
	add	r2, r2, #0x1
	ldrh	r1, [r5]
	add	r5, r5, #0x2
	add	r0, r2, #0
	bl	CopyEasyChatWord
	add	r2, r0, #0
	cmp	r2, r4
	beq	.L69	@cond_branch
	mov	r1, #0x37
.L70:
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L71	@cond_branch
	strb	r1, [r4]
.L71:
	add	r4, r4, #0x1
	cmp	r2, r4
	bne	.L70	@cond_branch
.L69:
	cmp	r6, #0
	bne	.L56	@cond_branch
	mov	r0, #0xfc
	strb	r0, [r2]
	add	r2, r2, #0x1
	mov	r0, #0xf
	strb	r0, [r2]
	add	r2, r2, #0x1
.L56:
	lsl	r0, r7, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x1
	bls	.L57	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gSaveBlock1Ptr
	.word	gSpecialVar_0x8004
	.word	0x2ab6
	.word	0x2aaa
	.word	gStringVar4
.Lfe11:
	.size	 PrepareSongText,.Lfe11-PrepareSongText
	.align	2, 0
	.globl	ScrSpecial_PlayBardSong
	.type	 ScrSpecial_PlayBardSong,function
	.thumb_func
ScrSpecial_PlayBardSong:
	push	{lr}
	ldr	r0, .L78
	ldrb	r0, [r0]
	bl	StartBardSong
	bl	ScriptContext1_Stop
	pop	{r0}
	bx	r0
.L79:
	.align	2, 0
.L78:
	.word	gSpecialVar_0x8004
.Lfe12:
	.size	 ScrSpecial_PlayBardSong,.Lfe12-ScrSpecial_PlayBardSong
	.align	2, 0
	.globl	ScrSpecial_GetHipsterSpokenFlag
	.type	 ScrSpecial_GetHipsterSpokenFlag,function
	.thumb_func
ScrSpecial_GetHipsterSpokenFlag:
	ldr	r1, .L81
	ldr	r0, .L81+0x4
	ldr	r0, [r0]
	ldr	r2, .L81+0x8
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	strh	r0, [r1]
	bx	lr
.L82:
	.align	2, 0
.L81:
	.word	gSpecialVar_Result
	.word	gSaveBlock1Ptr
	.word	0x2aa8
.Lfe13:
	.size	 ScrSpecial_GetHipsterSpokenFlag,.Lfe13-ScrSpecial_GetHipsterSpokenFlag
	.align	2, 0
	.globl	ScrSpecial_SetHipsterSpokenFlag
	.type	 ScrSpecial_SetHipsterSpokenFlag,function
	.thumb_func
ScrSpecial_SetHipsterSpokenFlag:
	ldr	r0, .L84
	ldr	r0, [r0]
	ldr	r1, .L84+0x4
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0, #0x1]
	bx	lr
.L85:
	.align	2, 0
.L84:
	.word	gSaveBlock1Ptr
	.word	0x2aa8
.Lfe14:
	.size	 ScrSpecial_SetHipsterSpokenFlag,.Lfe14-ScrSpecial_SetHipsterSpokenFlag
	.align	2, 0
	.globl	ScrSpecial_HipsterTeachWord
	.type	 ScrSpecial_HipsterTeachWord,function
	.thumb_func
ScrSpecial_HipsterTeachWord:
	push	{lr}
	bl	GetNewHipsterPhraseToTeach
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r0, .L90
	cmp	r1, r0
	bne	.L87	@cond_branch
	ldr	r1, .L90+0x4
	mov	r0, #0x0
	b	.L89
.L91:
	.align	2, 0
.L90:
	.word	0xffff
	.word	gSpecialVar_Result
.L87:
	ldr	r0, .L92
	bl	CopyEasyChatWord
	ldr	r1, .L92+0x4
	mov	r0, #0x1
.L89:
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L93:
	.align	2, 0
.L92:
	.word	gStringVar1
	.word	gSpecialVar_Result
.Lfe15:
	.size	 ScrSpecial_HipsterTeachWord,.Lfe15-ScrSpecial_HipsterTeachWord
	.align	2, 0
	.globl	ScrSpecial_GiddyShouldTellAnotherTale
	.type	 ScrSpecial_GiddyShouldTellAnotherTale,function
	.thumb_func
ScrSpecial_GiddyShouldTellAnotherTale:
	push	{lr}
	ldr	r0, .L97
	ldr	r0, [r0]
	ldr	r1, .L97+0x4
	add	r2, r0, r1
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0xa
	bne	.L95	@cond_branch
	ldr	r1, .L97+0x8
	mov	r0, #0x0
	strh	r0, [r1]
	strb	r0, [r2, #0x1]
	b	.L96
.L98:
	.align	2, 0
.L97:
	.word	gSaveBlock1Ptr
	.word	0x2aa8
	.word	gSpecialVar_Result
.L95:
	ldr	r1, .L99
	mov	r0, #0x1
	strh	r0, [r1]
.L96:
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	gSpecialVar_Result
.Lfe16:
	.size	 ScrSpecial_GiddyShouldTellAnotherTale,.Lfe16-ScrSpecial_GiddyShouldTellAnotherTale
	.align	2, 0
	.globl	ScrSpecial_GenerateGiddyLine
	.type	 ScrSpecial_GenerateGiddyLine,function
	.thumb_func
ScrSpecial_GenerateGiddyLine:
	push	{r4, r5, r6, lr}
	ldr	r0, .L108
	ldr	r4, [r0]
	ldr	r0, .L108+0x4
	add	r5, r4, r0
	ldrb	r0, [r5, #0x1]
	cmp	r0, #0
	bne	.L102	@cond_branch
	bl	InitGiddyTaleList
.L102:
	ldrb	r0, [r5, #0x1]
	lsl	r0, r0, #0x1
	ldr	r1, .L108+0x8
	add	r6, r4, r1
	add	r0, r6, r0
	ldrh	r1, [r0]
	ldr	r0, .L108+0xc
	cmp	r1, r0
	beq	.L103	@cond_branch
	bl	Random
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0x7
	and	r4, r4, r0
	ldr	r0, .L108+0x10
	ldrb	r1, [r5, #0x1]
	lsl	r1, r1, #0x1
	add	r1, r6, r1
	ldrh	r1, [r1]
	bl	CopyEasyChatWord
	add	r2, r0, #0
	ldr	r1, .L108+0x14
	bl	StringCopy
	add	r2, r0, #0
	ldr	r0, .L108+0x18
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldr	r1, [r4]
	add	r0, r2, #0
	bl	StringCopy
	add	r2, r0, #0
	ldr	r1, .L108+0x1c
	bl	StringCopy
	b	.L104
.L109:
	.align	2, 0
.L108:
	.word	gSaveBlock1Ptr
	.word	0x2aa8
	.word	0x2aac
	.word	0xffff
	.word	gStringVar4
	.word	gOtherText_Is
	.word	sGiddyAdjectives
	.word	gOtherText_DontYouAgree
.L103:
	ldr	r0, .L110
	ldr	r3, .L110+0x4
	ldrb	r2, [r5, #0x2]
	add	r1, r2, #0x1
	strb	r1, [r5, #0x2]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r6, #0xab
	lsl	r6, r6, #0x6
	add	r1, r4, r6
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r1, [r1]
	bl	StringCopy
.L104:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L105	@cond_branch
	mov	r0, #0xa
	b	.L107
.L111:
	.align	2, 0
.L110:
	.word	gStringVar4
	.word	sGiddyQuestions
.L105:
	ldrb	r0, [r5, #0x1]
	add	r0, r0, #0x1
.L107:
	strb	r0, [r5, #0x1]
	ldr	r1, .L112
	mov	r0, #0x1
	strh	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	gSpecialVar_Result
.Lfe17:
	.size	 ScrSpecial_GenerateGiddyLine,.Lfe17-ScrSpecial_GenerateGiddyLine
	.section .rodata
	.align	1, 0
.LC34:
	.short	0x0
	.short	0x0
	.short	0xc
	.short	0x0
	.short	0xd
	.short	0x0
	.short	0x12
	.short	0x0
	.short	0x13
	.short	0x0
	.short	0x15
	.short	0x0
.text
	.align	2, 0
	.type	 InitGiddyTaleList,function
	.thumb_func
InitGiddyTaleList:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	ldr	r0, .L145
	ldr	r4, [r0]
	ldr	r0, .L145+0x4
	add	r0, r4, r0
	str	r0, [sp, #0x18]
	ldr	r1, .L145+0x8
	mov	r0, sp
	mov	r2, #0x18
	bl	memcpy
	mov	r5, #0x0
	mov	r1, #0x2
	add	r1, r1, sp
	mov	r8, r1
	mov	r2, #0xab
	lsl	r2, r2, #0x6
	add	r3, r4, r2
	add	r1, r3, #0
.L118:
	add	r0, r3, r5
	strb	r5, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x7
	bls	.L118	@cond_branch
	mov	r5, #0x0
	ldr	r3, [sp, #0x18]
	add	r3, r3, #0x4
	mov	r9, r3
	add	r6, r1, #0
.L123:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r4, r5, #0x1
	add	r1, r4, #0
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	add	r2, r6, r5
	ldrb	r7, [r2]
	add	r1, r6, r1
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r7, [r1]
	lsl	r4, r4, #0x10
	lsr	r5, r4, #0x10
	cmp	r5, #0x7
	bls	.L123	@cond_branch
	mov	r0, #0x0
	mov	sl, r0
	mov	r5, #0x0
.L128:
	lsl	r4, r5, #0x2
	mov	r1, sp
	add	r0, r1, r4
	ldrb	r0, [r0]
	bl	EasyChat_GetNumWordsInGroup
	add	r4, r4, r8
	strh	r0, [r4]
	add	r0, r0, sl
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x5
	bls	.L128	@cond_branch
	mov	r0, #0x0
	ldr	r2, [sp, #0x18]
	strb	r0, [r2, #0x2]
	mov	r7, #0x0
	mov	r5, #0x0
.L133:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x2
	bhi	.L134	@cond_branch
	cmp	r7, #0x7
	bhi	.L134	@cond_branch
	lsl	r0, r5, #0x1
	add	r0, r0, r9
	ldr	r1, .L145+0xc
	strh	r1, [r0]
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	add	r4, r5, #0x1
	b	.L132
.L146:
	.align	2, 0
.L145:
	.word	gSaveBlock1Ptr
	.word	0x2aa8
	.word	.LC34
	.word	0xffff
.L134:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, sl
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r1, #0x0
	add	r4, r5, #0x1
	lsl	r6, r5, #0x1
	cmp	r5, #0x5
	bhi	.L137	@cond_branch
	mov	r3, r8
	ldrh	r0, [r3]
	b	.L144
.L138:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r5, #0x5
	bhi	.L137	@cond_branch
	lsl	r0, r1, #0x2
	add	r0, r3, r0
	ldrh	r0, [r0]
.L144:
	sub	r0, r2, r0
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r0, #0
	bgt	.L138	@cond_branch
.L137:
	cmp	r1, #0x6
	bne	.L142	@cond_branch
	mov	r1, #0x0
.L142:
	lsl	r0, r1, #0x2
	add	r0, r0, sp
	ldrh	r0, [r0]
	bl	GetRandomEasyChatWordFromUnlockedGroup
	mov	r2, r9
	add	r1, r2, r6
	strh	r0, [r1]
.L132:
	lsl	r0, r4, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x9
	bls	.L133	@cond_branch
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 InitGiddyTaleList,.Lfe18-InitGiddyTaleList
	.align	2, 0
	.type	 ResetBardFlag,function
	.thumb_func
ResetBardFlag:
	ldr	r0, .L148
	ldr	r0, [r0]
	ldr	r1, .L148+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
	bx	lr
.L149:
	.align	2, 0
.L148:
	.word	gSaveBlock1Ptr
	.word	0x2ad1
.Lfe19:
	.size	 ResetBardFlag,.Lfe19-ResetBardFlag
	.align	2, 0
	.type	 ResetHipsterFlag,function
	.thumb_func
ResetHipsterFlag:
	ldr	r0, .L151
	ldr	r0, [r0]
	ldr	r1, .L151+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0, #0x1]
	bx	lr
.L152:
	.align	2, 0
.L151:
	.word	gSaveBlock1Ptr
	.word	0x2aa8
.Lfe20:
	.size	 ResetHipsterFlag,.Lfe20-ResetHipsterFlag
	.align	2, 0
	.type	 ResetTraderFlag,function
	.thumb_func
ResetTraderFlag:
	push	{lr}
	bl	Trader_ResetFlag
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 ResetTraderFlag,.Lfe21-ResetTraderFlag
	.align	2, 0
	.type	 ResetStorytellerFlag,function
	.thumb_func
ResetStorytellerFlag:
	push	{lr}
	bl	Storyteller_ResetFlag
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 ResetStorytellerFlag,.Lfe22-ResetStorytellerFlag
	.align	2, 0
	.globl	ResetMauvilleOldManFlag
	.type	 ResetMauvilleOldManFlag,function
	.thumb_func
ResetMauvilleOldManFlag:
	push	{lr}
	bl	GetCurrentMauvilleOldMan
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L156	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L164
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L165:
	.align	2, 0
.L164:
	.word	.L162
	.align	2, 0
	.align	2, 0
.L162:
	.word	.L157
	.word	.L158
	.word	.L160
	.word	.L159
	.word	.L156
.L157:
	bl	ResetBardFlag
	b	.L156
.L158:
	bl	ResetHipsterFlag
	b	.L156
.L159:
	bl	ResetStorytellerFlag
	b	.L156
.L160:
	bl	ResetTraderFlag
.L156:
	bl	ScrSpecial_SetMauvilleOldManObjEventGfx
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 ResetMauvilleOldManFlag,.Lfe23-ResetMauvilleOldManFlag
	.align	2, 0
	.type	 StartBardSong,function
	.thumb_func
StartBardSong:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L167
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L167+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x12]
	pop	{r4}
	pop	{r0}
	bx	r0
.L168:
	.align	2, 0
.L167:
	.word	Task_BardSong
	.word	gTasks
.Lfe24:
	.size	 StartBardSong,.Lfe24-StartBardSong
	.align	2, 0
	.type	 sub_81206F0,function
	.thumb_func
sub_81206F0:
	ldr	r1, .L170
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L171:
	.align	2, 0
.L170:
	.word	gUnknown_03002F84
.Lfe25:
	.size	 sub_81206F0,.Lfe25-sub_81206F0
	.align	2, 0
	.type	 BardSong_TextSubPrinter,function
	.thumb_func
BardSong_TextSubPrinter:
	ldr	r1, .L173
	mov	r0, #0x1
	strb	r0, [r1]
	bx	lr
.L174:
	.align	2, 0
.L173:
	.word	gUnknown_03002F84
.Lfe26:
	.size	 BardSong_TextSubPrinter,.Lfe26-BardSong_TextSubPrinter
	.align	2, 0
	.type	 sub_8120708,function
	.thumb_func
sub_8120708:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r5, r0, #0
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	ldr	r0, .L176
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x1
	add	r2, r5, #0
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	ldr	r0, .L176+0x4
	strb	r4, [r0]
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L177:
	.align	2, 0
.L176:
	.word	BardSong_TextSubPrinter
	.word	gUnknown_03002F84
.Lfe27:
	.size	 sub_8120708,.Lfe27-sub_8120708
	.align	2, 0
	.type	 BardSing,function
	.thumb_func
BardSing:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x5
	bls	.LCB1288
	b	.L179	@long jump
.LCB1288:
	lsl	r0, r0, #0x2
	ldr	r1, .L217
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L218:
	.align	2, 0
.L217:
	.word	.L212
	.align	2, 0
	.align	2, 0
.L212:
	.word	.L180
	.word	.L179
	.word	.L189
	.word	.L193
	.word	.L193
	.word	.L179
.L180:
	ldr	r0, .L219
	ldr	r2, [r0]
	ldr	r0, .L219+0x4
	ldrh	r0, [r0]
	ldr	r3, .L219+0x8
	add	r1, r2, r3
	cmp	r0, #0
	bne	.L181	@cond_branch
	ldr	r0, .L219+0xc
	add	r1, r2, r0
.L181:
	add	r2, r1, #0
	add	r1, r6, #0
	add	r1, r1, #0xc
	mov	r3, #0x5
.L186:
	ldrh	r0, [r2]
	strh	r0, [r1]
	add	r2, r2, #0x2
	add	r1, r1, #0x2
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L186	@cond_branch
	mov	r0, #0x0
	strb	r0, [r6]
	b	.L179
.L220:
	.align	2, 0
.L219:
	.word	gSaveBlock1Ptr
	.word	gSpecialVar_0x8004
	.word	0x2ab6
	.word	0x2aaa
.L189:
	ldrb	r1, [r6]
	lsl	r1, r1, #0x1
	add	r0, r6, #0
	add	r0, r0, #0xc
	add	r0, r0, r1
	ldrh	r4, [r0]
	add	r0, r4, #0
	bl	GetWordSounds
	str	r0, [r6, #0x30]
	mov	r1, #0x3
	and	r1, r1, r4
	lsr	r4, r4, #0x3
	mov	r0, #0x1
	and	r4, r4, r0
	add	r1, r1, r4
	add	r0, r6, #0
	bl	GetWordPhonemes
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
	ldr	r0, [r6, #0x30]
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L190	@cond_branch
	mov	r0, #0x0
	b	.L214
.L190:
	mov	r0, #0x3
	b	.L215
.L193:
	ldrb	r3, [r6, #0x1]
	lsl	r1, r3, #0x3
	ldr	r0, [r6, #0x30]
	add	r2, r0, r1
	ldrb	r1, [r6, #0x3]
	cmp	r1, #0x1
	beq	.L199	@cond_branch
	cmp	r1, #0x1
	bgt	.L210	@cond_branch
	cmp	r1, #0
	beq	.L195	@cond_branch
	b	.L179
.L210:
	cmp	r1, #0x2
	beq	.L197	@cond_branch
	cmp	r1, #0x3
	bne	.LCB1419
	b	.L206	@long jump
.LCB1419:
	b	.L179
.L195:
	lsl	r0, r3, #0x2
	add	r0, r6, r0
	ldrh	r0, [r0, #0x18]
	strb	r0, [r6, #0x2]
	ldrb	r0, [r2]
	cmp	r0, #0x32
	bhi	.L196	@cond_branch
	mov	r1, #0x3
	bl	__udivsi3
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	ldr	r1, .L221
	add	r0, r0, r1
	bl	m4aSongNumStart
.L196:
	mov	r0, #0x2
	strb	r0, [r6, #0x3]
	ldrb	r0, [r6, #0x2]
	sub	r0, r0, #0x1
	strb	r0, [r6, #0x2]
	b	.L179
.L222:
	.align	2, 0
.L221:
	.word	0x10f
.L197:
	mov	r0, #0x1
	strb	r0, [r6, #0x3]
	ldrb	r0, [r2]
	cmp	r0, #0x32
	bhi	.L179	@cond_branch
	mov	r3, #0x4
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x4
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	strh	r0, [r6, #0x6]
	ldr	r4, .L223
	ldr	r5, .L223+0x4
	ldrh	r2, [r6, #0x6]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	m4aMPlayVolumeControl
	ldrb	r1, [r6, #0x1]
	lsl	r1, r1, #0x2
	add	r1, r6, r1
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	add	r0, r2, #0
	ldrh	r1, [r1, #0x1a]
	add	r0, r0, r1
	strh	r0, [r6, #0x8]
	mov	r3, #0x8
	ldrsh	r2, [r6, r3]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	m4aMPlayPitchControl
	b	.L179
.L224:
	.align	2, 0
.L223:
	.word	gMPlayInfo_SE2
	.word	0xffff
.L199:
	ldrh	r2, [r6, #0xa]
	mov	r3, #0xa
	ldrsh	r0, [r6, r3]
	cmp	r0, #0xa
	ble	.L200	@cond_branch
	ldrh	r0, [r6, #0x6]
	sub	r0, r0, #0x2
	strh	r0, [r6, #0x6]
.L200:
	and	r1, r1, r2
	cmp	r1, #0
	beq	.L201	@cond_branch
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x40
	b	.L216
.L201:
	ldrh	r0, [r6, #0x8]
	sub	r0, r0, #0x40
.L216:
	strh	r0, [r6, #0x8]
	ldr	r4, .L225
	ldr	r5, .L225+0x4
	ldrh	r2, [r6, #0x6]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	m4aMPlayVolumeControl
	mov	r0, #0x8
	ldrsh	r2, [r6, r0]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	m4aMPlayPitchControl
	ldrh	r0, [r6, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xa]
	ldrb	r0, [r6, #0x2]
	sub	r0, r0, #0x1
	strb	r0, [r6, #0x2]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L179	@cond_branch
	ldrb	r0, [r6, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r6, #0x1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	beq	.L204	@cond_branch
	ldrb	r0, [r6, #0x1]
	ldr	r1, [r6, #0x30]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L204	@cond_branch
	mov	r0, #0x0
	b	.L214
.L226:
	.align	2, 0
.L225:
	.word	gMPlayInfo_SE2
	.word	0xffff
.L204:
	mov	r0, #0x3
.L215:
	strb	r0, [r6, #0x3]
	mov	r0, #0x2
	strb	r0, [r6, #0x2]
	b	.L179
.L206:
	ldrb	r0, [r6, #0x2]
	sub	r0, r0, #0x1
	strb	r0, [r6, #0x2]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L179	@cond_branch
	ldr	r0, .L227
	bl	m4aMPlayStop
	mov	r0, #0x4
.L214:
	strb	r0, [r6, #0x3]
.L179:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L228:
	.align	2, 0
.L227:
	.word	gMPlayInfo_SE2
.Lfe28:
	.size	 BardSing,.Lfe28-BardSing
	.align	2, 0
	.type	 Task_BardSong,function
	.thumb_func
Task_BardSong:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L275
	add	r5, r0, r1
	ldr	r1, .L275+0x4
	add	r0, r5, #0
	bl	BardSing
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x5
	bls	.LCB1651
	b	.L230	@long jump
.LCB1651:
	lsl	r0, r0, #0x2
	ldr	r1, .L275+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L276:
	.align	2, 0
.L275:
	.word	gTasks
	.word	gBardSong
	.word	.L268
	.align	2, 0
	.align	2, 0
.L268:
	.word	.L231
	.word	.L232
	.word	.L234
	.word	.L248
	.word	.L266
	.word	.L245
.L231:
	bl	PrepareSongText
	ldr	r0, .L277
	bl	sub_8120708
	mov	r0, #0x0
	strh	r0, [r5, #0xa]
	strh	r0, [r5, #0xc]
	strh	r0, [r5, #0xe]
	strh	r0, [r5, #0x10]
	mov	r0, #0x4
	bl	FadeOutBGMTemporarily
	mov	r0, #0x1
	b	.L270
.L278:
	.align	2, 0
.L277:
	.word	gStringVar4
.L232:
	bl	IsBGMPausedOrStopped
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1698
	b	.L230	@long jump
.LCB1698:
	mov	r0, #0x2
	b	.L270
.L234:
	ldr	r0, .L279
	ldr	r0, [r0]
	ldr	r2, .L279+0x4
	add	r4, r0, r2
	mov	r0, #0xe
	ldrsh	r1, [r5, r0]
	ldr	r0, .L279+0x8
	add	r1, r1, r0
	mov	r3, #0x0
	ldrb	r0, [r1]
	ldr	r7, .L279+0xc
	ldrh	r2, [r5, #0x12]
	ldr	r6, .L279+0x10
	b	.L271
.L280:
	.align	2, 0
.L279:
	.word	gSaveBlock1Ptr
	.word	0x2aa8
	.word	gStringVar4
	.word	gBardSong
	.word	sUnknownBardRelated
.L237:
	add	r1, r1, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldrb	r0, [r1]
.L271:
	cmp	r0, #0
	beq	.L236	@cond_branch
	cmp	r0, #0xfe
	beq	.L236	@cond_branch
	cmp	r0, #0xfc
	beq	.L236	@cond_branch
	cmp	r0, #0xff
	bne	.L237	@cond_branch
.L236:
	cmp	r2, #0
	bne	.L240	@cond_branch
	mov	r2, #0x10
	ldrsh	r1, [r5, r2]
	lsl	r1, r1, #0x1
	add	r0, r4, #0x2
	b	.L272
.L240:
	mov	r0, #0x10
	ldrsh	r1, [r5, r0]
	lsl	r1, r1, #0x1
	add	r0, r4, #0
	add	r0, r0, #0xe
.L272:
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, #0x3
	and	r1, r1, r0
	lsr	r0, r0, #0x3
	mov	r2, #0x1
	and	r0, r0, r2
	add	r1, r1, r0
	strh	r1, [r6]
	mov	r1, #0x4
	ldrsh	r0, [r7, r1]
	add	r1, r3, #0
	bl	__divsi3
	mov	r1, #0x0
	strh	r0, [r7, #0x4]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L242	@cond_branch
	mov	r0, #0x1
	strh	r0, [r7, #0x4]
.L242:
	ldrh	r0, [r5, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x10]
	mov	r2, #0xc
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	bne	.L243	@cond_branch
	mov	r0, #0x3
	b	.L273
.L243:
	mov	r0, #0x5
.L273:
	strh	r0, [r5, #0x8]
	strh	r1, [r5, #0xa]
	b	.L230
.L245:
	ldrh	r1, [r5, #0xc]
	mov	r2, #0xc
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L274	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r5, #0xc]
	b	.L230
.L248:
	ldr	r1, .L281
	mov	r2, #0xe
	ldrsh	r0, [r5, r2]
	add	r0, r0, r1
	ldrb	r4, [r0]
	cmp	r4, #0xff
	bne	.L249	@cond_branch
	mov	r0, #0x6
	bl	FadeInBGM
	ldr	r0, .L281+0x4
	mov	r1, #0x2
	bl	m4aMPlayFadeOutTemporarily
	bl	EnableBothScriptContexts
	add	r0, r6, #0
	bl	DestroyTask
	b	.L230
.L282:
	.align	2, 0
.L281:
	.word	gStringVar4
	.word	gMPlayInfo_SE2
.L249:
	cmp	r4, #0
	bne	.L251	@cond_branch
	bl	sub_81206F0
	ldrh	r0, [r5, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xe]
	mov	r0, #0x2
	strh	r0, [r5, #0x8]
	strh	r4, [r5, #0xc]
	b	.L230
.L251:
	cmp	r4, #0xfe
	bne	.L253	@cond_branch
	ldrh	r0, [r5, #0xe]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r5, #0xe]
	mov	r0, #0x2
	strh	r0, [r5, #0x8]
	strh	r1, [r5, #0xc]
	b	.L230
.L253:
	cmp	r4, #0xfc
	bne	.L255	@cond_branch
	ldrh	r0, [r5, #0xe]
	add	r0, r0, #0x2
	strh	r0, [r5, #0xe]
	mov	r0, #0x2
	strh	r0, [r5, #0x8]
	mov	r0, #0x8
	strh	r0, [r5, #0xc]
	b	.L230
.L255:
	cmp	r4, #0x37
	bne	.L257	@cond_branch
	mov	r4, #0x0
	strb	r4, [r0]
	bl	sub_81206F0
	ldrh	r0, [r5, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xe]
	strh	r4, [r5, #0xc]
	b	.L230
.L257:
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L261	@cond_branch
	cmp	r0, #0x1
	bgt	.L265	@cond_branch
	cmp	r0, #0
	beq	.L260	@cond_branch
	b	.L230
.L265:
	cmp	r0, #0x2
	beq	.L262	@cond_branch
	b	.L230
.L260:
	bl	sub_81206F0
.L261:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	b	.L230
.L262:
	ldrh	r0, [r5, #0xe]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r5, #0xe]
	strh	r1, [r5, #0xa]
	ldr	r0, .L283
	ldrh	r0, [r0, #0x4]
	strh	r0, [r5, #0xc]
	mov	r0, #0x4
	b	.L270
.L284:
	.align	2, 0
.L283:
	.word	gBardSong
.L266:
	ldrh	r0, [r5, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L230	@cond_branch
.L274:
	mov	r0, #0x3
.L270:
	strh	r0, [r5, #0x8]
.L230:
	bl	RunTextPrintersAndIsPrinter0Active
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 Task_BardSong,.Lfe29-Task_BardSong
	.align	2, 0
	.globl	ScrSpecial_SetMauvilleOldManObjEventGfx
	.type	 ScrSpecial_SetMauvilleOldManObjEventGfx,function
	.thumb_func
ScrSpecial_SetMauvilleOldManObjEventGfx:
	push	{lr}
	ldr	r0, .L286
	mov	r1, #0x45
	bl	VarSet
	pop	{r0}
	bx	r0
.L287:
	.align	2, 0
.L286:
	.word	0x4010
.Lfe30:
	.size	 ScrSpecial_SetMauvilleOldManObjEventGfx,.Lfe30-ScrSpecial_SetMauvilleOldManObjEventGfx
	.align	2, 0
	.globl	sub_8120B70
	.type	 sub_8120B70,function
	.thumb_func
sub_8120B70:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	ldrb	r1, [r0]
	cmp	r1, #0x2
	beq	.L290	@cond_branch
	cmp	r1, #0x3
	beq	.L297	@cond_branch
	b	.L289
.L290:
	add	r5, r0, #0
	mov	r4, #0x0
.L294:
	add	r0, r5, #0
	add	r0, r0, #0x32
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L293	@cond_branch
	mov	r0, #0xb
	mul	r0, r0, r4
	add	r0, r0, #0x5
	add	r0, r5, r0
	mov	r1, #0x1
	bl	ConvertInternationalString
.L293:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L294	@cond_branch
	b	.L289
.L297:
	add	r6, r0, #0
	mov	r4, #0x0
	mov	r7, sp
	add	r5, r6, #0
	add	r5, r5, #0x8
.L301:
	add	r0, r6, #0x4
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L300	@cond_branch
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, #0x7
	bl	memcpy
	mov	r0, #0xff
	strb	r0, [r7, #0x7]
	mov	r0, sp
	bl	IsStringJapanese
	cmp	r0, #0
	beq	.L300	@cond_branch
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	mov	r0, sp
	ldr	r1, .L307
	bl	StringCopy
	add	r0, r5, #0
	mov	r1, sp
	mov	r2, #0x7
	bl	memcpy
	add	r0, r6, #0
	add	r0, r0, #0x34
	add	r0, r0, r4
	mov	r1, #0x2
	strb	r1, [r0]
.L300:
	add	r5, r5, #0x7
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L301	@cond_branch
.L289:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L308:
	.align	2, 0
.L307:
	.word	gText_Friend
.Lfe31:
	.size	 sub_8120B70,.Lfe31-sub_8120B70
	.align	2, 0
	.globl	sub_8120C0C
	.type	 sub_8120C0C,function
	.thumb_func
sub_8120C0C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	mov	r8, r1
	add	r7, r2, #0
	ldrb	r0, [r5]
	cmp	r0, #0x4
	bhi	.L310	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L340
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L341:
	.align	2, 0
.L340:
	.word	.L336
	.align	2, 0
	.align	2, 0
.L336:
	.word	.L327
	.word	.L330
	.word	.L311
	.word	.L319
	.word	.L333
.L311:
	add	r6, r5, #0
	mov	r5, #0x0
	add	r4, r6, #0
	add	r4, r4, #0x32
.L315:
	mov	r0, #0xb
	mul	r0, r0, r5
	add	r0, r0, #0x5
	add	r0, r6, r0
	bl	IsStringJapanese
	cmp	r0, #0
	beq	.L316	@cond_branch
	mov	r0, r8
	strb	r0, [r4]
	b	.L314
.L316:
	strb	r7, [r4]
.L314:
	add	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L315	@cond_branch
	b	.L310
.L319:
	add	r4, r5, #0
	add	r4, r4, #0x34
	add	r6, r5, #0
	add	r6, r6, #0x8
	mov	r5, #0x3
.L323:
	add	r0, r6, #0
	bl	IsStringJapanese
	cmp	r0, #0
	beq	.L324	@cond_branch
	mov	r1, r8
	strb	r1, [r4]
	b	.L322
.L324:
	strb	r7, [r4]
.L322:
	add	r4, r4, #0x1
	add	r6, r6, #0x7
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L323	@cond_branch
	b	.L310
.L327:
	cmp	r3, #0x1
	bne	.L328	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x2a
	b	.L338
.L328:
	add	r0, r5, #0
	add	r0, r0, #0x2a
	b	.L339
.L330:
	cmp	r3, #0x1
	bne	.L331	@cond_branch
	mov	r0, r8
	strb	r0, [r5, #0x2]
	b	.L310
.L331:
	strb	r7, [r5, #0x2]
	b	.L310
.L333:
	cmp	r3, #0x1
	bne	.L334	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x20
.L338:
	mov	r1, r8
	strb	r1, [r0]
	b	.L310
.L334:
	add	r0, r5, #0
	add	r0, r0, #0x20
.L339:
	strb	r7, [r0]
.L310:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 sub_8120C0C,.Lfe32-sub_8120C0C
	.align	2, 0
	.globl	SanitizeReceivedEmeraldOldMan
	.type	 SanitizeReceivedEmeraldOldMan,function
	.thumb_func
SanitizeReceivedEmeraldOldMan:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	add	r1, r0, #0
	ldrb	r0, [r1]
	cmp	r0, #0x3
	bne	.L343	@cond_branch
	cmp	r2, #0x1
	bne	.L343	@cond_branch
	add	r7, r1, #0
	mov	r6, #0x0
	mov	r8, sp
	add	r4, r7, #0
	add	r4, r4, #0x34
	add	r5, r7, #0
	add	r5, r5, #0x8
.L347:
	add	r0, r7, #0x4
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L346	@cond_branch
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, #0x7
	bl	memcpy
	mov	r0, #0xff
	mov	r1, r8
	strb	r0, [r1, #0x7]
	mov	r0, sp
	bl	IsStringJapanese
	cmp	r0, #0
	beq	.L349	@cond_branch
	mov	r0, #0x1
	b	.L352
.L349:
	mov	r0, #0x2
.L352:
	strb	r0, [r4]
.L346:
	add	r4, r4, #0x1
	add	r5, r5, #0x7
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L347	@cond_branch
.L343:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 SanitizeReceivedEmeraldOldMan,.Lfe33-SanitizeReceivedEmeraldOldMan
	.align	2, 0
	.globl	SanitizeReceivedRubyOldMan
	.type	 SanitizeReceivedRubyOldMan,function
	.thumb_func
SanitizeReceivedRubyOldMan:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	add	r6, r2, #0
	mov	r2, #0x0
	sub	r1, r1, #0x1
	cmp	r1, #0x1
	bhi	.L354	@cond_branch
	mov	r2, #0x1
.L354:
	ldrb	r0, [r3]
	cmp	r0, #0x4
	bhi	.L355	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L389
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L390:
	.align	2, 0
.L389:
	.word	.L386
	.align	2, 0
	.align	2, 0
.L386:
	.word	.L380
	.word	.L382
	.word	.L356
	.word	.L372
	.word	.L384
.L356:
	add	r7, r3, #0
	cmp	r2, #0
	beq	.L357	@cond_branch
	mov	r5, #0x0
	add	r4, r3, #0
	add	r4, r4, #0x32
.L361:
	mov	r0, #0xb
	mul	r0, r0, r5
	add	r0, r0, #0x5
	add	r1, r7, r0
	ldrb	r0, [r1]
	cmp	r0, #0xfc
	bne	.L362	@cond_branch
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x15
	bne	.L362	@cond_branch
	add	r0, r1, #0
	bl	StripExtCtrlCodes
	mov	r0, #0x1
	strb	r0, [r4]
	b	.L360
.L362:
	strb	r6, [r4]
.L360:
	add	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L361	@cond_branch
	b	.L355
.L357:
	mov	r5, #0x0
	add	r4, r3, #0
	add	r4, r4, #0x32
.L369:
	add	r0, r4, r5
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L368	@cond_branch
	mov	r0, #0xb
	mul	r0, r0, r5
	add	r0, r0, #0x5
	add	r0, r7, r0
	bl	StripExtCtrlCodes
.L368:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L369	@cond_branch
	b	.L355
.L372:
	cmp	r2, #0
	beq	.L355	@cond_branch
	mov	r1, #0x0
	add	r4, r3, #0x4
	add	r2, r3, #0
	add	r2, r2, #0x34
.L377:
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L376	@cond_branch
	add	r0, r2, r1
	strb	r6, [r0]
.L376:
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L377	@cond_branch
	b	.L355
.L380:
	cmp	r2, #0
	beq	.L355	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x2a
	b	.L388
.L382:
	cmp	r2, #0
	beq	.L355	@cond_branch
	strb	r6, [r3, #0x2]
	b	.L355
.L384:
	cmp	r2, #0
	beq	.L355	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x20
.L388:
	strb	r6, [r0]
.L355:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 SanitizeReceivedRubyOldMan,.Lfe34-SanitizeReceivedRubyOldMan
	.section .rodata
	.align	2, 0
	.type	 sStorytellerStories,object
sStorytellerStories:
	.byte	0x32
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_SavedGameTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_SavedGameAction
	.word	MauvilleCity_PokemonCenter_1F_Text_SavedGameStory
	.byte	0x2
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_TrendsStartedTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_TrendsStartedAction
	.word	MauvilleCity_PokemonCenter_1F_Text_TrendsStartedStory
	.byte	0x3
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_BerriesPlantedTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_BerriesPlantedAction
	.word	MauvilleCity_PokemonCenter_1F_Text_BerriesPlantedStory
	.byte	0x4
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_BikeTradesTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_BikeTradesAction
	.word	MauvilleCity_PokemonCenter_1F_Text_BikeTradesStory
	.byte	0x6
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_InterviewsTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_InterviewsAction
	.word	MauvilleCity_PokemonCenter_1F_Text_InterviewsStory
	.byte	0x9
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_TrainerBattlesTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_TrainerBattlesAction
	.word	MauvilleCity_PokemonCenter_1F_Text_TrainerBattlesStory
	.byte	0xb
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_PokemonCaughtTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_PokemonCaughtAction
	.word	MauvilleCity_PokemonCenter_1F_Text_PokemonCaughtStory
	.byte	0xc
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_FishingPokemonCaughtTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_FishingPokemonCaughtAction
	.word	MauvilleCity_PokemonCenter_1F_Text_FishingPokemonCaughtStory
	.byte	0xd
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_EggsHatchedTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_EggsHatchedAction
	.word	MauvilleCity_PokemonCenter_1F_Text_EggsHatchedStory
	.byte	0xe
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_PokemonEvolvedTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_PokemonEvolvedAction
	.word	MauvilleCity_PokemonCenter_1F_Text_PokemonEvolvedStory
	.byte	0xf
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedPokemonCenterTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedPokemonCenterAction
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedPokemonCenterStory
	.byte	0x10
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_RestedAtHomeTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_RestedAtHomeAction
	.word	MauvilleCity_PokemonCenter_1F_Text_RestedAtHomeStory
	.byte	0x11
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_SafariGamesTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_SafariGamesAction
	.word	MauvilleCity_PokemonCenter_1F_Text_SafariGamesStory
	.byte	0x12
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedCutTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedCutAction
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedCutStory
	.byte	0x13
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedRockSmashTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedRockSmashAction
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedRockSmashStory
	.byte	0x14
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_MovedBasesTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_MovedBasesAction
	.word	MauvilleCity_PokemonCenter_1F_Text_MovedBasesStory
	.byte	0x1a
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedSplashTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedSplashAction
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedSplashStory
	.byte	0x1b
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedStruggleTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedStruggleAction
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedStruggleStory
	.byte	0x1c
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_SlotJackpotsTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_SlotJackpotsAction
	.word	MauvilleCity_PokemonCenter_1F_Text_SlotJackpotsStory
	.byte	0x1d
	.byte	0x2
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_RouletteWinsTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_RouletteWinsAction
	.word	MauvilleCity_PokemonCenter_1F_Text_RouletteWinsStory
	.byte	0x1e
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_BattleTowerChallengesTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_BattleTowerChallengesAction
	.word	MauvilleCity_PokemonCenter_1F_Text_BattleTowerChallengesStory
	.byte	0x21
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_MadePokeblocksTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_MadePokeblocksAction
	.word	MauvilleCity_PokemonCenter_1F_Text_MadePokeblocksStory
	.byte	0x24
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_EnteredContestsTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_EnteredContestsAction
	.word	MauvilleCity_PokemonCenter_1F_Text_EnteredContestsStory
	.byte	0x25
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_WonContestsTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_WonContestsAction
	.word	MauvilleCity_PokemonCenter_1F_Text_WonContestsStory
	.byte	0x26
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_TimesShoppedTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_TimesShoppedAction
	.word	MauvilleCity_PokemonCenter_1F_Text_TimesShoppedStory
	.byte	0x27
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedItemFinderTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedItemFinderAction
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedItemFinderStory
	.byte	0x28
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_TimesRainedTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_TimesRainedAction
	.word	MauvilleCity_PokemonCenter_1F_Text_TimesRainedStory
	.byte	0x29
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_CheckedPokedexTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_CheckedPokedexAction
	.word	MauvilleCity_PokemonCenter_1F_Text_CheckedPokedexStory
	.byte	0x2a
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_ReceivedRibbonsTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_ReceivedRibbonsAction
	.word	MauvilleCity_PokemonCenter_1F_Text_ReceivedRibbonsStory
	.byte	0x2b
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_LedgesJumpedTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_LedgesJumpedAction
	.word	MauvilleCity_PokemonCenter_1F_Text_LedgesJumpedStory
	.byte	0x2c
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_TVWatchedTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_TVWatchedAction
	.word	MauvilleCity_PokemonCenter_1F_Text_TVWatchedStory
	.byte	0x2d
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_CheckedClockTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_CheckedClockAction
	.word	MauvilleCity_PokemonCenter_1F_Text_CheckedClockStory
	.byte	0x2e
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_WonLotteryTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_WonLotteryAction
	.word	MauvilleCity_PokemonCenter_1F_Text_WonLotteryStory
	.byte	0x2f
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedDaycareTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedDaycareAction
	.word	MauvilleCity_PokemonCenter_1F_Text_UsedDaycareStory
	.byte	0x30
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_RodeCableCarTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_RodeCableCarAction
	.word	MauvilleCity_PokemonCenter_1F_Text_RodeCableCarStory
	.byte	0x31
	.byte	0x1
	.space	2
	.word	MauvilleCity_PokemonCenter_1F_Text_HotSpringsTitle
	.word	MauvilleCity_PokemonCenter_1F_Text_HotSpringsAction
	.word	MauvilleCity_PokemonCenter_1F_Text_HotSpringsStory
	.size	 sStorytellerStories,576
.text
	.align	2, 0
	.type	 StorytellerSetup,function
	.thumb_func
StorytellerSetup:
	push	{r4, r5, lr}
	ldr	r2, .L397
	ldr	r0, .L397+0x4
	ldr	r0, [r0]
	ldr	r1, .L397+0x8
	add	r0, r0, r1
	str	r0, [r2]
	mov	r3, #0x0
	mov	r1, #0x3
	strb	r1, [r0]
	ldr	r0, [r2]
	strb	r3, [r0, #0x1]
	mov	r5, #0x0
	mov	r4, #0xff
.L395:
	ldr	r0, [r2]
	add	r0, r0, #0x4
	add	r0, r0, r3
	strb	r5, [r0]
	ldr	r1, [r2]
	add	r1, r1, #0x8
	add	r1, r1, r3
	ldrb	r0, [r1]
	orr	r0, r0, r4
	strb	r0, [r1]
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L395	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L398:
	.align	2, 0
.L397:
	.word	sStorytellerPtr
	.word	gSaveBlock1Ptr
	.word	0x2aa8
.Lfe35:
	.size	 StorytellerSetup,.Lfe35-StorytellerSetup
	.align	2, 0
	.type	 Storyteller_ResetFlag,function
	.thumb_func
Storyteller_ResetFlag:
	ldr	r3, .L400
	ldr	r0, .L400+0x4
	ldr	r0, [r0]
	ldr	r1, .L400+0x8
	add	r0, r0, r1
	str	r0, [r3]
	mov	r2, #0x0
	mov	r1, #0x3
	strb	r1, [r0]
	ldr	r0, [r3]
	strb	r2, [r0, #0x1]
	bx	lr
.L401:
	.align	2, 0
.L400:
	.word	sStorytellerPtr
	.word	gSaveBlock1Ptr
	.word	0x2aa8
.Lfe36:
	.size	 Storyteller_ResetFlag,.Lfe36-Storyteller_ResetFlag
	.align	2, 0
	.type	 StorytellerGetGameStat,function
	.thumb_func
StorytellerGetGameStat:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x32
	bne	.L403	@cond_branch
	mov	r0, #0x0
.L403:
	bl	GetGameStat
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 StorytellerGetGameStat,.Lfe37-StorytellerGetGameStat
	.align	2, 0
	.type	 GetStoryByStat,function
	.thumb_func
GetStoryByStat:
	push	{lr}
	add	r3, r0, #0
	mov	r2, #0x0
	ldr	r1, .L412
.L408:
	ldrb	r0, [r1]
	cmp	r0, r3
	bne	.L407	@cond_branch
	add	r0, r1, #0
	b	.L411
.L413:
	.align	2, 0
.L412:
	.word	sStorytellerStories
.L407:
	add	r1, r1, #0x10
	add	r2, r2, #0x1
	cmp	r2, #0x23
	ble	.L408	@cond_branch
	ldr	r0, .L414
.L411:
	pop	{r1}
	bx	r1
.L415:
	.align	2, 0
.L414:
	.word	sStorytellerStories+0x230
.Lfe38:
	.size	 GetStoryByStat,.Lfe38-GetStoryByStat
	.align	2, 0
	.type	 GetStoryTitleByStat,function
	.thumb_func
GetStoryTitleByStat:
	push	{lr}
	bl	GetStoryByStat
	ldr	r0, [r0, #0x4]
	pop	{r1}
	bx	r1
.Lfe39:
	.size	 GetStoryTitleByStat,.Lfe39-GetStoryTitleByStat
	.align	2, 0
	.type	 GetStoryTextByStat,function
	.thumb_func
GetStoryTextByStat:
	push	{lr}
	bl	GetStoryByStat
	ldr	r0, [r0, #0xc]
	pop	{r1}
	bx	r1
.Lfe40:
	.size	 GetStoryTextByStat,.Lfe40-GetStoryTextByStat
	.align	2, 0
	.type	 GetStoryActionByStat,function
	.thumb_func
GetStoryActionByStat:
	push	{lr}
	bl	GetStoryByStat
	ldr	r0, [r0, #0x8]
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 GetStoryActionByStat,.Lfe41-GetStoryActionByStat
	.align	2, 0
	.type	 GetFreeStorySlot,function
	.thumb_func
GetFreeStorySlot:
	push	{lr}
	mov	r1, #0x0
	ldr	r2, .L426
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L421	@cond_branch
.L422:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bhi	.L421	@cond_branch
	ldr	r0, [r2]
	add	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L422	@cond_branch
.L421:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L427:
	.align	2, 0
.L426:
	.word	sStorytellerPtr
.Lfe42:
	.size	 GetFreeStorySlot,.Lfe42-GetFreeStorySlot
	.align	2, 0
	.type	 StorytellerGetRecordedTrainerStat,function
	.thumb_func
StorytellerGetRecordedTrainerStat:
	ldr	r1, .L429
	lsl	r0, r0, #0x2
	add	r0, r0, #0x24
	ldr	r2, [r1]
	add	r2, r2, r0
	ldrb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x2]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	bx	lr
.L430:
	.align	2, 0
.L429:
	.word	sStorytellerPtr
.Lfe43:
	.size	 StorytellerGetRecordedTrainerStat,.Lfe43-StorytellerGetRecordedTrainerStat
	.align	2, 0
	.type	 StorytellerSetRecordedTrainerStat,function
	.thumb_func
StorytellerSetRecordedTrainerStat:
	ldr	r2, .L432
	lsl	r0, r0, #0x2
	add	r0, r0, #0x24
	ldr	r2, [r2]
	add	r2, r2, r0
	strb	r1, [r2]
	lsr	r0, r1, #0x8
	strb	r0, [r2, #0x1]
	lsr	r0, r1, #0x10
	strb	r0, [r2, #0x2]
	lsr	r1, r1, #0x18
	strb	r1, [r2, #0x3]
	bx	lr
.L433:
	.align	2, 0
.L432:
	.word	sStorytellerPtr
.Lfe44:
	.size	 StorytellerSetRecordedTrainerStat,.Lfe44-StorytellerSetRecordedTrainerStat
	.align	2, 0
	.type	 HasTrainerStatIncreased,function
	.thumb_func
HasTrainerStatIncreased:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L438
	ldr	r0, [r0]
	add	r0, r0, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	StorytellerGetGameStat
	add	r4, r0, #0
	add	r0, r5, #0
	bl	StorytellerGetRecordedTrainerStat
	cmp	r4, r0
	bhi	.L435	@cond_branch
	mov	r0, #0x0
	b	.L437
.L439:
	.align	2, 0
.L438:
	.word	sStorytellerPtr
.L435:
	mov	r0, #0x1
.L437:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 HasTrainerStatIncreased,.Lfe45-HasTrainerStatIncreased
	.align	2, 0
	.type	 GetStoryByStattellerPlayerName,function
	.thumb_func
GetStoryByStattellerPlayerName:
	push	{r4, r5, lr}
	add	r5, r1, #0
	ldr	r2, .L441
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	add	r1, r1, #0x8
	ldr	r4, [r2]
	add	r4, r4, r1
	add	r0, r5, #0
	mov	r1, #0xff
	mov	r2, #0x8
	bl	memset
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x7
	bl	memcpy
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L442:
	.align	2, 0
.L441:
	.word	sStorytellerPtr
.Lfe46:
	.size	 GetStoryByStattellerPlayerName,.Lfe46-GetStoryByStattellerPlayerName
	.align	2, 0
	.type	 StorytellerSetPlayerName,function
	.thumb_func
StorytellerSetPlayerName:
	push	{r4, r5, lr}
	add	r5, r1, #0
	ldr	r2, .L444
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	add	r1, r1, #0x8
	ldr	r4, [r2]
	add	r4, r4, r1
	add	r0, r4, #0
	mov	r1, #0xff
	mov	r2, #0x7
	bl	memset
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x7
	bl	memcpy
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L445:
	.align	2, 0
.L444:
	.word	sStorytellerPtr
.Lfe47:
	.size	 StorytellerSetPlayerName,.Lfe47-StorytellerSetPlayerName
	.align	2, 0
	.type	 StorytellerRecordNewStat,function
	.thumb_func
StorytellerRecordNewStat:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	mov	r8, r0
	add	r6, r1, #0
	ldr	r0, .L447
	mov	r9, r0
	ldr	r0, [r0]
	add	r0, r0, #0x4
	add	r0, r0, r8
	strb	r6, [r0]
	ldr	r0, .L447+0x4
	ldr	r1, [r0]
	mov	r0, r8
	bl	StorytellerSetPlayerName
	lsl	r4, r6, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	StorytellerGetGameStat
	add	r1, r0, #0
	mov	r0, r8
	bl	StorytellerSetRecordedTrainerStat
	ldr	r5, .L447+0x8
	add	r0, r4, #0
	bl	StorytellerGetGameStat
	add	r1, r0, #0
	add	r0, r5, #0
	mov	r2, #0x0
	mov	r3, #0xa
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L447+0xc
	add	r0, r6, #0
	bl	GetStoryActionByStat
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringCopy
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, #0x34
	add	r0, r0, r8
	ldr	r1, .L447+0x10
	ldrb	r1, [r1]
	strb	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L448:
	.align	2, 0
.L447:
	.word	sStorytellerPtr
	.word	gSaveBlock2Ptr
	.word	gStringVar1
	.word	gStringVar2
	.word	gGameLanguage
.Lfe48:
	.size	 StorytellerRecordNewStat,.Lfe48-StorytellerRecordNewStat
	.align	2, 0
	.type	 ScrambleStatList,function
	.thumb_func
ScrambleStatList:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	add	r6, r1, #0
	mov	r5, #0x0
	cmp	r5, r6
	bge	.L451	@cond_branch
.L453:
	add	r0, r7, r5
	strb	r5, [r0]
	add	r5, r5, #0x1
	cmp	r5, r6
	blt	.L453	@cond_branch
.L451:
	cmp	r6, #0
	ble	.L456	@cond_branch
	add	r5, r6, #0
.L458:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r6, #0
	bl	__modsi3
	add	r4, r0, #0
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r6, #0
	bl	__modsi3
	add	r4, r7, r4
	ldrb	r2, [r4]
	add	r0, r7, r0
	ldrb	r1, [r0]
	strb	r1, [r4]
	strb	r2, [r0]
	sub	r5, r5, #0x1
	cmp	r5, #0
	bne	.L458	@cond_branch
.L456:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 ScrambleStatList,.Lfe49-ScrambleStatList
	.section .rodata
	.align	2, 0
	.type	 sStorytellerStuff,object
	.size	 sStorytellerStuff,8
sStorytellerStuff:
	.word	0x24
	.word	0x8
.text
	.align	2, 0
	.type	 StorytellerInitializeRandomStat,function
	.thumb_func
StorytellerInitializeRandomStat:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r7, sp
	mov	r8, sp
	ldr	r0, .L476
	ldr	r0, [r0]
	lsl	r0, r0, #0x3
	lsr	r0, r0, #0x3
	add	r0, r0, #0x3
	lsr	r0, r0, #0x2
	lsl	r0, r0, #0x2
	mov	r1, sp
	sub	r1, r1, r0
	mov	sp, r1
	mov	r9, sp
	mov	r0, sp
	mov	r1, #0x24
	bl	ScrambleStatList
	mov	r5, #0x0
.L464:
	ldr	r1, .L476+0x4
	mov	r2, r9
	add	r0, r2, r5
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r4, [r0]
	ldrb	r6, [r0, #0x1]
	mov	r1, #0x0
	ldr	r2, .L476+0x8
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x4]
	cmp	r0, r4
	beq	.L466	@cond_branch
.L467:
	add	r1, r1, #0x1
	cmp	r1, #0x3
	bgt	.L466	@cond_branch
	ldr	r0, [r2]
	add	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, r4
	bne	.L467	@cond_branch
.L466:
	cmp	r1, #0x4
	bne	.L463	@cond_branch
	add	r0, r4, #0
	bl	StorytellerGetGameStat
	cmp	r0, r6
	bcc	.L463	@cond_branch
	ldr	r0, .L476+0x8
	ldr	r1, [r0]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	bl	GetFreeStorySlot
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L472	@cond_branch
	ldr	r0, .L476+0xc
	ldrb	r0, [r0]
	add	r1, r4, #0
	bl	StorytellerRecordNewStat
	b	.L473
.L477:
	.align	2, 0
.L476:
	.word	sStorytellerStuff
	.word	sStorytellerStories
	.word	sStorytellerPtr
	.word	sSelectedStory
.L472:
	bl	GetFreeStorySlot
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	bl	StorytellerRecordNewStat
.L473:
	mov	r0, #0x1
	b	.L475
.L463:
	add	r5, r5, #0x1
	cmp	r5, #0x23
	ble	.L464	@cond_branch
	mov	r0, #0x0
.L475:
	mov	sp, r8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe50:
	.size	 StorytellerInitializeRandomStat,.Lfe50-StorytellerInitializeRandomStat
	.align	2, 0
	.type	 StorytellerDisplayStory,function
	.thumb_func
StorytellerDisplayStory:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r5, r0, #0
	ldr	r6, .L479
	ldr	r0, [r6]
	add	r0, r0, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r8, r0
	ldr	r4, .L479+0x4
	add	r0, r5, #0
	bl	StorytellerGetRecordedTrainerStat
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x0
	mov	r3, #0xa
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L479+0x8
	mov	r0, r8
	bl	GetStoryActionByStat
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringCopy
	ldr	r4, .L479+0xc
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GetStoryByStattellerPlayerName
	ldr	r0, [r6]
	add	r0, r0, #0x34
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r0, r4, #0
	bl	ConvertInternationalString
	mov	r0, r8
	bl	GetStoryTextByStat
	bl	ShowFieldMessage
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L480:
	.align	2, 0
.L479:
	.word	sStorytellerPtr
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar3
.Lfe51:
	.size	 StorytellerDisplayStory,.Lfe51-StorytellerDisplayStory
	.align	2, 0
	.type	 PrintStoryList,function
	.thumb_func
PrintStoryList:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	ldr	r1, .L495
	mov	r0, #0x1
	mov	r2, #0x0
	bl	GetStringWidth
	add	r5, r0, #0
	mov	r4, #0x0
	ldr	r0, .L495+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L483	@cond_branch
.L486:
	bl	GetStoryTitleByStat
	add	r1, r0, #0
	mov	r0, #0x1
	mov	r2, #0x0
	bl	GetStringWidth
	cmp	r0, r5
	ble	.L484	@cond_branch
	add	r5, r0, #0
.L484:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L483	@cond_branch
	ldr	r0, .L495+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x4
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L486	@cond_branch
.L483:
	add	r0, r5, #0
	bl	ConvertPixelWidthToTileWidth
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	GetFreeStorySlot
	add	r3, r0, #0
	lsl	r3, r3, #0x19
	mov	r0, #0x80
	lsl	r0, r0, #0x12
	add	r3, r3, r0
	lsr	r3, r3, #0x18
	mov	r0, #0x0
	mov	r1, #0x0
	add	r2, r4, #0
	bl	CreateWindowFromRect
	ldr	r1, .L495+0x8
	strb	r0, [r1]
	ldrb	r0, [r1]
	mov	r1, #0x0
	bl	SetStandardWindowBorderStyle
	mov	r4, #0x0
	ldr	r0, .L495+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L490	@cond_branch
	mov	r5, #0x80
	lsl	r5, r5, #0x11
.L493:
	bl	GetStoryTitleByStat
	add	r2, r0, #0
	ldr	r0, .L495+0x8
	ldrb	r0, [r0]
	lsr	r1, r5, #0x18
	str	r1, [sp]
	mov	r1, #0xff
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	mov	r0, #0x80
	lsl	r0, r0, #0x15
	add	r5, r5, r0
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L490	@cond_branch
	ldr	r0, .L495+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x4
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L493	@cond_branch
.L490:
	ldr	r5, .L495+0x8
	ldrb	r0, [r5]
	ldr	r2, .L495
	lsl	r1, r4, #0x4
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp]
	mov	r1, #0xff
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	ldrb	r4, [r5]
	bl	GetFreeStorySlot
	add	r1, r0, #0
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	mov	r2, #0x0
	bl	InitMenuInUpperLeftCornerPlaySoundWhenAPressed
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L496:
	.align	2, 0
.L495:
	.word	gText_Exit
	.word	sStorytellerPtr
	.word	sStorytellerWindowId
.Lfe52:
	.size	 PrintStoryList,.Lfe52-PrintStoryList
	.align	2, 0
	.type	 Task_StoryListMenu,function
	.thumb_func
Task_StoryListMenu:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L507
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r5, [r4, r0]
	cmp	r5, #0
	beq	.L499	@cond_branch
	cmp	r5, #0x1
	beq	.L500	@cond_branch
	b	.L498
.L508:
	.align	2, 0
.L507:
	.word	gTasks
.L499:
	bl	PrintStoryList
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L498
.L500:
	bl	Menu_ProcessInput
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L498	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	beq	.L503	@cond_branch
	bl	GetFreeStorySlot
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bne	.L502	@cond_branch
.L503:
	ldr	r1, .L509
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L504
.L510:
	.align	2, 0
.L509:
	.word	gSpecialVar_Result
.L502:
	ldr	r0, .L511
	strh	r5, [r0]
	ldr	r0, .L511+0x4
	strb	r4, [r0]
.L504:
	ldr	r0, .L511+0x8
	ldrb	r0, [r0]
	bl	ClearToTransparentAndRemoveWindow
	add	r0, r6, #0
	bl	DestroyTask
	bl	EnableBothScriptContexts
.L498:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L512:
	.align	2, 0
.L511:
	.word	gSpecialVar_Result
	.word	sSelectedStory
	.word	sStorytellerWindowId
.Lfe53:
	.size	 Task_StoryListMenu,.Lfe53-Task_StoryListMenu
	.align	2, 0
	.globl	ScrSpecial_StorytellerStoryListMenu
	.type	 ScrSpecial_StorytellerStoryListMenu,function
	.thumb_func
ScrSpecial_StorytellerStoryListMenu:
	push	{lr}
	ldr	r0, .L514
	mov	r1, #0x50
	bl	CreateTask
	pop	{r0}
	bx	r0
.L515:
	.align	2, 0
.L514:
	.word	Task_StoryListMenu
.Lfe54:
	.size	 ScrSpecial_StorytellerStoryListMenu,.Lfe54-ScrSpecial_StorytellerStoryListMenu
	.align	2, 0
	.globl	ScrSpecial_StorytellerDisplayStory
	.type	 ScrSpecial_StorytellerDisplayStory,function
	.thumb_func
ScrSpecial_StorytellerDisplayStory:
	push	{lr}
	ldr	r0, .L517
	ldrb	r0, [r0]
	bl	StorytellerDisplayStory
	pop	{r0}
	bx	r0
.L518:
	.align	2, 0
.L517:
	.word	sSelectedStory
.Lfe55:
	.size	 ScrSpecial_StorytellerDisplayStory,.Lfe55-ScrSpecial_StorytellerDisplayStory
	.align	2, 0
	.globl	ScrSpecial_StorytellerGetFreeStorySlot
	.type	 ScrSpecial_StorytellerGetFreeStorySlot,function
	.thumb_func
ScrSpecial_StorytellerGetFreeStorySlot:
	push	{lr}
	ldr	r1, .L520
	ldr	r0, .L520+0x4
	ldr	r0, [r0]
	ldr	r2, .L520+0x8
	add	r0, r0, r2
	str	r0, [r1]
	bl	GetFreeStorySlot
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L521:
	.align	2, 0
.L520:
	.word	sStorytellerPtr
	.word	gSaveBlock1Ptr
	.word	0x2aa8
.Lfe56:
	.size	 ScrSpecial_StorytellerGetFreeStorySlot,.Lfe56-ScrSpecial_StorytellerGetFreeStorySlot
	.align	2, 0
	.globl	ScrSpecial_StorytellerUpdateStat
	.type	 ScrSpecial_StorytellerUpdateStat,function
	.thumb_func
ScrSpecial_StorytellerUpdateStat:
	push	{r4, r5, lr}
	ldr	r2, .L525
	ldr	r0, .L525+0x4
	ldr	r1, [r0]
	ldr	r3, .L525+0x8
	add	r0, r1, r3
	str	r0, [r2]
	ldr	r5, .L525+0xc
	ldrb	r0, [r5]
	ldr	r2, .L525+0x10
	add	r1, r1, r2
	add	r1, r1, r0
	ldrb	r4, [r1]
	bl	HasTrainerStatIncreased
	cmp	r0, #0x1
	beq	.L523	@cond_branch
	mov	r0, #0x0
	b	.L524
.L526:
	.align	2, 0
.L525:
	.word	sStorytellerPtr
	.word	gSaveBlock1Ptr
	.word	0x2aa8
	.word	sSelectedStory
	.word	0x2aac
.L523:
	ldrb	r0, [r5]
	add	r1, r4, #0
	bl	StorytellerRecordNewStat
	mov	r0, #0x1
.L524:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe57:
	.size	 ScrSpecial_StorytellerUpdateStat,.Lfe57-ScrSpecial_StorytellerUpdateStat
	.align	2, 0
	.globl	ScrSpecial_HasStorytellerAlreadyRecorded
	.type	 ScrSpecial_HasStorytellerAlreadyRecorded,function
	.thumb_func
ScrSpecial_HasStorytellerAlreadyRecorded:
	push	{lr}
	ldr	r1, .L531
	ldr	r0, .L531+0x4
	ldr	r0, [r0]
	ldr	r2, .L531+0x8
	add	r0, r0, r2
	str	r0, [r1]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L528	@cond_branch
	mov	r0, #0x1
	b	.L530
.L532:
	.align	2, 0
.L531:
	.word	sStorytellerPtr
	.word	gSaveBlock1Ptr
	.word	0x2aa8
.L528:
	mov	r0, #0x0
.L530:
	pop	{r1}
	bx	r1
.Lfe58:
	.size	 ScrSpecial_HasStorytellerAlreadyRecorded,.Lfe58-ScrSpecial_HasStorytellerAlreadyRecorded
	.align	2, 0
	.globl	ScrSpecial_StorytellerInitializeRandomStat
	.type	 ScrSpecial_StorytellerInitializeRandomStat,function
	.thumb_func
ScrSpecial_StorytellerInitializeRandomStat:
	push	{lr}
	ldr	r1, .L534
	ldr	r0, .L534+0x4
	ldr	r0, [r0]
	ldr	r2, .L534+0x8
	add	r0, r0, r2
	str	r0, [r1]
	bl	StorytellerInitializeRandomStat
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L535:
	.align	2, 0
.L534:
	.word	sStorytellerPtr
	.word	gSaveBlock1Ptr
	.word	0x2aa8
.Lfe59:
	.size	 ScrSpecial_StorytellerInitializeRandomStat,.Lfe59-ScrSpecial_StorytellerInitializeRandomStat
	.comm	gBardSong, 52	@ 52

	.lcomm	sSelectedStory,1
.text
	.align	2, 0

