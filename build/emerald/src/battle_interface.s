@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sUnknown_0832C138,object
	.size	 sUnknown_0832C138,8
sUnknown_0832C138:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x4
	.short	0x0
	.align	2, 0
	.type	 sHealthboxPlayerSpriteTemplates,object
	.size	 sHealthboxPlayerSpriteTemplates,48
sHealthboxPlayerSpriteTemplates:
	.short	0xd6ff
	.short	0xd6ff
	.word	sUnknown_0832C138
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd700
	.short	0xd6ff
	.word	sUnknown_0832C138
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sHealthboxOpponentSpriteTemplates,object
	.size	 sHealthboxOpponentSpriteTemplates,48
sHealthboxOpponentSpriteTemplates:
	.short	0xd701
	.short	0xd6ff
	.word	sUnknown_0832C138
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd702
	.short	0xd6ff
	.word	sUnknown_0832C138
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sHealthboxSafariSpriteTemplate,object
	.size	 sHealthboxSafariSpriteTemplate,24
sHealthboxSafariSpriteTemplate:
	.short	0xd70b
	.short	0xd6ff
	.word	sUnknown_0832C138
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sOamData_Healthbar,object
	.size	 sOamData_Healthbar,8
sOamData_Healthbar:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x4
	.short	0x0
	.align	2, 0
	.type	 sHealthbarSpriteTemplates,object
	.size	 sHealthbarSpriteTemplates,96
sHealthbarSpriteTemplates:
	.short	0xd704
	.short	0xd704
	.word	sOamData_Healthbar
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_HealthBar
	.short	0xd705
	.short	0xd704
	.word	sOamData_Healthbar
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_HealthBar
	.short	0xd706
	.short	0xd704
	.word	sOamData_Healthbar
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_HealthBar
	.short	0xd707
	.short	0xd704
	.word	sOamData_Healthbar
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_HealthBar
	.align	2, 0
	.type	 sUnknown_0832C258,object
	.size	 sUnknown_0832C258,8
sUnknown_0832C258:
	.byte	-0x10
	.byte	0x0
	.byte	0x5
	.byte	0x40
	.byte	0x10
	.byte	0x0
	.byte	0x45
	.byte	0x40
	.align	2, 0
	.type	 sUnknown_0832C260,object
	.size	 sUnknown_0832C260,12
sUnknown_0832C260:
	.byte	-0x10
	.byte	0x0
	.byte	0x5
	.byte	0x40
	.byte	0x10
	.byte	0x0
	.byte	0x45
	.byte	0x40
	.byte	-0x20
	.byte	0x0
	.byte	0x80
	.byte	0x40
	.align	2, 0
	.type	 sUnknown_0832C28C,object
sUnknown_0832C28C:
	.byte	0x2
	.space	3
	.word	sUnknown_0832C258
	.byte	0x3
	.space	3
	.word	sUnknown_0832C260
	.size	 sUnknown_0832C28C,16
	.align	2, 0
	.type	 sStatusSummaryBar_Subsprites_0,object
	.size	 sStatusSummaryBar_Subsprites_0,16
sStatusSummaryBar_Subsprites_0:
	.byte	-0x60
	.byte	0x0
	.byte	0x5
	.byte	0x40
	.byte	-0x40
	.byte	0x0
	.byte	0x45
	.byte	0x40
	.byte	-0x20
	.byte	0x0
	.byte	0x85
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.byte	0xc5
	.byte	0x40
	.align	2, 0
	.type	 sUnknown_0832C2AC,object
	.size	 sUnknown_0832C2AC,24
sUnknown_0832C2AC:
	.byte	-0x60
	.byte	0x0
	.byte	0x5
	.byte	0x40
	.byte	-0x40
	.byte	0x0
	.byte	0x45
	.byte	0x40
	.byte	-0x20
	.byte	0x0
	.byte	0x85
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.byte	0x85
	.byte	0x40
	.byte	0x20
	.byte	0x0
	.byte	0x85
	.byte	0x40
	.byte	0x40
	.byte	0x0
	.byte	0xc5
	.byte	0x40
	.align	2, 0
	.type	 sStatusSummaryBar_SubspriteTable,object
sStatusSummaryBar_SubspriteTable:
	.byte	0x4
	.space	3
	.word	sStatusSummaryBar_Subsprites_0
	.size	 sStatusSummaryBar_SubspriteTable,8
	.align	2, 0
	.type	 sUnknown_0832C2CC,object
sUnknown_0832C2CC:
	.byte	0x6
	.space	3
	.word	sUnknown_0832C2AC
	.size	 sUnknown_0832C2CC,8
	.align	2, 0
	.type	 sStatusSummaryBarSpriteSheet,object
	.size	 sStatusSummaryBarSpriteSheet,8
sStatusSummaryBarSpriteSheet:
	.word	gBattleInterface_BallStatusBarGfx
	.short	0x200
	.short	0xd70c
	.align	2, 0
	.type	 sStatusSummaryBarSpritePal,object
	.size	 sStatusSummaryBarSpritePal,8
sStatusSummaryBarSpritePal:
	.word	gBattleInterface_BallStatusBarPal
	.short	0xd710
	.space	2
	.align	2, 0
	.type	 sStatusSummaryBallsSpritePal,object
	.size	 sStatusSummaryBallsSpritePal,8
sStatusSummaryBallsSpritePal:
	.word	gBattleInterface_BallDisplayPal
	.short	0xd712
	.space	2
	.align	2, 0
	.type	 sStatusSummaryBallsSpriteSheet,object
	.size	 sStatusSummaryBallsSpriteSheet,8
sStatusSummaryBallsSpriteSheet:
	.word	gBattleInterface_BallDisplayGfx
	.short	0x80
	.short	0xd714
	.align	2, 0
	.type	 sOamData_StatusSummaryBalls,object
	.size	 sOamData_StatusSummaryBalls,8
sOamData_StatusSummaryBalls:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.short	0x0
	.align	2, 0
	.type	 sStatusSummaryBarSpriteTemplates,object
	.size	 sStatusSummaryBarSpriteTemplates,48
sStatusSummaryBarSpriteTemplates:
	.short	0xd70c
	.short	0xd710
	.word	sUnknown_0832C138
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_StatusSummaryBar
	.short	0xd70c
	.short	0xd710
	.word	sUnknown_0832C138
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_StatusSummaryBar
	.align	2, 0
	.type	 sStatusSummaryBallsSpriteTemplates,object
	.size	 sStatusSummaryBallsSpriteTemplates,48
sStatusSummaryBallsSpriteTemplates:
	.short	0xd714
	.short	0xd712
	.word	sOamData_StatusSummaryBalls
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_StatusSummaryBallsOnBattleStart
	.short	0xd714
	.short	0xd712
	.word	sOamData_StatusSummaryBalls
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_StatusSummaryBallsOnBattleStart
	.type	 sUnknown_0832C3C4,object
sUnknown_0832C3C4:
	.byte	0xfc
	.byte	0x1
	.byte	0x1
	.byte	0xfc
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sUnknown_0832C3C4,20
	.type	 sUnknown_0832C3D8,object
sUnknown_0832C3D8:
	.byte	0xfc
	.byte	0x1
	.byte	0x1
	.byte	0xfc
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sUnknown_0832C3D8,20
	.align	1, 0
	.type	 sStatusIconColors,object
sStatusIconColors:
	.short	0x6198
	.short	0xef7
	.short	0x4694
	.short	0x72d1
	.short	0x29dc
	.size	 sStatusIconColors,10
	.align	2, 0
	.type	 sHealthboxWindowTemplate,object
	.size	 sHealthboxWindowTemplate,8
sHealthboxWindowTemplate:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x2
	.byte	0x0
	.short	0x0
	.type	 sMegaTriggerGfx,object
sMegaTriggerGfx:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd0
	.byte	0x0
	.byte	0x0
	.byte	0xd0
	.byte	0x11
	.byte	0x0
	.byte	0xd0
	.byte	0x11
	.byte	0x7d
	.byte	0x0
	.byte	0x1d
	.byte	0x71
	.byte	0xd7
	.byte	0x0
	.byte	0x11
	.byte	0x77
	.byte	0x1d
	.byte	0xd0
	.byte	0x71
	.byte	0x7d
	.byte	0xd7
	.byte	0x10
	.byte	0x7d
	.byte	0x11
	.byte	0x7d
	.byte	0x10
	.byte	0x7d
	.byte	0x77
	.byte	0x11
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1c
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x17
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1c
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x17
	.byte	0x11
	.byte	0x11
	.byte	0x1
	.byte	0xd7
	.byte	0x11
	.byte	0x11
	.byte	0x1
	.byte	0x77
	.byte	0x17
	.byte	0x11
	.byte	0x1
	.byte	0xd1
	.byte	0x77
	.byte	0x11
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1d
	.byte	0x0
	.byte	0x0
	.byte	0xd0
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x1d
	.byte	0x11
	.byte	0x0
	.byte	0xd0
	.byte	0x11
	.byte	0x11
	.byte	0x0
	.byte	0x1d
	.byte	0x11
	.byte	0x11
	.byte	0xd0
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x1d
	.byte	0x71
	.byte	0xd1
	.byte	0xd7
	.byte	0x11
	.byte	0xd1
	.byte	0xc7
	.byte	0xd1
	.byte	0x11
	.byte	0x11
	.byte	0x77
	.byte	0x1c
	.byte	0x11
	.byte	0x11
	.byte	0x71
	.byte	0x77
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x77
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x7d
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xc1
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x71
	.byte	0x1d
	.byte	0xd1
	.byte	0x17
	.byte	0x1
	.byte	0x77
	.byte	0x1d
	.byte	0xd7
	.byte	0x1
	.byte	0xc1
	.byte	0x7c
	.byte	0x77
	.byte	0x1
	.byte	0xc7
	.byte	0x11
	.byte	0xdc
	.byte	0x1
	.byte	0x71
	.byte	0x77
	.byte	0x17
	.byte	0x1
	.byte	0x11
	.byte	0x77
	.byte	0x11
	.byte	0x1
	.byte	0x7d
	.byte	0x1c
	.byte	0x11
	.byte	0x1
	.byte	0xd7
	.byte	0x11
	.byte	0x11
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd0
	.byte	0x0
	.byte	0x0
	.byte	0xd0
	.byte	0x11
	.byte	0x0
	.byte	0xd0
	.byte	0x11
	.byte	0x3d
	.byte	0x0
	.byte	0x1d
	.byte	0x31
	.byte	0xd3
	.byte	0x0
	.byte	0x11
	.byte	0x33
	.byte	0x11
	.byte	0xd0
	.byte	0xb1
	.byte	0xbd
	.byte	0xdb
	.byte	0x10
	.byte	0x5d
	.byte	0x11
	.byte	0x5d
	.byte	0x10
	.byte	0x5d
	.byte	0x55
	.byte	0x11
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x12
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x13
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x12
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x13
	.byte	0x11
	.byte	0x11
	.byte	0x1
	.byte	0xdb
	.byte	0x11
	.byte	0x11
	.byte	0x1
	.byte	0x55
	.byte	0x15
	.byte	0x11
	.byte	0x1
	.byte	0xd1
	.byte	0x55
	.byte	0x11
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1d
	.byte	0x0
	.byte	0x0
	.byte	0xd0
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x1d
	.byte	0x11
	.byte	0x0
	.byte	0xd0
	.byte	0x11
	.byte	0x11
	.byte	0x0
	.byte	0x1d
	.byte	0x11
	.byte	0x11
	.byte	0xd0
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x1d
	.byte	0x51
	.byte	0xd1
	.byte	0xd5
	.byte	0x11
	.byte	0xd1
	.byte	0x45
	.byte	0xd1
	.byte	0x11
	.byte	0x11
	.byte	0xaa
	.byte	0x14
	.byte	0x11
	.byte	0x11
	.byte	0xa1
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x99
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x9d
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x81
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x61
	.byte	0x1d
	.byte	0xd1
	.byte	0x15
	.byte	0x1
	.byte	0x55
	.byte	0x1d
	.byte	0xd5
	.byte	0x1
	.byte	0x41
	.byte	0xa4
	.byte	0xaa
	.byte	0x1
	.byte	0x4a
	.byte	0x11
	.byte	0xd4
	.byte	0x1
	.byte	0x91
	.byte	0x99
	.byte	0x19
	.byte	0x1
	.byte	0x11
	.byte	0x99
	.byte	0x11
	.byte	0x1
	.byte	0x6d
	.byte	0x18
	.byte	0x11
	.byte	0x1
	.byte	0xd6
	.byte	0x11
	.byte	0x11
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x81
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sMegaTriggerGfx,1024
	.align	1, 0
	.type	 sMegaTriggerPal,object
sMegaTriggerPal:
	.short	0x5337
	.short	0x31a9
	.short	0x6278
	.short	0x66db
	.short	0x3a47
	.short	0x7f71
	.short	0x429e
	.short	0x7fff
	.short	0x2153
	.short	0x3fbd
	.short	0x6ff0
	.short	0x7a52
	.short	0x6738
	.short	0x424f
	.short	0x0
	.short	0x0
	.size	 sMegaTriggerPal,32
	.align	2, 0
	.type	 sSpriteSheet_MegaTrigger,object
	.size	 sSpriteSheet_MegaTrigger,8
sSpriteSheet_MegaTrigger:
	.word	sMegaTriggerGfx
	.short	0x400
	.short	0xd777
	.align	2, 0
	.type	 sSpritePalette_MegaTrigger,object
	.size	 sSpritePalette_MegaTrigger,8
sSpritePalette_MegaTrigger:
	.word	sMegaTriggerPal
	.short	0xd777
	.space	2
	.align	2, 0
	.type	 sOamData_MegaTrigger,object
	.size	 sOamData_MegaTrigger,8
sOamData_MegaTrigger:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x4
	.short	0x0
	.align	2, 0
	.type	 sSpriteAnim_MegaTriggerOff,object
sSpriteAnim_MegaTriggerOff:
	.short	0x0
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_MegaTriggerOff,8
	.align	2, 0
	.type	 sSpriteAnim_MegaTriggerOn,object
sSpriteAnim_MegaTriggerOn:
	.short	0x10
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_MegaTriggerOn,8
	.align	2, 0
	.type	 sSpriteAnimTable_MegaTrigger,object
sSpriteAnimTable_MegaTrigger:
	.word	sSpriteAnim_MegaTriggerOff
	.word	sSpriteAnim_MegaTriggerOn
	.size	 sSpriteAnimTable_MegaTrigger,8
	.align	2, 0
	.type	 sSpriteTemplate_MegaTrigger,object
	.size	 sSpriteTemplate_MegaTrigger,24
sSpriteTemplate_MegaTrigger:
	.short	0xd777
	.short	0xd777
	.word	sOamData_MegaTrigger
	.word	sSpriteAnimTable_MegaTrigger
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCb_MegaTrigger
	.type	 sMegaIndicatorGfx,object
sMegaIndicatorGfx:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x10
	.byte	0x22
	.byte	0x32
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x42
	.byte	0x44
	.byte	0x13
	.byte	0x20
	.byte	0x31
	.byte	0x52
	.byte	0x62
	.byte	0x87
	.byte	0x88
	.byte	0x88
	.byte	0x38
	.byte	0x93
	.byte	0x37
	.byte	0x73
	.byte	0x39
	.byte	0xa3
	.byte	0xaa
	.byte	0xaa
	.byte	0x7a
	.byte	0xb1
	.byte	0xdc
	.byte	0xc3
	.byte	0x6d
	.byte	0x30
	.byte	0xbb
	.byte	0xdb
	.byte	0x6
	.byte	0xd3
	.byte	0xdd
	.byte	0x61
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sMegaIndicatorGfx,128
	.align	1, 0
	.type	 sMegaIndicatorPal,object
sMegaIndicatorPal:
	.short	0x0
	.short	0x3ed8
	.short	0x29b0
	.short	0x2146
	.short	0x365f
	.short	0x3f9c
	.short	0x5b5b
	.short	0x31a9
	.short	0x3b56
	.short	0x7796
	.short	0x6ef0
	.short	0x51d6
	.short	0x66db
	.short	0x356d
	.short	0x7fff
	.size	 sMegaIndicatorPal,30
	.align	2, 0
	.type	 sSpriteSheet_MegaIndicator,object
	.size	 sSpriteSheet_MegaIndicator,8
sSpriteSheet_MegaIndicator:
	.word	sMegaIndicatorGfx
	.short	0x80
	.short	0xd778
	.align	2, 0
	.type	 sSpritePalette_MegaIndicator,object
	.size	 sSpritePalette_MegaIndicator,8
sSpritePalette_MegaIndicator:
	.word	sMegaIndicatorPal
	.short	0xd778
	.space	2
	.align	2, 0
	.type	 sOamData_MegaIndicator,object
	.size	 sOamData_MegaIndicator,8
sOamData_MegaIndicator:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x4
	.short	0x0
	.align	2, 0
	.type	 sSpriteTemplate_MegaIndicator,object
	.size	 sSpriteTemplate_MegaIndicator,24
sSpriteTemplate_MegaIndicator:
	.short	0xd778
	.short	0xd778
	.word	sOamData_MegaIndicator
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCb_MegaIndicator
.text
	.align	2, 0
	.globl	GetMegaIndicatorSpriteId
	.type	 GetMegaIndicatorSpriteId,function
	.thumb_func
GetMegaIndicatorSpriteId:
	push	{lr}
	ldr	r2, .L5
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1, #0x6]
	cmp	r1, #0x3f
	bhi	.L3	@cond_branch
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L4
.L6:
	.align	2, 0
.L5:
	.word	gSprites
.L3:
	mov	r0, #0xff
.L4:
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 GetMegaIndicatorSpriteId,.Lfe1-GetMegaIndicatorSpriteId
	.align	2, 0
	.type	 InitLastUsedBallAssets,function
	.thumb_func
InitLastUsedBallAssets:
	ldr	r2, .L8
	ldr	r0, [r2]
	ldr	r1, .L8+0x4
	add	r0, r0, r1
	mov	r1, #0x40
	strb	r1, [r0]
	ldr	r0, [r2]
	ldr	r2, .L8+0x8
	add	r0, r0, r2
	strb	r1, [r0]
	bx	lr
.L9:
	.align	2, 0
.L8:
	.word	gBattleStruct
	.word	0x352
	.word	0x353
.Lfe2:
	.size	 InitLastUsedBallAssets,.Lfe2-InitLastUsedBallAssets
	.align	2, 0
	.globl	CreateBattlerHealthboxSprites
	.type	 CreateBattlerHealthboxSprites,function
	.thumb_func
CreateBattlerHealthboxSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r0, #0x0
	str	r0, [sp]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L11	@cond_branch
	mov	r0, r8
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L12	@cond_branch
	ldr	r4, .L19
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r4, .L19+0x4
	lsl	r1, r7, #0x4
	add	r1, r1, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0x1]
	mov	r3, #0x3f
	add	r0, r3, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	lsl	r2, r6, #0x4
	add	r2, r2, r6
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldrb	r0, [r2, #0x1]
	and	r3, r3, r0
	strb	r3, [r2, #0x1]
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x40
	ldr	r4, .L19+0x8
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L19+0xc
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	b	.L13
.L20:
	.align	2, 0
.L19:
	.word	sHealthboxPlayerSpriteTemplates
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L12:
	ldr	r4, .L21
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L21+0x4
	lsl	r2, r6, #0x4
	add	r2, r2, r6
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x20
	ldr	r5, .L21+0x8
	add	r0, r5, #0
	and	r1, r1, r0
	ldr	r0, .L21+0xc
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	mov	r0, #0x2
	str	r0, [sp]
.L13:
	ldr	r2, .L21+0x4
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r6, [r0, #0x6]
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	strh	r7, [r1, #0x38]
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L21+0x10
	str	r1, [r0]
	b	.L14
.L22:
	.align	2, 0
.L21:
	.word	sHealthboxOpponentSpriteTemplates
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_HealthBoxOther
.L11:
	mov	r0, r8
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L15	@cond_branch
	mov	r0, r8
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r4, .L23
	add	r0, r0, r4
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, r8
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r4, .L23+0x4
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r6, [r0, #0x6]
	lsl	r2, r6, #0x4
	add	r2, r2, r6
	lsl	r2, r2, #0x2
	add	r3, r2, r4
	strh	r7, [r3, #0x38]
	ldrh	r1, [r3, #0x4]
	mov	r9, r1
	mov	r5, r9
	lsl	r1, r5, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x20
	ldr	r5, .L23+0x8
	add	r0, r5, #0
	and	r1, r1, r0
	ldr	r0, .L23+0xc
	mov	r5, r9
	and	r0, r0, r5
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	add	r4, r4, #0x1c
	add	r2, r2, r4
	ldr	r0, .L23+0x10
	str	r0, [r2]
	mov	r0, #0x1
	b	.L18
.L24:
	.align	2, 0
.L23:
	.word	sHealthboxPlayerSpriteTemplates
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_HealthBoxOther
.L15:
	mov	r0, r8
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r4, .L25
	add	r0, r0, r4
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, r8
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r4, .L25+0x4
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r6, [r0, #0x6]
	lsl	r2, r6, #0x4
	add	r2, r2, r6
	lsl	r2, r2, #0x2
	add	r3, r2, r4
	strh	r7, [r3, #0x38]
	ldrh	r1, [r3, #0x4]
	mov	r9, r1
	mov	r5, r9
	lsl	r1, r5, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x20
	ldr	r5, .L25+0x8
	add	r0, r5, #0
	and	r1, r1, r0
	ldr	r0, .L25+0xc
	mov	r5, r9
	and	r0, r0, r5
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	add	r4, r4, #0x1c
	add	r2, r2, r4
	ldr	r0, .L25+0x10
	str	r0, [r2]
	mov	r0, #0x2
.L18:
	str	r0, [sp]
.L14:
	ldr	r0, .L25+0x14
	add	r0, r0, r8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L25+0x18
	add	r0, r0, r1
	mov	r1, #0x8c
	mov	r2, #0x3c
	mov	r3, #0x0
	bl	CreateSpriteAtEnd
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	ldr	r1, .L25+0x4
	mov	sl, r1
	add	r4, r4, sl
	mov	r0, r8
	bl	GetBattlerSide
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x15
	ldr	r0, .L25+0x1c
	add	r1, r1, r0
	add	r0, r4, #0
	bl	SetSubspriteTables
	add	r2, r4, #0
	add	r2, r2, #0x42
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r2, #0x4
	mov	r9, r2
	mov	r1, r9
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	mov	r0, #0x1
	bl	GetHealthboxElementGfxPtr
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L25+0x20
	add	r1, r1, r2
	ldr	r2, .L25+0x24
	bl	CpuSet
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	strh	r5, [r0, #0x38]
	mov	r2, r8
	strh	r2, [r0, #0x3a]
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r5, r9
	orr	r1, r1, r5
	strb	r1, [r0]
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, sl
	add	r3, r1, #0
	add	r3, r3, #0x3e
	ldrb	r0, [r3]
	orr	r0, r0, r5
	strb	r0, [r3]
	mov	r0, #0xff
	strh	r0, [r1, #0x3a]
	strh	r7, [r4, #0x38]
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4, #0x3a]
	add	r4, r4, #0x3e
	ldrb	r0, [r4]
	orr	r0, r0, r5
	strb	r0, [r4]
	mov	r0, r8
	bl	GetBattlerSide
	ldr	r4, .L25+0x28
	ldr	r1, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L25+0x2c
	add	r1, r1, r2
	add	r1, r1, r0
	ldrb	r2, [r1]
	ldr	r3, .L25+0x30
	ldr	r1, .L25+0x34
	mov	r5, r8
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L17	@cond_branch
	mov	r0, r8
	mov	r1, #0x0
	bl	CreateMegaIndicatorSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, sl
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, r9
	orr	r0, r0, r2
	strb	r0, [r1]
.L17:
	ldr	r0, [r4]
	ldr	r5, .L25+0x38
	add	r0, r0, r5
	mov	r1, #0x40
	strb	r1, [r0]
	ldr	r0, [r4]
	ldr	r2, .L25+0x3c
	add	r0, r0, r2
	strb	r1, [r0]
	add	r0, r7, #0
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L26:
	.align	2, 0
.L25:
	.word	sHealthboxOpponentSpriteTemplates
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_HealthBoxOther
	.word	gBattlerPositions
	.word	sHealthbarSpriteTemplates
	.word	sUnknown_0832C28C
	.word	0x6010000
	.word	0x4000010
	.word	gBattleStruct
	.word	0x299
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	0x352
	.word	0x353
.Lfe3:
	.size	 CreateBattlerHealthboxSprites,.Lfe3-CreateBattlerHealthboxSprites
	.align	2, 0
	.globl	CreateSafariPlayerHealthboxSprites
	.type	 CreateSafariPlayerHealthboxSprites,function
	.thumb_func
CreateSafariPlayerHealthboxSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r4, .L28
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L28+0x4
	mov	r9, r1
	lsl	r3, r6, #0x4
	add	r3, r3, r6
	lsl	r3, r3, #0x2
	add	r3, r3, r9
	ldrb	r4, [r3, #0x1]
	mov	r2, #0x3f
	add	r1, r2, #0
	and	r1, r1, r4
	strb	r1, [r3, #0x1]
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	mov	r7, r9
	add	r5, r4, r7
	ldrb	r1, [r5, #0x1]
	and	r2, r2, r1
	strb	r2, [r5, #0x1]
	ldrh	r1, [r5, #0x4]
	mov	r8, r1
	mov	r7, r8
	lsl	r2, r7, #0x16
	lsr	r2, r2, #0x16
	add	r2, r2, #0x40
	ldr	r7, .L28+0x8
	add	r1, r7, #0
	and	r2, r2, r1
	ldr	r1, .L28+0xc
	mov	r7, r8
	and	r1, r1, r7
	orr	r1, r1, r2
	strh	r1, [r5, #0x4]
	strh	r0, [r3, #0x6]
	strh	r6, [r5, #0x38]
	mov	r0, #0xff
	strh	r0, [r5, #0x3a]
	mov	r0, #0x1c
	add	r9, r9, r0
	add	r4, r4, r9
	ldr	r0, .L28+0x10
	str	r0, [r4]
	add	r0, r6, #0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L29:
	.align	2, 0
.L28:
	.word	sHealthboxSafariSpriteTemplate
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_HealthBoxOther
.Lfe4:
	.size	 CreateSafariPlayerHealthboxSprites,.Lfe4-CreateSafariPlayerHealthboxSprites
	.align	2, 0
	.type	 GetHealthboxElementGfxPtr,function
	.thumb_func
GetHealthboxElementGfxPtr:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x13
	ldr	r1, .L31
	add	r0, r0, r1
	bx	lr
.L32:
	.align	2, 0
.L31:
	.word	gHealthboxElementsGfxTable
.Lfe5:
	.size	 GetHealthboxElementGfxPtr,.Lfe5-GetHealthboxElementGfxPtr
	.align	2, 0
	.type	 SpriteCB_HealthBar,function
	.thumb_func
SpriteCB_HealthBar:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L36	@cond_branch
	cmp	r0, #0x1
	bgt	.L38	@cond_branch
	cmp	r0, #0
	bne	.L38	@cond_branch
	ldr	r2, .L42
	lsl	r3, r5, #0x4
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x10
	b	.L41
.L43:
	.align	2, 0
.L42:
	.word	gSprites
.L36:
	ldr	r2, .L44
	lsl	r3, r5, #0x4
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x10
	b	.L41
.L45:
	.align	2, 0
.L44:
	.word	gSprites
.L38:
	ldr	r2, .L46
	lsl	r3, r5, #0x4
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x8
.L41:
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x22]
	strh	r0, [r4, #0x22]
	add	r0, r3, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	strh	r1, [r4, #0x24]
	ldrh	r0, [r0, #0x26]
	strh	r0, [r4, #0x26]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	gSprites
.Lfe6:
	.size	 SpriteCB_HealthBar,.Lfe6-SpriteCB_HealthBar
	.align	2, 0
	.type	 SpriteCB_HealthBoxOther,function
	.thumb_func
SpriteCB_HealthBoxOther:
	push	{r4, r5, lr}
	add	r3, r0, #0
	ldrh	r2, [r3, #0x38]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrh	r0, [r3, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L50
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x40
	strh	r0, [r3, #0x20]
	ldrh	r0, [r1, #0x22]
	strh	r0, [r3, #0x22]
	ldrh	r2, [r1, #0x24]
	strh	r2, [r3, #0x24]
	ldrh	r0, [r1, #0x26]
	strh	r0, [r3, #0x26]
	cmp	r4, #0xff
	beq	.L49	@cond_branch
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x24]
	ldrh	r1, [r3, #0x26]
	strh	r1, [r0, #0x26]
.L49:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L51:
	.align	2, 0
.L50:
	.word	gSprites
.Lfe7:
	.size	 SpriteCB_HealthBoxOther,.Lfe7-SpriteCB_HealthBoxOther
	.align	2, 0
	.globl	SetBattleBarStruct
	.type	 SetBattleBarStruct,function
	.thumb_func
SetBattleBarStruct:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, [sp, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r6, .L53
	ldr	r4, [r6]
	ldr	r5, [r4, #0xc]
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r5, r4, r5
	strb	r1, [r5]
	ldr	r0, [r6]
	ldr	r0, [r0, #0xc]
	add	r4, r4, r0
	str	r2, [r4, #0x4]
	str	r3, [r4, #0x8]
	str	r7, [r4, #0xc]
	ldr	r0, .L53+0x4
	str	r0, [r4, #0x10]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	gBattleSpritesDataPtr
	.word	-0x8000
.Lfe8:
	.size	 SetBattleBarStruct,.Lfe8-SetBattleBarStruct
	.align	2, 0
	.globl	SetHealthboxSpriteInvisible
	.type	 SetHealthboxSpriteInvisible,function
	.thumb_func
SetHealthboxSpriteInvisible:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	DestroyMegaIndicatorSprite
	ldr	r5, .L56
	lsl	r2, r4, #0x4
	add	r2, r2, r4
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	add	r1, r2, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r3, #0x4
	orr	r0, r0, r3
	strb	r0, [r1]
	mov	r0, #0x38
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r3
	strb	r1, [r0]
	ldrh	r1, [r2, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r3
	strb	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	gSprites
.Lfe9:
	.size	 SetHealthboxSpriteInvisible,.Lfe9-SetHealthboxSpriteInvisible
	.align	2, 0
	.globl	SetHealthboxSpriteVisible
	.type	 SetHealthboxSpriteVisible,function
	.thumb_func
SetHealthboxSpriteVisible:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r7, .L62
	lsl	r2, r5, #0x4
	add	r2, r2, r5
	lsl	r2, r2, #0x2
	add	r2, r2, r7
	ldrh	r0, [r2, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r6, #0x5
	neg	r6, r6
	add	r0, r6, #0
	and	r0, r0, r1
	strb	r0, [r3]
	mov	r0, #0x38
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	add	r0, r0, #0x3e
	ldrb	r3, [r0]
	add	r1, r6, #0
	and	r1, r1, r3
	strb	r1, [r0]
	ldrh	r1, [r2, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	add	r1, r6, #0
	and	r1, r1, r2
	strb	r1, [r0]
	add	r0, r4, #0
	bl	GetBattlerSide
	ldr	r1, .L62+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L62+0x8
	add	r1, r1, r2
	add	r1, r1, r0
	ldrb	r2, [r1]
	ldr	r3, .L62+0xc
	ldr	r1, .L62+0x10
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L59	@cond_branch
	add	r0, r5, #0
	bl	GetMegaIndicatorSpriteId
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xff
	beq	.L60	@cond_branch
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	add	r1, r6, #0
	and	r1, r1, r2
	strb	r1, [r0]
	b	.L59
.L63:
	.align	2, 0
.L62:
	.word	gSprites
	.word	gBattleStruct
	.word	0x299
	.word	gBitTable
	.word	gBattlerPartyIndexes
.L60:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	CreateMegaIndicatorSprite
.L59:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 SetHealthboxSpriteVisible,.Lfe10-SetHealthboxSpriteVisible
	.align	2, 0
	.type	 UpdateSpritePos,function
	.thumb_func
UpdateSpritePos:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L65
	lsl	r3, r0, #0x4
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	add	r3, r3, r4
	strh	r1, [r3, #0x20]
	strh	r2, [r3, #0x22]
	pop	{r4}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	gSprites
.Lfe11:
	.size	 UpdateSpritePos,.Lfe11-UpdateSpritePos
	.align	2, 0
	.globl	DestoryHealthboxSprite
	.type	 DestoryHealthboxSprite,function
	.thumb_func
DestoryHealthboxSprite:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	DestroyMegaIndicatorSprite
	ldr	r6, .L68
	lsl	r5, r4, #0x4
	add	r5, r5, r4
	lsl	r5, r5, #0x2
	add	r5, r5, r6
	ldrh	r1, [r5, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	mov	r0, #0x38
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	add	r0, r5, #0
	bl	DestroySprite
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L69:
	.align	2, 0
.L68:
	.word	gSprites
.Lfe12:
	.size	 DestoryHealthboxSprite,.Lfe12-DestoryHealthboxSprite
	.align	2, 0
	.globl	DummyBattleInterfaceFunc
	.type	 DummyBattleInterfaceFunc,function
	.thumb_func
DummyBattleInterfaceFunc:
	bx	lr
.Lfe13:
	.size	 DummyBattleInterfaceFunc,.Lfe13-DummyBattleInterfaceFunc
	.align	2, 0
	.type	 TryToggleHealboxVisibility,function
	.thumb_func
TryToggleHealboxVisibility:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r4, [sp, #0x10]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, sp
	strb	r1, [r0]
	strb	r2, [r0, #0x1]
	strb	r3, [r0, #0x2]
	strb	r4, [r0, #0x3]
	ldr	r0, .L107
	ldr	r2, [r0]
	ldr	r0, .L107+0x4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x20
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0xf
	bne	.L71	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x90
	beq	.L71	@cond_branch
	mov	r3, #0x0
.L99:
	mov	r0, sp
	add	r1, r0, r3
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L98	@cond_branch
	cmp	r5, #0
	beq	.L102	@cond_branch
	cmp	r5, #0x1
	beq	.L103	@cond_branch
	b	.L98
.L108:
	.align	2, 0
.L107:
	.word	gBattleResources
	.word	gBattleAnimAttacker
.L102:
	ldr	r2, .L109
	ldrb	r1, [r1]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L98
.L110:
	.align	2, 0
.L109:
	.word	gSprites
.L103:
	ldr	r2, .L111
	ldrb	r0, [r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L98:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bls	.L99	@cond_branch
.L71:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L112:
	.align	2, 0
.L111:
	.word	gSprites
.Lfe14:
	.size	 TryToggleHealboxVisibility,.Lfe14-TryToggleHealboxVisibility
	.align	2, 0
	.globl	UpdateOamPriorityInAllHealthboxes
	.type	 UpdateOamPriorityInAllHealthboxes,function
	.thumb_func
UpdateOamPriorityInAllHealthboxes:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r9, r0
	b	.L121
.L117:
	ldr	r0, .L122
	add	r0, r0, r9
	ldrb	r0, [r0]
	add	r6, r0, #0
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	ldr	r1, .L122+0x4
	add	r4, r4, r1
	ldrb	r0, [r4, #0x6]
	mov	r8, r0
	ldrh	r0, [r4, #0x38]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r7, r0, #0
	add	r0, r6, #0
	bl	GetMegaIndicatorSpriteId
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	sl, r3
	mov	r1, #0x3
	ldr	r0, [sp, #0x4]
	and	r0, r0, r1
	lsl	r5, r0, #0x2
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r5
	strb	r0, [r4, #0x5]
	mov	r0, r8
	lsl	r1, r0, #0x4
	add	r1, r1, r8
	lsl	r1, r1, #0x2
	ldr	r0, .L122+0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	lsl	r1, r7, #0x4
	add	r1, r1, r7
	lsl	r1, r1, #0x2
	ldr	r0, .L122+0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	cmp	r3, #0xff
	beq	.L118	@cond_branch
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r1, .L122+0x4
	add	r0, r0, r1
	ldrb	r2, [r0, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r5
	strb	r1, [r0, #0x5]
.L118:
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L116	@cond_branch
	mov	r0, sl
	str	r0, [sp]
	ldr	r0, [sp, #0x4]
	add	r1, r6, #0
	mov	r2, r8
	add	r3, r7, #0
	bl	TryToggleHealboxVisibility
.L116:
	mov	r1, #0x1
	add	r9, r9, r1
.L121:
	ldr	r0, .L122+0x8
	ldrb	r0, [r0]
	cmp	r9, r0
	blt	.L117	@cond_branch
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L123:
	.align	2, 0
.L122:
	.word	gHealthboxSpriteIds
	.word	gSprites
	.word	gBattlersCount
.Lfe15:
	.size	 UpdateOamPriorityInAllHealthboxes,.Lfe15-UpdateOamPriorityInAllHealthboxes
	.align	2, 0
	.globl	GetBattlerHealthboxCoords
	.type	 GetBattlerHealthboxCoords,function
	.thumb_func
GetBattlerHealthboxCoords:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	add	r5, r2, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x0
	strh	r0, [r4]
	strh	r0, [r5]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L125	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L126	@cond_branch
	mov	r0, #0x2c
	strh	r0, [r4]
	mov	r0, #0x1e
	b	.L137
.L126:
	mov	r0, #0x9e
	strh	r0, [r4]
	mov	r0, #0x58
	b	.L137
.L125:
	add	r0, r6, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L132	@cond_branch
	cmp	r0, #0x1
	bgt	.L136	@cond_branch
	cmp	r0, #0
	beq	.L130	@cond_branch
	b	.L128
.L136:
	cmp	r0, #0x2
	beq	.L131	@cond_branch
	cmp	r0, #0x3
	beq	.L133	@cond_branch
	b	.L128
.L130:
	mov	r0, #0x9f
	strh	r0, [r4]
	mov	r0, #0x4c
	b	.L137
.L131:
	mov	r0, #0xab
	strh	r0, [r4]
	mov	r0, #0x65
	b	.L137
.L132:
	mov	r0, #0x2c
	strh	r0, [r4]
	mov	r0, #0x13
	b	.L137
.L133:
	mov	r0, #0x20
	strh	r0, [r4]
	mov	r0, #0x2c
.L137:
	strh	r0, [r5]
.L128:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 GetBattlerHealthboxCoords,.Lfe16-GetBattlerHealthboxCoords
	.align	2, 0
	.globl	InitBattlerHealthboxCoords
	.type	 InitBattlerHealthboxCoords,function
	.thumb_func
InitBattlerHealthboxCoords:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r5, sp
	add	r5, r5, #0x2
	add	r0, r4, #0
	mov	r1, sp
	add	r2, r5, #0
	bl	GetBattlerHealthboxCoords
	ldr	r0, .L139
	add	r4, r4, r0
	ldrb	r0, [r4]
	mov	r1, sp
	mov	r2, #0x0
	ldrsh	r1, [r1, r2]
	mov	r3, #0x0
	ldrsh	r2, [r5, r3]
	bl	UpdateSpritePos
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L140:
	.align	2, 0
.L139:
	.word	gHealthboxSpriteIds
.Lfe17:
	.size	 InitBattlerHealthboxCoords,.Lfe17-InitBattlerHealthboxCoords
	.align	2, 0
	.type	 UpdateLvlInHealthbox,function
	.thumb_func
UpdateLvlInHealthbox:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	ldr	r1, .L149
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	bl	GetBattlerSide
	ldr	r1, .L149+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L149+0x8
	add	r1, r1, r2
	add	r1, r1, r0
	ldrb	r2, [r1]
	ldr	r3, .L149+0xc
	ldr	r1, .L149+0x10
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L142	@cond_branch
	add	r0, sp, #0x4
	b	.L148
.L150:
	.align	2, 0
.L149:
	.word	gSprites
	.word	gBattleStruct
	.word	0x299
	.word	gBitTable
	.word	gBattlerPartyIndexes
.L142:
	add	r1, sp, #0x4
	mov	r0, #0xf9
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	mov	r0, sp
	add	r0, r0, #0x6
.L148:
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r1, r0, #0
	sub	r1, r1, #0x2
	add	r0, sp, #0x4
	sub	r1, r1, r0
	mov	r0, #0x3
	sub	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	add	r0, sp, #0x14
	str	r0, [sp]
	add	r0, sp, #0x4
	mov	r2, #0x3
	mov	r3, #0x2
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r6, r0, #0
	ldr	r1, .L151
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x4]
	lsl	r0, r0, #0x16
	lsr	r4, r0, #0x11
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L144	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	ldr	r2, .L151+0x4
	add	r1, r4, r2
	cmp	r0, #0
	bne	.L147	@cond_branch
	ldr	r0, .L151+0x8
	add	r1, r4, r0
	b	.L147
.L152:
	.align	2, 0
.L151:
	.word	gSprites
	.word	0x6010420
	.word	0x6010820
.L144:
	ldr	r2, .L153
	add	r1, r4, r2
.L147:
	add	r0, r1, #0
	add	r1, r6, #0
	mov	r2, #0x3
	bl	TextIntoHealthboxObject
	ldr	r0, [sp, #0x14]
	bl	RemoveWindowOnHealthbox
	add	sp, sp, #0x18
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L154:
	.align	2, 0
.L153:
	.word	0x6010400
.Lfe18:
	.size	 UpdateLvlInHealthbox,.Lfe18-UpdateLvlInHealthbox
	.align	2, 0
	.globl	UpdateHpTextInHealthbox
	.type	 UpdateHpTextInHealthbox,function
	.thumb_func
UpdateHpTextInHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x28
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	ldr	r1, .L175
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L156	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L156	@cond_branch
	ldrh	r0, [r4, #0x4]
	lsl	r0, r0, #0x16
	lsr	r5, r0, #0x11
	cmp	r7, #0
	beq	.L157	@cond_branch
	mov	r0, r9
	lsl	r1, r0, #0x10
	asr	r1, r1, #0x10
	add	r0, sp, #0x4
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r0, sp, #0x24
	str	r0, [sp]
	add	r0, sp, #0x4
	mov	r1, #0x0
	mov	r2, #0x5
	mov	r3, #0x2
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r4, r0, #0
	ldr	r1, .L175+0x4
	add	r0, r5, r1
	add	r1, r4, #0
	b	.L174
.L176:
	.align	2, 0
.L175:
	.word	gSprites
	.word	0x6010b40
.L157:
	mov	r2, r9
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	add	r0, sp, #0x4
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r1, sp, #0x4
	mov	r0, #0xba
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	add	r0, sp, #0x24
	str	r0, [sp]
	add	r0, r1, #0
	mov	r1, #0x4
	mov	r2, #0x5
	mov	r3, #0x2
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r4, r0, #0
	ldr	r1, .L177
	add	r0, r5, r1
	add	r1, r4, #0
	mov	r2, #0x1
	bl	HpTextIntoHealthboxObject
	ldr	r2, .L177+0x4
	add	r0, r5, r2
	add	r1, r4, #0
	add	r1, r1, #0x20
.L174:
	mov	r2, #0x2
	bl	HpTextIntoHealthboxObject
	ldr	r0, [sp, #0x24]
	bl	RemoveWindowOnHealthbox
	b	.L159
.L178:
	.align	2, 0
.L177:
	.word	0x60103e0
	.word	0x6010b00
.L156:
	ldr	r1, .L179
	add	r0, sp, #0x4
	mov	r2, #0x14
	bl	memcpy
	ldr	r1, .L179+0x4
	lsl	r4, r6, #0x4
	add	r0, r4, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r8, r0
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r4
	cmp	r0, #0x1
	bne	.L160	@cond_branch
	mov	r0, r9
	lsl	r1, r0, #0x10
	asr	r1, r1, #0x10
	add	r0, r6, #0
	add	r2, r7, #0
	bl	UpdateHpTextInHealthboxInDoubles
	b	.L159
.L180:
	.align	2, 0
.L179:
	.word	sUnknown_0832C3C4
	.word	gSprites
.L160:
	ldr	r0, .L181
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L159	@cond_branch
	mov	r1, r8
	ldrh	r0, [r1, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L163	@cond_branch
	mov	r2, #0x59
	mov	r8, r2
	cmp	r7, #0
	bne	.L166	@cond_branch
	mov	r0, #0x1d
	mov	r8, r0
	b	.L166
.L182:
	.align	2, 0
.L181:
	.word	gBattleSpritesDataPtr
.L163:
	mov	r1, #0x31
	mov	r8, r1
	cmp	r7, #0
	bne	.L166	@cond_branch
	mov	r2, #0x15
	mov	r8, r2
.L166:
	mov	r0, sp
	add	r0, r0, #0xa
	mov	r2, r9
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x2
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L183
	ldr	r0, [r0]
	mov	r1, #0xba
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x9
	add	r2, sp, #0x4
	bl	RenderTextFont9
	mov	r4, #0x0
	ldr	r1, .L183+0x4
	mov	r2, sl
	add	r0, r2, r6
	lsl	r0, r0, #0x2
	add	r5, r0, r1
.L172:
	ldr	r0, .L183
	ldr	r0, [r0]
	mov	r1, #0xba
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r4, #0x6
	add	r1, r1, #0x20
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, r8
	add	r1, r1, r4
	lsl	r1, r1, #0x5
	ldr	r2, .L183+0x8
	add	r1, r1, r2
	ldr	r2, .L183+0xc
	bl	CpuSet
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L172	@cond_branch
.L159:
	add	sp, sp, #0x28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L184:
	.align	2, 0
.L183:
	.word	gMonSpritesGfxPtr
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
.Lfe19:
	.size	 UpdateHpTextInHealthbox,.Lfe19-UpdateHpTextInHealthbox
	.align	2, 0
	.type	 UpdateHpTextInHealthboxInDoubles,function
	.thumb_func
UpdateHpTextInHealthboxInDoubles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x30
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	mov	sl, r4
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	ldr	r5, .L204
	lsl	r0, r0, #0x4
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	add	r7, r0, r5
	ldrh	r0, [r7, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L186	@cond_branch
	ldr	r0, .L204+0x4
	ldr	r1, [r0]
	mov	r2, #0x3a
	ldrsh	r0, [r7, r2]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB2025
	b	.L190	@long jump
.LCB2025:
	mov	r3, #0x38
	ldrsh	r1, [r7, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r0, [r0, #0x4]
	lsl	r0, r0, #0x16
	lsr	r5, r0, #0x11
	ldr	r0, .L204+0x8
	add	r6, r5, r0
	mov	r0, r8
	cmp	r0, #0
	beq	.L188	@cond_branch
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	add	r0, sp, #0x4
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r0, sp, #0x28
	str	r0, [sp]
	add	r0, sp, #0x4
	mov	r1, #0x0
	mov	r2, #0x5
	mov	r3, #0x0
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r4, r0, #0
	ldr	r1, .L204+0xc
	add	r0, r5, r1
	add	r1, r4, #0
	mov	r2, #0x2
	bl	HpTextIntoHealthboxObject
	ldr	r0, [sp, #0x28]
	bl	RemoveWindowOnHealthbox
	mov	r0, #0x74
	bl	GetHealthboxElementGfxPtr
	ldrh	r1, [r7, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L204+0x10
	add	r1, r1, r2
	ldr	r2, .L204+0x14
	bl	CpuSet
	b	.L190
.L205:
	.align	2, 0
.L204:
	.word	gSprites
	.word	gBattleSpritesDataPtr
	.word	0x6010000
	.word	0x60100c0
	.word	0x6010680
	.word	0x4000008
.L188:
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	add	r0, sp, #0x4
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r1, sp, #0x4
	mov	r0, #0xba
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	add	r0, sp, #0x28
	str	r0, [sp]
	add	r0, r1, #0
	mov	r1, #0x4
	mov	r2, #0x5
	mov	r3, #0x0
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r4, r0, #0
	add	r0, r6, #0
	mov	r1, #0x0
	mov	r2, #0x3
	bl	FillHealthboxObject
	ldr	r3, .L206
	add	r0, r5, r3
	add	r1, r4, #0
	mov	r2, #0x3
	bl	HpTextIntoHealthboxObject
	ldr	r0, [sp, #0x28]
	bl	RemoveWindowOnHealthbox
	b	.L190
.L207:
	.align	2, 0
.L206:
	.word	0x6010060
.L186:
	ldr	r1, .L208
	add	r0, sp, #0x4
	mov	r2, #0x14
	bl	memcpy
	ldrh	r0, [r7, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x2c]
	ldr	r0, .L208+0x4
	ldr	r0, [r0]
	ldr	r1, [r0]
	ldr	r2, [sp, #0x2c]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB2171
	b	.L190	@long jump
.LCB2171:
	mov	r6, #0x4
	mov	r3, r8
	neg	r0, r3
	orr	r0, r0, r3
	asr	r0, r0, #0x1f
	and	r6, r6, r0
	ldrh	r0, [r7, #0x38]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, sp
	add	r0, r0, #0xa
	mov	r2, sl
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	mov	r3, r8
	cmp	r3, #0
	bne	.L193	@cond_branch
	ldr	r1, .L208+0x8
	bl	StringCopy
.L193:
	ldr	r0, .L208+0xc
	ldr	r0, [r0]
	mov	r1, #0xba
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x9
	add	r2, sp, #0x4
	bl	RenderTextFont9
	add	r4, r6, #0
	add	r0, r4, #0x3
	cmp	r4, r0
	bge	.L195	@cond_branch
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r5, r0, r5
.L197:
	cmp	r4, #0x2
	bhi	.L198	@cond_branch
	ldr	r0, .L208+0xc
	ldr	r0, [r0]
	mov	r2, #0xba
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	sub	r1, r4, r6
	lsl	r1, r1, #0x6
	add	r1, r1, #0x20
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r4, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x5
	ldr	r3, .L208+0x10
	add	r1, r1, r3
	ldr	r2, .L208+0x14
	bl	CpuSet
	b	.L196
.L209:
	.align	2, 0
.L208:
	.word	sUnknown_0832C3D8
	.word	gBattleSpritesDataPtr
	.word	gText_Slash
	.word	gMonSpritesGfxPtr
	.word	0x6010000
	.word	0x4000008
.L198:
	ldr	r0, .L210
	ldr	r0, [r0]
	mov	r1, #0xba
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	sub	r1, r4, r6
	lsl	r1, r1, #0x6
	add	r1, r1, #0x20
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r4, r1
	lsl	r1, r1, #0x5
	ldr	r2, .L210+0x4
	add	r1, r1, r2
	ldr	r2, .L210+0x8
	bl	CpuSet
	add	r4, r4, #0x1
.L196:
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0x3
	cmp	r4, r0
	blt	.L197	@cond_branch
.L195:
	mov	r3, r8
	cmp	r3, #0
	bne	.L201	@cond_branch
	ldr	r0, .L210
	ldr	r0, [r0]
	mov	r1, #0xba
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r0, [r0]
	add	r0, r0, #0xe0
	ldr	r1, .L210+0xc
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	add	r1, r1, #0x80
	ldr	r5, .L210+0x10
	add	r1, r1, r5
	ldr	r2, .L210+0x8
	bl	CpuSet
	mov	r2, r8
	str	r2, [sp, #0x24]
	add	r0, sp, #0x24
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	add	r1, r1, r5
	ldr	r2, .L210+0x14
	bl	CpuSet
	b	.L190
.L211:
	.align	2, 0
.L210:
	.word	gMonSpritesGfxPtr
	.word	0x6010020
	.word	0x4000008
	.word	gSprites
	.word	0x6010000
	.word	0x5000008
.L201:
	ldr	r0, [sp, #0x2c]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L190	@cond_branch
	mov	r0, #0x74
	bl	GetHealthboxElementGfxPtr
	ldr	r2, .L212
	mov	r3, r9
	lsl	r1, r3, #0x4
	add	r1, r1, r9
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	mov	r2, #0xd0
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	ldr	r2, .L212+0x4
	add	r1, r1, r2
	ldr	r2, .L212+0x8
	bl	CpuSet
.L190:
	add	sp, sp, #0x30
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L213:
	.align	2, 0
.L212:
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
.Lfe20:
	.size	 UpdateHpTextInHealthboxInDoubles,.Lfe20-UpdateHpTextInHealthboxInDoubles
	.align	2, 0
	.type	 PrintSafariMonInfo,function
	.thumb_func
PrintSafariMonInfo:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x14]
	ldr	r1, .L242
	mov	r0, sp
	mov	r2, #0x14
	bl	memcpy
	ldr	r1, .L242+0x4
	ldr	r2, [sp, #0x14]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	ldr	r1, .L242+0x8
	ldr	r2, [r1]
	mov	r3, #0xba
	lsl	r3, r3, #0x1
	add	r2, r2, r3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x7
	mov	r0, #0xa4
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldr	r0, [r2]
	add	r6, r0, r1
	mov	r1, #0x5
	mov	r8, r1
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetNature
	lsl	r0, r0, #0x18
	mov	r4, sp
	add	r4, r4, #0x6
	ldr	r1, .L242+0xc
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	StringCopy
	add	r0, r6, #0
	mov	r1, #0x9
	mov	r2, sp
	bl	RenderTextFont9
	mov	r7, #0x6
	mov	r5, #0x0
	mov	r2, sp
	add	r2, r2, #0x9
	str	r2, [sp, #0x1c]
.L218:
	mov	r3, sp
	add	r0, r3, r7
	ldrb	r1, [r0]
	add	r0, r1, #0
	sub	r0, r0, #0x37
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x13
	bls	.L220	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x79
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x13
	bhi	.L219	@cond_branch
.L220:
	mov	r0, #0x2c
	b	.L221
.L243:
	.align	2, 0
.L242:
	.word	sUnknown_0832C3C4
	.word	gSprites
	.word	gMonSpritesGfxPtr
	.word	gNatureNamePointers
.L219:
	add	r0, r1, #0
	sub	r0, r0, #0x4b
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L223	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x65
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L222	@cond_branch
.L223:
	mov	r0, #0x2d
	b	.L221
.L222:
	mov	r0, #0x2b
.L221:
	bl	GetHealthboxElementGfxPtr
	lsl	r1, r5, #0x6
	add	r1, r6, r1
	ldr	r2, .L244
	bl	CpuSet
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r7, r7, #0x1
	cmp	r5, r8
	bcc	.L218	@cond_branch
	mov	r7, #0x1
	ldr	r0, [sp, #0x14]
	lsl	r0, r0, #0x4
	str	r0, [sp, #0x18]
	mov	r1, #0x1
	add	r1, r1, r8
	mov	r9, r1
	cmp	r7, r9
	bge	.L227	@cond_branch
	ldr	r1, .L244+0x4
	ldr	r2, .L244
	mov	sl, r2
	ldr	r3, [sp, #0x14]
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r8, r0
.L229:
	mov	r1, r8
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	add	r5, r7, #0
	cmp	r7, #0
	bge	.L230	@cond_branch
	add	r5, r7, #0x7
.L230:
	asr	r5, r5, #0x3
	lsl	r4, r5, #0x3
	sub	r4, r7, r4
	add	r0, r0, r4
	lsl	r5, r5, #0x6
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	ldr	r2, .L244+0x8
	add	r1, r0, r2
	add	r0, r6, #0
	mov	r2, sl
	bl	CpuSet
	add	r6, r6, #0x20
	mov	r3, r8
	ldrh	r0, [r3, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	add	r4, r4, #0x8
	add	r0, r0, r4
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	ldr	r2, .L244+0x8
	add	r1, r0, r2
	add	r0, r6, #0
	mov	r2, sl
	bl	CpuSet
	add	r6, r6, #0x20
	add	r7, r7, #0x1
	cmp	r7, r9
	blt	.L229	@cond_branch
.L227:
	ldr	r6, .L244+0x4
	ldr	r3, [sp, #0x18]
	ldr	r1, [sp, #0x14]
	add	r0, r3, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r4, [r0, #0x38]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L244+0xc
	ldr	r0, [r5]
	add	r0, r0, #0x7b
	ldrb	r1, [r0]
	mov	r0, sp
	add	r0, r0, #0x6
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r0, [r5]
	add	r0, r0, #0x7a
	ldrb	r1, [r0]
	ldr	r0, [sp, #0x1c]
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	mov	r1, sp
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	mov	r0, #0xba
	strb	r0, [r1, #0x8]
	ldr	r5, .L244+0x10
	ldr	r0, [r5]
	mov	r2, #0xba
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x9
	mov	r2, sp
	bl	RenderTextFont9
	mov	r7, #0x0
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r6, r0, r6
	mov	r4, #0x20
.L238:
	cmp	r7, #0x1
	bgt	.L239	@cond_branch
	ldr	r0, [r5]
	mov	r3, #0xba
	lsl	r3, r3, #0x1
	add	r0, r0, r3
	ldr	r0, [r0]
	add	r0, r0, r4
	ldrh	r1, [r6, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r2, r7, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x5
	ldr	r2, .L244+0x8
	add	r1, r1, r2
	ldr	r2, .L244
	bl	CpuSet
	b	.L237
.L245:
	.align	2, 0
.L244:
	.word	0x4000008
	.word	gSprites
	.word	0x6010000
	.word	gBattleStruct
	.word	gMonSpritesGfxPtr
.L239:
	ldr	r0, [r5]
	mov	r3, #0xba
	lsl	r3, r3, #0x1
	add	r0, r0, r3
	ldr	r0, [r0]
	add	r0, r0, r4
	ldrh	r1, [r6, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r7, r1
	lsl	r1, r1, #0x5
	ldr	r2, .L246
	add	r1, r1, r2
	ldr	r2, .L246+0x4
	bl	CpuSet
.L237:
	add	r4, r4, #0x40
	add	r7, r7, #0x1
	cmp	r7, #0x4
	ble	.L238	@cond_branch
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L247:
	.align	2, 0
.L246:
	.word	0x60100c0
	.word	0x4000008
.Lfe21:
	.size	 PrintSafariMonInfo,.Lfe21-PrintSafariMonInfo
	.align	2, 0
	.globl	SwapHpBarsWithHpText
	.type	 SwapHpBarsWithHpText,function
	.thumb_func
SwapHpBarsWithHpText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	mov	r9, r0
	ldr	r0, .L268
	ldrb	r0, [r0]
	cmp	r9, r0
	blt	.LCB2803
	b	.L250	@long jump
.LCB2803:
	ldr	r1, .L268+0x4
	mov	sl, r1
	ldr	r2, .L268+0x8
	mov	r8, r2
.L252:
	ldr	r0, .L268+0xc
	mov	r1, r9
	add	r6, r1, r0
	ldrb	r1, [r6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, sl
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L268+0x10
	cmp	r1, r0
	beq	.LCB2828
	b	.L251	@long jump
.LCB2828:
	mov	r2, r9
	lsl	r0, r2, #0x18
	lsr	r7, r0, #0x18
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB2838
	b	.L251	@long jump
.LCB2838:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L254	@cond_branch
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB2851
	b	.L251	@long jump
.LCB2851:
.L254:
	ldr	r5, .L268+0x14
	ldr	r0, [r5]
	ldr	r3, [r0]
	mov	r0, r9
	lsl	r4, r0, #0x2
	add	r3, r4, r3
	ldr	r0, [r3]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1f
	mov	r2, #0x1
	eor	r2, r2, r0
	lsl	r2, r2, #0x4
	mov	ip, r2
	ldrb	r0, [r3]
	mov	r2, #0x11
	neg	r2, r2
	add	r1, r2, #0
	and	r0, r0, r1
	mov	r1, ip
	orr	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, [r5]
	ldr	r0, [r0]
	add	r4, r4, r0
	ldr	r0, [r4]
	lsl	r0, r0, #0x1b
	lsr	r4, r0, #0x1f
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L255	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB2900
	b	.L251	@long jump
.LCB2900:
	ldr	r0, .L268+0x18
	ldr	r2, [r0]
	mov	r0, #0x80
	and	r2, r2, r0
	cmp	r2, #0
	beq	.LCB2906
	b	.L251	@long jump
.LCB2906:
	cmp	r4, #0x1
	bne	.L258	@cond_branch
	ldrb	r1, [r6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r0, [r0, #0x38]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	str	r2, [sp]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L268+0x1c
	add	r1, r1, r2
	mov	r0, sp
	ldr	r2, .L268+0x20
	bl	CpuSet
	ldrb	r4, [r6]
	mov	r1, r8
	ldrh	r0, [r1]
	mov	r2, #0x64
	mul	r0, r0, r2
	ldr	r1, .L268+0x24
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x0
	bl	UpdateHpTextInHealthboxInDoubles
	ldrb	r4, [r6]
	mov	r2, r8
	ldrh	r0, [r2]
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r2, .L268+0x24
	b	.L267
.L269:
	.align	2, 0
.L268:
	.word	gBattlersCount
	.word	gSprites
	.word	gBattlerPartyIndexes
	.word	gHealthboxSpriteIds
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattleTypeFlags
	.word	0x6010000
	.word	0x5000040
	.word	gPlayerParty
.L258:
	ldrb	r0, [r6]
	bl	UpdateStatusIconInHealthbox
	ldrb	r0, [r6]
	mov	r2, r8
	ldrh	r1, [r2]
	mov	r2, #0x64
	mul	r1, r1, r2
	ldr	r2, .L270
	add	r1, r1, r2
	mov	r2, #0x5
	bl	UpdateHealthboxAttribute
	mov	r0, #0x75
	bl	GetHealthboxElementGfxPtr
	ldrb	r2, [r6]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, sl
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L270+0x4
	add	r1, r1, r2
	ldr	r2, .L270+0x8
	bl	CpuSet
	b	.L260
.L271:
	.align	2, 0
.L270:
	.word	gPlayerParty
	.word	0x6010680
	.word	0x4000008
.L255:
	cmp	r4, #0x1
	bne	.L261	@cond_branch
	ldr	r0, .L272
	ldr	r2, [r0]
	mov	r0, #0x80
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L262	@cond_branch
	ldrb	r0, [r6]
	mov	r2, r8
	ldrh	r1, [r2]
	mov	r2, #0x64
	mul	r1, r1, r2
	ldr	r2, .L272+0x4
	add	r1, r1, r2
	bl	PrintSafariMonInfo
	b	.L260
.L273:
	.align	2, 0
.L272:
	.word	gBattleTypeFlags
	.word	gEnemyParty
.L262:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r0, [r0, #0x38]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	str	r2, [sp]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r0, .L274
	add	r1, r1, r0
	mov	r0, sp
	ldr	r2, .L274+0x4
	bl	CpuSet
	ldrb	r4, [r6]
	mov	r1, r8
	ldrh	r0, [r1]
	mov	r2, #0x64
	mul	r0, r0, r2
	ldr	r1, .L274+0x8
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x0
	bl	UpdateHpTextInHealthboxInDoubles
	ldrb	r4, [r6]
	mov	r2, r8
	ldrh	r0, [r2]
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r2, .L274+0x8
.L267:
	add	r0, r0, r2
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x1
	bl	UpdateHpTextInHealthboxInDoubles
	b	.L260
.L275:
	.align	2, 0
.L274:
	.word	0x6010000
	.word	0x5000040
	.word	gEnemyParty
.L261:
	ldrb	r0, [r6]
	bl	UpdateStatusIconInHealthbox
	ldrb	r0, [r6]
	mov	r2, r8
	ldrh	r1, [r2]
	mov	r5, #0x64
	mul	r1, r1, r5
	ldr	r4, .L276
	add	r1, r1, r4
	mov	r2, #0x5
	bl	UpdateHealthboxAttribute
	ldr	r0, .L276+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L260	@cond_branch
	ldrb	r0, [r6]
	mov	r2, r8
	ldrh	r1, [r2]
	mul	r1, r1, r5
	add	r1, r1, r4
	mov	r2, #0x4
	bl	UpdateHealthboxAttribute
.L260:
	ldr	r0, .L276+0x8
	add	r0, r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r1, [r0, #0x3c]
	mov	r2, #0x1
	eor	r1, r1, r2
	strh	r1, [r0, #0x3c]
.L251:
	mov	r0, #0x2
	add	r8, r8, r0
	mov	r1, #0x1
	add	r9, r9, r1
	ldr	r0, .L276+0xc
	ldrb	r0, [r0]
	cmp	r9, r0
	bge	.LCB3195
	b	.L252	@long jump
.LCB3195:
.L250:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L277:
	.align	2, 0
.L276:
	.word	gEnemyParty
	.word	gBattleTypeFlags
	.word	gHealthboxSpriteIds
	.word	gBattlersCount
.Lfe22:
	.size	 SwapHpBarsWithHpText,.Lfe22-SwapHpBarsWithHpText
	.align	2, 0
	.globl	ChangeMegaTriggerSprite
	.type	 ChangeMegaTriggerSprite,function
	.thumb_func
ChangeMegaTriggerSprite:
	push	{lr}
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r2, .L279
	add	r0, r0, r2
	bl	StartSpriteAnim
	pop	{r0}
	bx	r0
.L280:
	.align	2, 0
.L279:
	.word	gSprites
.Lfe23:
	.size	 ChangeMegaTriggerSprite,.Lfe23-ChangeMegaTriggerSprite
	.align	2, 0
	.globl	CreateMegaTriggerSprite
	.type	 CreateMegaTriggerSprite,function
	.thumb_func
CreateMegaTriggerSprite:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldr	r0, .L287
	bl	LoadSpritePalette
	ldr	r0, .L287+0x4
	bl	GetSpriteTileStartByTag
	lsl	r0, r0, #0x10
	ldr	r1, .L287+0x8
	cmp	r0, r1
	bne	.L282	@cond_branch
	ldr	r0, .L287+0xc
	bl	LoadSpriteSheet
.L282:
	ldr	r4, .L287+0x10
	ldr	r0, [r4]
	mov	r6, #0xab
	lsl	r6, r6, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L283	@cond_branch
	ldr	r0, .L287+0x14
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L284	@cond_branch
	ldr	r0, .L287+0x18
	ldr	r3, .L287+0x1c
	ldr	r1, .L287+0x20
	add	r1, r5, r1
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrh	r1, [r2, #0x20]
	sub	r1, r1, #0xf
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	ldrh	r2, [r2, #0x22]
	add	r2, r2, #0x4
	b	.L286
.L288:
	.align	2, 0
.L287:
	.word	sSpritePalette_MegaTrigger
	.word	0xd777
	.word	-0x10000
	.word	sSpriteSheet_MegaTrigger
	.word	gBattleStruct
	.word	gBattleTypeFlags
	.word	sSpriteTemplate_MegaTrigger
	.word	gSprites
	.word	gHealthboxSpriteIds
.L284:
	ldr	r0, .L289
	ldr	r3, .L289+0x4
	ldr	r1, .L289+0x8
	add	r1, r5, r1
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrh	r1, [r2, #0x20]
	sub	r1, r1, #0xf
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	ldrh	r2, [r2, #0x22]
	add	r2, r2, #0xb
.L286:
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r1, [r4]
	add	r1, r1, r6
	strb	r0, [r1]
.L283:
	ldr	r4, .L289+0x4
	ldr	r0, .L289+0xc
	ldr	r2, [r0]
	mov	r0, #0xab
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r3, #0x0
	strh	r5, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r3, [r0, #0x30]
	ldrb	r0, [r2]
	add	r1, r7, #0
	bl	ChangeMegaTriggerSprite
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L290:
	.align	2, 0
.L289:
	.word	sSpriteTemplate_MegaTrigger
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gBattleStruct
.Lfe24:
	.size	 CreateMegaTriggerSprite,.Lfe24-CreateMegaTriggerSprite
	.align	2, 0
	.type	 SpriteCb_MegaTrigger,function
	.thumb_func
SpriteCb_MegaTrigger:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	ldr	r0, .L305
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L292	@cond_branch
	mov	r0, #0xf
	mov	r8, r0
	mov	r1, #0x1f
	mov	ip, r1
	mov	r6, #0x1e
	mov	r7, #0x4
	neg	r7, r7
	b	.L293
.L306:
	.align	2, 0
.L305:
	.word	gBattleTypeFlags
.L292:
	mov	r0, #0xf
	mov	r8, r0
	mov	r1, #0x1f
	mov	ip, r1
	mov	r6, #0x1e
	mov	r7, #0xb
	neg	r7, r7
.L293:
	mov	r1, #0x30
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L294	@cond_branch
	mov	r0, #0x20
	ldrsh	r4, [r5, r0]
	ldr	r2, .L307
	ldr	r3, .L307+0x4
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x20
	ldrsh	r0, [r0, r1]
	mov	r1, r8
	sub	r0, r0, r1
	add	r6, r2, #0
	cmp	r4, r0
	beq	.L295	@cond_branch
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x20]
.L295:
	mov	r0, #0x20
	ldrsh	r2, [r5, r0]
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x20
	ldrsh	r0, [r0, r1]
	mov	r1, ip
	sub	r0, r0, r1
	cmp	r2, r0
	blt	.L296	@cond_branch
	ldrb	r0, [r5, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x8
	b	.L303
.L308:
	.align	2, 0
.L307:
	.word	gSprites
	.word	gHealthboxSpriteIds
.L296:
	ldrb	r0, [r5, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
.L303:
	orr	r1, r1, r0
	strb	r1, [r5, #0x5]
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r0, [r0, #0x22]
	sub	r0, r0, r7
	strh	r0, [r5, #0x22]
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r0, [r0, #0x26]
	sub	r0, r0, r7
	strh	r0, [r5, #0x26]
	mov	r0, #0x20
	ldrsh	r2, [r5, r0]
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x20
	ldrsh	r0, [r0, r1]
	mov	r1, r8
	sub	r0, r0, r1
	cmp	r2, r0
	bne	.L299	@cond_branch
	bl	DestroyMegaTriggerSprite
	b	.L299
.L294:
	mov	r0, #0x20
	ldrsh	r4, [r5, r0]
	ldr	r2, .L309
	ldr	r3, .L309+0x4
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x20
	ldrsh	r0, [r0, r1]
	sub	r0, r0, r6
	add	r6, r2, #0
	cmp	r4, r0
	beq	.L300	@cond_branch
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x20]
.L300:
	mov	r0, #0x20
	ldrsh	r2, [r5, r0]
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x20
	ldrsh	r0, [r0, r1]
	mov	r1, ip
	sub	r0, r0, r1
	cmp	r2, r0
	blt	.L301	@cond_branch
	ldrb	r0, [r5, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x8
	b	.L304
.L310:
	.align	2, 0
.L309:
	.word	gSprites
	.word	gHealthboxSpriteIds
.L301:
	ldrb	r0, [r5, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
.L304:
	orr	r1, r1, r0
	strb	r1, [r5, #0x5]
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r0, [r0, #0x22]
	sub	r0, r0, r7
	strh	r0, [r5, #0x22]
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r0, [r0, #0x26]
	sub	r0, r0, r7
	strh	r0, [r5, #0x26]
.L299:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 SpriteCb_MegaTrigger,.Lfe25-SpriteCb_MegaTrigger
	.align	2, 0
	.globl	IsMegaTriggerSpriteActive
	.type	 IsMegaTriggerSpriteActive,function
	.thumb_func
IsMegaTriggerSpriteActive:
	push	{r4, lr}
	ldr	r4, .L318
	add	r0, r4, #0
	bl	GetSpriteTileStartByTag
	lsl	r0, r0, #0x10
	ldr	r1, .L318+0x4
	cmp	r0, r1
	beq	.L317	@cond_branch
	add	r0, r4, #0
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L314	@cond_branch
.L317:
	mov	r0, #0x0
	b	.L316
.L319:
	.align	2, 0
.L318:
	.word	0xd777
	.word	-0x10000
.L314:
	mov	r0, #0x1
.L316:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe26:
	.size	 IsMegaTriggerSpriteActive,.Lfe26-IsMegaTriggerSpriteActive
	.align	2, 0
	.globl	HideMegaTriggerSprite
	.type	 HideMegaTriggerSprite,function
	.thumb_func
HideMegaTriggerSprite:
	push	{r4, r5, lr}
	ldr	r5, .L321
	ldr	r0, [r5]
	mov	r4, #0xab
	lsl	r4, r4, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	ChangeMegaTriggerSprite
	ldr	r2, .L321+0x4
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strh	r1, [r0, #0x30]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L322:
	.align	2, 0
.L321:
	.word	gBattleStruct
	.word	gSprites
.Lfe27:
	.size	 HideMegaTriggerSprite,.Lfe27-HideMegaTriggerSprite
	.align	2, 0
	.globl	DestroyMegaTriggerSprite
	.type	 DestroyMegaTriggerSprite,function
	.thumb_func
DestroyMegaTriggerSprite:
	push	{r4, r5, lr}
	ldr	r4, .L325
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	ldr	r5, .L325+0x4
	ldr	r0, [r5]
	mov	r4, #0xab
	lsl	r4, r4, #0x2
	add	r1, r0, r4
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L324	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L325+0x8
	add	r0, r0, r1
	bl	DestroySprite
.L324:
	ldr	r0, [r5]
	add	r0, r0, r4
	mov	r1, #0xff
	strb	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L326:
	.align	2, 0
.L325:
	.word	0xd777
	.word	gBattleStruct
	.word	gSprites
.Lfe28:
	.size	 DestroyMegaTriggerSprite,.Lfe28-DestroyMegaTriggerSprite
	.section .rodata
	.type	 sIndicatorPosSingles,object
sIndicatorPosSingles:
	.byte	0x35
	.byte	-0x8
	.byte	0x2d
	.byte	-0x8
	.size	 sIndicatorPosSingles,4
	.type	 sIndicatorPosDoubles,object
sIndicatorPosDoubles:
	.byte	0x35
	.byte	-0x8
	.byte	0x2d
	.byte	-0x8
	.byte	0x35
	.byte	-0x8
	.byte	0x2d
	.byte	-0x8
	.size	 sIndicatorPosDoubles,8
.text
	.align	2, 0
	.globl	CreateMegaIndicatorSprite
	.type	 CreateMegaIndicatorSprite,function
	.thumb_func
CreateMegaIndicatorSprite:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r7, r0, #0
	ldr	r0, .L331
	bl	LoadSpritePalette
	ldr	r0, .L331+0x4
	bl	LoadSpriteSheet
	lsl	r4, r7, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, sp
	add	r5, r5, #0x2
	add	r0, r4, #0
	mov	r1, sp
	add	r2, r5, #0
	bl	GetBattlerHealthboxCoords
	ldr	r0, .L331+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L328	@cond_branch
	mov	r4, sp
	mov	r3, sp
	ldr	r1, .L331+0xc
	lsl	r2, r6, #0x1
	add	r0, r2, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrh	r3, [r3]
	add	r0, r0, r3
	strh	r0, [r4]
	add	r1, r1, #0x1
	add	r2, r2, r1
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	ldrh	r1, [r5]
	add	r0, r0, r1
	b	.L330
.L332:
	.align	2, 0
.L331:
	.word	sSpritePalette_MegaIndicator
	.word	sSpriteSheet_MegaIndicator
	.word	gBattleTypeFlags
	.word	sIndicatorPosDoubles
.L328:
	mov	r4, sp
	mov	r3, sp
	ldr	r1, .L333
	lsl	r2, r6, #0x1
	add	r0, r2, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrh	r3, [r3]
	add	r0, r0, r3
	strh	r0, [r4]
	add	r1, r1, #0x1
	add	r2, r2, r1
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	ldrh	r2, [r5]
	add	r0, r0, r2
.L330:
	strh	r0, [r5]
	ldr	r0, .L333+0x4
	mov	r1, sp
	mov	r3, #0x0
	ldrsh	r1, [r1, r3]
	mov	r3, #0x0
	ldrsh	r2, [r5, r3]
	mov	r3, #0x0
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L333+0x8
	ldr	r1, .L333+0xc
	add	r1, r7, r1
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r2, [r1, #0x6]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	strh	r0, [r1, #0x3a]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	strh	r7, [r1, #0x2e]
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L334:
	.align	2, 0
.L333:
	.word	sIndicatorPosSingles
	.word	sSpriteTemplate_MegaIndicator
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe29:
	.size	 CreateMegaIndicatorSprite,.Lfe29-CreateMegaIndicatorSprite
	.align	2, 0
	.globl	DestroyMegaIndicatorSprite
	.type	 DestroyMegaIndicatorSprite,function
	.thumb_func
DestroyMegaIndicatorSprite:
	push	{r4, r5, lr}
	ldr	r5, .L344
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r1, [r1, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x2e
	add	r4, r0, r1
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xff
	beq	.L336	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	mov	r0, #0xff
	strh	r0, [r4, #0xc]
.L336:
	mov	r2, #0x0
	ldr	r4, .L344+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x3a
	ldrsh	r0, [r0, r1]
	cmp	r0, #0xff
	bne	.L338	@cond_branch
	add	r3, r5, #0
.L339:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bhi	.L338	@cond_branch
	add	r0, r2, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x3a
	ldrsh	r0, [r0, r1]
	cmp	r0, #0xff
	beq	.L339	@cond_branch
.L338:
	cmp	r2, #0x4
	bne	.L343	@cond_branch
	ldr	r4, .L344+0x8
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
.L343:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L345:
	.align	2, 0
.L344:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	0xd778
.Lfe30:
	.size	 DestroyMegaIndicatorSprite,.Lfe30-DestroyMegaIndicatorSprite
	.align	2, 0
	.type	 SpriteCb_MegaIndicator,function
	.thumb_func
SpriteCb_MegaIndicator:
	bx	lr
.Lfe31:
	.size	 SpriteCb_MegaIndicator,.Lfe31-SpriteCb_MegaIndicator
	.align	2, 0
	.globl	CreatePartyStatusSummarySprites
	.type	 CreatePartyStatusSummarySprites,function
	.thumb_func
CreatePartyStatusSummarySprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	str	r1, [sp, #0xc]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r4, r2, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x10]
	cmp	r4, #0
	beq	.L349	@cond_branch
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L348	@cond_branch
.L349:
	ldr	r0, [sp, #0x8]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L350	@cond_branch
	mov	r0, #0x0
	mov	r9, r0
	mov	r5, #0x88
	mov	r4, #0x60
	mov	r1, #0x64
	mov	sl, r1
	ldr	r2, .L428
	mov	r8, r2
	b	.L355
.L429:
	.align	2, 0
.L428:
	.word	0xfffb
.L350:
	mov	r3, #0x1
	mov	r9, r3
	cmp	r4, #0
	beq	.L353	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L352	@cond_branch
.L353:
	mov	r5, #0x68
	mov	r4, #0x28
	b	.L354
.L352:
	mov	r5, #0x68
	mov	r4, #0x10
.L354:
	ldr	r6, .L430
	mov	sl, r6
	mov	r0, #0x5
	mov	r8, r0
	b	.L355
.L431:
	.align	2, 0
.L430:
	.word	0xff9c
.L348:
	mov	r1, #0x1
	mov	r9, r1
	mov	r5, #0x68
	mov	r4, #0x28
	ldr	r2, .L432
	mov	sl, r2
	mov	r3, #0x5
	mov	r8, r3
.L355:
	ldr	r0, .L432+0x4
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r0, .L432+0x8
	bl	LoadSpriteSheet
	ldr	r0, .L432+0xc
	bl	LoadSpritePalette
	ldr	r0, .L432+0x10
	bl	LoadSpritePalette
	mov	r0, r9
	lsl	r6, r0, #0x1
	add	r0, r6, r0
	lsl	r0, r0, #0x3
	ldr	r1, .L432+0x14
	add	r0, r0, r1
	lsl	r5, r5, #0x10
	asr	r1, r5, #0x10
	lsl	r4, r4, #0x10
	asr	r2, r4, #0x10
	mov	r3, #0xa
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x14]
	lsl	r0, r0, #0x4
	ldr	r1, [sp, #0x14]
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L432+0x18
	add	r7, r0, r1
	ldr	r1, .L432+0x1c
	add	r0, r7, #0
	bl	SetSubspriteTables
	mov	r2, sl
	strh	r2, [r7, #0x24]
	mov	r3, r8
	strh	r3, [r7, #0x2e]
	str	r5, [sp, #0x1c]
	str	r4, [sp, #0x20]
	mov	r5, r9
	cmp	r5, #0
	beq	.L356	@cond_branch
	ldrh	r0, [r7, #0x20]
	sub	r0, r0, #0x60
	strh	r0, [r7, #0x20]
	ldrb	r1, [r7, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r7, #0x3]
	b	.L357
.L433:
	.align	2, 0
.L432:
	.word	0xff9c
	.word	sStatusSummaryBarSpriteSheet
	.word	sStatusSummaryBallsSpriteSheet
	.word	sStatusSummaryBarSpritePal
	.word	sStatusSummaryBallsSpritePal
	.word	sStatusSummaryBarSpriteTemplates
	.word	gSprites
	.word	sStatusSummaryBar_SubspriteTable
.L356:
	ldrh	r0, [r7, #0x20]
	add	r0, r0, #0x60
	strh	r0, [r7, #0x20]
.L357:
	mov	r0, #0x0
	mov	r8, r0
	ldr	r1, .L434
	mov	sl, r1
	mov	r7, sp
	mov	r2, r9
	add	r0, r6, r2
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x18]
	mov	r6, #0xa
	mov	r5, #0x0
.L361:
	ldr	r0, .L434+0x4
	ldr	r3, [sp, #0x20]
	ldr	r1, .L434+0x8
	add	r2, r3, r1
	ldr	r3, [sp, #0x18]
	add	r0, r3, r0
	ldr	r3, [sp, #0x1c]
	asr	r1, r3, #0x10
	asr	r2, r2, #0x10
	mov	r3, #0x9
	bl	CreateSpriteAtEnd
	strb	r0, [r7]
	ldr	r0, [sp, #0x10]
	cmp	r0, #0
	bne	.L362	@cond_branch
	ldrb	r0, [r7]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, .L434+0xc
	add	r1, r1, r2
	ldr	r0, .L434+0x10
	str	r0, [r1]
.L362:
	ldr	r4, .L434
	mov	r3, r9
	cmp	r3, #0
	bne	.L363	@cond_branch
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	strh	r3, [r0, #0x24]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	mov	r1, r9
	strh	r1, [r0, #0x26]
.L363:
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x0
	mov	r2, sp
	ldrh	r2, [r2, #0x14]
	strh	r2, [r0, #0x2e]
	mov	r3, r9
	cmp	r3, #0
	bne	.L364	@cond_branch
	ldrb	r0, [r7]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x18
	add	r0, r0, r5
	strh	r0, [r1, #0x20]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r6, [r0, #0x30]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x78
	b	.L423
.L435:
	.align	2, 0
.L434:
	.word	gSprites
	.word	sStatusSummaryBallsSpriteTemplates
	.word	-0x40000
	.word	gSprites+0x1c
	.word	SpriteCB_StatusSummaryBallsOnSwitchout
.L364:
	ldrb	r0, [r7]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldrh	r3, [r2, #0x20]
	sub	r3, r3, #0x18
	mov	r1, #0x5
	mov	r0, r8
	sub	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	sub	r3, r3, r0
	strh	r3, [r2, #0x20]
	ldrb	r0, [r7]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	mov	r1, #0x6
	mov	r3, r8
	sub	r1, r1, r3
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	add	r0, r0, #0xa
	strh	r0, [r2, #0x30]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L436
.L423:
	strh	r1, [r0, #0x24]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, r9
	strh	r1, [r0, #0x32]
	add	r7, r7, #0x1
	add	r6, r6, #0x7
	add	r5, r5, #0xa
	mov	r2, #0x1
	add	r8, r8, r2
	mov	r3, r8
	cmp	r3, #0x5
	bgt	.LCB4352
	b	.L361	@long jump
.LCB4352:
	ldr	r0, [sp, #0x8]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB4360
	b	.L367	@long jump
.LCB4360:
	ldr	r0, .L436+0x4
	ldr	r1, [r0]
	mov	r2, #0x40
	and	r1, r1, r2
	cmp	r1, #0
	beq	.L368	@cond_branch
	ldr	r5, .L436+0x8
	mov	sl, r5
	ldr	r6, .L436+0xc
	ldr	r0, .L436+0x10
	add	r7, r0, #0
	ldr	r1, .L436+0x14
	mov	r9, r1
	mov	r4, sp
	ldr	r5, [sp, #0xc]
	mov	r2, #0x5
	mov	r8, r2
.L372:
	ldrh	r0, [r5]
	cmp	r0, sl
	bne	.L373	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x1
	and	r1, r1, r7
	mov	r0, r9
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x1
	strh	r1, [r0, #0x3c]
	b	.L371
.L437:
	.align	2, 0
.L436:
	.word	0xff88
	.word	gBattleTypeFlags
	.word	0xffff
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L373:
	cmp	r0, #0
	bne	.L375	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x3
	b	.L424
.L375:
	ldr	r0, [r5, #0x4]
	cmp	r0, #0
	beq	.L371	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x2
.L424:
	and	r1, r1, r7
	mov	r0, r9
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
.L371:
	add	r4, r4, #0x1
	add	r5, r5, #0x8
	mov	r3, #0x1
	neg	r3, r3
	add	r8, r8, r3
	mov	r0, r8
	cmp	r0, #0
	bge	.L372	@cond_branch
	b	.L392
.L368:
	mov	r1, #0x5
	mov	sl, r1
	mov	r7, #0x0
	ldr	r2, .L438
	mov	r8, r2
	ldr	r3, .L438+0x4
	mov	r9, r3
	ldr	r5, .L438+0x8
	mov	ip, r5
	ldr	r6, [sp, #0xc]
	mov	r5, sp
.L383:
	ldrh	r0, [r6]
	ldr	r1, .L438+0xc
	cmp	r0, r1
	bne	.L384	@cond_branch
	mov	r4, sp
	add	r4, r4, sl
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r8
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x1
	mov	r0, r9
	and	r1, r1, r0
	mov	r0, ip
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	mov	r1, #0x1
	strh	r1, [r0, #0x3c]
	sub	r1, r1, #0x2
	add	sl, sl, r1
	b	.L382
.L439:
	.align	2, 0
.L438:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	0xffff
.L384:
	cmp	r0, #0
	bne	.L386	@cond_branch
	ldrb	r0, [r5]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r8
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x3
	b	.L425
.L386:
	ldr	r1, .L440
	ldr	r0, [r1]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L388	@cond_branch
	ldr	r0, .L440+0x4
	ldr	r0, [r0]
	mov	r2, #0x9d
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	ldr	r2, .L440+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L388	@cond_branch
	ldrb	r0, [r5]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r8
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x3
	b	.L425
.L441:
	.align	2, 0
.L440:
	.word	gBattleTypeFlags
	.word	gBattleStruct
	.word	gBitTable
.L388:
	ldr	r0, [r6, #0x4]
	cmp	r0, #0
	beq	.L385	@cond_branch
	ldrb	r0, [r5]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r8
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x2
.L425:
	mov	r0, r9
	and	r1, r1, r0
	mov	r0, ip
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
.L385:
	add	r5, r5, #0x1
.L382:
	add	r6, r6, #0x8
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L383	@cond_branch
	b	.L392
.L367:
	ldr	r0, .L442
	ldr	r1, [r0]
	ldr	r2, .L442+0x4
	and	r1, r1, r2
	cmp	r1, #0
	beq	.L393	@cond_branch
	ldr	r1, .L442+0x8
	mov	sl, r1
	ldr	r6, .L442+0xc
	ldr	r2, .L442+0x10
	add	r7, r2, #0
	ldr	r3, .L442+0x14
	mov	r9, r3
	ldr	r5, [sp, #0xc]
	mov	r4, sp
	add	r4, r4, #0x5
	mov	r0, #0x5
	mov	r8, r0
.L397:
	ldrh	r0, [r5]
	cmp	r0, sl
	bne	.L398	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x1
	and	r1, r1, r7
	mov	r0, r9
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x1
	strh	r1, [r0, #0x3c]
	b	.L399
.L443:
	.align	2, 0
.L442:
	.word	gBattleTypeFlags
	.word	0x8040
	.word	0xffff
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L398:
	cmp	r0, #0
	bne	.L400	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x3
	b	.L426
.L400:
	ldr	r0, [r5, #0x4]
	cmp	r0, #0
	beq	.L399	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x2
.L426:
	and	r1, r1, r7
	mov	r0, r9
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
.L399:
	sub	r4, r4, #0x1
	add	r5, r5, #0x8
	mov	r1, #0x1
	neg	r1, r1
	add	r8, r8, r1
	mov	r2, r8
	cmp	r2, #0
	bge	.L397	@cond_branch
	b	.L392
.L393:
	mov	r3, #0x0
	mov	r8, r3
	mov	r7, #0x0
	ldr	r5, .L444
	mov	r9, r5
	ldr	r6, .L444+0x4
	mov	ip, r6
	ldr	r0, .L444+0x8
	mov	sl, r0
	ldr	r6, [sp, #0xc]
	mov	r5, sp
	add	r5, r5, #0x5
.L408:
	ldrh	r0, [r6]
	ldr	r1, .L444+0xc
	cmp	r0, r1
	bne	.L409	@cond_branch
	mov	r4, sp
	add	r4, r4, r8
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r9
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x1
	mov	r0, ip
	and	r1, r1, r0
	mov	r0, sl
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	mov	r1, #0x1
	strh	r1, [r0, #0x3c]
	add	r8, r8, r1
	b	.L407
.L445:
	.align	2, 0
.L444:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	0xffff
.L409:
	cmp	r0, #0
	bne	.L411	@cond_branch
	ldrb	r0, [r5]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r9
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x3
	b	.L427
.L411:
	ldr	r1, .L446
	ldr	r0, [r1]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L413	@cond_branch
	ldr	r2, .L446+0x4
	ldr	r0, [r2]
	ldr	r3, .L446+0x8
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r7, #0x2
	ldr	r2, .L446+0xc
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L413	@cond_branch
	ldrb	r0, [r5]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r9
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x3
	b	.L427
.L447:
	.align	2, 0
.L446:
	.word	gBattleTypeFlags
	.word	gBattleStruct
	.word	0x275
	.word	gBitTable
.L413:
	ldr	r0, [r6, #0x4]
	cmp	r0, #0
	beq	.L410	@cond_branch
	ldrb	r0, [r5]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r9
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x2
.L427:
	mov	r0, ip
	and	r1, r1, r0
	mov	r0, sl
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
.L410:
	sub	r5, r5, #0x1
.L407:
	add	r6, r6, #0x8
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L408	@cond_branch
.L392:
	ldr	r0, .L448
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r2, .L448+0x4
	lsl	r3, r4, #0x2
	add	r1, r3, r4
	lsl	r1, r1, #0x3
	add	r0, r1, r2
	mov	r5, sp
	ldrh	r5, [r5, #0x8]
	strh	r5, [r0, #0x8]
	mov	r6, sp
	ldrh	r6, [r6, #0x14]
	strh	r6, [r0, #0xa]
	mov	r0, #0x0
	mov	r8, r0
	add	r0, r2, #0
	add	r0, r0, #0xe
	add	r1, r1, r0
.L420:
	mov	r0, sp
	add	r0, r0, r8
	ldrb	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	mov	r5, #0x1
	add	r8, r8, r5
	mov	r6, r8
	cmp	r6, #0x5
	ble	.L420	@cond_branch
	add	r0, r3, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, sp
	ldrh	r1, [r1, #0x10]
	strh	r1, [r0, #0x1c]
	ldr	r2, [sp, #0x10]
	cmp	r2, #0
	beq	.L422	@cond_branch
	ldr	r0, .L448+0x8
	ldr	r0, [r0]
	ldr	r3, [r0, #0x8]
	ldrb	r2, [r3, #0x9]
	lsl	r1, r2, #0x1b
	lsr	r1, r1, #0x1d
	add	r1, r1, #0x1
	mov	r0, #0x7
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x1d
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x9]
.L422:
	mov	r0, #0x72
	mov	r1, #0x0
	bl	PlaySE12WithPanning
	add	r0, r4, #0
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L449:
	.align	2, 0
.L448:
	.word	TaskDummy
	.word	gTasks
	.word	gBattleSpritesDataPtr
.Lfe32:
	.size	 CreatePartyStatusSummarySprites,.Lfe32-CreatePartyStatusSummarySprites
	.align	2, 0
	.globl	Task_HidePartyStatusSummary
	.type	 Task_HidePartyStatusSummary,function
	.thumb_func
Task_HidePartyStatusSummary:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	ldr	r2, .L478
	lsl	r3, r0, #0x2
	add	r1, r3, r0
	lsl	r1, r1, #0x3
	add	r0, r1, r2
	ldrb	r7, [r0, #0x1c]
	ldrb	r4, [r0, #0xa]
	mov	r8, r4
	ldrb	r0, [r0, #0x8]
	str	r0, [sp, #0xc]
	mov	r5, #0x0
	str	r3, [sp, #0x10]
	add	r2, r2, #0xe
	add	r2, r1, r2
.L454:
	mov	r0, sp
	add	r1, r0, r5
	ldrh	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L454	@cond_branch
	cmp	r7, #0
	bne	.LCB5092
	b	.L456	@long jump
.LCB5092:
	ldr	r0, .L478+0x4
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x17]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0x20
	bne	.L456	@cond_branch
	ldr	r3, .L478+0x8
	ldr	r0, [r3]
	ldr	r0, [r0, #0x4]
	ldr	r2, [sp, #0xc]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	ldr	r4, [r0, #0x8]
	ldrb	r3, [r4, #0x9]
	lsl	r1, r3, #0x1b
	lsr	r1, r1, #0x1d
	sub	r1, r1, #0x1
	mov	r0, #0x7
	and	r1, r1, r0
	lsl	r2, r1, #0x2
	mov	r0, #0x1d
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r4, #0x9]
	cmp	r1, #0
	bne	.L457	@cond_branch
	mov	r3, r8
	lsl	r5, r3, #0x4
	add	r0, r5, r3
	lsl	r0, r0, #0x2
	ldr	r4, .L478+0xc
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r9, r5
	b	.L458
.L479:
	.align	2, 0
.L478:
	.word	gTasks
	.word	gSaveBlock2Ptr
	.word	gBattleSpritesDataPtr
	.word	gSprites
.L457:
	mov	r4, r8
	lsl	r6, r4, #0x4
	add	r4, r6, r4
	lsl	r4, r4, #0x2
	ldr	r5, .L480
	add	r4, r4, r5
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	FreeSpriteOamMatrix
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	mov	r9, r6
.L458:
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	ldr	r4, .L480
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r5, #0x1
.L462:
	mov	r1, sp
	add	r0, r1, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L462	@cond_branch
	ldr	r0, [sp, #0x8]
	bl	DestroyTask
	b	.L450
.L481:
	.align	2, 0
.L480:
	.word	gSprites
.L456:
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x10
	bl	SetGpuReg
	ldr	r1, .L482
	ldr	r2, [sp, #0x10]
	ldr	r3, [sp, #0x8]
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x10
	strh	r1, [r0, #0x26]
	mov	r5, #0x0
	mov	r4, r8
	lsl	r4, r4, #0x4
	mov	r9, r4
	ldr	r3, .L482+0x4
	mov	r6, #0xd
	neg	r6, r6
	mov	ip, r3
	mov	r4, #0x4
.L467:
	mov	r1, sp
	add	r0, r1, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrb	r2, [r1, #0x1]
	add	r0, r6, #0
	and	r0, r0, r2
	orr	r0, r0, r4
	strb	r0, [r1, #0x1]
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L467	@cond_branch
	mov	r2, r9
	add	r2, r2, r8
	lsl	r2, r2, #0x2
	add	r2, r2, ip
	ldrb	r1, [r2, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	cmp	r7, #0
	bne	.LCB5309
	b	.L469	@long jump
.LCB5309:
	mov	r5, #0x0
	mov	r6, ip
	mov	sl, r5
	add	r3, r6, #0
	add	r3, r3, #0x1c
	mov	r4, sp
	mov	r7, #0x0
.L473:
	ldr	r0, [sp, #0xc]
	str	r3, [sp, #0x14]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r3, [sp, #0x14]
	cmp	r2, #0
	beq	.L474	@cond_branch
	mov	r0, #0x5
	sub	r0, r0, r5
	mov	r1, sp
	add	r2, r1, r0
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r7, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, sl
	strh	r1, [r0, #0x34]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, sl
	strh	r1, [r0, #0x36]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r1, .L482+0x8
	str	r1, [r0]
	ldr	r2, .L482+0x4
	mov	ip, r2
	b	.L472
.L483:
	.align	2, 0
.L482:
	.word	gTasks
	.word	gSprites
	.word	sub_8074158
.L474:
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r7, [r0, #0x30]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x34]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x36]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r1, .L484
	str	r1, [r0]
	ldr	r0, .L484+0x4
	mov	ip, r0
.L472:
	add	r4, r4, #0x1
	add	r7, r7, #0x7
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L473	@cond_branch
	mov	r3, r9
	add	r3, r3, r8
	lsl	r3, r3, #0x2
	mov	r1, ip
	add	r0, r3, r1
	mov	r2, #0x2e
	ldrsh	r1, [r0, r2]
	lsr	r2, r1, #0x1f
	add	r1, r1, r2
	asr	r1, r1, #0x1
	mov	r2, #0x0
	strh	r1, [r0, #0x2e]
	strh	r2, [r0, #0x30]
	mov	r1, ip
	add	r1, r1, #0x1c
	add	r3, r3, r1
	ldr	r1, .L484+0x8
	str	r1, [r3]
	ldr	r1, .L484+0xc
	bl	SetSubspriteTables
	ldr	r1, .L484+0x10
	ldr	r3, [sp, #0x10]
	ldr	r4, [sp, #0x8]
	add	r0, r3, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L484+0x14
	str	r1, [r0]
	b	.L450
.L485:
	.align	2, 0
.L484:
	.word	sub_8074158
	.word	gSprites
	.word	sub_8074090
	.word	sUnknown_0832C2CC
	.word	gTasks
	.word	sub_8073E08
.L469:
	ldr	r0, .L486
	ldr	r2, [sp, #0x10]
	ldr	r3, [sp, #0x8]
	add	r1, r2, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L486+0x4
	str	r0, [r1]
.L450:
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L487:
	.align	2, 0
.L486:
	.word	gTasks
	.word	sub_8073F98
.Lfe33:
	.size	 Task_HidePartyStatusSummary,.Lfe33-Task_HidePartyStatusSummary
	.align	2, 0
	.type	 sub_8073E08,function
	.thumb_func
sub_8073E08:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L492
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1e]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L489	@cond_branch
	ldrh	r0, [r4, #0x26]
	sub	r1, r0, #0x1
	strh	r1, [r4, #0x26]
	lsl	r0, r1, #0x10
	cmp	r0, #0
	blt	.L488	@cond_branch
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
.L489:
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L488	@cond_branch
	ldr	r0, .L492+0x4
	str	r0, [r4]
.L488:
	pop	{r4}
	pop	{r0}
	bx	r0
.L493:
	.align	2, 0
.L492:
	.word	gTasks
	.word	sub_8073E64
.Lfe34:
	.size	 sub_8073E08,.Lfe34-sub_8073E08
	.align	2, 0
	.type	 sub_8073E64,function
	.thumb_func
sub_8073E64:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r7, .L510
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r3, r0, #0x3
	add	r4, r3, r7
	ldrb	r2, [r4, #0x8]
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L495	@cond_branch
	ldrb	r5, [r4, #0xa]
	mov	r4, #0x0
	ldr	r6, .L510+0x4
	add	r0, r7, #0
	add	r0, r0, #0xe
	add	r2, r3, r0
.L499:
	mov	r0, sp
	add	r1, r0, r4
	ldrh	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L499	@cond_branch
	ldr	r0, [r6]
	ldr	r3, [r0, #0x8]
	ldrb	r2, [r3, #0x9]
	lsl	r1, r2, #0x1b
	lsr	r1, r1, #0x1d
	sub	r1, r1, #0x1
	mov	r0, #0x7
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x1d
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x9]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x9]
	mov	r0, #0x1c
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L501	@cond_branch
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	ldr	r4, .L510+0x8
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	b	.L502
.L511:
	.align	2, 0
.L510:
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gSprites
.L501:
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	ldr	r5, .L512
	add	r4, r4, r5
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	FreeSpriteOamMatrix
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
.L502:
	mov	r4, #0x1
	ldr	r5, .L512
.L506:
	mov	r1, sp
	add	r0, r1, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L506	@cond_branch
	b	.L508
.L513:
	.align	2, 0
.L512:
	.word	gSprites
.L495:
	mov	r0, #0x3
	neg	r0, r0
	cmp	r1, r0
	bne	.L508	@cond_branch
	ldr	r0, .L514
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyTask
.L508:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L515:
	.align	2, 0
.L514:
	.word	gBattleSpritesDataPtr
.Lfe35:
	.size	 sub_8073E64,.Lfe35-sub_8073E64
	.align	2, 0
	.type	 sub_8073F98,function
	.thumb_func
sub_8073F98:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	ldr	r7, .L532
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r6, r0, #0x3
	add	r3, r6, r7
	ldrb	r5, [r3, #0x8]
	ldrh	r0, [r3, #0x26]
	sub	r1, r0, #0x1
	strh	r1, [r3, #0x26]
	lsl	r0, r1, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	blt	.L517	@cond_branch
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L518
.L533:
	.align	2, 0
.L532:
	.word	gTasks
.L517:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r2, r0
	bne	.L519	@cond_branch
	ldrb	r3, [r3, #0xa]
	mov	r5, #0x0
	add	r0, r7, #0
	add	r0, r0, #0xe
	add	r2, r6, r0
.L523:
	mov	r0, sp
	add	r1, r0, r5
	ldrh	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L523	@cond_branch
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r4, .L534
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r5, #0x1
.L528:
	mov	r1, sp
	add	r0, r1, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L528	@cond_branch
	b	.L518
.L535:
	.align	2, 0
.L534:
	.word	gSprites
.L519:
	mov	r0, #0x3
	neg	r0, r0
	cmp	r2, r0
	bne	.L518	@cond_branch
	ldr	r0, .L536
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyTask
.L518:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L537:
	.align	2, 0
.L536:
	.word	gBattleSpritesDataPtr
.Lfe36:
	.size	 sub_8073F98,.Lfe36-sub_8073F98
	.align	2, 0
	.type	 SpriteCB_StatusSummaryBar,function
	.thumb_func
SpriteCB_StatusSummaryBar:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x24]
	mov	r3, #0x24
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L539	@cond_branch
	ldrh	r0, [r1, #0x2e]
	add	r0, r2, r0
	strh	r0, [r1, #0x24]
.L539:
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 SpriteCB_StatusSummaryBar,.Lfe37-SpriteCB_StatusSummaryBar
	.align	2, 0
	.type	 sub_8074090,function
	.thumb_func
sub_8074090:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x30]
	add	r1, r0, #0
	add	r1, r1, #0x20
	strh	r1, [r2, #0x30]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	ble	.L541	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x14
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	b	.L543
.L541:
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
.L543:
	strh	r0, [r2, #0x24]
	ldrh	r1, [r2, #0x30]
	mov	r0, #0xf
	and	r0, r0, r1
	strh	r0, [r2, #0x30]
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 sub_8074090,.Lfe38-sub_8074090
	.align	2, 0
	.type	 SpriteCB_StatusSummaryBallsOnBattleStart,function
	.thumb_func
SpriteCB_StatusSummaryBallsOnBattleStart:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L545	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	b	.L544
.L545:
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrh	r2, [r4, #0x34]
	add	r0, r2, #0
	add	r0, r0, #0x38
	lsl	r1, r0, #0x10
	lsr	r2, r1, #0x10
	ldr	r0, .L554
	and	r2, r2, r0
	strh	r2, [r4, #0x34]
	cmp	r3, #0
	beq	.L546	@cond_branch
	lsr	r0, r1, #0x14
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L548	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	b	.L548
.L555:
	.align	2, 0
.L554:
	.word	0xfff0
.L546:
	lsr	r1, r1, #0x14
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L548	@cond_branch
	strh	r3, [r4, #0x24]
.L548:
	mov	r2, #0x24
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L544	@cond_branch
	mov	r1, #0x3f
	cmp	r3, #0
	beq	.L551	@cond_branch
	mov	r1, #0xc0
.L551:
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L552	@cond_branch
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x74
	bl	PlaySE2WithPanning
	b	.L553
.L552:
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x73
	bl	PlaySE1WithPanning
.L553:
	ldr	r0, .L556
	str	r0, [r4, #0x1c]
.L544:
	pop	{r4}
	pop	{r0}
	bx	r0
.L557:
	.align	2, 0
.L556:
	.word	SpriteCallbackDummy
.Lfe39:
	.size	 SpriteCB_StatusSummaryBallsOnBattleStart,.Lfe39-SpriteCB_StatusSummaryBallsOnBattleStart
	.align	2, 0
	.type	 sub_8074158,function
	.thumb_func
sub_8074158:
	push	{r4, lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L559	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x30]
	b	.L558
.L559:
	ldrh	r0, [r3, #0x32]
	lsl	r0, r0, #0x18
	ldrh	r2, [r3, #0x34]
	add	r1, r2, #0
	add	r1, r1, #0x38
	lsl	r4, r1, #0x10
	lsr	r2, r4, #0x10
	ldr	r1, .L564
	and	r2, r2, r1
	strh	r2, [r3, #0x34]
	cmp	r0, #0
	beq	.L560	@cond_branch
	lsr	r0, r4, #0x14
	ldrh	r1, [r3, #0x24]
	add	r0, r0, r1
	b	.L563
.L565:
	.align	2, 0
.L564:
	.word	0xfff0
.L560:
	lsr	r1, r4, #0x14
	ldrh	r0, [r3, #0x24]
	sub	r0, r0, r1
.L563:
	strh	r0, [r3, #0x24]
	mov	r2, #0x24
	ldrsh	r0, [r3, r2]
	mov	r2, #0x20
	ldrsh	r1, [r3, r2]
	add	r0, r0, r1
	add	r0, r0, #0x8
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bls	.L558	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L566
	str	r0, [r3, #0x1c]
.L558:
	pop	{r4}
	pop	{r0}
	bx	r0
.L567:
	.align	2, 0
.L566:
	.word	SpriteCallbackDummy
.Lfe40:
	.size	 sub_8074158,.Lfe40-sub_8074158
	.align	2, 0
	.type	 SpriteCB_StatusSummaryBallsOnSwitchout,function
	.thumb_func
SpriteCB_StatusSummaryBallsOnSwitchout:
	ldrh	r2, [r0, #0x2e]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L569
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r2, [r1, #0x24]
	strh	r2, [r0, #0x24]
	ldrh	r1, [r1, #0x26]
	strh	r1, [r0, #0x26]
	bx	lr
.L570:
	.align	2, 0
.L569:
	.word	gSprites
.Lfe41:
	.size	 SpriteCB_StatusSummaryBallsOnSwitchout,.Lfe41-SpriteCB_StatusSummaryBallsOnSwitchout
	.align	2, 0
	.type	 UpdateNickInHealthbox,function
	.thumb_func
UpdateNickInHealthbox:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x14
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L585
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x3a
	ldrsh	r0, [r0, r1]
	bl	GetIllusionMonPtr
	cmp	r0, #0
	beq	.L572	@cond_branch
	add	r6, r0, #0
.L572:
	ldr	r4, .L585+0x4
	ldr	r1, .L585+0x8
	add	r0, r4, #0
	bl	StringCopy
	add	r0, r6, #0
	mov	r1, #0x2
	add	r2, sp, #0x4
	bl	GetMonData
	add	r0, sp, #0x4
	bl	StringGetEnd10
	add	r0, r4, #0
	add	r1, sp, #0x4
	bl	StringAppend
	add	r5, r0, #0
	add	r0, r6, #0
	bl	GetMonGender
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	cmp	r1, #0x1d
	beq	.L574	@cond_branch
	cmp	r1, #0x20
	bne	.L573	@cond_branch
.L574:
	mov	r0, #0xb
	mul	r1, r1, r0
	ldr	r0, .L585+0xc
	add	r1, r1, r0
	add	r0, sp, #0x4
	bl	StringCompare
	cmp	r0, #0
	bne	.L573	@cond_branch
	mov	r4, #0x64
.L573:
	cmp	r4, #0
	beq	.L577	@cond_branch
	cmp	r4, #0xfe
	beq	.L578	@cond_branch
	ldr	r1, .L585+0x10
	b	.L584
.L586:
	.align	2, 0
.L585:
	.word	gSprites
	.word	gDisplayedStringBattle
	.word	gText_HighlightDarkGrey
	.word	gSpeciesNames
	.word	gText_DynColor2
.L577:
	ldr	r1, .L587
	b	.L584
.L588:
	.align	2, 0
.L587:
	.word	gText_DynColor2Male
.L578:
	ldr	r1, .L589
.L584:
	add	r0, r5, #0
	bl	StringCopy
	ldr	r0, .L589+0x4
	add	r1, sp, #0x10
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x3
	mov	r3, #0x2
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r6, r0, #0
	ldr	r0, .L589+0x8
	lsl	r1, r7, #0x4
	add	r1, r1, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r4, r0, #0x11
	ldrh	r0, [r1, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L580	@cond_branch
	ldr	r1, .L589+0xc
	add	r0, r4, r1
	add	r1, r6, #0
	mov	r2, #0x6
	bl	TextIntoHealthboxObject
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	ldr	r1, .L589+0x10
	add	r5, r4, r1
	cmp	r0, #0
	bne	.L581	@cond_branch
	ldr	r0, .L589+0x14
	add	r5, r4, r0
.L581:
	add	r1, r6, #0
	add	r1, r1, #0xc0
	add	r0, r5, #0
	mov	r2, #0x1
	bl	TextIntoHealthboxObject
	b	.L583
.L590:
	.align	2, 0
.L589:
	.word	gText_DynColor1Female
	.word	gDisplayedStringBattle
	.word	gSprites
	.word	0x6010040
	.word	0x6010400
	.word	0x6010800
.L580:
	ldr	r1, .L591
	add	r0, r4, r1
	add	r1, r6, #0
	mov	r2, #0x7
	bl	TextIntoHealthboxObject
.L583:
	ldr	r0, [sp, #0x10]
	bl	RemoveWindowOnHealthbox
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L592:
	.align	2, 0
.L591:
	.word	0x6010020
.Lfe42:
	.size	 UpdateNickInHealthbox,.Lfe42-UpdateNickInHealthbox
	.align	2, 0
	.type	 TryAddPokeballIconToHealthbox,function
	.thumb_func
TryAddPokeballIconToHealthbox:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldr	r0, .L600
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L593	@cond_branch
	mov	r0, #0x8
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L593	@cond_branch
	ldr	r6, .L600+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r5, r0, r6
	ldrh	r0, [r5, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L593	@cond_branch
	ldr	r1, .L600+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L600+0xc
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetSetPokedexFlag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L593	@cond_branch
	ldrh	r0, [r5, #0x38]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r7, #0
	beq	.L598	@cond_branch
	mov	r0, #0x46
	bl	GetHealthboxElementGfxPtr
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldr	r2, .L600+0x10
	add	r1, r1, r2
	ldr	r2, .L600+0x14
	bl	CpuSet
	b	.L593
.L601:
	.align	2, 0
.L600:
	.word	gBattleTypeFlags
	.word	gSprites
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	0x6010000
	.word	0x4000008
.L598:
	str	r7, [sp]
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r0, .L602
	add	r1, r1, r0
	ldr	r2, .L602+0x4
	mov	r0, sp
	bl	CpuSet
.L593:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L603:
	.align	2, 0
.L602:
	.word	0x6010000
	.word	0x5000008
.Lfe43:
	.size	 TryAddPokeballIconToHealthbox,.Lfe43-TryAddPokeballIconToHealthbox
	.align	2, 0
	.type	 UpdateStatusIconInHealthbox,function
	.thumb_func
UpdateStatusIconInHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L628
	mov	r2, r9
	lsl	r1, r2, #0x4
	add	r1, r1, r9
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrh	r0, [r1, #0x38]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L605	@cond_branch
	ldr	r1, .L628+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L628+0x8
	add	r0, r0, r1
	mov	r1, #0x37
	bl	GetMonData
	add	r4, r0, #0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	mov	r3, #0x12
	mov	r8, r3
	cmp	r0, #0
	bne	.L608	@cond_branch
	mov	r0, #0x1a
	mov	r8, r0
	b	.L608
.L629:
	.align	2, 0
.L628:
	.word	gSprites
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L605:
	ldr	r1, .L630
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L630+0x4
	add	r0, r0, r1
	mov	r1, #0x37
	bl	GetMonData
	add	r4, r0, #0
	mov	r1, #0x11
	mov	r8, r1
.L608:
	mov	r0, #0x7
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L609	@cond_branch
	mov	r0, #0x1b
	add	r1, r7, #0
	bl	GetStatusIconForBattlerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r0, #0x2
	b	.L610
.L631:
	.align	2, 0
.L630:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L609:
	mov	r0, #0x88
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L611	@cond_branch
	mov	r0, #0x15
	add	r1, r7, #0
	bl	GetStatusIconForBattlerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r0, #0x0
	b	.L610
.L611:
	mov	r0, #0x10
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L613	@cond_branch
	mov	r0, #0x21
	add	r1, r7, #0
	bl	GetStatusIconForBattlerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r0, #0x4
	b	.L610
.L613:
	mov	r0, #0x20
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L615	@cond_branch
	mov	r0, #0x1e
	add	r1, r7, #0
	bl	GetStatusIconForBattlerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r0, #0x3
	b	.L610
.L615:
	mov	r0, #0x40
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L617	@cond_branch
	mov	r0, #0x18
	add	r1, r7, #0
	bl	GetStatusIconForBattlerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r0, #0x1
	b	.L610
.L617:
	mov	r0, #0x27
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r4, #0x0
	mov	r2, r9
	lsl	r0, r2, #0x4
	mov	r3, r8
	lsl	r3, r3, #0x10
	mov	r8, r3
	lsl	r7, r7, #0x2
	ldr	r1, .L632
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	add	r5, r0, r1
.L622:
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	mov	r2, r8
	asr	r0, r2, #0x10
	add	r1, r1, r0
	add	r1, r1, r4
	lsl	r1, r1, #0x5
	ldr	r3, .L632+0x4
	add	r1, r1, r3
	add	r0, r6, #0
	ldr	r2, .L632+0x8
	bl	CpuSet
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L622	@cond_branch
	ldr	r0, .L632+0xc
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r7, r0
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L624	@cond_branch
	mov	r0, #0x1
	bl	GetHealthboxElementGfxPtr
	ldr	r2, .L632
	mov	r3, sl
	lsl	r1, r3, #0x4
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L632+0x4
	add	r1, r1, r2
	ldr	r2, .L632+0x10
	bl	CpuSet
.L624:
	mov	r0, r9
	mov	r1, #0x1
	bl	TryAddPokeballIconToHealthbox
	b	.L604
.L633:
	.align	2, 0
.L632:
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
	.word	gBattleSpritesDataPtr
	.word	0x4000010
.L610:
	mov	r1, r9
	lsl	r5, r1, #0x4
	add	r5, r5, r9
	lsl	r5, r5, #0x2
	ldr	r2, .L634
	add	r5, r5, r2
	ldrb	r4, [r5, #0x5]
	lsr	r4, r4, #0x4
	lsl	r4, r4, #0x4
	add	r4, r4, #0xc
	add	r4, r4, r7
	ldr	r1, .L634+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r1, r4, r3
	mov	r2, #0x2
	bl	FillPalette
	lsl	r4, r4, #0x1
	ldr	r0, .L634+0x8
	add	r0, r4, r0
	ldr	r1, .L634+0xc
	add	r4, r4, r1
	add	r1, r4, #0
	mov	r2, #0x1
	bl	CpuSet
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, r8
	lsl	r1, r1, #0x5
	ldr	r2, .L634+0x10
	mov	r8, r2
	add	r1, r1, r8
	ldr	r2, .L634+0x14
	add	r0, r6, #0
	bl	CpuSet
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L626	@cond_branch
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L625	@cond_branch
.L626:
	ldr	r0, .L634+0x18
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L625	@cond_branch
	mov	r0, #0x0
	bl	GetHealthboxElementGfxPtr
	mov	r3, sl
	lsl	r4, r3, #0x4
	add	r4, r4, sl
	lsl	r4, r4, #0x2
	ldr	r1, .L634
	add	r4, r4, r1
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	add	r1, r1, r8
	ldr	r5, .L634+0x1c
	add	r2, r5, #0
	bl	CpuSet
	mov	r0, #0x41
	bl	GetHealthboxElementGfxPtr
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	add	r1, r1, #0x20
	add	r1, r1, r8
	add	r2, r5, #0
	bl	CpuSet
.L625:
	mov	r0, r9
	mov	r1, #0x0
	bl	TryAddPokeballIconToHealthbox
.L604:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L635:
	.align	2, 0
.L634:
	.word	gSprites
	.word	sStatusIconColors
	.word	gPlttBufferUnfaded+0x200
	.word	0x5000200
	.word	0x6010000
	.word	0x4000018
	.word	gBattleSpritesDataPtr
	.word	0x4000008
.Lfe44:
	.size	 UpdateStatusIconInHealthbox,.Lfe44-UpdateStatusIconInHealthbox
	.align	2, 0
	.type	 GetStatusIconForBattlerId,function
	.thumb_func
GetStatusIconForBattlerId:
	push	{lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	lsr	r2, r0, #0x18
	add	r0, r2, #0
	sub	r0, r0, #0x15
	cmp	r0, #0xc
	bhi	.L637	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L675
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L676:
	.align	2, 0
.L675:
	.word	.L673
	.align	2, 0
	.align	2, 0
.L673:
	.word	.L638
	.word	.L637
	.word	.L637
	.word	.L645
	.word	.L637
	.word	.L637
	.word	.L652
	.word	.L637
	.word	.L637
	.word	.L659
	.word	.L637
	.word	.L637
	.word	.L666
.L638:
	mov	r2, #0x15
	cmp	r3, #0
	beq	.L637	@cond_branch
	mov	r2, #0x47
	cmp	r3, #0x1
	beq	.L637	@cond_branch
	mov	r2, #0x65
	cmp	r3, #0x2
	bne	.L637	@cond_branch
	mov	r2, #0x56
	b	.L637
.L645:
	mov	r2, #0x18
	cmp	r3, #0
	beq	.L637	@cond_branch
	mov	r2, #0x4a
	cmp	r3, #0x1
	beq	.L637	@cond_branch
	mov	r2, #0x68
	cmp	r3, #0x2
	bne	.L637	@cond_branch
	mov	r2, #0x59
	b	.L637
.L652:
	mov	r2, #0x1b
	cmp	r3, #0
	beq	.L637	@cond_branch
	mov	r2, #0x4d
	cmp	r3, #0x1
	beq	.L637	@cond_branch
	mov	r2, #0x6b
	cmp	r3, #0x2
	bne	.L637	@cond_branch
	mov	r2, #0x5c
	b	.L637
.L659:
	mov	r2, #0x1e
	cmp	r3, #0
	beq	.L637	@cond_branch
	mov	r2, #0x50
	cmp	r3, #0x1
	beq	.L637	@cond_branch
	mov	r2, #0x6e
	cmp	r3, #0x2
	bne	.L637	@cond_branch
	mov	r2, #0x5f
	b	.L637
.L666:
	mov	r2, #0x21
	cmp	r3, #0
	beq	.L637	@cond_branch
	mov	r2, #0x53
	cmp	r3, #0x1
	beq	.L637	@cond_branch
	mov	r2, #0x71
	cmp	r3, #0x2
	bne	.L637	@cond_branch
	mov	r2, #0x62
.L637:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 GetStatusIconForBattlerId,.Lfe45-GetStatusIconForBattlerId
	.align	2, 0
	.type	 UpdateSafariBallsTextOnHealthbox,function
	.thumb_func
UpdateSafariBallsTextOnHealthbox:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L678
	add	r1, sp, #0x4
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x3
	mov	r3, #0x2
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r5, r0, #0
	ldr	r1, .L678+0x4
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r4, [r0, #0x4]
	lsl	r4, r4, #0x16
	lsr	r4, r4, #0x11
	ldr	r1, .L678+0x8
	add	r0, r4, r1
	add	r1, r5, #0
	mov	r2, #0x6
	bl	TextIntoHealthboxObject
	ldr	r0, .L678+0xc
	add	r4, r4, r0
	add	r5, r5, #0xc0
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x2
	bl	TextIntoHealthboxObject
	ldr	r0, [sp, #0x4]
	bl	RemoveWindowOnHealthbox
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L679:
	.align	2, 0
.L678:
	.word	gText_SafariBalls
	.word	gSprites
	.word	0x6010040
	.word	0x6010800
.Lfe46:
	.size	 UpdateSafariBallsTextOnHealthbox,.Lfe46-UpdateSafariBallsTextOnHealthbox
	.align	2, 0
	.type	 UpdateLeftNoOfBallsTextOnHealthbox,function
	.thumb_func
UpdateLeftNoOfBallsTextOnHealthbox:
	push	{r4, r5, lr}
	add	sp, sp, #-0x18
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L681
	add	r0, sp, #0x4
	bl	StringCopy
	ldr	r1, .L681+0x4
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	mov	r0, #0x0
	add	r1, sp, #0x4
	mov	r2, #0x2f
	bl	GetStringRightAlignXOffset
	add	r1, r0, #0
	add	r0, sp, #0x14
	str	r0, [sp]
	add	r0, sp, #0x4
	mov	r2, #0x3
	mov	r3, #0x2
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r5, r0, #0
	ldr	r1, .L681+0x8
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r4, [r0, #0x4]
	lsl	r4, r4, #0x16
	lsr	r4, r4, #0x11
	ldr	r1, .L681+0xc
	add	r0, r4, r1
	add	r1, r5, #0
	mov	r2, #0x2
	bl	SafariTextIntoHealthboxObject
	ldr	r0, .L681+0x10
	add	r4, r4, r0
	add	r5, r5, #0x40
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x4
	bl	SafariTextIntoHealthboxObject
	ldr	r0, [sp, #0x14]
	bl	RemoveWindowOnHealthbox
	add	sp, sp, #0x18
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L682:
	.align	2, 0
.L681:
	.word	gText_SafariBallLeft
	.word	gNumSafariBalls
	.word	gSprites
	.word	0x60102c0
	.word	0x6010a00
.Lfe47:
	.size	 UpdateLeftNoOfBallsTextOnHealthbox,.Lfe47-UpdateLeftNoOfBallsTextOnHealthbox
	.align	2, 0
	.globl	UpdateHealthboxAttribute
	.type	 UpdateHealthboxAttribute,function
	.thumb_func
UpdateHealthboxAttribute:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r9, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	ldr	r1, .L712
	lsl	r0, r0, #0x4
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB7259
	b	.L684	@long jump
.LCB7259:
	cmp	r7, #0x3
	beq	.L686	@cond_branch
	cmp	r7, #0
	bne	.L685	@cond_branch
.L686:
	mov	r0, r9
	mov	r1, #0x38
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	UpdateLvlInHealthbox
.L685:
	cmp	r7, #0x1
	bhi	.L687	@cond_branch
	mov	r0, r9
	mov	r1, #0x39
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, r8
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
.L687:
	cmp	r7, #0x2
	beq	.L689	@cond_branch
	cmp	r7, #0
	bne	.L688	@cond_branch
.L689:
	mov	r0, r9
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, r8
	mov	r2, #0x1
	bl	UpdateHpTextInHealthbox
.L688:
	cmp	r7, #0x5
	beq	.L691	@cond_branch
	cmp	r7, #0
	bne	.L690	@cond_branch
.L691:
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	mov	r0, r9
	mov	r1, #0x3a
	bl	GetMonData
	add	r4, r0, #0
	mov	r0, r9
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, sl
	mov	r1, r8
	add	r2, r4, #0
	bl	SetBattleBarStruct
	mov	r0, sl
	mov	r1, r8
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
.L690:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	cmp	r0, #0
	bne	.L692	@cond_branch
	cmp	r7, #0x6
	beq	.L693	@cond_branch
	cmp	r7, #0
	bne	.L692	@cond_branch
.L693:
	mov	r0, #0x3
	bl	LoadBattleBarGfx
	mov	r0, r9
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r0, r9
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r9
	mov	r1, #0x19
	bl	GetMonData
	add	r3, r0, #0
	ldr	r6, .L712+0x4
	lsl	r1, r4, #0x2
	ldr	r2, .L712+0x8
	lsl	r0, r5, #0x3
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x15]
	mov	r0, #0xca
	lsl	r0, r0, #0x1
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r6
	ldr	r1, [r1]
	sub	r3, r3, r1
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	add	r4, r4, r6
	ldr	r2, [r4]
	sub	r2, r2, r1
	ldr	r0, [sp, #0x4]
	str	r0, [sp]
	mov	r0, sl
	mov	r1, r8
	bl	SetBattleBarStruct
	mov	r0, sl
	mov	r1, r8
	mov	r2, #0x1
	mov	r3, #0x0
	bl	MoveBattleBar
.L692:
	cmp	r7, #0x4
	beq	.L695	@cond_branch
	cmp	r7, #0
	bne	.L694	@cond_branch
.L695:
	mov	r0, r8
	mov	r1, r9
	bl	UpdateNickInHealthbox
.L694:
	cmp	r7, #0x9
	beq	.L697	@cond_branch
	cmp	r7, #0
	bne	.L696	@cond_branch
.L697:
	mov	r0, r8
	bl	UpdateStatusIconInHealthbox
.L696:
	cmp	r7, #0xa
	bne	.L698	@cond_branch
	mov	r0, r8
	bl	UpdateSafariBallsTextOnHealthbox
.L698:
	add	r0, r7, #0
	sub	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L700	@cond_branch
	mov	r0, r8
	bl	UpdateLeftNoOfBallsTextOnHealthbox
	b	.L700
.L713:
	.align	2, 0
.L712:
	.word	gSprites
	.word	gExperienceTables
	.word	gBaseStats
.L684:
	cmp	r7, #0x3
	beq	.L702	@cond_branch
	cmp	r7, #0
	bne	.L701	@cond_branch
.L702:
	mov	r0, r9
	mov	r1, #0x38
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	UpdateLvlInHealthbox
.L701:
	ldr	r6, .L714
	ldr	r0, [r6]
	ldr	r0, [r0]
	mov	r1, sl
	lsl	r4, r1, #0x2
	add	r0, r4, r0
	ldrb	r1, [r0]
	mov	r5, #0x10
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L704	@cond_branch
	cmp	r7, #0x1
	bhi	.L703	@cond_branch
	mov	r0, r9
	mov	r1, #0x39
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, r8
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
.L703:
	ldr	r0, [r6]
	ldr	r0, [r0]
	add	r0, r4, r0
	ldrb	r1, [r0]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L704	@cond_branch
	cmp	r7, #0x2
	beq	.L705	@cond_branch
	cmp	r7, #0
	bne	.L704	@cond_branch
.L705:
	mov	r0, r9
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, r8
	mov	r2, #0x1
	bl	UpdateHpTextInHealthbox
.L704:
	cmp	r7, #0x5
	beq	.L707	@cond_branch
	cmp	r7, #0
	bne	.L706	@cond_branch
.L707:
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	mov	r0, r9
	mov	r1, #0x3a
	bl	GetMonData
	add	r4, r0, #0
	mov	r0, r9
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, sl
	mov	r1, r8
	add	r2, r4, #0
	bl	SetBattleBarStruct
	mov	r0, sl
	mov	r1, r8
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
.L706:
	cmp	r7, #0x4
	beq	.L709	@cond_branch
	cmp	r7, #0
	bne	.L708	@cond_branch
.L709:
	mov	r0, r8
	mov	r1, r9
	bl	UpdateNickInHealthbox
.L708:
	cmp	r7, #0x9
	beq	.L711	@cond_branch
	cmp	r7, #0
	bne	.L700	@cond_branch
.L711:
	mov	r0, r8
	bl	UpdateStatusIconInHealthbox
.L700:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L715:
	.align	2, 0
.L714:
	.word	gBattleSpritesDataPtr
.Lfe48:
	.size	 UpdateHealthboxAttribute,.Lfe48-UpdateHealthboxAttribute
	.section .rodata
	.type	 sMoveBarTable,object
sMoveBarTable:
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x4
	.byte	0x3
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.byte	0x5
	.byte	0x6
	.byte	0x6
	.byte	0x7
	.byte	0x7
	.byte	0x1
	.byte	0x1
	.size	 sMoveBarTable,22
.text
	.align	2, 0
	.type	 SetInstantBarMove,function
	.thumb_func
SetInstantBarMove:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, [r2, #0x8]
	ldr	r1, [r2, #0xc]
	sub	r0, r0, r1
	str	r0, [r2, #0x8]
	ldr	r1, [r2, #0x4]
	cmp	r0, r1
	ble	.L717	@cond_branch
	str	r1, [r2, #0x8]
.L717:
	ldr	r0, [r2, #0x8]
	cmp	r0, #0
	bge	.L718	@cond_branch
	mov	r0, #0x0
	str	r0, [r2, #0x8]
.L718:
	mov	r0, #0x0
	str	r0, [r2, #0xc]
	ldr	r0, [r2, #0x8]
	pop	{r1}
	bx	r1
.Lfe49:
	.size	 SetInstantBarMove,.Lfe49-SetInstantBarMove
	.align	2, 0
	.globl	MoveBattleBar
	.type	 MoveBattleBar,function
	.thumb_func
MoveBattleBar:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	cmp	r7, #0
	bne	.L720	@cond_branch
	mov	r1, #0x0
	str	r1, [sp, #0x10]
	ldr	r0, .L742
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x16]
	lsl	r6, r0, #0x19
	lsr	r0, r6, #0x1c
	cmp	r0, #0x9
	bls	.L721	@cond_branch
	mov	r2, #0x1
	str	r2, [sp, #0x10]
.L721:
	ldr	r4, .L742+0x4
	mov	r8, r4
	b	.L740
.L743:
	.align	2, 0
.L742:
	.word	gSaveBlock2Ptr
	.word	sMoveBarTable
.L720:
	mov	r2, #0x0
	str	r2, [sp, #0x10]
	ldr	r0, .L744
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x16]
	lsl	r6, r0, #0x19
	lsr	r0, r6, #0x1c
	cmp	r0, #0x9
	bls	.L723	@cond_branch
	mov	r4, #0x1
	str	r4, [sp, #0x10]
.L723:
	ldr	r0, .L744+0x4
	mov	r8, r0
.L740:
	ldr	r3, .L744+0x8
	ldr	r0, [r3]
	ldr	r0, [r0, #0xc]
	mov	r1, r9
	lsl	r2, r1, #0x2
	add	r1, r2, r1
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	lsr	r0, r6, #0x1c
	lsl	r0, r0, #0x1
	ldrb	r1, [r1, #0x1]
	add	r0, r0, r1
	add	r0, r0, r8
	ldrb	r0, [r0]
	str	r0, [sp, #0xc]
	str	r2, [sp, #0x18]
	ldr	r0, [r3]
	ldr	r2, [r0, #0xc]
	ldr	r6, [sp, #0x18]
	add	r6, r6, r9
	lsl	r4, r6, #0x2
	add	r2, r4, r2
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x1
	eor	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r2, [sp, #0x10]
	cmp	r2, #0
	beq	.L724	@cond_branch
	ldr	r0, [r3]
	ldr	r0, [r0, #0xc]
	add	r0, r0, r4
	str	r3, [sp, #0x1c]
	bl	SetInstantBarMove
	str	r0, [sp, #0x8]
.L724:
	mov	r0, #0x0
	mov	r8, r0
	ldr	r1, [sp, #0xc]
	cmp	r8, r1
	bge	.L726	@cond_branch
	str	r6, [sp, #0x14]
	mov	sl, r4
.L728:
	mov	r2, r8
	cmp	r2, #0
	beq	.L729	@cond_branch
	str	r5, [sp, #0x8]
.L729:
	cmp	r7, #0
	bne	.L730	@cond_branch
	ldr	r4, .L744+0x8
	ldr	r0, [r4]
	ldr	r3, [r0, #0xc]
	add	r3, r3, sl
	ldr	r0, [r3, #0x4]
	ldr	r1, [r3, #0x8]
	ldr	r2, [r3, #0xc]
	add	r3, r3, #0x10
	mov	r4, #0x6
	str	r4, [sp]
	mov	r4, #0x1
	str	r4, [sp, #0x4]
	b	.L741
.L745:
	.align	2, 0
.L744:
	.word	gSaveBlock2Ptr
	.word	sMoveBarTable
	.word	gBattleSpritesDataPtr
.L730:
	ldr	r6, .L746
	ldr	r0, [r6]
	ldr	r2, [r0, #0xc]
	ldr	r0, [sp, #0x14]
	lsl	r4, r0, #0x2
	add	r2, r4, r2
	ldr	r0, [r2, #0x8]
	ldr	r1, [r2, #0xc]
	ldr	r2, [r2, #0x4]
	mov	r3, #0x8
	bl	GetScaledExpFraction
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L732	@cond_branch
	mov	r5, #0x1
.L732:
	ldr	r0, [r6]
	ldr	r0, [r0, #0xc]
	add	r4, r4, r0
	ldr	r6, [r4, #0xc]
	add	r0, r6, #0
	add	r1, r5, #0
	bl	__divsi3
	cmp	r0, #0
	bge	.L733	@cond_branch
	neg	r0, r0
.L733:
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, [r4, #0x4]
	ldr	r1, [r4, #0x8]
	add	r3, r4, #0
	add	r3, r3, #0x10
	mov	r2, #0x8
	str	r2, [sp]
	str	r5, [sp, #0x4]
	add	r2, r6, #0
.L741:
	bl	CalcNewBarValue
	add	r5, r0, #0
	cmp	r7, #0x1
	beq	.L735	@cond_branch
	cmp	r7, #0
	bne	.L734	@cond_branch
	ldr	r1, .L746
	ldr	r0, [r1]
	ldr	r0, [r0]
	ldr	r2, [sp, #0x18]
	add	r0, r2, r0
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L734	@cond_branch
.L735:
	mov	r0, r9
	add	r1, r7, #0
	bl	MoveBattleBarGraphically
.L734:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	bne	.L727	@cond_branch
	ldr	r4, .L746
	ldr	r0, [r4]
	ldr	r0, [r0, #0xc]
	add	r0, r0, sl
	mov	r1, #0x0
	str	r1, [r0, #0x10]
	mov	r0, r8
	cmp	r0, #0
	bne	.L738	@cond_branch
	ldr	r1, [sp, #0x10]
	cmp	r1, #0
	beq	.L726	@cond_branch
.L738:
	cmp	r7, #0
	bne	.L726	@cond_branch
	ldr	r0, .L746+0x4
	add	r0, r0, r9
	ldrb	r0, [r0]
	ldr	r2, [sp, #0x8]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
	b	.L726
.L747:
	.align	2, 0
.L746:
	.word	gBattleSpritesDataPtr
	.word	gHealthboxSpriteIds
.L727:
	mov	r4, #0x1
	add	r8, r8, r4
	ldr	r0, [sp, #0xc]
	cmp	r8, r0
	blt	.L728	@cond_branch
.L726:
	add	r0, r5, #0
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe50:
	.size	 MoveBattleBar,.Lfe50-MoveBattleBar
	.align	2, 0
	.type	 MoveBattleBarGraphically,function
	.thumb_func
MoveBattleBarGraphically:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0
	beq	.L750	@cond_branch
	cmp	r1, #0x1
	beq	.L762	@cond_branch
	b	.L749
.L750:
	ldr	r0, .L778
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	lsl	r5, r6, #0x2
	add	r3, r5, r6
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	ldr	r0, [r3, #0x4]
	ldr	r1, [r3, #0x8]
	ldr	r2, [r3, #0xc]
	add	r3, r3, #0x10
	add	r4, sp, #0x8
	str	r4, [sp]
	mov	r4, #0x6
	str	r4, [sp, #0x4]
	bl	CalcBarFilledPixels
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	mov	r9, r1
	add	r7, r5, #0
	cmp	r0, #0x18
	bhi	.L752	@cond_branch
	mov	r2, #0x38
	mov	r9, r2
	cmp	r0, #0x9
	bls	.L752	@cond_branch
	mov	r4, #0x2f
	mov	r9, r4
.L752:
	mov	r5, #0x0
	ldr	r0, .L778+0x4
	mov	r8, r0
.L758:
	ldr	r0, .L778
	ldr	r0, [r0]
	ldr	r1, [r0, #0xc]
	add	r0, r7, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrh	r0, [r0, #0x38]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r5, #0x1
	bhi	.L759	@cond_branch
	mov	r0, r9
	bl	GetHealthboxElementGfxPtr
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r2, r5, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x5
	ldr	r2, .L778+0x8
	add	r1, r1, r2
	ldr	r2, .L778+0xc
	bl	CpuSet
	b	.L757
.L779:
	.align	2, 0
.L778:
	.word	gBattleSpritesDataPtr
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
.L759:
	mov	r0, r9
	bl	GetHealthboxElementGfxPtr
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r5, r1
	lsl	r1, r1, #0x5
	ldr	r4, .L780
	add	r1, r1, r4
	ldr	r2, .L780+0x4
	bl	CpuSet
.L757:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L758	@cond_branch
	b	.L749
.L781:
	.align	2, 0
.L780:
	.word	0x6010040
	.word	0x4000008
.L762:
	ldr	r0, .L782
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	lsl	r5, r6, #0x2
	add	r3, r5, r6
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	ldr	r0, [r3, #0x4]
	ldr	r1, [r3, #0x8]
	ldr	r2, [r3, #0xc]
	add	r3, r3, #0x10
	add	r4, sp, #0x8
	str	r4, [sp]
	mov	r4, #0x8
	str	r4, [sp, #0x4]
	bl	CalcBarFilledPixels
	ldr	r1, .L782+0x4
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L782+0x8
	add	r0, r0, r1
	mov	r1, #0x38
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r7, r5, #0
	cmp	r0, #0x64
	bne	.L763	@cond_branch
	mov	r5, #0x0
	mov	r1, #0x0
.L767:
	mov	r0, sp
	add	r0, r0, r5
	add	r0, r0, #0x8
	strb	r1, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x7
	bls	.L767	@cond_branch
.L763:
	mov	r5, #0x0
	ldr	r0, .L782+0xc
	mov	r8, r0
	add	r0, r7, r6
	lsl	r4, r0, #0x2
.L772:
	cmp	r5, #0x3
	bhi	.L773	@cond_branch
	mov	r0, #0xc
	bl	GetHealthboxElementGfxPtr
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	ldr	r1, .L782
	ldr	r1, [r1]
	ldr	r1, [r1, #0xc]
	add	r1, r4, r1
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r2, r5, #0
	add	r2, r2, #0x24
	add	r1, r1, r2
	lsl	r1, r1, #0x5
	ldr	r2, .L782+0x10
	add	r1, r1, r2
	ldr	r2, .L782+0x14
	bl	CpuSet
	b	.L771
.L783:
	.align	2, 0
.L782:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
.L773:
	mov	r0, #0xc
	bl	GetHealthboxElementGfxPtr
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	ldr	r1, .L784
	ldr	r1, [r1]
	ldr	r1, [r1, #0xc]
	add	r1, r4, r1
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r5, r1
	lsl	r1, r1, #0x5
	ldr	r2, .L784+0x4
	add	r1, r1, r2
	ldr	r2, .L784+0x8
	bl	CpuSet
.L771:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x7
	bls	.L772	@cond_branch
.L749:
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L785:
	.align	2, 0
.L784:
	.word	gBattleSpritesDataPtr
	.word	0x6010b80
	.word	0x4000008
.Lfe51:
	.size	 MoveBattleBarGraphically,.Lfe51-MoveBattleBarGraphically
	.align	2, 0
	.type	 CalcNewBarValue,function
	.thumb_func
CalcNewBarValue:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	add	r4, r1, #0
	mov	r8, r2
	add	r5, r3, #0
	ldr	r1, [sp, #0x18]
	ldr	r0, [sp, #0x1c]
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	lsl	r1, r1, #0x1b
	lsr	r2, r1, #0x18
	ldr	r1, [r5]
	ldr	r0, .L811
	cmp	r1, r0
	bne	.L787	@cond_branch
	cmp	r7, r2
	bge	.L788	@cond_branch
	lsl	r0, r4, #0x8
	str	r0, [r5]
	b	.L787
.L812:
	.align	2, 0
.L811:
	.word	-0x8000
.L788:
	str	r4, [r5]
.L787:
	mov	r0, r8
	sub	r4, r4, r0
	cmp	r4, #0
	bge	.L790	@cond_branch
	mov	r4, #0x0
	b	.L791
.L790:
	cmp	r4, r7
	ble	.L791	@cond_branch
	add	r4, r7, #0
.L791:
	cmp	r7, r2
	bge	.L793	@cond_branch
	ldr	r0, [r5]
	asr	r1, r0, #0x8
	add	r6, r0, #0
	cmp	r4, r1
	bne	.L795	@cond_branch
	mov	r0, #0xff
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L795	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L808
.L793:
	ldr	r6, [r5]
	cmp	r4, r6
	bne	.L795	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L808
.L795:
	cmp	r7, r2
	bge	.L797	@cond_branch
	lsl	r0, r7, #0x8
	add	r1, r2, #0
	bl	__divsi3
	mov	r1, r8
	cmp	r1, #0
	bge	.L798	@cond_branch
	add	r0, r6, r0
	str	r0, [r5]
	asr	r2, r0, #0x8
	cmp	r2, r4
	blt	.L803	@cond_branch
	b	.L809
.L798:
	sub	r0, r6, r0
	str	r0, [r5]
	asr	r2, r0, #0x8
	mov	r1, #0xff
	and	r0, r0, r1
	cmp	r0, #0
	ble	.L801	@cond_branch
	add	r2, r2, #0x1
.L801:
	cmp	r2, r4
	bgt	.L803	@cond_branch
.L809:
	lsl	r0, r4, #0x8
	str	r0, [r5]
	add	r2, r4, #0
	b	.L803
.L797:
	mov	r0, r8
	cmp	r0, #0
	bge	.L804	@cond_branch
	ldr	r0, [r5]
	add	r0, r0, r3
	str	r0, [r5]
	cmp	r0, r4
	ble	.L807	@cond_branch
	b	.L810
.L804:
	ldr	r0, [r5]
	sub	r0, r0, r3
	str	r0, [r5]
	cmp	r0, r4
	bge	.L807	@cond_branch
.L810:
	str	r4, [r5]
.L807:
	ldr	r2, [r5]
.L803:
	add	r0, r2, #0
.L808:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe52:
	.size	 CalcNewBarValue,.Lfe52-CalcNewBarValue
	.align	2, 0
	.type	 CalcBarFilledPixels,function
	.thumb_func
CalcBarFilledPixels:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	mov	ip, r3
	ldr	r7, [sp, #0x14]
	ldr	r0, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	sub	r5, r1, r2
	cmp	r5, #0
	bge	.L814	@cond_branch
	mov	r5, #0x0
	b	.L815
.L814:
	cmp	r5, r4
	ble	.L815	@cond_branch
	add	r5, r4, #0
.L815:
	lsl	r0, r6, #0x1b
	lsr	r3, r0, #0x18
	mov	r1, #0x0
	cmp	r1, r6
	bcs	.L818	@cond_branch
	mov	r2, #0x0
.L820:
	add	r0, r7, r1
	strb	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r6
	bcc	.L820	@cond_branch
.L818:
	cmp	r4, r3
	bge	.L822	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	mul	r0, r0, r3
	add	r1, r4, #0
	bl	__divsi3
	asr	r0, r0, #0x8
	b	.L833
.L822:
	mov	r1, ip
	ldr	r0, [r1]
	mul	r0, r0, r3
	add	r1, r4, #0
	bl	__divsi3
.L833:
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r3, r2, #0
	cmp	r3, #0
	bne	.L824	@cond_branch
	cmp	r5, #0
	ble	.L824	@cond_branch
	mov	r0, #0x1
	strb	r0, [r7]
	mov	r3, #0x1
	b	.L825
.L824:
	mov	r1, #0x0
	mov	r4, #0x8
.L826:
	cmp	r1, r6
	bcs	.L825	@cond_branch
	cmp	r2, #0x7
	bls	.L830	@cond_branch
	add	r0, r7, r1
	strb	r4, [r0]
	add	r0, r2, #0
	sub	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	b	.L826
.L830:
	add	r0, r7, r1
	strb	r2, [r0]
.L825:
	add	r0, r3, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe53:
	.size	 CalcBarFilledPixels,.Lfe53-CalcBarFilledPixels
	.align	2, 0
	.type	 GetScaledExpFraction,function
	.thumb_func
GetScaledExpFraction:
	push	{r4, r5, r6, r7, lr}
	add	r6, r2, #0
	lsl	r3, r3, #0x1b
	lsr	r7, r3, #0x18
	sub	r5, r0, r1
	cmp	r5, #0
	bge	.L835	@cond_branch
	mov	r5, #0x0
	b	.L836
.L835:
	cmp	r5, r6
	ble	.L836	@cond_branch
	add	r5, r6, #0
.L836:
	mul	r0, r0, r7
	add	r1, r6, #0
	bl	__divsi3
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r5
	mul	r0, r0, r7
	add	r1, r6, #0
	bl	__divsi3
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	sub	r0, r4, r0
	cmp	r0, #0
	bge	.L838	@cond_branch
	neg	r0, r0
.L838:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe54:
	.size	 GetScaledExpFraction,.Lfe54-GetScaledExpFraction
	.align	2, 0
	.globl	GetScaledHPFraction
	.type	 GetScaledHPFraction,function
	.thumb_func
GetScaledHPFraction:
	push	{r4, lr}
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r0, r0, #0x10
	asr	r4, r0, #0x10
	mov	r0, r4
	mul	r0, r0, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L841	@cond_branch
	cmp	r4, #0
	ble	.L841	@cond_branch
	mov	r0, #0x1
.L841:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe55:
	.size	 GetScaledHPFraction,.Lfe55-GetScaledHPFraction
	.align	2, 0
	.globl	GetHPBarLevel
	.type	 GetHPBarLevel,function
	.thumb_func
GetHPBarLevel:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r0, r1
	bne	.L843	@cond_branch
	mov	r0, #0x4
	b	.L844
.L843:
	mov	r2, #0x30
	bl	GetScaledHPFraction
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x3
	cmp	r1, #0x18
	bhi	.L844	@cond_branch
	mov	r0, #0x2
	cmp	r1, #0x9
	bhi	.L844	@cond_branch
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
.L844:
	pop	{r1}
	bx	r1
.Lfe56:
	.size	 GetHPBarLevel,.Lfe56-GetHPBarLevel
	.align	2, 0
	.type	 AddTextPrinterAndCreateWindowOnHealthbox,function
	.thumb_func
AddTextPrinterAndCreateWindowOnHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	mov	sl, r0
	mov	r8, r1
	mov	r9, r2
	add	r5, r3, #0
	ldr	r7, [sp, #0x40]
	ldr	r0, .L852
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [sp, #0x18]
	str	r1, [sp, #0x1c]
	add	r0, sp, #0x18
	bl	AddWindow
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r6, r4, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r5, #0x4
	orr	r1, r1, r5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	FillWindowPixelBuffer
	add	r0, sp, #0x14
	mov	r2, #0x0
	strb	r5, [r0]
	add	r1, r0, #0
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	mov	r0, #0x3
	strb	r0, [r1, #0x2]
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r0, r9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	str	r2, [sp]
	str	r2, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0xc]
	mov	r0, sl
	str	r0, [sp, #0x10]
	add	r0, r6, #0
	mov	r1, #0x0
	mov	r2, r8
	mov	r3, r9
	bl	AddTextPrinterParameterized4
	str	r4, [r7]
	add	r0, r6, #0
	mov	r1, #0x7
	bl	GetWindowAttribute
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L853:
	.align	2, 0
.L852:
	.word	sHealthboxWindowTemplate
.Lfe57:
	.size	 AddTextPrinterAndCreateWindowOnHealthbox,.Lfe57-AddTextPrinterAndCreateWindowOnHealthbox
	.align	2, 0
	.type	 RemoveWindowOnHealthbox,function
	.thumb_func
RemoveWindowOnHealthbox:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	RemoveWindow
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 RemoveWindowOnHealthbox,.Lfe58-RemoveWindowOnHealthbox
	.align	2, 0
	.type	 FillHealthboxObject,function
	.thumb_func
FillHealthboxObject:
	push	{lr}
	add	sp, sp, #-0x4
	add	r3, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r1, r0, #0x8
	add	r0, r0, r1
	lsl	r1, r0, #0x10
	add	r0, r0, r1
	str	r0, [sp]
	lsl	r2, r2, #0x3
	ldr	r0, .L856
	and	r2, r2, r0
	mov	r0, #0xa0
	lsl	r0, r0, #0x13
	orr	r2, r2, r0
	mov	r0, sp
	add	r1, r3, #0
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L857:
	.align	2, 0
.L856:
	.word	0x1fffff
.Lfe59:
	.size	 FillHealthboxObject,.Lfe59-FillHealthboxObject
	.align	2, 0
	.type	 HpTextIntoHealthboxObject,function
	.thumb_func
HpTextIntoHealthboxObject:
	push	{lr}
	add	r3, r0, #0
	add	r0, r1, #0
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r2, r2, #0x3
	ldr	r1, .L859
	and	r2, r2, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	orr	r2, r2, r1
	add	r1, r3, #0
	bl	CpuSet
	pop	{r0}
	bx	r0
.L860:
	.align	2, 0
.L859:
	.word	0x1fffff
.Lfe60:
	.size	 HpTextIntoHealthboxObject,.Lfe60-HpTextIntoHealthboxObject
	.align	2, 0
	.type	 TextIntoHealthboxObject,function
	.thumb_func
TextIntoHealthboxObject:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	add	r4, r2, #0
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r5, r1
	add	r1, r6, r1
	lsl	r2, r4, #0x3
	ldr	r3, .L868
	and	r2, r2, r3
	mov	r3, #0x80
	lsl	r3, r3, #0x13
	orr	r2, r2, r3
	bl	CpuSet
	cmp	r4, #0
	ble	.L862	@cond_branch
.L863:
	add	r0, r5, #0
	add	r0, r0, #0x14
	add	r1, r6, #0
	add	r1, r1, #0x14
	ldr	r2, .L868+0x4
	bl	CpuSet
	add	r6, r6, #0x20
	add	r5, r5, #0x20
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L863	@cond_branch
.L862:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L869:
	.align	2, 0
.L868:
	.word	0x1fffff
	.word	0x4000003
.Lfe61:
	.size	 TextIntoHealthboxObject,.Lfe61-TextIntoHealthboxObject
	.align	2, 0
	.type	 SafariTextIntoHealthboxObject,function
	.thumb_func
SafariTextIntoHealthboxObject:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	lsl	r4, r2, #0x3
	ldr	r0, .L871
	and	r4, r4, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	orr	r4, r4, r0
	add	r0, r5, #0
	add	r1, r6, #0
	add	r2, r4, #0
	bl	CpuSet
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r5, r5, r0
	add	r6, r6, r0
	add	r0, r5, #0
	add	r1, r6, #0
	add	r2, r4, #0
	bl	CpuSet
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L872:
	.align	2, 0
.L871:
	.word	0x1fffff
.Lfe62:
	.size	 SafariTextIntoHealthboxObject,.Lfe62-SafariTextIntoHealthboxObject
	.section .rodata
	.type	 sAbilityPopUpGfx,object
sAbilityPopUpGfx:
	.byte	0x0
	.byte	0x0
	.byte	0x21
	.byte	0x22
	.byte	0x0
	.byte	0x21
	.byte	0x43
	.byte	0x44
	.byte	0x10
	.byte	0x43
	.byte	0x23
	.byte	0x11
	.byte	0x20
	.byte	0x24
	.byte	0x55
	.byte	0x55
	.byte	0x31
	.byte	0x53
	.byte	0x55
	.byte	0x55
	.byte	0x42
	.byte	0x52
	.byte	0x55
	.byte	0x55
	.byte	0x42
	.byte	0x51
	.byte	0x55
	.byte	0x55
	.byte	0x42
	.byte	0x51
	.byte	0x55
	.byte	0x55
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x42
	.byte	0x51
	.byte	0x55
	.byte	0x55
	.byte	0x42
	.byte	0x51
	.byte	0x55
	.byte	0x55
	.byte	0x42
	.byte	0x51
	.byte	0x55
	.byte	0x55
	.byte	0x42
	.byte	0x51
	.byte	0x55
	.byte	0x55
	.byte	0x42
	.byte	0x51
	.byte	0x55
	.byte	0x55
	.byte	0x42
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x42
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x42
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x42
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x42
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x42
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x42
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x42
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x42
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x42
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x42
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x42
	.byte	0x76
	.byte	0x77
	.byte	0x77
	.byte	0x32
	.byte	0x63
	.byte	0x66
	.byte	0x66
	.byte	0x21
	.byte	0x43
	.byte	0x44
	.byte	0x44
	.byte	0x10
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x12
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x34
	.byte	0x12
	.byte	0x0
	.byte	0x11
	.byte	0x32
	.byte	0x34
	.byte	0x1
	.byte	0x55
	.byte	0x55
	.byte	0x42
	.byte	0x2
	.byte	0x55
	.byte	0x55
	.byte	0x35
	.byte	0x13
	.byte	0x55
	.byte	0x55
	.byte	0x25
	.byte	0x24
	.byte	0x55
	.byte	0x55
	.byte	0x15
	.byte	0x24
	.byte	0x55
	.byte	0x55
	.byte	0x15
	.byte	0x24
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x55
	.byte	0x15
	.byte	0x24
	.byte	0x55
	.byte	0x55
	.byte	0x15
	.byte	0x24
	.byte	0x55
	.byte	0x55
	.byte	0x15
	.byte	0x24
	.byte	0x55
	.byte	0x55
	.byte	0x15
	.byte	0x24
	.byte	0x55
	.byte	0x55
	.byte	0x15
	.byte	0x24
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x24
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x24
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x24
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x24
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x24
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x24
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x24
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x24
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x24
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x24
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x24
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x77
	.byte	0x77
	.byte	0x67
	.byte	0x24
	.byte	0x66
	.byte	0x66
	.byte	0x36
	.byte	0x23
	.byte	0x44
	.byte	0x44
	.byte	0x34
	.byte	0x12
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sAbilityPopUpGfx,2048
	.align	1, 0
	.type	 sAbilityPopUpPalette,object
sAbilityPopUpPalette:
	.short	0x2ec0
	.short	0x4a11
	.short	0x356c
	.short	0x2909
	.short	0x2867
	.short	0x356c
	.short	0x7bbc
	.short	0x7fff
	.short	0x0
	.short	0x0
	.short	0x39cd
	.short	0x2909
	.short	0x0
	.short	0x675a
	.short	0x4630
	.short	0x0
	.size	 sAbilityPopUpPalette,32
	.align	2, 0
	.type	 sSpriteSheet_AbilityPopUp,object
	.size	 sSpriteSheet_AbilityPopUp,8
sSpriteSheet_AbilityPopUp:
	.word	sAbilityPopUpGfx
	.short	0x800
	.short	0xd720
	.align	2, 0
	.type	 sSpritePalette_AbilityPopUp,object
	.size	 sSpritePalette_AbilityPopUp,8
sSpritePalette_AbilityPopUp:
	.word	sAbilityPopUpPalette
	.short	0xd720
	.space	2
	.align	2, 0
	.type	 sOamData_AbilityPopUp,object
	.size	 sOamData_AbilityPopUp,8
sOamData_AbilityPopUp:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sSpriteAnim_AbilityPopUp1,object
sSpriteAnim_AbilityPopUp1:
	.short	0x0
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_AbilityPopUp1,8
	.align	2, 0
	.type	 sSpriteAnimTable_AbilityPopUp1,object
sSpriteAnimTable_AbilityPopUp1:
	.word	sSpriteAnim_AbilityPopUp1
	.size	 sSpriteAnimTable_AbilityPopUp1,4
	.align	2, 0
	.type	 sSpriteTemplate_AbilityPopUp1,object
	.size	 sSpriteTemplate_AbilityPopUp1,24
sSpriteTemplate_AbilityPopUp1:
	.short	0xd720
	.short	0xd720
	.word	sOamData_AbilityPopUp
	.word	sSpriteAnimTable_AbilityPopUp1
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCb_AbilityPopUp
	.align	2, 0
	.type	 sSpriteAnim_AbilityPopUp2,object
sSpriteAnim_AbilityPopUp2:
	.short	0x20
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_AbilityPopUp2,8
	.align	2, 0
	.type	 sSpriteAnimTable_AbilityPopUp2,object
sSpriteAnimTable_AbilityPopUp2:
	.word	sSpriteAnim_AbilityPopUp2
	.size	 sSpriteAnimTable_AbilityPopUp2,4
	.align	2, 0
	.type	 sSpriteTemplate_AbilityPopUp2,object
	.size	 sSpriteTemplate_AbilityPopUp2,24
sSpriteTemplate_AbilityPopUp2:
	.short	0xd720
	.short	0xd720
	.word	sOamData_AbilityPopUp
	.word	sSpriteAnimTable_AbilityPopUp2
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCb_AbilityPopUp
	.align	1, 0
	.type	 sAbilityPopUpCoordsDoubles,object
	.size	 sAbilityPopUpCoordsDoubles,16
sAbilityPopUpCoordsDoubles:
	.short	0x1d
	.short	0x50
	.short	0xcc
	.short	0x13
	.short	0x1d
	.short	0x61
	.short	0xcc
	.short	0x24
	.align	1, 0
	.type	 sAbilityPopUpCoordsSingles,object
	.size	 sAbilityPopUpCoordsSingles,16
sAbilityPopUpCoordsSingles:
	.short	0x1d
	.short	0x5d
	.short	0xcc
	.short	0x17
	.space	8
.text
	.align	2, 0
	.type	 AddTextPrinterAndCreateWindowOnAbilityPopUp,function
	.thumb_func
AddTextPrinterAndCreateWindowOnAbilityPopUp:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x20
	mov	sl, r0
	add	r5, r1, #0
	add	r6, r2, #0
	add	r4, r3, #0
	ldr	r1, [sp, #0x3c]
	ldr	r2, [sp, #0x40]
	ldr	r0, [sp, #0x44]
	mov	r8, r0
	add	r0, sp, #0x14
	mov	r3, #0x0
	mov	r9, r3
	strb	r4, [r0]
	strb	r1, [r0, #0x1]
	strb	r2, [r0, #0x2]
	mov	r0, #0x0
	mov	r1, #0
	str	r0, [sp, #0x18]
	str	r1, [sp, #0x1c]
	ldr	r1, .L874
	ldr	r0, [sp, #0x18]
	and	r0, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	orr	r0, r0, r1
	str	r0, [sp, #0x18]
	ldr	r2, .L874+0x4
	add	r0, sp, #0x18
	ldr	r1, [r0, #0x4]
	and	r1, r1, r2
	mov	r2, #0x2
	orr	r1, r1, r2
	str	r1, [r0, #0x4]
	bl	AddWindow
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, r8
	str	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r4, #0x4
	orr	r1, r1, r4
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	FillWindowPixelBuffer
	mov	r3, r8
	ldrb	r0, [r3]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r1, r9
	str	r1, [sp]
	str	r1, [sp, #0x4]
	add	r3, sp, #0x14
	str	r3, [sp, #0x8]
	mov	r1, #0x1
	neg	r1, r1
	str	r1, [sp, #0xc]
	mov	r1, sl
	str	r1, [sp, #0x10]
	mov	r1, #0x0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	AddTextPrinterParameterized4
	mov	r3, r8
	ldrb	r0, [r3]
	mov	r1, #0x7
	bl	GetWindowAttribute
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L875:
	.align	2, 0
.L874:
	.word	0xffffff
	.word	-0x100
.Lfe63:
	.size	 AddTextPrinterAndCreateWindowOnAbilityPopUp,.Lfe63-AddTextPrinterAndCreateWindowOnAbilityPopUp
	.align	2, 0
	.type	 TextIntoAbilityPopUp,function
	.thumb_func
TextIntoAbilityPopUp:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	add	r6, r2, #0
	add	r7, r3, #0
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	add	r1, r5, r1
	lsl	r2, r6, #0x3
	ldr	r3, .L885
	and	r2, r2, r3
	mov	r3, #0x80
	lsl	r3, r3, #0x13
	orr	r2, r2, r3
	bl	CpuSet
	cmp	r6, #0
	ble	.L877	@cond_branch
.L878:
	cmp	r7, #0
	beq	.L881	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x10
	add	r1, r5, #0
	add	r1, r1, #0x10
	ldr	r2, .L885+0x4
	bl	CpuSet
	b	.L882
.L886:
	.align	2, 0
.L885:
	.word	0x1fffff
	.word	0x4000004
.L881:
	add	r0, r4, #0
	add	r0, r0, #0x14
	add	r1, r5, #0
	add	r1, r1, #0x14
	ldr	r2, .L887
	bl	CpuSet
.L882:
	add	r5, r5, #0x20
	add	r4, r4, #0x20
	sub	r6, r6, #0x1
	cmp	r6, #0
	bne	.L878	@cond_branch
.L877:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L888:
	.align	2, 0
.L887:
	.word	0x4000003
.Lfe64:
	.size	 TextIntoAbilityPopUp,.Lfe64-TextIntoAbilityPopUp
	.align	2, 0
	.type	 PrintOnAbilityPopUp,function
	.thumb_func
PrintOnAbilityPopUp:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x30
	add	r5, r0, #0
	add	r7, r1, #0
	mov	r9, r2
	ldr	r6, [sp, #0x50]
	mov	r4, #0x0
	add	r1, sp, #0xc
	ldrb	r0, [r5]
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, sp, #0x2c
	mov	r8, r1
	cmp	r0, #0xff
	beq	.L891	@cond_branch
.L892:
	add	r4, r4, #0x1
	cmp	r4, #0xc
	bhi	.L891	@cond_branch
	mov	r1, sp
	add	r1, r1, r4
	add	r1, r1, #0xc
	add	r0, r5, r4
	ldrb	r0, [r0]
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L892	@cond_branch
.L891:
	mov	r1, sp
	add	r1, r1, r4
	add	r1, r1, #0xc
	mov	r0, #0xff
	strb	r0, [r1]
	ldr	r0, [sp, #0x58]
	str	r0, [sp]
	ldr	r1, [sp, #0x5c]
	str	r1, [sp, #0x4]
	mov	r0, r8
	str	r0, [sp, #0x8]
	add	r0, sp, #0xc
	add	r1, r3, #0
	add	r2, r6, #0
	ldr	r3, [sp, #0x54]
	bl	AddTextPrinterAndCreateWindowOnAbilityPopUp
	add	r1, r0, #0
	mov	r3, #0x0
	cmp	r6, #0
	bne	.L896	@cond_branch
	mov	r3, #0x1
.L896:
	add	r0, r7, #0
	mov	r2, #0x8
	bl	TextIntoAbilityPopUp
	ldr	r0, [sp, #0x2c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	RemoveWindow
	cmp	r4, #0xd
	bne	.L897	@cond_branch
	mov	r4, #0x0
	add	r1, sp, #0x1c
	ldrb	r0, [r5, #0xc]
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r1, #0
	cmp	r0, #0xff
	beq	.L899	@cond_branch
	add	r3, r2, #0
.L900:
	add	r4, r4, #0x1
	cmp	r4, #0xb
	bhi	.L899	@cond_branch
	add	r1, r3, r4
	add	r0, r4, r5
	ldrb	r0, [r0, #0xc]
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L900	@cond_branch
.L899:
	add	r1, r2, r4
	mov	r0, #0xff
	strb	r0, [r1]
	ldr	r1, [sp, #0x58]
	str	r1, [sp]
	ldr	r0, [sp, #0x5c]
	str	r0, [sp, #0x4]
	mov	r1, r8
	str	r1, [sp, #0x8]
	add	r0, r2, #0
	ldr	r1, [sp, #0x4c]
	add	r2, r6, #0
	ldr	r3, [sp, #0x54]
	bl	AddTextPrinterAndCreateWindowOnAbilityPopUp
	add	r1, r0, #0
	mov	r3, #0x0
	cmp	r6, #0
	bne	.L904	@cond_branch
	mov	r3, #0x1
.L904:
	mov	r0, r9
	mov	r2, #0x1
	bl	TextIntoAbilityPopUp
	ldr	r0, [sp, #0x2c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	RemoveWindow
.L897:
	add	sp, sp, #0x30
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe65:
	.size	 PrintOnAbilityPopUp,.Lfe65-PrintOnAbilityPopUp
	.align	2, 0
	.type	 PrintBattlerOnAbilityPopUp,function
	.thumb_func
PrintBattlerOnAbilityPopUp:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r3, #0x5c
	mul	r0, r0, r3
	ldr	r3, .L906
	add	r0, r0, r3
	ldr	r5, .L906+0x4
	lsl	r3, r1, #0x4
	add	r3, r3, r1
	lsl	r3, r3, #0x2
	add	r3, r3, r5
	ldrh	r1, [r3, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r4, .L906+0x8
	add	r1, r1, r4
	lsl	r3, r2, #0x4
	add	r3, r3, r2
	lsl	r3, r3, #0x2
	add	r3, r3, r5
	ldrh	r2, [r3, #0x4]
	lsl	r2, r2, #0x16
	lsr	r2, r2, #0x11
	add	r2, r2, r4
	mov	r3, #0x0
	str	r3, [sp]
	str	r3, [sp, #0x4]
	mov	r3, #0x2
	str	r3, [sp, #0x8]
	mov	r3, #0x7
	str	r3, [sp, #0xc]
	mov	r3, #0x1
	str	r3, [sp, #0x10]
	mov	r3, #0x7
	bl	PrintOnAbilityPopUp
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L907:
	.align	2, 0
.L906:
	.word	gBattleMons+0x32
	.word	gSprites
	.word	0x6010000
.Lfe66:
	.size	 PrintBattlerOnAbilityPopUp,.Lfe66-PrintBattlerOnAbilityPopUp
	.align	2, 0
	.type	 PrintAbilityOnAbilityPopUp,function
	.thumb_func
PrintAbilityOnAbilityPopUp:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r3, #0xd
	mul	r0, r0, r3
	ldr	r3, .L909
	add	r0, r0, r3
	ldr	r5, .L909+0x4
	lsl	r3, r1, #0x4
	add	r3, r3, r1
	lsl	r3, r3, #0x2
	add	r3, r3, r5
	ldrh	r1, [r3, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r4, .L909+0x8
	add	r1, r1, r4
	lsl	r3, r2, #0x4
	add	r3, r3, r2
	lsl	r3, r3, #0x2
	add	r3, r3, r5
	ldrh	r2, [r3, #0x4]
	lsl	r2, r2, #0x16
	lsr	r2, r2, #0x11
	add	r2, r2, r4
	mov	r4, #0x1
	str	r4, [sp]
	mov	r3, #0x4
	str	r3, [sp, #0x4]
	mov	r3, #0x7
	str	r3, [sp, #0x8]
	mov	r3, #0x9
	str	r3, [sp, #0xc]
	str	r4, [sp, #0x10]
	mov	r3, #0x7
	bl	PrintOnAbilityPopUp
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L910:
	.align	2, 0
.L909:
	.word	gAbilityNames
	.word	gSprites
	.word	0x6010100
.Lfe67:
	.size	 PrintAbilityOnAbilityPopUp,.Lfe67-PrintAbilityOnAbilityPopUp
	.section .rodata
	.align	1, 0
	.type	 sOverwrittenPixelsTable,object
sOverwrittenPixelsTable:
	.short	0x0
	.short	0x5
	.short	0x4
	.short	0x5
	.short	0x8
	.short	0x5
	.short	0xc
	.short	0x5
	.short	0x10
	.short	0x5
	.short	0x14
	.short	0x5
	.short	0x18
	.short	0x5
	.short	0x1c
	.short	0x3
	.short	0x100
	.short	0x3
	.short	0x104
	.short	0x3
	.short	0x108
	.short	0x3
	.short	0x10c
	.short	0x3
	.short	0x110
	.short	0x3
	.short	0x114
	.short	0x8
	.short	0x134
	.short	0x8
	.short	0x154
	.short	0x8
	.short	0x174
	.short	0x8
	.short	0x194
	.short	0x8
	.short	0x1b4
	.short	0x8
	.short	0x1d4
	.short	0x8
	.short	0x1f4
	.short	0x8
	.short	0x118
	.short	0x8
	.short	0x138
	.short	0x8
	.short	0x158
	.short	0x8
	.short	0x178
	.short	0x8
	.short	0x198
	.short	0x8
	.short	0x1b8
	.short	0x8
	.short	0x1d8
	.short	0x8
	.short	0x1f8
	.short	0x8
	.short	0x11c
	.short	0x3
	.short	0x200
	.short	0x3
	.short	0x204
	.short	0x3
	.short	0x208
	.short	0x3
	.short	0x20c
	.short	0x3
	.short	0x210
	.short	0x3
	.short	0x214
	.short	0x3
	.short	0x218
	.short	0x3
	.short	0x21c
	.short	0x3
	.short	0x300
	.short	0x3
	.short	0x304
	.short	0x3
	.short	0x308
	.short	0x3
	.size	 sOverwrittenPixelsTable,164
.text
	.align	2, 0
	.type	 RestoreOverwrittenPixels,function
	.thumb_func
RestoreOverwrittenPixels:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	str	r0, [sp]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	bl	Alloc
	str	r0, [sp, #0x4]
	ldr	r2, .L943
	ldr	r0, [sp]
	ldr	r1, [sp, #0x4]
	bl	CpuSet
	mov	r4, #0x0
.L928:
	lsl	r1, r4, #0x2
	ldr	r2, .L943+0x4
	add	r0, r1, r2
	ldrh	r2, [r0]
	ldr	r3, .L943+0x8
	add	r1, r1, r3
	ldrh	r3, [r1]
	ldr	r0, [sp, #0x4]
	add	r7, r0, r2
	ldr	r0, .L943+0xc
	add	r2, r2, r0
	mov	ip, r2
	add	r5, r3, #0
	mov	r6, #0x0
	mov	r0, #0x1
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L929	@cond_branch
	add	r4, r4, #0x1
	mov	sl, r4
	cmp	r3, #0
	beq	.L927	@cond_branch
	mov	r2, #0xf0
	mov	r9, r2
	mov	r3, #0xf
	mov	r8, r3
	add	r4, r7, #0
.L932:
	ldrb	r0, [r4]
	mov	r1, r9
	and	r1, r1, r0
	strb	r1, [r4]
	mov	r0, ip
	add	r2, r0, r6
	ldrb	r0, [r2]
	mov	r3, r8
	and	r3, r3, r0
	orr	r3, r3, r1
	strb	r3, [r4]
	sub	r5, r5, #0x1
	cmp	r5, #0
	beq	.L933	@cond_branch
	mov	r0, r8
	and	r0, r0, r3
	strb	r0, [r4]
	ldrb	r2, [r2]
	mov	r1, r9
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4]
	sub	r5, r5, #0x1
.L933:
	add	r4, r4, #0x1
	add	r6, r6, #0x1
	cmp	r5, #0
	bne	.L932	@cond_branch
	b	.L927
.L944:
	.align	2, 0
.L943:
	.word	0x4000200
	.word	sOverwrittenPixelsTable
	.word	sOverwrittenPixelsTable+0x2
	.word	sAbilityPopUpGfx
.L929:
	lsr	r2, r3, #0x1
	add	r4, r4, #0x1
	mov	sl, r4
	cmp	r6, r2
	bcs	.L927	@cond_branch
.L938:
	add	r0, r7, r6
	mov	r3, ip
	add	r1, r3, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, r2
	bcc	.L938	@cond_branch
.L927:
	mov	r4, sl
	cmp	r4, #0x28
	bls	.L928	@cond_branch
	ldr	r2, .L945
	ldr	r0, [sp, #0x4]
	ldr	r1, [sp]
	bl	CpuSet
	ldr	r0, [sp, #0x4]
	bl	Free
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L946:
	.align	2, 0
.L945:
	.word	0x4000200
.Lfe68:
	.size	 RestoreOverwrittenPixels,.Lfe68-RestoreOverwrittenPixels
	.align	2, 0
	.globl	CreateAbilityPopUp
	.type	 CreateAbilityPopUp,function
	.thumb_func
CreateAbilityPopUp:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r1
	add	r6, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r5, .L954
	ldr	r0, [r5]
	ldr	r4, .L954+0x4
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L949	@cond_branch
	ldr	r0, .L954+0x8
	bl	LoadSpriteSheet
	ldr	r0, .L954+0xc
	bl	LoadSpritePalette
.L949:
	ldr	r2, [r5]
	add	r2, r2, r4
	ldr	r1, .L954+0x10
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	mov	r4, #0x0
	mov	r9, r4
	strb	r0, [r2]
	mov	r0, r8
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L954+0x14
	cmp	r6, #0
	beq	.L950	@cond_branch
	ldr	r1, .L954+0x18
.L950:
	mov	r5, #0x1
	add	r0, r4, #0
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L952	@cond_branch
	ldr	r0, .L954+0x1c
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	ldrh	r1, [r4]
	sub	r1, r1, #0x44
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r3, #0x2
	ldrsh	r2, [r4, r3]
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L954+0x20
	ldrh	r1, [r4]
	sub	r1, r1, #0x4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r3, #0x2
	ldrsh	r2, [r4, r3]
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L954+0x24
	lsl	r2, r7, #0x4
	add	r2, r2, r7
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrh	r0, [r4]
	strh	r0, [r2, #0x2e]
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r4]
	add	r0, r0, #0x40
	strh	r0, [r1, #0x2e]
	strh	r5, [r2, #0x34]
	strh	r5, [r1, #0x34]
	b	.L953
.L955:
	.align	2, 0
.L954:
	.word	gBattleStruct
	.word	0x28b
	.word	sSpriteSheet_AbilityPopUp
	.word	sSpritePalette_AbilityPopUp
	.word	gBitTable
	.word	sAbilityPopUpCoordsSingles
	.word	sAbilityPopUpCoordsDoubles
	.word	sSpriteTemplate_AbilityPopUp1
	.word	sSpriteTemplate_AbilityPopUp2
	.word	gSprites
.L952:
	ldr	r0, .L956
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	ldrh	r1, [r4]
	add	r1, r1, #0x44
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r3, #0x2
	ldrsh	r2, [r4, r3]
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L956+0x4
	ldrh	r1, [r4]
	add	r1, r1, #0x84
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r3, #0x2
	ldrsh	r2, [r4, r3]
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L956+0x8
	lsl	r2, r7, #0x4
	add	r2, r2, r7
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrh	r0, [r4]
	strh	r0, [r2, #0x2e]
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r4]
	add	r0, r0, #0x40
	strh	r0, [r1, #0x2e]
	mov	r4, r9
	strh	r4, [r2, #0x34]
	strh	r4, [r1, #0x34]
.L953:
	ldr	r3, .L956+0xc
	ldr	r1, [r3]
	ldr	r2, .L956+0x10
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	mov	r4, #0xa3
	lsl	r4, r4, #0x2
	add	r1, r1, r4
	add	r1, r1, r0
	strb	r7, [r1]
	ldr	r1, [r3]
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	ldr	r2, .L956+0x14
	add	r1, r1, r2
	add	r1, r1, r0
	strb	r6, [r1]
	ldr	r0, .L956+0x18
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L956+0x1c
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r7, [r1, #0x14]
	strh	r6, [r1, #0x16]
	ldr	r1, .L956+0x8
	lsl	r5, r7, #0x4
	add	r5, r5, r7
	lsl	r5, r5, #0x2
	add	r5, r5, r1
	mov	r0, #0x1
	strh	r0, [r5, #0x38]
	mov	r3, r8
	strh	r3, [r5, #0x36]
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	strh	r3, [r4, #0x36]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
	mov	r0, r8
	add	r1, r7, #0
	add	r2, r6, #0
	bl	PrintBattlerOnAbilityPopUp
	mov	r0, sl
	add	r1, r7, #0
	add	r2, r6, #0
	bl	PrintAbilityOnAbilityPopUp
	ldrh	r0, [r5, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x11
	ldr	r1, .L956+0x20
	add	r0, r0, r1
	bl	RestoreOverwrittenPixels
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L957:
	.align	2, 0
.L956:
	.word	sSpriteTemplate_AbilityPopUp1
	.word	sSpriteTemplate_AbilityPopUp2
	.word	gSprites
	.word	gBattleStruct
	.word	gBattleAnimAttacker
	.word	0x28d
	.word	Task_FreeAbilityPopUpGfx
	.word	gTasks
	.word	0x6010000
.Lfe69:
	.size	 CreateAbilityPopUp,.Lfe69-CreateAbilityPopUp
	.align	2, 0
	.type	 SpriteCb_AbilityPopUp,function
	.thumb_func
SpriteCb_AbilityPopUp:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L959	@cond_branch
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L960	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L960	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L960:
	mov	r3, #0x34
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bne	.L971	@cond_branch
	ldrh	r0, [r4, #0x20]
	sub	r0, r0, #0x4
	strh	r0, [r4, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	ldrh	r2, [r4, #0x2e]
	cmp	r0, r1
	ble	.L962	@cond_branch
	b	.L964
.L971:
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x4
	strh	r0, [r4, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x2e
	ldrsh	r1, [r4, r3]
	ldrh	r2, [r4, #0x2e]
	cmp	r0, r1
	blt	.L964	@cond_branch
.L962:
	strh	r2, [r4, #0x20]
	mov	r0, #0x1
	strh	r0, [r4, #0x30]
	mov	r0, #0x30
	b	.L973
.L959:
	ldrh	r1, [r4, #0x32]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L965	@cond_branch
	mov	r3, #0x34
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bne	.L972	@cond_branch
	ldrh	r1, [r4, #0x20]
	add	r1, r1, #0x4
	strh	r1, [r4, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	add	r0, r0, #0x44
	cmp	r1, r0
	bge	.L967	@cond_branch
	b	.L964
.L972:
	ldrh	r1, [r4, #0x20]
	sub	r1, r1, #0x4
	strh	r1, [r4, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r3, #0x2e
	ldrsh	r0, [r4, r3]
	sub	r0, r0, #0x44
	cmp	r1, r0
	bgt	.L964	@cond_branch
.L967:
	ldr	r0, .L974
	ldr	r1, [r0]
	ldr	r0, .L974+0x4
	add	r1, r1, r0
	ldr	r2, .L974+0x8
	mov	r3, #0x36
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r2, [r0]
	ldrb	r0, [r1]
	bic	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
	b	.L964
.L975:
	.align	2, 0
.L974:
	.word	gBattleStruct
	.word	0x28b
	.word	gBitTable
.L965:
	ldr	r0, .L976
	add	r0, r0, #0x33
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L964	@cond_branch
	sub	r0, r1, #0x1
.L973:
	strh	r0, [r4, #0x32]
.L964:
	pop	{r4}
	pop	{r0}
	bx	r0
.L977:
	.align	2, 0
.L976:
	.word	gBattleScripting
.Lfe70:
	.size	 SpriteCb_AbilityPopUp,.Lfe70-SpriteCb_AbilityPopUp
	.align	2, 0
	.globl	DestroyAbilityPopUp
	.type	 DestroyAbilityPopUp,function
	.thumb_func
DestroyAbilityPopUp:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	ldr	r5, .L979
	ldr	r1, .L979+0x4
	ldr	r3, [r1]
	lsr	r0, r0, #0x17
	mov	r2, #0xa3
	lsl	r2, r2, #0x2
	add	r1, r3, r2
	add	r1, r1, r0
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	mov	r4, #0x0
	mov	r2, #0x0
	strh	r2, [r1, #0x32]
	ldr	r1, .L979+0x8
	add	r3, r3, r1
	add	r3, r3, r0
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x32]
	ldr	r0, .L979+0xc
	add	r0, r0, #0x33
	strb	r4, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L980:
	.align	2, 0
.L979:
	.word	gSprites
	.word	gBattleStruct
	.word	0x28d
	.word	gBattleScripting
.Lfe71:
	.size	 DestroyAbilityPopUp,.Lfe71-DestroyAbilityPopUp
	.align	2, 0
	.type	 Task_FreeAbilityPopUpGfx,function
	.thumb_func
Task_FreeAbilityPopUpGfx:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r3, .L983
	ldr	r1, .L983+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r0, #0x14
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L982	@cond_branch
	mov	r1, #0x16
	ldrsh	r0, [r2, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L982	@cond_branch
	ldr	r0, .L983+0x8
	ldr	r0, [r0]
	ldr	r1, .L983+0xc
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L982	@cond_branch
	ldr	r4, .L983+0x10
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	add	r0, r5, #0
	bl	DestroyTask
.L982:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L984:
	.align	2, 0
.L983:
	.word	gSprites
	.word	gTasks
	.word	gBattleStruct
	.word	0x28b
	.word	0xd720
.Lfe72:
	.size	 Task_FreeAbilityPopUpGfx,.Lfe72-Task_FreeAbilityPopUpGfx
	.section .rodata
	.align	2, 0
	.type	 sOamData_LastUsedBall,object
	.size	 sOamData_LastUsedBall,8
sOamData_LastUsedBall:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x4
	.short	0x0
	.align	2, 0
	.type	 sSpriteTemplate_LastUsedBallWindow,object
	.size	 sSpriteTemplate_LastUsedBallWindow,24
sSpriteTemplate_LastUsedBallWindow:
	.short	0xd721
	.short	0xd720
	.word	sOamData_LastUsedBall
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_LastUsedBallWin
	.type	 sLastUsedBallWindowGfx,object
sLastUsedBallWindowGfx:
	.byte	0x0
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0xb0
	.byte	0xaa
	.byte	0xee
	.byte	0xee
	.byte	0xab
	.byte	0xea
	.byte	0xdd
	.byte	0x77
	.byte	0xab
	.byte	0xde
	.byte	0x7d
	.byte	0x77
	.byte	0xeb
	.byte	0xdd
	.byte	0x7d
	.byte	0x77
	.byte	0xeb
	.byte	0xdd
	.byte	0x7d
	.byte	0x77
	.byte	0xeb
	.byte	0xdd
	.byte	0x7d
	.byte	0x77
	.byte	0xeb
	.byte	0xdd
	.byte	0x7d
	.byte	0x77
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0xaa
	.byte	0x7a
	.byte	0x77
	.byte	0x77
	.byte	0x7a
	.byte	0xa7
	.byte	0x77
	.byte	0x77
	.byte	0xaa
	.byte	0x7a
	.byte	0x77
	.byte	0x77
	.byte	0x7a
	.byte	0xa7
	.byte	0x77
	.byte	0x77
	.byte	0x7a
	.byte	0xa7
	.byte	0x77
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0x0
	.byte	0xee
	.byte	0xee
	.byte	0xaa
	.byte	0xb
	.byte	0x77
	.byte	0xda
	.byte	0xae
	.byte	0xba
	.byte	0x77
	.byte	0xa7
	.byte	0xed
	.byte	0xba
	.byte	0x77
	.byte	0xa7
	.byte	0xdd
	.byte	0xbe
	.byte	0x77
	.byte	0xa7
	.byte	0xdd
	.byte	0xbe
	.byte	0x77
	.byte	0xa7
	.byte	0xdd
	.byte	0xbe
	.byte	0x77
	.byte	0xa7
	.byte	0xdd
	.byte	0xbe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xeb
	.byte	0xdd
	.byte	0xad
	.byte	0x77
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xaa
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0x77
	.byte	0xaa
	.byte	0xdd
	.byte	0xbe
	.byte	0xaa
	.byte	0xda
	.byte	0xdd
	.byte	0xbe
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xeb
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xab
	.byte	0xde
	.byte	0xdd
	.byte	0xdd
	.byte	0xab
	.byte	0xea
	.byte	0xdd
	.byte	0xdd
	.byte	0xb0
	.byte	0xaa
	.byte	0xee
	.byte	0xee
	.byte	0x0
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0xbe
	.byte	0xdd
	.byte	0xdd
	.byte	0xed
	.byte	0xba
	.byte	0xdd
	.byte	0xdd
	.byte	0xae
	.byte	0xba
	.byte	0xee
	.byte	0xee
	.byte	0xaa
	.byte	0xb
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sLastUsedBallWindowGfx,512
	.align	2, 0
	.type	 sSpriteSheet_LastUsedBallWindow,object
	.size	 sSpriteSheet_LastUsedBallWindow,8
sSpriteSheet_LastUsedBallWindow:
	.word	sLastUsedBallWindowGfx
	.short	0x200
	.short	0xd721
.text
	.align	2, 0
	.globl	CanThrowLastUsedBall
	.type	 CanThrowLastUsedBall,function
	.thumb_func
CanThrowLastUsedBall:
	push	{r4, lr}
	mov	r4, #0x0
	bl	CanThrowBall
	cmp	r0, #0
	bne	.L986	@cond_branch
	ldr	r0, .L987
	ldr	r0, [r0]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L986	@cond_branch
	ldr	r0, .L987+0x4
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x28]
	mov	r1, #0x1
	bl	CheckBagHasItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r4, r1, #0x1f
.L986:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L988:
	.align	2, 0
.L987:
	.word	gBattleTypeFlags
	.word	gSaveBlock2Ptr
.Lfe73:
	.size	 CanThrowLastUsedBall,.Lfe73-CanThrowLastUsedBall
	.align	2, 0
	.globl	TryAddLastUsedBallItemSprites
	.type	 TryAddLastUsedBallItemSprites,function
	.thumb_func
TryAddLastUsedBallItemSprites:
	push	{r4, r5, r6, r7, lr}
	ldr	r5, .L996
	ldr	r1, [r5]
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	beq	.L990	@cond_branch
	mov	r1, #0x1
	bl	CheckBagHasItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L990	@cond_branch
	ldr	r4, .L996+0x4
	add	r0, r4, #0
	bl	CompactItemsInBagPocket
	ldr	r1, [r5]
	ldr	r0, [r4]
	ldrh	r0, [r0]
	strh	r0, [r1, #0x28]
.L990:
	bl	CanThrowBall
	cmp	r0, #0
	bne	.L989	@cond_branch
	ldr	r0, .L996+0x8
	ldr	r4, [r0]
	mov	r0, #0x8
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L989	@cond_branch
	ldr	r6, .L996
	ldr	r0, [r6]
	ldrh	r0, [r0, #0x28]
	mov	r1, #0x1
	bl	CheckBagHasItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L989	@cond_branch
	ldr	r5, .L996+0xc
	ldr	r0, [r5]
	ldr	r7, .L996+0x10
	add	r0, r0, r7
	ldrb	r0, [r0]
	cmp	r0, #0x40
	bne	.L993	@cond_branch
	ldr	r0, [r6]
	ldrh	r2, [r0, #0x28]
	mov	r0, #0x66
	mov	r1, #0x66
	bl	AddItemIconSprite
	ldr	r1, [r5]
	add	r2, r7, #0
	add	r1, r1, r2
	strb	r0, [r1]
	ldr	r3, .L996+0x14
	ldr	r2, [r5]
	add	r0, r7, #0
	add	r2, r2, r0
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r1, .L996+0x18
	strh	r1, [r0, #0x20]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x44
	strh	r1, [r0, #0x22]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r3, r3, #0x1c
	add	r0, r0, r3
	ldr	r1, .L996+0x1c
	str	r1, [r0]
.L993:
	ldr	r0, .L996+0x20
	bl	LoadSpritePalette
	ldr	r0, .L996+0x24
	bl	GetSpriteTileStartByTag
	lsl	r0, r0, #0x10
	ldr	r1, .L996+0x28
	cmp	r0, r1
	bne	.L994	@cond_branch
	ldr	r0, .L996+0x2c
	bl	LoadSpriteSheet
.L994:
	ldr	r0, [r5]
	ldr	r1, .L996+0x30
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x40
	bne	.L989	@cond_branch
	ldr	r0, .L996+0x34
	mov	r1, #0xf
	neg	r1, r1
	mov	r2, #0x3c
	mov	r3, #0x5
	bl	CreateSprite
	ldr	r1, [r5]
	ldr	r2, .L996+0x30
	add	r1, r1, r2
	strb	r0, [r1]
	ldr	r2, .L996+0x14
	ldr	r0, [r5]
	add	r0, r0, r7
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x2e]
.L989:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L997:
	.align	2, 0
.L996:
	.word	gSaveBlock2Ptr
	.word	gBagPockets+0x10
	.word	gBattleTypeFlags
	.word	gBattleStruct
	.word	0x352
	.word	gSprites
	.word	0xfff1
	.word	SpriteCB_LastUsedBall
	.word	sSpritePalette_AbilityPopUp
	.word	0xd721
	.word	-0x10000
	.word	sSpriteSheet_LastUsedBallWindow
	.word	0x353
	.word	sSpriteTemplate_LastUsedBallWindow
.Lfe74:
	.size	 TryAddLastUsedBallItemSprites,.Lfe74-TryAddLastUsedBallItemSprites
	.align	2, 0
	.type	 DestroyLastUsedBallWinGfx,function
	.thumb_func
DestroyLastUsedBallWinGfx:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L999
	bl	FreeSpriteTilesByTag
	ldr	r0, .L999+0x4
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0
	bl	DestroySprite
	ldr	r0, .L999+0x8
	ldr	r0, [r0]
	ldr	r1, .L999+0xc
	add	r0, r0, r1
	mov	r1, #0x40
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1000:
	.align	2, 0
.L999:
	.word	0xd721
	.word	0xd720
	.word	gBattleStruct
	.word	0x353
.Lfe75:
	.size	 DestroyLastUsedBallWinGfx,.Lfe75-DestroyLastUsedBallWinGfx
	.align	2, 0
	.type	 DestroyLastUsedBallGfx,function
	.thumb_func
DestroyLastUsedBallGfx:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x66
	bl	FreeSpriteTilesByTag
	mov	r0, #0x66
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0
	bl	DestroySprite
	ldr	r0, .L1002
	ldr	r0, [r0]
	ldr	r1, .L1002+0x4
	add	r0, r0, r1
	mov	r1, #0x40
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1003:
	.align	2, 0
.L1002:
	.word	gBattleStruct
	.word	0x352
.Lfe76:
	.size	 DestroyLastUsedBallGfx,.Lfe76-DestroyLastUsedBallGfx
	.align	2, 0
	.type	 SpriteCB_LastUsedBallWin,function
	.thumb_func
SpriteCB_LastUsedBallWin:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L1005	@cond_branch
	ldrh	r2, [r1, #0x20]
	mov	r3, #0x20
	ldrsh	r0, [r1, r3]
	mov	r3, #0xf
	neg	r3, r3
	cmp	r0, r3
	beq	.L1010	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r3
	bne	.L1008	@cond_branch
.L1010:
	add	r0, r1, #0
	bl	DestroyLastUsedBallWinGfx
	b	.L1008
.L1005:
	ldrh	r2, [r1, #0x20]
	mov	r3, #0x20
	ldrsh	r0, [r1, r3]
	cmp	r0, #0xe
	beq	.L1008	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0x20]
.L1008:
	pop	{r0}
	bx	r0
.Lfe77:
	.size	 SpriteCB_LastUsedBallWin,.Lfe77-SpriteCB_LastUsedBallWin
	.align	2, 0
	.type	 SpriteCB_LastUsedBall,function
	.thumb_func
SpriteCB_LastUsedBall:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L1012	@cond_branch
	ldrh	r2, [r1, #0x20]
	mov	r3, #0x20
	ldrsh	r0, [r1, r3]
	mov	r3, #0xf
	neg	r3, r3
	cmp	r0, r3
	beq	.L1017	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r3
	bne	.L1015	@cond_branch
.L1017:
	add	r0, r1, #0
	bl	DestroyLastUsedBallGfx
	b	.L1015
.L1012:
	ldrh	r2, [r1, #0x20]
	mov	r3, #0x20
	ldrsh	r0, [r1, r3]
	cmp	r0, #0xf
	beq	.L1015	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0x20]
.L1015:
	pop	{r0}
	bx	r0
.Lfe78:
	.size	 SpriteCB_LastUsedBall,.Lfe78-SpriteCB_LastUsedBall
	.align	2, 0
	.type	 TryHideOrRestoreLastUsedBall,function
	.thumb_func
TryHideOrRestoreLastUsedBall:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L1030
	ldr	r2, [r0]
	ldr	r0, .L1030+0x4
	add	r1, r2, r0
	ldrb	r0, [r1]
	cmp	r0, #0x40
	beq	.L1018	@cond_branch
	cmp	r3, #0
	beq	.L1021	@cond_branch
	cmp	r3, #0x1
	beq	.L1024	@cond_branch
	b	.L1018
.L1031:
	.align	2, 0
.L1030:
	.word	gBattleStruct
	.word	0x352
.L1021:
	ldr	r4, .L1032
	ldrb	r0, [r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r3, #0x1
	b	.L1029
.L1033:
	.align	2, 0
.L1032:
	.word	gSprites
.L1024:
	ldr	r4, .L1034
	ldrb	r0, [r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r3, #0x0
.L1029:
	strh	r3, [r1, #0x2e]
	ldr	r0, .L1034+0x4
	add	r1, r2, r0
	ldrb	r0, [r1]
	cmp	r0, #0x40
	beq	.L1018	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r3, [r0, #0x2e]
.L1018:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1035:
	.align	2, 0
.L1034:
	.word	gSprites
	.word	0x353
.Lfe79:
	.size	 TryHideOrRestoreLastUsedBall,.Lfe79-TryHideOrRestoreLastUsedBall
	.align	2, 0
	.globl	TryHideLastUsedBall
	.type	 TryHideLastUsedBall,function
	.thumb_func
TryHideLastUsedBall:
	push	{lr}
	mov	r0, #0x0
	bl	TryHideOrRestoreLastUsedBall
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 TryHideLastUsedBall,.Lfe80-TryHideLastUsedBall
	.align	2, 0
	.globl	TryRestoreLastUsedBall
	.type	 TryRestoreLastUsedBall,function
	.thumb_func
TryRestoreLastUsedBall:
	push	{lr}
	ldr	r0, .L1040
	ldr	r0, [r0]
	ldr	r1, .L1040+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x40
	beq	.L1038	@cond_branch
	mov	r0, #0x1
	bl	TryHideOrRestoreLastUsedBall
	b	.L1039
.L1041:
	.align	2, 0
.L1040:
	.word	gBattleStruct
	.word	0x352
.L1038:
	bl	TryAddLastUsedBallItemSprites
.L1039:
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 TryRestoreLastUsedBall,.Lfe81-TryRestoreLastUsedBall
.text
	.align	2, 0

