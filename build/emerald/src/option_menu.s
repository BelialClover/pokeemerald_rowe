@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sItemFunctions,object
	.size	 sItemFunctions,88
sItemFunctions:
	.word	TextSpeed_DrawChoices
	.word	FourOptions_ProcessInput
	.word	BattleScene_DrawChoices
	.word	TwoOptions_ProcessInput
	.word	BattleStyle_DrawChoices
	.word	BattleStyle_ProcessInput
	.word	Sound_DrawChoices
	.word	Sound_ProcessInput
	.word	ButtonMode_DrawChoices
	.word	ThreeOptions_ProcessInput
	.word	FrameType_DrawChoices
	.word	FrameType_ProcessInput
	.word	HpBar_DrawChoices
	.word	ElevenOptions_ProcessInput
	.word	HpBar_DrawChoices
	.word	ElevenOptions_ProcessInput
	.word	Transition_DrawChoices
	.word	TwoOptions_ProcessInput
	.word	UnitSystem_DrawChoices
	.word	TwoOptions_ProcessInput
	.word	0x0
	.word	0x0
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sOptions,object
	.size	 sOptions,4
sOptions:
	.word	0x0
	.section .rodata
	.align	1, 0
	.type	 sUnknown_0855C604,object
sUnknown_0855C604:
	.short	0x0
	.short	0x7fff
	.short	0x2adf
	.short	0x1f8
	.short	0x423f
	.short	0xcdf
	.short	0x2529
	.short	0x675a
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sUnknown_0855C604,32
	.type	 sEqualSignGfx,object
sEqualSignGfx:
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x1f
	.byte	0x11
	.byte	0x11
	.byte	0xf8
	.byte	0x8f
	.byte	0x88
	.byte	0x88
	.byte	0xf8
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x1f
	.byte	0x11
	.byte	0x11
	.byte	0xf8
	.byte	0x8f
	.byte	0x88
	.byte	0x88
	.byte	0xf8
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.size	 sEqualSignGfx,64
	.type	 sText_HpBar,object
sText_HpBar:
	.byte	0xc2
	.byte	0xe4
	.byte	0x0
	.byte	0xbc
	.byte	0xd5
	.byte	0xe6
	.byte	0x0
	.byte	0xcd
	.byte	0xe4
	.byte	0xd9
	.byte	0xd9
	.byte	0xd8
	.byte	0xff
	.size	 sText_HpBar,13
	.type	 sText_ExpBar,object
sText_ExpBar:
	.byte	0xbf
	.byte	0xec
	.byte	0xe4
	.byte	0x0
	.byte	0xbc
	.byte	0xd5
	.byte	0xe6
	.byte	0x0
	.byte	0xcd
	.byte	0xe4
	.byte	0xd9
	.byte	0xd9
	.byte	0xd8
	.byte	0xff
	.size	 sText_ExpBar,14
	.type	 sText_Transition,object
sText_Transition:
	.byte	0xce
	.byte	0xe6
	.byte	0xd5
	.byte	0xe2
	.byte	0xe7
	.byte	0xdd
	.byte	0xe8
	.byte	0xdd
	.byte	0xe3
	.byte	0xe2
	.byte	0xff
	.size	 sText_Transition,11
	.type	 sText_UnitSystem,object
sText_UnitSystem:
	.byte	0xcf
	.byte	0xe2
	.byte	0xdd
	.byte	0xe8
	.byte	0x0
	.byte	0xcd
	.byte	0xed
	.byte	0xe7
	.byte	0xe8
	.byte	0xd9
	.byte	0xe1
	.byte	0xff
	.size	 sText_UnitSystem,12
	.align	2, 0
	.type	 sOptionMenuItemsNames,object
	.size	 sOptionMenuItemsNames,44
sOptionMenuItemsNames:
	.word	gText_TextSpeed
	.word	gText_BattleScene
	.word	gText_BattleStyle
	.word	gText_Sound
	.word	gText_ButtonMode
	.word	gText_Frame
	.word	sText_HpBar
	.word	sText_ExpBar
	.word	sText_Transition
	.word	sText_UnitSystem
	.word	gText_OptionMenuCancel
	.type	 sText_Instant,object
sText_Instant:
	.byte	0xfc
	.byte	0x1
	.byte	0x6
	.byte	0xfc
	.byte	0x3
	.byte	0x7
	.byte	0xc3
	.byte	0xc8
	.byte	0xcd
	.byte	0xce
	.byte	0xbb
	.byte	0xc8
	.byte	0xce
	.byte	0xff
	.size	 sText_Instant,14
	.align	2, 0
	.type	 sTextSpeedStrings,object
sTextSpeedStrings:
	.word	gText_TextSpeedSlow
	.word	gText_TextSpeedMid
	.word	gText_TextSpeedFast
	.word	sText_Instant
	.size	 sTextSpeedStrings,16
	.align	2, 0
	.type	 sOptionMenuWinTemplates,object
sOptionMenuWinTemplates:
	.byte	0x1
	.byte	0x2
	.byte	0x1
	.byte	0x1a
	.byte	0x2
	.byte	0x1
	.short	0x2
	.byte	0x0
	.byte	0x2
	.byte	0x5
	.byte	0x1a
	.byte	0xe
	.byte	0x1
	.short	0x36
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sOptionMenuWinTemplates,24
	.align	2, 0
	.type	 sOptionMenuBgTemplates,object
	.size	 sOptionMenuBgTemplates,8
sOptionMenuBgTemplates:
	.byte	0xe5
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xf4
	.byte	0x11
	.byte	0x0
	.space	1
	.align	1, 0
	.type	 sUnknown_0855C6A0,object
sUnknown_0855C6A0:
	.short	0x7e51
	.size	 sUnknown_0855C6A0,2
.text
	.align	2, 0
	.type	 MainCB2,function
	.thumb_func
MainCB2:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 MainCB2,.Lfe1-MainCB2
	.align	2, 0
	.type	 VBlankCB,function
	.thumb_func
VBlankCB:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 VBlankCB,.Lfe2-VBlankCB
	.align	2, 0
	.type	 DrawChoices,function
	.thumb_func
DrawChoices:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r1, .L6
	lsl	r0, r4, #0x3
	add	r0, r0, r1
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L5	@cond_branch
	ldr	r0, .L6+0x4
	ldr	r0, [r0]
	add	r0, r0, r4
	ldrb	r0, [r0]
	add	r1, r5, #0
	bl	_call_via_r3
.L5:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	sItemFunctions
	.word	sOptions
.Lfe3:
	.size	 DrawChoices,.Lfe3-DrawChoices
	.align	2, 0
	.globl	CB2_InitOptionMenu
	.type	 CB2_InitOptionMenu,function
	.thumb_func
CB2_InitOptionMenu:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	ldr	r1, .L36
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r0, r1, r2
	ldrb	r0, [r0]
	add	r2, r1, #0
	cmp	r0, #0xb
	bhi	.L11	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L36+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L37:
	.align	2, 0
.L36:
	.word	gMain
	.word	.L33
	.align	2, 0
	.align	2, 0
.L33:
	.word	.L11
	.word	.L12
	.word	.L18
	.word	.L19
	.word	.L20
	.word	.L21
	.word	.L22
	.word	.L23
	.word	.L24
	.word	.L25
	.word	.L26
	.word	.L32
.L11:
	mov	r0, #0x0
	bl	SetVBlankCallback
	b	.L34
.L12:
	mov	r6, #0xc0
	lsl	r6, r6, #0x13
	mov	r3, #0xc0
	lsl	r3, r3, #0x9
	add	r4, sp, #0x8
	mov	r9, r4
	add	r4, sp, #0x4
	mov	r7, #0x0
	mov	sl, r7
	ldr	r0, .L38
	mov	ip, r0
	mov	r5, #0x80
	lsl	r5, r5, #0x5
	mov	r2, #0x81
	lsl	r2, r2, #0x18
	mov	r8, r2
.L15:
	mov	r7, sl
	strh	r7, [r4]
	add	r0, sp, #0x4
	add	r1, r6, #0
	mov	r2, ip
	ldr	r7, .L38+0x4
	stmia r7!, {r0, r1, r2}
	.code	16
	add	r6, r6, r5
	sub	r3, r3, r5
	cmp	r3, r5
	bhi	.L15	@cond_branch
	mov	r0, sl
	strh	r0, [r4]
	lsr	r2, r3, #0x1
	add	r0, sp, #0x4
	add	r1, r6, #0
	mov	r3, r8
	orr	r2, r2, r3
	ldr	r4, .L38+0x4
	stmia r4!, {r0, r1, r2}
	.code	16
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	mov	r5, #0x0
	str	r5, [sp, #0x8]
	lsr	r2, r3, #0x2
	mov	r4, #0x85
	lsl	r4, r4, #0x18
	mov	r0, r9
	mov	r1, #0xe0
	lsl	r1, r1, #0x13
	orr	r2, r2, r4
	ldr	r7, .L38+0x4
	stmia r7!, {r0, r1, r2}
	.code	16
	add	r0, sp, #0x4
	strh	r5, [r0]
	lsr	r3, r3, #0x1
	mov	r2, #0x81
	lsl	r2, r2, #0x18
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	orr	r2, r2, r3
	ldr	r3, .L38+0x4
	stmia r3!, {r0, r1, r2}
	.code	16
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L38+0x8
	mov	r0, #0x0
	mov	r2, #0x2
	bl	InitBgsFromTemplates
	bl	ResetBgPositions
	ldr	r0, .L38+0xc
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	mov	r0, #0x40
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x1
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x23
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0xc1
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x4
	bl	SetGpuReg
	mov	r1, #0xc1
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	ldr	r1, .L38+0x10
	mov	r4, #0x87
	lsl	r4, r4, #0x3
	add	r1, r1, r4
	b	.L35
.L39:
	.align	2, 0
.L38:
	.word	-0x7efff800
	.word	0x40000d4
	.word	sOptionMenuBgTemplates
	.word	sOptionMenuWinTemplates
	.word	gMain
.L18:
	bl	ResetPaletteFade
	bl	ScanlineEffect_Stop
	bl	ResetTasks
	bl	ResetSpriteData
	ldr	r1, .L40
	mov	r7, #0x87
	lsl	r7, r7, #0x3
	add	r1, r1, r7
	b	.L35
.L41:
	.align	2, 0
.L40:
	.word	gMain
.L19:
	ldr	r0, .L42
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x14]
	lsr	r0, r0, #0x3
	bl	GetWindowFrameTilesPal
	ldr	r1, [r0]
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	mov	r3, #0xd1
	lsl	r3, r3, #0x1
	mov	r0, #0x1
	bl	LoadBgTiles
	ldr	r1, .L42+0x4
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	b	.L35
.L43:
	.align	2, 0
.L42:
	.word	gSaveBlock2Ptr
	.word	gMain
.L20:
	ldr	r0, .L44
	mov	r1, #0x0
	mov	r2, #0x2
	bl	LoadPalette
	ldr	r0, .L44+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x14]
	lsr	r0, r0, #0x3
	bl	GetWindowFrameTilesPal
	ldr	r0, [r0, #0x4]
	mov	r1, #0x70
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L44+0x8
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L35
.L45:
	.align	2, 0
.L44:
	.word	sUnknown_0855C6A0
	.word	gSaveBlock2Ptr
	.word	gMain
.L21:
	ldr	r0, .L46
	mov	r1, #0x10
	mov	r2, #0x20
	bl	LoadPalette
	b	.L34
.L47:
	.align	2, 0
.L46:
	.word	sUnknown_0855C604
.L22:
	mov	r0, #0x0
	bl	PutWindowTilemap
	bl	DrawTextOption
	ldr	r1, .L48
	mov	r4, #0x87
	lsl	r4, r4, #0x3
	add	r1, r1, r4
	b	.L35
.L49:
	.align	2, 0
.L48:
	.word	gMain
.L23:
	mov	r7, #0x87
	lsl	r7, r7, #0x3
	add	r1, r2, r7
	b	.L35
.L24:
	mov	r0, #0x1
	bl	PutWindowTilemap
	bl	DrawOptionMenuTexts
	ldr	r1, .L50
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L25:
	bl	sub_80BB154
	ldr	r1, .L50
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L35
.L51:
	.align	2, 0
.L50:
	.word	gMain
.L26:
	ldr	r0, .L52
	mov	r1, #0x0
	bl	CreateTask
	ldr	r4, .L52+0x4
	mov	r0, #0x14
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r2, .L52+0x8
	ldr	r1, [r2]
	ldrb	r1, [r1, #0x14]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1d
	strb	r1, [r0]
	ldr	r1, [r4]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x15]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1f
	strb	r0, [r1, #0x1]
	ldr	r1, [r4]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x15]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1f
	strb	r0, [r1, #0x2]
	ldr	r1, [r4]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x15]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	strb	r0, [r1, #0x3]
	ldr	r1, [r4]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x13]
	strb	r0, [r1, #0x4]
	ldr	r1, [r4]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x14]
	lsr	r0, r0, #0x3
	strb	r0, [r1, #0x5]
	ldr	r1, [r4]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x16]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	strb	r0, [r1, #0x6]
	ldr	r1, [r4]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x16]
	lsr	r0, r0, #0x4
	strb	r0, [r1, #0x7]
	ldr	r1, [r4]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x17]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	strb	r0, [r1, #0x8]
	ldr	r1, [r4]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x17]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1f
	strb	r0, [r1, #0x9]
	mov	r4, #0x0
.L30:
	lsl	r1, r4, #0x4
	add	r0, r4, #0
	mov	r2, #0xff
	bl	DrawChoices
	add	r4, r4, #0x1
	cmp	r4, #0x6
	bls	.L30	@cond_branch
	ldr	r0, .L52+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	bl	HighlightOptionMenuItem
	mov	r0, #0x1
	mov	r1, #0x3
	bl	CopyWindowToVram
.L34:
	ldr	r1, .L52+0xc
	mov	r3, #0x87
	lsl	r3, r3, #0x3
	add	r1, r1, r3
.L35:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L9
.L53:
	.align	2, 0
.L52:
	.word	Task_OptionMenuFadeIn
	.word	sOptions
	.word	gSaveBlock2Ptr
	.word	gMain
.L32:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L54
	bl	SetVBlankCallback
	ldr	r0, .L54+0x4
	bl	SetMainCallback2
.L9:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L55:
	.align	2, 0
.L54:
	.word	VBlankCB
	.word	MainCB2
.Lfe4:
	.size	 CB2_InitOptionMenu,.Lfe4-CB2_InitOptionMenu
	.align	2, 0
	.type	 Task_OptionMenuFadeIn,function
	.thumb_func
Task_OptionMenuFadeIn:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L58
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L57	@cond_branch
	ldr	r0, .L58+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L58+0x8
	str	r0, [r1]
.L57:
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gPaletteFade
	.word	gTasks
	.word	Task_OptionMenuProcessInput
.Lfe5:
	.size	 Task_OptionMenuFadeIn,.Lfe5-Task_OptionMenuFadeIn
	.align	2, 0
	.type	 ScrollMenu,function
	.thumb_func
ScrollMenu:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r1, r0, #0
	cmp	r1, #0
	bne	.L61	@cond_branch
	ldr	r0, .L63
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	add	r6, r0, #0x3
	mov	r5, #0x6
	b	.L62
.L64:
	.align	2, 0
.L63:
	.word	sOptions
.L61:
	ldr	r0, .L65
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	sub	r6, r0, #0x3
	mov	r5, #0x0
.L62:
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	mov	r2, #0x10
	mov	r3, #0x0
	bl	ScrollWindow
	lsl	r4, r5, #0x4
	add	r3, r4, #0
	mov	r0, #0xd0
	str	r0, [sp]
	mov	r0, #0x10
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x11
	mov	r2, #0x0
	bl	FillWindowPixelRect
	add	r0, r6, #0
	add	r1, r4, #0
	mov	r2, #0xff
	bl	DrawChoices
	ldr	r1, .L65+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	add	r4, r4, #0x1
	str	r4, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	sOptions
	.word	sOptionMenuItemsNames
.Lfe6:
	.size	 ScrollMenu,.Lfe6-ScrollMenu
	.align	2, 0
	.type	 ScrollAll,function
	.thumb_func
ScrollAll:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	add	r7, r0, #0
	mov	r0, #0x4
	mov	r8, r0
	lsl	r1, r7, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	mov	r2, #0x40
	mov	r3, #0x0
	bl	ScrollWindow
	cmp	r7, #0
	bne	.L68	@cond_branch
	mov	r3, #0x30
	b	.L70
.L68:
	mov	r3, #0x0
.L70:
	mov	r0, #0xd0
	str	r0, [sp]
	mov	r1, r8
	lsl	r0, r1, #0x4
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x11
	mov	r2, #0x0
	bl	FillWindowPixelRect
	mov	r6, #0x0
	cmp	r6, r8
	bge	.L72	@cond_branch
.L74:
	cmp	r7, #0
	bne	.L75	@cond_branch
	mov	r0, #0xa
	sub	r5, r0, r6
	mov	r0, #0x6
	sub	r0, r0, r6
	b	.L76
.L75:
	add	r5, r6, #0
	add	r0, r6, #0
.L76:
	lsl	r4, r0, #0x4
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0xff
	bl	DrawChoices
	ldr	r1, .L78
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	add	r4, r4, #0x1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	add	r6, r6, #0x1
	cmp	r6, r8
	blt	.L74	@cond_branch
.L72:
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L79:
	.align	2, 0
.L78:
	.word	sOptionMenuItemsNames
.Lfe7:
	.size	 ScrollAll,.Lfe7-ScrollAll
	.align	2, 0
	.type	 Task_OptionMenuProcessInput,function
	.thumb_func
Task_OptionMenuProcessInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r3, r2, #0
	ldr	r0, .L108
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L81	@cond_branch
	ldr	r0, .L108+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	cmp	r0, #0xa
	beq	.LCB819
	b	.L83	@long jump
.LCB819:
	ldr	r0, .L108+0x8
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	b	.L105
.L109:
	.align	2, 0
.L108:
	.word	gMain
	.word	sOptions
	.word	gTasks
.L81:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L84	@cond_branch
	ldr	r0, .L110
	lsl	r1, r3, #0x2
	add	r1, r1, r3
.L105:
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L110+0x4
	str	r0, [r1]
	b	.L83
.L111:
	.align	2, 0
.L110:
	.word	gTasks
	.word	Task_OptionMenuSave
.L84:
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	beq	.L86	@cond_branch
	ldr	r4, .L112
	ldr	r1, [r4]
	ldr	r2, [r1, #0x10]
	cmp	r2, #0x3
	bne	.L87	@cond_branch
	ldr	r0, [r1, #0xc]
	sub	r0, r0, #0x1
	str	r0, [r1, #0xc]
	cmp	r0, #0x2
	beq	.L107	@cond_branch
	mov	r0, #0x1
	bl	ScrollMenu
	b	.L98
.L113:
	.align	2, 0
.L112:
	.word	sOptions
.L87:
	ldr	r0, [r1, #0xc]
	sub	r0, r0, #0x1
	str	r0, [r1, #0xc]
	cmp	r0, #0
	bge	.L91	@cond_branch
	mov	r0, #0x3
	str	r0, [r1, #0xc]
	str	r0, [r1, #0x10]
	mov	r0, #0x0
	bl	ScrollAll
	ldr	r1, [r4]
	mov	r0, #0x6
	str	r0, [r1, #0x10]
	mov	r0, #0xa
	str	r0, [r1, #0xc]
	b	.L98
.L91:
	sub	r0, r2, #0x1
	b	.L107
.L86:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L94	@cond_branch
	ldr	r5, .L114
	ldr	r1, [r5]
	ldr	r2, [r1, #0x10]
	cmp	r2, #0x3
	bne	.L95	@cond_branch
	ldr	r0, [r1, #0xc]
	add	r0, r0, #0x1
	str	r0, [r1, #0xc]
	cmp	r0, #0x8
	bne	.L96	@cond_branch
	mov	r0, #0x4
	b	.L107
.L115:
	.align	2, 0
.L114:
	.word	sOptions
.L96:
	mov	r0, #0x0
	bl	ScrollMenu
	b	.L98
.L95:
	ldr	r0, [r1, #0xc]
	add	r0, r0, #0x1
	str	r0, [r1, #0xc]
	cmp	r0, #0xa
	ble	.L99	@cond_branch
	mov	r0, #0x3
	str	r0, [r1, #0x10]
	mov	r0, #0x7
	str	r0, [r1, #0xc]
	mov	r0, #0x1
	bl	ScrollAll
	ldr	r0, [r5]
	str	r4, [r0, #0xc]
	str	r4, [r0, #0x10]
	b	.L98
.L99:
	add	r0, r2, #0x1
.L107:
	str	r0, [r1, #0x10]
.L98:
	ldr	r0, .L116
	ldr	r0, [r0]
	ldr	r0, [r0, #0x10]
	bl	HighlightOptionMenuItem
	b	.L83
.L117:
	.align	2, 0
.L116:
	.word	sOptions
.L94:
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L83	@cond_branch
	ldr	r5, .L118
	ldr	r0, [r5]
	ldr	r4, [r0, #0xc]
	add	r0, r0, r4
	ldrb	r6, [r0]
	ldr	r0, .L118+0x4
	lsl	r1, r4, #0x3
	add	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r1, [r1]
	cmp	r1, #0
	beq	.L103	@cond_branch
	add	r0, r6, #0
	bl	_call_via_r1
	ldr	r1, [r5]
	add	r1, r1, r4
	strb	r0, [r1]
.L103:
	ldr	r1, [r5]
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r6, r0
	beq	.L83	@cond_branch
	ldr	r1, [r1, #0x10]
	lsl	r1, r1, #0x4
	add	r0, r4, #0
	mov	r2, #0x0
	bl	DrawChoices
.L83:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L119:
	.align	2, 0
.L118:
	.word	sOptions
	.word	sItemFunctions
.Lfe8:
	.size	 Task_OptionMenuProcessInput,.Lfe8-Task_OptionMenuProcessInput
	.align	2, 0
	.type	 Task_OptionMenuSave,function
	.thumb_func
Task_OptionMenuSave:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r4, .L121
	ldr	r5, [r4]
	ldr	r3, .L121+0x4
	ldr	r0, [r3]
	mov	r2, #0x7
	ldrb	r1, [r0]
	and	r1, r1, r2
	ldrb	r2, [r5, #0x14]
	mov	r0, #0x8
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x14]
	ldr	r5, [r4]
	ldr	r0, [r3]
	mov	r1, #0x1
	mov	r8, r1
	ldrb	r1, [r0, #0x1]
	mov	r2, r8
	and	r1, r1, r2
	lsl	r1, r1, #0x3
	ldrb	r2, [r5, #0x15]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x15]
	ldr	r5, [r4]
	ldr	r0, [r3]
	ldrb	r1, [r0, #0x2]
	mov	r0, r8
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x15]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x15]
	ldr	r5, [r4]
	ldr	r0, [r3]
	mov	r1, #0x3
	mov	r9, r1
	ldrb	r1, [r0, #0x3]
	mov	r2, r9
	and	r1, r1, r2
	ldrb	r2, [r5, #0x15]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x15]
	ldr	r1, [r4]
	ldr	r0, [r3]
	ldrb	r0, [r0, #0x4]
	mov	r2, #0x0
	mov	sl, r2
	strb	r0, [r1, #0x13]
	ldr	r5, [r4]
	ldr	r0, [r3]
	ldrb	r1, [r0, #0x5]
	lsl	r1, r1, #0x3
	ldrb	r2, [r5, #0x14]
	mov	r0, #0x7
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x14]
	ldr	r5, [r4]
	ldr	r0, [r3]
	mov	r2, #0xf
	ldrb	r1, [r0, #0x6]
	and	r1, r1, r2
	ldrb	r2, [r5, #0x16]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x16]
	ldr	r5, [r4]
	ldr	r0, [r3]
	ldrb	r1, [r0, #0x7]
	lsl	r1, r1, #0x4
	ldrb	r2, [r5, #0x16]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x16]
	ldr	r5, [r4]
	ldr	r0, [r3]
	ldrb	r1, [r0, #0x8]
	mov	r0, r9
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x17]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x17]
	ldr	r4, [r4]
	ldr	r0, [r3]
	ldrb	r1, [r0, #0x9]
	mov	r2, r8
	and	r1, r1, r2
	lsl	r1, r1, #0x4
	ldrb	r2, [r4, #0x17]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x17]
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, sl
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L121+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L121+0xc
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L122:
	.align	2, 0
.L121:
	.word	gSaveBlock2Ptr
	.word	sOptions
	.word	gTasks
	.word	Task_OptionMenuFadeOut
.Lfe9:
	.size	 Task_OptionMenuSave,.Lfe9-Task_OptionMenuSave
	.align	2, 0
	.type	 Task_OptionMenuFadeOut,function
	.thumb_func
Task_OptionMenuFadeOut:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L125
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L124	@cond_branch
	add	r0, r2, #0
	bl	DestroyTask
	bl	FreeAllWindowBuffers
	ldr	r4, .L125+0x4
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r0, .L125+0x8
	ldr	r0, [r0, #0x8]
	bl	SetMainCallback2
.L124:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L126:
	.align	2, 0
.L125:
	.word	gPaletteFade
	.word	sOptions
	.word	gMain
.Lfe10:
	.size	 Task_OptionMenuFadeOut,.Lfe10-Task_OptionMenuFadeOut
	.align	2, 0
	.type	 HighlightOptionMenuItem,function
	.thumb_func
HighlightOptionMenuItem:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x87
	lsl	r1, r1, #0x5
	mov	r0, #0x40
	bl	SetGpuReg
	lsl	r4, r4, #0x4
	add	r1, r4, #0
	add	r1, r1, #0x28
	lsl	r1, r1, #0x8
	add	r4, r4, #0x38
	orr	r1, r1, r4
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x44
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 HighlightOptionMenuItem,.Lfe11-HighlightOptionMenuItem
	.align	2, 0
	.type	 XOptions_ProcessInput,function
	.thumb_func
XOptions_ProcessInput:
	push	{r4, lr}
	add	r4, r0, #0
	add	r3, r1, #0
	ldr	r2, .L133
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L129	@cond_branch
	add	r3, r3, #0x1
	sub	r0, r4, #0x1
	cmp	r3, r0
	ble	.L129	@cond_branch
	mov	r3, #0x0
.L129:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L131	@cond_branch
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L131	@cond_branch
	sub	r3, r4, #0x1
.L131:
	add	r0, r3, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L134:
	.align	2, 0
.L133:
	.word	gMain
.Lfe12:
	.size	 XOptions_ProcessInput,.Lfe12-XOptions_ProcessInput
	.align	2, 0
	.type	 ThreeOptions_ProcessInput,function
	.thumb_func
ThreeOptions_ProcessInput:
	push	{lr}
	add	r1, r0, #0
	mov	r0, #0x3
	bl	XOptions_ProcessInput
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 ThreeOptions_ProcessInput,.Lfe13-ThreeOptions_ProcessInput
	.align	2, 0
	.type	 FourOptions_ProcessInput,function
	.thumb_func
FourOptions_ProcessInput:
	push	{lr}
	add	r1, r0, #0
	mov	r0, #0x4
	bl	XOptions_ProcessInput
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 FourOptions_ProcessInput,.Lfe14-FourOptions_ProcessInput
	.align	2, 0
	.type	 ElevenOptions_ProcessInput,function
	.thumb_func
ElevenOptions_ProcessInput:
	push	{lr}
	add	r1, r0, #0
	mov	r0, #0xb
	bl	XOptions_ProcessInput
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 ElevenOptions_ProcessInput,.Lfe15-ElevenOptions_ProcessInput
	.align	2, 0
	.type	 TwoOptions_ProcessInput,function
	.thumb_func
TwoOptions_ProcessInput:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L140
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L139	@cond_branch
	mov	r0, #0x1
	eor	r2, r2, r0
.L139:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.L141:
	.align	2, 0
.L140:
	.word	gMain
.Lfe16:
	.size	 TwoOptions_ProcessInput,.Lfe16-TwoOptions_ProcessInput
	.align	2, 0
	.type	 BattleStyle_ProcessInput,function
	.thumb_func
BattleStyle_ProcessInput:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L144
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L143	@cond_branch
	mov	r0, #0x1
	eor	r2, r2, r0
.L143:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.L145:
	.align	2, 0
.L144:
	.word	gMain
.Lfe17:
	.size	 BattleStyle_ProcessInput,.Lfe17-BattleStyle_ProcessInput
	.align	2, 0
	.type	 Sound_ProcessInput,function
	.thumb_func
Sound_ProcessInput:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r4, #0
	add	r0, r5, #0
	bl	ThreeOptions_ProcessInput
	add	r4, r0, #0
	cmp	r4, #0x1
	bhi	.L147	@cond_branch
	ldr	r1, .L150
	mov	r0, #0x0
	strb	r0, [r1]
	add	r0, r4, #0
	bl	SetPokemonCryStereo
	cmp	r5, #0x2
	bne	.L149	@cond_branch
	bl	GetCurrentMapMusic
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	PlayNewMapMusic
	b	.L149
.L151:
	.align	2, 0
.L150:
	.word	gDisableMusic
.L147:
	mov	r0, #0x0
	bl	PlayBGM
	ldr	r1, .L152
	mov	r0, #0x1
	strb	r0, [r1]
.L149:
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L153:
	.align	2, 0
.L152:
	.word	gDisableMusic
.Lfe18:
	.size	 Sound_ProcessInput,.Lfe18-Sound_ProcessInput
	.align	2, 0
	.type	 FrameType_ProcessInput,function
	.thumb_func
FrameType_ProcessInput:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L161
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L155	@cond_branch
	cmp	r5, #0x12
	bgt	.L156	@cond_branch
	add	r5, r5, #0x1
	b	.L157
.L162:
	.align	2, 0
.L161:
	.word	gMain
.L156:
	mov	r5, #0x0
.L157:
	lsl	r4, r5, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetWindowFrameTilesPal
	ldr	r1, [r0]
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	mov	r3, #0xd1
	lsl	r3, r3, #0x1
	mov	r0, #0x1
	bl	LoadBgTiles
	add	r0, r4, #0
	bl	GetWindowFrameTilesPal
	ldr	r0, [r0, #0x4]
	mov	r1, #0x70
	mov	r2, #0x20
	bl	LoadPalette
.L155:
	ldr	r0, .L163
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L158	@cond_branch
	cmp	r5, #0
	beq	.L159	@cond_branch
	sub	r5, r5, #0x1
	b	.L160
.L164:
	.align	2, 0
.L163:
	.word	gMain
.L159:
	mov	r5, #0x13
.L160:
	lsl	r4, r5, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetWindowFrameTilesPal
	ldr	r1, [r0]
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	mov	r3, #0xd1
	lsl	r3, r3, #0x1
	mov	r0, #0x1
	bl	LoadBgTiles
	add	r0, r4, #0
	bl	GetWindowFrameTilesPal
	ldr	r0, [r0, #0x4]
	mov	r1, #0x70
	mov	r2, #0x20
	bl	LoadPalette
.L158:
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 FrameType_ProcessInput,.Lfe19-FrameType_ProcessInput
	.align	2, 0
	.type	 GetMiddleX,function
	.thumb_func
GetMiddleX:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	mov	r0, #0x1
	add	r1, r3, #0
	mov	r2, #0x0
	bl	GetStringWidth
	add	r4, r0, #0
	mov	r0, #0x1
	add	r1, r5, #0
	mov	r2, #0x0
	bl	GetStringWidth
	add	r5, r0, #0
	mov	r0, #0x1
	add	r1, r6, #0
	mov	r2, #0x0
	bl	GetStringWidth
	sub	r5, r5, #0x5e
	sub	r4, r4, r5
	sub	r4, r4, r0
	lsr	r0, r4, #0x1f
	add	r4, r4, r0
	asr	r4, r4, #0x1
	add	r4, r4, #0x68
	add	r0, r4, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 GetMiddleX,.Lfe20-GetMiddleX
	.align	2, 0
	.type	 DrawOptionMenuChoice,function
	.thumb_func
DrawOptionMenuChoice:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x1c
	add	r4, r0, #0
	ldr	r0, [sp, #0x30]
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r2, #0x0
	ldrb	r1, [r4]
	add	r0, r1, #0
	cmp	r0, #0xff
	beq	.L168	@cond_branch
.L170:
	mov	r0, sp
	add	r0, r0, r2
	add	r0, r0, #0xc
	strb	r1, [r0]
	add	r4, r4, #0x1
	add	r2, r2, #0x1
	ldrb	r1, [r4]
	add	r0, r1, #0
	cmp	r0, #0xff
	beq	.L168	@cond_branch
	cmp	r2, #0xe
	bls	.L170	@cond_branch
.L168:
	cmp	r3, #0
	beq	.L173	@cond_branch
	add	r1, sp, #0xc
	mov	r0, #0x4
	strb	r0, [r1, #0x2]
	mov	r0, #0x5
	strb	r0, [r1, #0x5]
.L173:
	mov	r1, sp
	add	r1, r1, r2
	add	r1, r1, #0xc
	mov	r0, #0xff
	strb	r0, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	str	r6, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, sp, #0xc
	add	r3, r7, #0
	bl	AddTextPrinterParameterized
	add	sp, sp, #0x1c
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 DrawOptionMenuChoice,.Lfe21-DrawOptionMenuChoice
	.section .rodata
.LC46:
	.byte	0xfc
	.byte	0x1
	.byte	0x6
	.byte	0xfc
	.byte	0x3
	.byte	0x7
	.byte	0x2e
	.byte	0xa2
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0xff
.text
	.align	2, 0
	.type	 HpBar_DrawChoices,function
	.thumb_func
HpBar_DrawChoices:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	cmp	r4, #0x9
	bgt	.L175	@cond_branch
	ldr	r1, .L177
	add	r0, sp, #0x4
	mov	r2, #0xe
	bl	memcpy
	add	r1, sp, #0x4
	add	r0, r4, #0
	sub	r0, r0, #0x5f
	strb	r0, [r1, #0x7]
	lsl	r2, r5, #0x18
	lsr	r2, r2, #0x18
	str	r6, [sp]
	add	r0, r1, #0
	mov	r1, #0x68
	mov	r3, #0x1
	bl	DrawOptionMenuChoice
	b	.L176
.L178:
	.align	2, 0
.L177:
	.word	.LC46
.L175:
	ldr	r0, .L179
	lsl	r2, r5, #0x18
	lsr	r2, r2, #0x18
	str	r6, [sp]
	mov	r1, #0x68
	mov	r3, #0x1
	bl	DrawOptionMenuChoice
.L176:
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L180:
	.align	2, 0
.L179:
	.word	sText_Instant
.Lfe22:
	.size	 HpBar_DrawChoices,.Lfe22-HpBar_DrawChoices
	.align	2, 0
	.type	 BattleScene_DrawChoices,function
	.thumb_func
BattleScene_DrawChoices:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r6, r0, #0
	add	r4, r1, #0
	lsl	r5, r2, #0x18
	lsr	r5, r5, #0x18
	add	r0, sp, #0x4
	mov	r1, #0x0
	mov	r2, #0x2
	bl	memset
	mov	r1, sp
	add	r1, r1, r6
	add	r1, r1, #0x4
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L182
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r1, sp, #0x4
	ldrb	r3, [r1]
	str	r5, [sp]
	mov	r1, #0x68
	add	r2, r4, #0
	bl	DrawOptionMenuChoice
	ldr	r6, .L182+0x4
	mov	r0, #0x1
	add	r1, r6, #0
	mov	r2, #0xc6
	bl	GetStringRightAlignXOffset
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, sp, #0x4
	ldrb	r3, [r0, #0x1]
	str	r5, [sp]
	add	r0, r6, #0
	add	r2, r4, #0
	bl	DrawOptionMenuChoice
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L183:
	.align	2, 0
.L182:
	.word	gText_BattleSceneOn
	.word	gText_BattleSceneOff
.Lfe23:
	.size	 BattleScene_DrawChoices,.Lfe23-BattleScene_DrawChoices
	.align	2, 0
	.type	 BattleStyle_DrawChoices,function
	.thumb_func
BattleStyle_DrawChoices:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r6, r0, #0
	add	r4, r1, #0
	lsl	r5, r2, #0x18
	lsr	r5, r5, #0x18
	add	r0, sp, #0x4
	mov	r1, #0x0
	mov	r2, #0x2
	bl	memset
	mov	r1, sp
	add	r1, r1, r6
	add	r1, r1, #0x4
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L185
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r1, sp, #0x4
	ldrb	r3, [r1]
	str	r5, [sp]
	mov	r1, #0x68
	add	r2, r4, #0
	bl	DrawOptionMenuChoice
	ldr	r6, .L185+0x4
	mov	r0, #0x1
	add	r1, r6, #0
	mov	r2, #0xc6
	bl	GetStringRightAlignXOffset
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, sp, #0x4
	ldrb	r3, [r0, #0x1]
	str	r5, [sp]
	add	r0, r6, #0
	add	r2, r4, #0
	bl	DrawOptionMenuChoice
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L186:
	.align	2, 0
.L185:
	.word	gText_BattleStyleShift
	.word	gText_BattleStyleSet
.Lfe24:
	.size	 BattleStyle_DrawChoices,.Lfe24-BattleStyle_DrawChoices
	.align	2, 0
	.type	 Transition_DrawChoices,function
	.thumb_func
Transition_DrawChoices:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r6, r0, #0
	add	r4, r1, #0
	lsl	r5, r2, #0x18
	lsr	r5, r5, #0x18
	add	r0, sp, #0x4
	mov	r1, #0x0
	mov	r2, #0x2
	bl	memset
	mov	r1, sp
	add	r1, r1, r6
	add	r1, r1, #0x4
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L188
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r1, sp, #0x4
	ldrb	r3, [r1]
	str	r5, [sp]
	mov	r1, #0x68
	add	r2, r4, #0
	bl	DrawOptionMenuChoice
	ldr	r6, .L188+0x4
	mov	r0, #0x1
	add	r1, r6, #0
	mov	r2, #0xc6
	bl	GetStringRightAlignXOffset
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, sp, #0x4
	ldrb	r3, [r0, #0x1]
	str	r5, [sp]
	add	r0, r6, #0
	add	r2, r4, #0
	bl	DrawOptionMenuChoice
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L189:
	.align	2, 0
.L188:
	.word	gText_TransitionStyleNormal
	.word	gText_TransitionStyleInstant
.Lfe25:
	.size	 Transition_DrawChoices,.Lfe25-Transition_DrawChoices
	.align	2, 0
	.type	 UnitSystem_DrawChoices,function
	.thumb_func
UnitSystem_DrawChoices:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r6, r0, #0
	add	r4, r1, #0
	lsl	r5, r2, #0x18
	lsr	r5, r5, #0x18
	add	r0, sp, #0x4
	mov	r1, #0x0
	mov	r2, #0x2
	bl	memset
	mov	r1, sp
	add	r1, r1, r6
	add	r1, r1, #0x4
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L191
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r1, sp, #0x4
	ldrb	r3, [r1]
	str	r5, [sp]
	mov	r1, #0x68
	add	r2, r4, #0
	bl	DrawOptionMenuChoice
	ldr	r1, .L191+0x4
	mov	r0, #0x1
	mov	r2, #0xc6
	bl	GetStringRightAlignXOffset
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L191+0x8
	add	r2, sp, #0x4
	ldrb	r3, [r2, #0x1]
	str	r5, [sp]
	add	r2, r4, #0
	bl	DrawOptionMenuChoice
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L192:
	.align	2, 0
.L191:
	.word	gText_UnitSystemMetric
	.word	gText_TransitionStyleInstant
	.word	gText_UnitSystemImperial
.Lfe26:
	.size	 UnitSystem_DrawChoices,.Lfe26-UnitSystem_DrawChoices
	.section .rodata
	.type	 choiceOrders.81,object
choiceOrders.81:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x1
	.byte	0x2
	.byte	0x3
.text
	.align	2, 0
	.type	 FourOptions_DrawChoices,function
	.thumb_func
FourOptions_DrawChoices:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0xc
	mov	r8, r0
	add	r4, r1, #0
	add	r6, r2, #0
	lsl	r3, r3, #0x18
	mov	r9, r3
	mov	r0, r9
	lsr	r0, r0, #0x18
	mov	r9, r0
	add	r0, sp, #0x8
	mov	r1, #0x0
	mov	r2, #0x4
	bl	memset
	lsl	r5, r4, #0x1
	add	r5, r5, r4
	ldr	r0, .L194
	add	r5, r5, r0
	mov	r1, sp
	add	r1, r1, r4
	add	r1, r1, #0x8
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldr	r0, [r0]
	ldrb	r1, [r5, #0x1]
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldr	r1, [r1]
	ldrb	r2, [r5, #0x2]
	lsl	r2, r2, #0x2
	add	r2, r2, r8
	ldr	r2, [r2]
	bl	GetMiddleX
	add	r4, r0, #0
	lsl	r3, r6, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x68
	str	r0, [sp]
	mov	r0, #0x10
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x11
	mov	r2, #0x68
	bl	FillWindowPixelRect
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	ldr	r0, [r0]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	add	r1, r1, sp
	add	r1, r1, #0x8
	ldrb	r3, [r1]
	mov	r1, r9
	str	r1, [sp]
	mov	r1, #0x68
	add	r2, r6, #0
	bl	DrawOptionMenuChoice
	ldrb	r1, [r5, #0x1]
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	ldr	r0, [r0]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r1, r1, sp
	add	r1, r1, #0x8
	ldrb	r3, [r1]
	mov	r2, r9
	str	r2, [sp]
	add	r1, r4, #0
	add	r2, r6, #0
	bl	DrawOptionMenuChoice
	ldrb	r0, [r5, #0x2]
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldr	r1, [r0]
	mov	r0, #0x1
	mov	r2, #0xc6
	bl	GetStringRightAlignXOffset
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r2, [r5, #0x2]
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	ldr	r0, [r0]
	add	r2, r2, sp
	add	r2, r2, #0x8
	ldrb	r3, [r2]
	mov	r2, r9
	str	r2, [sp]
	add	r2, r6, #0
	bl	DrawOptionMenuChoice
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L195:
	.align	2, 0
.L194:
	.word	choiceOrders.81
.Lfe27:
	.size	 FourOptions_DrawChoices,.Lfe27-FourOptions_DrawChoices
	.align	2, 0
	.type	 TextSpeed_DrawChoices,function
	.thumb_func
TextSpeed_DrawChoices:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r3, r2, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L197
	add	r1, r4, #0
	add	r2, r5, #0
	bl	FourOptions_DrawChoices
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L198:
	.align	2, 0
.L197:
	.word	sTextSpeedStrings
.Lfe28:
	.size	 TextSpeed_DrawChoices,.Lfe28-TextSpeed_DrawChoices
	.align	2, 0
	.type	 Sound_DrawChoices,function
	.thumb_func
Sound_DrawChoices:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	sl, r0
	add	r5, r1, #0
	lsl	r6, r2, #0x18
	lsr	r6, r6, #0x18
	add	r0, sp, #0x4
	mov	r1, #0x0
	mov	r2, #0x3
	bl	memset
	ldr	r0, .L200
	mov	r9, r0
	ldr	r7, .L200+0x4
	ldr	r0, .L200+0x8
	mov	r8, r0
	mov	r0, r9
	add	r1, r7, #0
	mov	r2, r8
	bl	GetMiddleX
	add	r4, r0, #0
	mov	r1, sp
	add	r1, r1, sl
	add	r1, r1, #0x4
	mov	r0, #0x1
	strb	r0, [r1]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, sp, #0x4
	ldrb	r3, [r0]
	str	r6, [sp]
	mov	r0, r9
	mov	r1, #0x68
	add	r2, r5, #0
	bl	DrawOptionMenuChoice
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, sp, #0x4
	ldrb	r3, [r0, #0x1]
	str	r6, [sp]
	add	r0, r7, #0
	add	r1, r4, #0
	add	r2, r5, #0
	bl	DrawOptionMenuChoice
	mov	r0, #0x1
	mov	r1, r8
	mov	r2, #0xc6
	bl	GetStringRightAlignXOffset
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, sp, #0x4
	ldrb	r3, [r0, #0x2]
	str	r6, [sp]
	mov	r0, r8
	add	r2, r5, #0
	bl	DrawOptionMenuChoice
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L201:
	.align	2, 0
.L200:
	.word	gText_SoundMono
	.word	gText_SoundStereo
	.word	gText_BattleSceneOff
.Lfe29:
	.size	 Sound_DrawChoices,.Lfe29-Sound_DrawChoices
	.align	2, 0
	.type	 FrameType_DrawChoices,function
	.thumb_func
FrameType_DrawChoices:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	add	r6, r0, #0x1
	mov	r5, #0x0
	ldr	r1, .L212
	ldrb	r0, [r1]
	ldr	r2, .L212+0x4
	mov	r9, r2
	cmp	r0, #0xff
	beq	.L204	@cond_branch
	add	r2, r1, #0
.L206:
	mov	r0, sp
	add	r0, r0, r5
	add	r0, r0, #0x4
	ldrb	r1, [r2]
	strb	r1, [r0]
	add	r2, r2, #0x1
	add	r5, r5, #0x1
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L204	@cond_branch
	cmp	r5, #0x5
	bls	.L206	@cond_branch
.L204:
	add	r0, r6, #0
	mov	r1, #0xa
	bl	__udivsi3
	cmp	r0, #0
	beq	.L209	@cond_branch
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x4
	add	r0, r0, #0xa1
	strb	r0, [r1]
	add	r5, r5, #0x1
	mov	r4, sp
	add	r4, r4, r5
	add	r4, r4, #0x4
	add	r0, r6, #0
	mov	r1, #0xa
	bl	__umodsi3
	add	r0, r0, #0xa1
	strb	r0, [r4]
	b	.L211
.L213:
	.align	2, 0
.L212:
	.word	gText_FrameTypeNumber
	.word	gText_FrameType
.L209:
	mov	r4, sp
	add	r4, r4, r5
	add	r4, r4, #0x4
	add	r0, r6, #0
	mov	r1, #0xa
	bl	__umodsi3
	add	r0, r0, #0xa1
	strb	r0, [r4]
	add	r5, r5, #0x1
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x4
	mov	r0, #0x77
	strb	r0, [r1]
.L211:
	add	r5, r5, #0x1
	mov	r0, sp
	add	r0, r0, r5
	add	r0, r0, #0x4
	mov	r1, #0xff
	strb	r1, [r0]
	mov	r0, r8
	lsl	r4, r0, #0x18
	lsr	r4, r4, #0x18
	str	r7, [sp]
	mov	r0, r9
	mov	r1, #0x68
	add	r2, r4, #0
	mov	r3, #0x0
	bl	DrawOptionMenuChoice
	str	r7, [sp]
	add	r0, sp, #0x4
	mov	r1, #0x80
	add	r2, r4, #0
	mov	r3, #0x1
	bl	DrawOptionMenuChoice
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 FrameType_DrawChoices,.Lfe30-FrameType_DrawChoices
	.align	2, 0
	.type	 ButtonMode_DrawChoices,function
	.thumb_func
ButtonMode_DrawChoices:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	sl, r0
	add	r5, r1, #0
	lsl	r6, r2, #0x18
	lsr	r6, r6, #0x18
	add	r0, sp, #0x4
	mov	r1, #0x0
	mov	r2, #0x3
	bl	memset
	ldr	r0, .L215
	mov	r9, r0
	ldr	r7, .L215+0x4
	ldr	r0, .L215+0x8
	mov	r8, r0
	mov	r0, r9
	add	r1, r7, #0
	mov	r2, r8
	bl	GetMiddleX
	add	r4, r0, #0
	mov	r1, sp
	add	r1, r1, sl
	add	r1, r1, #0x4
	mov	r0, #0x1
	strb	r0, [r1]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, sp, #0x4
	ldrb	r3, [r0]
	str	r6, [sp]
	mov	r0, r9
	mov	r1, #0x68
	add	r2, r5, #0
	bl	DrawOptionMenuChoice
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, sp, #0x4
	ldrb	r3, [r0, #0x1]
	str	r6, [sp]
	add	r0, r7, #0
	add	r1, r4, #0
	add	r2, r5, #0
	bl	DrawOptionMenuChoice
	mov	r0, #0x1
	mov	r1, r8
	mov	r2, #0xc6
	bl	GetStringRightAlignXOffset
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, sp, #0x4
	ldrb	r3, [r0, #0x2]
	str	r6, [sp]
	mov	r0, r8
	add	r2, r5, #0
	bl	DrawOptionMenuChoice
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L216:
	.align	2, 0
.L215:
	.word	gText_ButtonTypeNormal
	.word	gText_ButtonTypeLR
	.word	gText_ButtonTypeLEqualsA
.Lfe31:
	.size	 ButtonMode_DrawChoices,.Lfe31-ButtonMode_DrawChoices
	.align	2, 0
	.type	 DrawTextOption,function
	.thumb_func
DrawTextOption:
	push	{lr}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldr	r2, .L218
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L219:
	.align	2, 0
.L218:
	.word	gText_Option
.Lfe32:
	.size	 DrawTextOption,.Lfe32-DrawTextOption
	.align	2, 0
	.type	 DrawOptionMenuTexts,function
	.thumb_func
DrawOptionMenuTexts:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	mov	r0, #0x1
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r5, #0x0
	mov	r6, #0x0
	mov	r4, #0x80
	lsl	r4, r4, #0x11
	ldr	r7, .L226
.L224:
	ldmia	r7!, {r2}
	lsr	r0, r4, #0x18
	str	r0, [sp]
	str	r6, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	mov	r0, #0x80
	lsl	r0, r0, #0x15
	add	r4, r4, r0
	add	r5, r5, #0x1
	cmp	r5, #0x6
	bls	.L224	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L227:
	.align	2, 0
.L226:
	.word	sOptionMenuItemsNames
.Lfe33:
	.size	 DrawOptionMenuTexts,.Lfe33-DrawOptionMenuTexts
	.align	2, 0
	.type	 sub_80BB154,function
	.thumb_func
sub_80BB154:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r5, #0x7
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0xd1
	lsl	r1, r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect
	mov	r0, #0x1b
	mov	r8, r0
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	ldr	r1, .L229
	mov	r2, #0x2
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0xd2
	lsl	r1, r1, #0x1
	mov	r2, #0x1c
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	mov	r6, #0x2
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	ldr	r1, .L229+0x4
	mov	r2, #0x1
	mov	r3, #0x1
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	ldr	r1, .L229+0x8
	mov	r2, #0x1c
	mov	r3, #0x1
	bl	FillBgTilemapBufferRect
	mov	r7, #0xd4
	lsl	r7, r7, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	add	r1, r7, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	FillBgTilemapBufferRect
	ldr	r0, .L229+0xc
	mov	sl, r0
	mov	r0, r8
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, sl
	mov	r2, #0x2
	mov	r3, #0x3
	bl	FillBgTilemapBufferRect
	mov	r0, #0xd5
	lsl	r0, r0, #0x1
	mov	r9, r0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, r9
	mov	r2, #0x1c
	mov	r3, #0x3
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0xd1
	lsl	r1, r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x4
	bl	FillBgTilemapBufferRect
	mov	r0, #0x1a
	mov	r8, r0
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	ldr	r1, .L229
	mov	r2, #0x2
	mov	r3, #0x4
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0xd2
	lsl	r1, r1, #0x1
	mov	r2, #0x1c
	mov	r3, #0x4
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	mov	r6, #0x12
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	ldr	r1, .L229+0x4
	mov	r2, #0x1
	mov	r3, #0x5
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	ldr	r1, .L229+0x8
	mov	r2, #0x1c
	mov	r3, #0x5
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	add	r1, r7, #0
	mov	r2, #0x1
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	mov	r0, r8
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, sl
	mov	r2, #0x2
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, r9
	mov	r2, #0x1c
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L230:
	.align	2, 0
.L229:
	.word	0x1a3
	.word	0x1a5
	.word	0x1a7
	.word	0x1a9
.Lfe34:
	.size	 sub_80BB154,.Lfe34-sub_80BB154
.text
	.align	2, 0

