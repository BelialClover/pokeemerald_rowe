@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 llsf_struct,object
	.size	 llsf_struct,32
llsf_struct:
	.byte	0x2
	.byte	0xe
	.byte	0x0
	.byte	0xa
	.byte	0x9
	.byte	0x5
	.byte	0x7
	.byte	0x2
	.byte	0x0
	.byte	0xf
	.byte	0x1
	.byte	0x3
	.byte	0x3
	.space	1
	.short	0x1f
	.byte	0x3
	.byte	0x16
	.byte	0x12
	.byte	0xe
	.byte	0xd
	.byte	0x9
	.byte	0xb
	.byte	0x3
	.byte	0xf
	.byte	0xf
	.byte	0x1
	.byte	0x3
	.byte	0x3
	.space	1
	.short	0x7f
	.align	2, 0
	.type	 version_string,object
	.size	 version_string,10
version_string:
	.ascii	"RFU_V1026\000"
	.align	2, 0
	.type	 str_checkMbootLL,object
	.size	 str_checkMbootLL,10
str_checkMbootLL:
	.ascii	"RFU-MBOOT\000"
.text
	.align	2, 0
	.globl	rfu_initializeAPI
	.type	 rfu_initializeAPI,function
	.thumb_func
rfu_initializeAPI:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	mov	ip, r2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	mov	r0, #0x3
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L3	@cond_branch
	mov	r0, #0x2
	b	.L27
.L3:
	cmp	r7, #0
	beq	.L28	@cond_branch
	ldr	r3, .L30
	b	.L29
.L31:
	.align	2, 0
.L30:
	.word	0xe64
.L28:
	ldr	r3, .L32
.L29:
	cmp	r1, r3
	bcs	.L6	@cond_branch
	mov	r0, #0x1
	b	.L27
.L33:
	.align	2, 0
.L32:
	.word	0x504
.L6:
	ldr	r0, .L34
	str	r4, [r0]
	ldr	r1, .L34+0x4
	add	r0, r4, #0
	add	r0, r0, #0xb4
	str	r0, [r1]
	ldr	r1, .L34+0x8
	add	r0, r0, #0x28
	str	r0, [r1]
	ldr	r2, .L34+0xc
	mov	r1, #0xde
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	str	r0, [r2]
	ldr	r1, .L34+0x10
	mov	r3, #0xdf
	lsl	r3, r3, #0x2
	add	r0, r4, r3
	str	r0, [r1]
	mov	r5, #0x1
	add	r6, r2, #0
	add	r4, r1, #0
.L11:
	lsl	r2, r5, #0x2
	add	r3, r2, r6
	sub	r1, r5, #0x1
	lsl	r1, r1, #0x2
	add	r0, r1, r6
	ldr	r0, [r0]
	add	r0, r0, #0x70
	str	r0, [r3]
	add	r2, r2, r4
	add	r1, r1, r4
	ldr	r0, [r1]
	add	r0, r0, #0x1c
	str	r0, [r2]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x3
	bls	.L11	@cond_branch
	ldr	r0, .L34+0x8
	ldr	r1, [r0]
	add	r1, r1, #0xdc
	ldr	r4, .L34+0x10
	ldr	r0, [r4, #0xc]
	add	r0, r0, #0x1c
	str	r0, [r1]
	mov	r1, ip
	add	r2, r7, #0
	bl	STWI_init_all
	bl	rfu_STC_clearAPIVariables
	mov	r5, #0x0
	ldr	r3, .L34+0xc
	mov	r2, #0x0
.L16:
	lsl	r1, r5, #0x2
	add	r0, r1, r3
	ldr	r0, [r0]
	str	r2, [r0, #0x68]
	str	r2, [r0, #0x6c]
	add	r1, r1, r4
	ldr	r0, [r1]
	str	r2, [r0, #0x14]
	str	r2, [r0, #0x18]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x3
	bls	.L16	@cond_branch
	ldr	r4, .L34+0x14
	mov	r0, #0x2
	neg	r0, r0
	and	r4, r4, r0
	ldr	r1, .L34+0x8
	ldr	r0, [r1]
	add	r2, r0, #0
	add	r2, r2, #0x8
	mov	r3, #0x2f
	ldr	r5, .L34+0x18
.L23:
	ldrh	r0, [r4]
	strh	r0, [r2]
	add	r4, r4, #0x2
	add	r2, r2, #0x2
	sub	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r5
	bne	.L23	@cond_branch
	ldr	r1, [r1]
	add	r0, r1, #0
	add	r0, r0, #0x9
	str	r0, [r1, #0x4]
	mov	r0, #0x0
.L27:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L35:
	.align	2, 0
.L34:
	.word	gRfuLinkStatus
	.word	gRfuStatic
	.word	gRfuFixed
	.word	gRfuSlotStatusNI
	.word	gRfuSlotStatusUNI
	.word	rfu_STC_fastCopy
	.word	0xffff
.Lfe1:
	.size	 rfu_initializeAPI,.Lfe1-rfu_initializeAPI
	.align	2, 0
	.type	 rfu_STC_clearAPIVariables,function
	.thumb_func
rfu_STC_clearAPIVariables:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L42
	ldrh	r0, [r1]
	add	r7, r0, #0
	mov	r6, #0x0
	strh	r6, [r1]
	ldr	r5, .L42+0x4
	ldr	r1, [r5]
	ldrb	r4, [r1]
	mov	r0, sp
	strh	r6, [r0]
	ldr	r2, .L42+0x8
	bl	CpuSet
	ldr	r2, [r5]
	mov	r0, #0x8
	and	r4, r4, r0
	mov	r1, #0x0
	strb	r4, [r2]
	mov	r0, sp
	add	r0, r0, #0x2
	strh	r1, [r0]
	ldr	r4, .L42+0xc
	ldr	r1, [r4]
	ldr	r2, .L42+0x10
	bl	CpuSet
	ldr	r1, [r4]
	mov	r0, #0x4
	strb	r0, [r1, #0x9]
	ldr	r0, [r5]
	strb	r6, [r0, #0x6]
	ldr	r1, [r4]
	mov	r0, #0xff
	strb	r0, [r1]
	bl	rfu_clearAllSlot
	ldr	r0, [r5]
	strb	r6, [r0, #0x9]
	mov	r2, #0x0
	mov	r3, #0x0
.L40:
	ldr	r0, [r5]
	lsl	r1, r2, #0x1
	add	r0, r0, #0x12
	add	r0, r0, r1
	strh	r3, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L40	@cond_branch
	ldr	r0, .L42
	strh	r7, [r0]
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	0x4000208
	.word	gRfuStatic
	.word	0x1000014
	.word	gRfuLinkStatus
	.word	0x100005a
.Lfe2:
	.size	 rfu_STC_clearAPIVariables,.Lfe2-rfu_STC_clearAPIVariables
	.align	2, 0
	.globl	rfu_REQ_PARENT_resumeRetransmitAndChange
	.type	 rfu_REQ_PARENT_resumeRetransmitAndChange,function
	.thumb_func
rfu_REQ_PARENT_resumeRetransmitAndChange:
	push	{lr}
	ldr	r0, .L45
	bl	STWI_set_Callback_M
	bl	STWI_send_ResumeRetransmitAndChangeREQ
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	rfu_STC_REQ_callback
.Lfe3:
	.size	 rfu_REQ_PARENT_resumeRetransmitAndChange,.Lfe3-rfu_REQ_PARENT_resumeRetransmitAndChange
	.align	2, 0
	.globl	rfu_UNI_PARENT_getDRAC_ACK
	.type	 rfu_UNI_PARENT_getDRAC_ACK,function
	.thumb_func
rfu_UNI_PARENT_getDRAC_ACK:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x0
	strb	r0, [r4]
	ldr	r5, .L58
	ldr	r0, [r5]
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L48	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	b	.L56
.L59:
	.align	2, 0
.L58:
	.word	gRfuLinkStatus
.L48:
	bl	rfu_getSTWIRecvBuffer
	add	r1, r0, #0
	ldrb	r0, [r1]
	cmp	r0, #0x28
	beq	.L51	@cond_branch
	cmp	r0, #0x36
	bne	.L54	@cond_branch
.L51:
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L52	@cond_branch
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x2]
	b	.L57
.L52:
	ldrb	r0, [r1, #0x4]
.L57:
	strb	r0, [r4]
	mov	r0, #0x0
	b	.L56
.L54:
	mov	r0, #0x10
.L56:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 rfu_UNI_PARENT_getDRAC_ACK,.Lfe4-rfu_UNI_PARENT_getDRAC_ACK
	.align	2, 0
	.globl	rfu_setTimerInterrupt
	.type	 rfu_setTimerInterrupt,function
	.thumb_func
rfu_setTimerInterrupt:
	push	{lr}
	add	r2, r0, #0
	add	r0, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r1, r2, #0
	bl	STWI_init_timer
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 rfu_setTimerInterrupt,.Lfe5-rfu_setTimerInterrupt
	.align	2, 0
	.globl	rfu_getSTWIRecvBuffer
	.type	 rfu_getSTWIRecvBuffer,function
	.thumb_func
rfu_getSTWIRecvBuffer:
	ldr	r0, .L62
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	bx	lr
.L63:
	.align	2, 0
.L62:
	.word	gRfuFixed
.Lfe6:
	.size	 rfu_getSTWIRecvBuffer,.Lfe6-rfu_getSTWIRecvBuffer
	.align	2, 0
	.globl	rfu_setMSCCallback
	.type	 rfu_setMSCCallback,function
	.thumb_func
rfu_setMSCCallback:
	push	{lr}
	bl	STWI_set_Callback_S
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 rfu_setMSCCallback,.Lfe7-rfu_setMSCCallback
	.align	2, 0
	.globl	rfu_setREQCallback
	.type	 rfu_setREQCallback,function
	.thumb_func
rfu_setREQCallback:
	push	{lr}
	add	r1, r0, #0
	ldr	r0, .L67
	ldr	r0, [r0]
	str	r1, [r0]
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	bl	rfu_enableREQCallback
	pop	{r0}
	bx	r0
.L68:
	.align	2, 0
.L67:
	.word	gRfuFixed
.Lfe8:
	.size	 rfu_setREQCallback,.Lfe8-rfu_setREQCallback
	.align	2, 0
	.type	 rfu_enableREQCallback,function
	.thumb_func
rfu_enableREQCallback:
	push	{lr}
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L70	@cond_branch
	ldr	r0, .L73
	ldr	r2, [r0]
	ldrb	r1, [r2]
	mov	r0, #0x8
	orr	r0, r0, r1
	b	.L72
.L74:
	.align	2, 0
.L73:
	.word	gRfuStatic
.L70:
	ldr	r0, .L75
	ldr	r2, [r0]
	ldrb	r1, [r2]
	mov	r0, #0xf7
	and	r0, r0, r1
.L72:
	strb	r0, [r2]
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gRfuStatic
.Lfe9:
	.size	 rfu_enableREQCallback,.Lfe9-rfu_enableREQCallback
	.align	2, 0
	.type	 rfu_STC_REQ_callback,function
	.thumb_func
rfu_STC_REQ_callback:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	ldr	r0, .L79
	bl	STWI_set_Callback_M
	ldr	r0, .L79+0x4
	ldr	r0, [r0]
	strh	r4, [r0, #0x1c]
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L78	@cond_branch
	ldr	r0, .L79+0x8
	ldr	r0, [r0]
	ldr	r2, [r0]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	_call_via_r2
.L78:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	rfu_CB_defaultCallback
	.word	gRfuStatic
	.word	gRfuFixed
.Lfe10:
	.size	 rfu_STC_REQ_callback,.Lfe10-rfu_STC_REQ_callback
	.align	2, 0
	.type	 rfu_CB_defaultCallback,function
	.thumb_func
rfu_CB_defaultCallback:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r3, r1, #0x10
	cmp	r0, #0xff
	bne	.L82	@cond_branch
	ldr	r0, .L90
	ldr	r0, [r0]
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L83	@cond_branch
	ldr	r0, .L90+0x4
	ldr	r0, [r0]
	ldr	r2, [r0]
	mov	r0, #0xff
	add	r1, r3, #0
	bl	_call_via_r2
.L83:
	ldr	r0, .L90+0x8
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x2]
	ldrb	r0, [r0, #0x3]
	add	r5, r0, #0
	orr	r5, r5, r1
	mov	r4, #0x0
.L87:
	add	r0, r5, #0
	asr	r0, r0, r4
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L86	@cond_branch
	add	r0, r4, #0
	bl	rfu_STC_removeLinkData
.L86:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L87	@cond_branch
	ldr	r0, .L90+0x8
	ldr	r1, [r0]
	mov	r0, #0xff
	strb	r0, [r1]
.L82:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	gRfuStatic
	.word	gRfuFixed
	.word	gRfuLinkStatus
.Lfe11:
	.size	 rfu_CB_defaultCallback,.Lfe11-rfu_CB_defaultCallback
	.align	2, 0
	.globl	rfu_waitREQComplete
	.type	 rfu_waitREQComplete,function
	.thumb_func
rfu_waitREQComplete:
	push	{lr}
	bl	STWI_poll_CommandEnd
	ldr	r0, .L93
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x1c]
	pop	{r1}
	bx	r1
.L94:
	.align	2, 0
.L93:
	.word	gRfuStatic
.Lfe12:
	.size	 rfu_waitREQComplete,.Lfe12-rfu_waitREQComplete
	.align	2, 0
	.globl	rfu_REQ_RFUStatus
	.type	 rfu_REQ_RFUStatus,function
	.thumb_func
rfu_REQ_RFUStatus:
	push	{lr}
	ldr	r0, .L96
	bl	STWI_set_Callback_M
	bl	STWI_send_SystemStatusREQ
	pop	{r0}
	bx	r0
.L97:
	.align	2, 0
.L96:
	.word	rfu_STC_REQ_callback
.Lfe13:
	.size	 rfu_REQ_RFUStatus,.Lfe13-rfu_REQ_RFUStatus
	.align	2, 0
	.globl	rfu_getRFUStatus
	.type	 rfu_getRFUStatus,function
	.thumb_func
rfu_getRFUStatus:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L104
	ldr	r0, [r5]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0x93
	beq	.L99	@cond_branch
	mov	r0, #0x10
	b	.L102
.L105:
	.align	2, 0
.L104:
	.word	gRfuFixed
.L99:
	bl	STWI_poll_CommandEnd
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L100	@cond_branch
	ldr	r0, [r5]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x7]
	b	.L103
.L100:
	mov	r0, #0xff
.L103:
	strb	r0, [r4]
	mov	r0, #0x0
.L102:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 rfu_getRFUStatus,.Lfe14-rfu_getRFUStatus
	.align	2, 0
	.globl	rfu_MBOOT_CHILD_inheritanceLinkStatus
	.type	 rfu_MBOOT_CHILD_inheritanceLinkStatus,function
	.thumb_func
rfu_MBOOT_CHILD_inheritanceLinkStatus:
	push	{lr}
	ldr	r2, .L121
	ldr	r3, .L121+0x4
	b	.L120
.L122:
	.align	2, 0
.L121:
	.word	str_checkMbootLL
	.word	0x30000f0
.L109:
	ldrb	r0, [r3]
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r1, r0
	bne	.L119	@cond_branch
.L120:
	ldrb	r1, [r2]
	cmp	r1, #0
	bne	.L109	@cond_branch
	mov	r2, #0xc0
	lsl	r2, r2, #0x12
	mov	r3, #0x0
	mov	r1, #0x0
.L115:
	ldrh	r0, [r2]
	add	r0, r3, r0
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	add	r2, r2, #0x2
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x59
	bls	.L115	@cond_branch
	ldr	r0, .L123
	ldrh	r0, [r0]
	cmp	r3, r0
	bne	.L117	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	ldr	r1, .L123+0x4
	ldr	r1, [r1]
	mov	r2, #0x5a
	bl	CpuSet
	ldr	r0, .L123+0x8
	ldr	r2, [r0]
	ldrb	r1, [r2]
	mov	r0, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x0
	b	.L118
.L124:
	.align	2, 0
.L123:
	.word	0x30000fa
	.word	gRfuLinkStatus
	.word	gRfuStatic
.L119:
.L117:
	mov	r0, #0x1
.L118:
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 rfu_MBOOT_CHILD_inheritanceLinkStatus,.Lfe15-rfu_MBOOT_CHILD_inheritanceLinkStatus
	.align	2, 0
	.globl	rfu_REQ_stopMode
	.type	 rfu_REQ_stopMode,function
	.thumb_func
rfu_REQ_stopMode:
	push	{lr}
	ldr	r0, .L134
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L126	@cond_branch
	mov	r0, #0x3d
	mov	r1, #0x6
	bl	rfu_STC_REQ_callback
	ldr	r0, .L134+0x4
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x12]
	mov	r0, #0x6
	strh	r0, [r1, #0x12]
	b	.L127
.L135:
	.align	2, 0
.L134:
	.word	0x4000208
	.word	gSTWIStatus
.L126:
	bl	AgbRFU_SoftReset
	bl	rfu_STC_clearAPIVariables
	mov	r0, #0x8
	bl	AgbRFU_checkID
	ldr	r1, .L136
	cmp	r0, r1
	bne	.L128	@cond_branch
	ldr	r0, .L136+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0xa]
	lsl	r0, r0, #0x2
	ldr	r2, .L136+0x8
	add	r1, r0, r2
	mov	r0, #0x0
	str	r0, [r1]
	mov	r0, #0x83
	lsl	r0, r0, #0x10
	str	r0, [r1]
	ldr	r0, [r1]
	lsl	r0, r0, #0x10
	ldr	r2, .L136+0xc
	ldr	r3, .L136+0x10
	cmp	r0, r2
	bhi	.L130	@cond_branch
.L129:
	ldr	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, r2
	bls	.L129	@cond_branch
.L130:
	mov	r0, #0x0
	str	r0, [r1]
	add	r0, r3, #0
	bl	STWI_set_Callback_M
	bl	STWI_send_StopModeREQ
	b	.L127
.L137:
	.align	2, 0
.L136:
	.word	0x8001
	.word	gSTWIStatus
	.word	0x4000100
	.word	0x105ffff
	.word	rfu_CB_stopMode
.L128:
	ldr	r1, .L138
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	add	r0, r2, #0
	strh	r0, [r1]
	mov	r0, #0x3d
	mov	r1, #0x0
	bl	rfu_STC_REQ_callback
.L127:
	pop	{r0}
	bx	r0
.L139:
	.align	2, 0
.L138:
	.word	0x4000128
.Lfe16:
	.size	 rfu_REQ_stopMode,.Lfe16-rfu_REQ_stopMode
	.align	2, 0
	.type	 rfu_CB_stopMode,function
	.thumb_func
rfu_CB_stopMode:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r2, r1, #0
	cmp	r2, #0
	bne	.L141	@cond_branch
	ldr	r1, .L142
	mov	r4, #0x80
	lsl	r4, r4, #0x6
	add	r0, r4, #0
	strh	r0, [r1]
.L141:
	add	r0, r3, #0
	add	r1, r2, #0
	bl	rfu_STC_REQ_callback
	pop	{r4}
	pop	{r0}
	bx	r0
.L143:
	.align	2, 0
.L142:
	.word	0x4000128
.Lfe17:
	.size	 rfu_CB_stopMode,.Lfe17-rfu_CB_stopMode
	.align	2, 0
	.globl	rfu_REQBN_softReset_and_checkID
	.type	 rfu_REQBN_softReset_and_checkID,function
	.thumb_func
rfu_REQBN_softReset_and_checkID:
	push	{lr}
	ldr	r0, .L148
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L145	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L147
.L149:
	.align	2, 0
.L148:
	.word	0x4000208
.L145:
	bl	AgbRFU_SoftReset
	bl	rfu_STC_clearAPIVariables
	mov	r0, #0x1e
	bl	AgbRFU_checkID
	add	r2, r0, #0
	cmp	r2, #0
	bne	.L146	@cond_branch
	ldr	r1, .L150
	mov	r3, #0x80
	lsl	r3, r3, #0x6
	add	r0, r3, #0
	strh	r0, [r1]
.L146:
	add	r0, r2, #0
.L147:
	pop	{r1}
	bx	r1
.L151:
	.align	2, 0
.L150:
	.word	0x4000128
.Lfe18:
	.size	 rfu_REQBN_softReset_and_checkID,.Lfe18-rfu_REQBN_softReset_and_checkID
	.align	2, 0
	.globl	rfu_REQ_reset
	.type	 rfu_REQ_reset,function
	.thumb_func
rfu_REQ_reset:
	push	{lr}
	ldr	r0, .L153
	bl	STWI_set_Callback_M
	bl	STWI_send_ResetREQ
	pop	{r0}
	bx	r0
.L154:
	.align	2, 0
.L153:
	.word	rfu_CB_reset
.Lfe19:
	.size	 rfu_REQ_reset,.Lfe19-rfu_REQ_reset
	.align	2, 0
	.type	 rfu_CB_reset,function
	.thumb_func
rfu_CB_reset:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r4, r1, #0
	cmp	r4, #0
	bne	.L156	@cond_branch
	bl	rfu_STC_clearAPIVariables
.L156:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	rfu_STC_REQ_callback
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 rfu_CB_reset,.Lfe20-rfu_CB_reset
	.align	2, 0
	.globl	rfu_REQ_configSystem
	.type	 rfu_REQ_configSystem,function
	.thumb_func
rfu_REQ_configSystem:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	ldr	r0, .L160
	bl	STWI_set_Callback_M
	mov	r0, #0x3
	and	r4, r4, r0
	mov	r0, #0x3c
	orr	r4, r4, r0
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	STWI_send_SystemConfigREQ
	cmp	r6, #0
	bne	.L158	@cond_branch
	ldr	r0, .L160+0x4
	ldr	r1, [r0]
	mov	r0, #0x1
	strh	r0, [r1, #0x1a]
	b	.L159
.L161:
	.align	2, 0
.L160:
	.word	rfu_STC_REQ_callback
	.word	gRfuStatic
.L158:
	ldr	r5, .L162
	ldrh	r4, [r5]
	mov	r0, #0x0
	strh	r0, [r5]
	mov	r0, #0x96
	lsl	r0, r0, #0x2
	add	r1, r6, #0
	bl	Div
	ldr	r1, .L162+0x4
	ldr	r1, [r1]
	strh	r0, [r1, #0x1a]
	strh	r4, [r5]
.L159:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L163:
	.align	2, 0
.L162:
	.word	0x4000208
	.word	gRfuStatic
.Lfe21:
	.size	 rfu_REQ_configSystem,.Lfe21-rfu_REQ_configSystem
	.align	2, 0
	.globl	rfu_REQ_configGameData
	.type	 rfu_REQ_configGameData,function
	.thumb_func
rfu_REQ_configGameData:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x10
	add	r4, r2, #0
	add	r7, r3, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r2, r1, #0x10
	add	r5, r4, #0
	mov	r0, sp
	strb	r1, [r0]
	lsr	r2, r2, #0x18
	strb	r2, [r0, #0x1]
	cmp	r6, #0
	beq	.L165	@cond_branch
	mov	r1, #0x80
	orr	r2, r2, r1
	mov	r1, #0x0
	orr	r2, r2, r1
	strb	r2, [r0, #0x1]
.L165:
	mov	r2, #0x2
	ldr	r0, .L177
	mov	ip, r0
.L169:
	mov	r3, sp
	add	r1, r3, r2
	ldrb	r0, [r4]
	strb	r0, [r1]
	add	r4, r4, #0x1
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xe
	bls	.L169	@cond_branch
	mov	r3, #0x0
	add	r1, r7, #0
	mov	r2, #0x0
.L174:
	ldrb	r0, [r1]
	add	r0, r3, r0
	lsl	r0, r0, #0x18
	add	r1, r1, #0x1
	lsr	r0, r0, #0x18
	ldrb	r3, [r5]
	add	r0, r0, r3
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r5, r5, #0x1
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L174	@cond_branch
	mov	r1, sp
	mvn	r0, r3
	strb	r0, [r1, #0xf]
	cmp	r6, #0
	beq	.L176	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1, #0xe]
.L176:
	mov	r0, ip
	bl	STWI_set_Callback_M
	mov	r0, sp
	add	r1, r7, #0
	bl	STWI_send_GameConfigREQ
	add	sp, sp, #0x10
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L178:
	.align	2, 0
.L177:
	.word	rfu_CB_configGameData
.Lfe22:
	.size	 rfu_REQ_configGameData,.Lfe22-rfu_REQ_configGameData
	.align	2, 0
	.type	 rfu_CB_configGameData,function
	.thumb_func
rfu_CB_configGameData:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	cmp	r7, #0
	bne	.L180	@cond_branch
	ldr	r0, .L194
	ldr	r0, [r0]
	ldr	r1, [r0, #0x24]
	ldr	r0, .L194+0x4
	ldr	r6, [r0]
	ldrb	r2, [r1, #0x4]
	add	r5, r6, #0
	add	r5, r5, #0x98
	strh	r2, [r5]
	ldrb	r0, [r1, #0x5]
	lsl	r3, r0, #0x8
	orr	r3, r3, r2
	strh	r3, [r5]
	add	r4, r1, #0x6
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L181	@cond_branch
	eor	r3, r3, r1
	strh	r3, [r5]
	add	r1, r6, #0
	add	r1, r1, #0x97
	mov	r0, #0x1
	b	.L193
.L195:
	.align	2, 0
.L194:
	.word	gSTWIStatus
	.word	gRfuLinkStatus
.L181:
	add	r1, r6, #0
	add	r1, r1, #0x97
	mov	r0, #0x0
.L193:
	strb	r0, [r1]
	mov	r2, #0x0
	ldr	r3, .L196
.L186:
	ldr	r0, [r3]
	add	r0, r0, #0x9a
	add	r0, r0, r2
	ldrb	r1, [r4]
	strb	r1, [r0]
	add	r4, r4, #0x1
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xc
	bls	.L186	@cond_branch
	add	r4, r4, #0x1
	mov	r2, #0x0
	ldr	r3, .L196
.L191:
	ldr	r0, [r3]
	add	r0, r0, #0xa9
	add	r0, r0, r2
	ldrb	r1, [r4]
	strb	r1, [r0]
	add	r4, r4, #0x1
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L191	@cond_branch
.L180:
	mov	r0, ip
	add	r1, r7, #0
	bl	rfu_STC_REQ_callback
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L197:
	.align	2, 0
.L196:
	.word	gRfuLinkStatus
.Lfe23:
	.size	 rfu_CB_configGameData,.Lfe23-rfu_CB_configGameData
	.align	2, 0
	.globl	rfu_REQ_startSearchChild
	.type	 rfu_REQ_startSearchChild,function
	.thumb_func
rfu_REQ_startSearchChild:
	push	{r4, lr}
	mov	r1, #0x0
	ldr	r4, .L207
	ldr	r3, .L207+0x4
	mov	r2, #0x0
.L202:
	ldr	r0, [r3]
	add	r0, r0, #0xe
	add	r0, r0, r1
	strb	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x3
	bls	.L202	@cond_branch
	add	r0, r4, #0
	bl	STWI_set_Callback_M
	bl	STWI_send_SystemStatusREQ
	bl	STWI_poll_CommandEnd
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L204	@cond_branch
	ldr	r0, .L207+0x8
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0
	bne	.L206	@cond_branch
	mov	r0, #0x1
	bl	rfu_STC_clearLinkStatus
	b	.L206
.L208:
	.align	2, 0
.L207:
	.word	rfu_CB_defaultCallback
	.word	gRfuStatic
	.word	gRfuFixed
.L204:
	mov	r0, #0x19
	bl	rfu_STC_REQ_callback
.L206:
	ldr	r0, .L209
	bl	STWI_set_Callback_M
	bl	STWI_send_SC_StartREQ
	pop	{r4}
	pop	{r0}
	bx	r0
.L210:
	.align	2, 0
.L209:
	.word	rfu_CB_startSearchChild
.Lfe24:
	.size	 rfu_REQ_startSearchChild,.Lfe24-rfu_REQ_startSearchChild
	.align	2, 0
	.type	 rfu_CB_startSearchChild,function
	.thumb_func
rfu_CB_startSearchChild:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r2, r1, #0
	cmp	r2, #0
	bne	.L212	@cond_branch
	ldr	r0, .L213
	ldr	r1, [r0]
	mov	r0, #0x1
	strb	r0, [r1, #0x9]
.L212:
	add	r0, r3, #0
	add	r1, r2, #0
	bl	rfu_STC_REQ_callback
	pop	{r0}
	bx	r0
.L214:
	.align	2, 0
.L213:
	.word	gRfuStatic
.Lfe25:
	.size	 rfu_CB_startSearchChild,.Lfe25-rfu_CB_startSearchChild
	.align	2, 0
	.type	 rfu_STC_clearLinkStatus,function
	.thumb_func
rfu_STC_clearLinkStatus:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	rfu_clearAllSlot
	cmp	r4, #0
	beq	.L216	@cond_branch
	mov	r0, sp
	mov	r5, #0x0
	strh	r5, [r0]
	ldr	r4, .L222
	ldr	r1, [r4]
	add	r1, r1, #0x14
	ldr	r2, .L222+0x4
	bl	CpuSet
	ldr	r0, [r4]
	strb	r5, [r0, #0x8]
.L216:
	mov	r1, #0x0
	ldr	r2, .L222
	add	r4, r2, #0
	mov	r3, #0x0
.L220:
	ldr	r0, [r4]
	add	r0, r0, #0xa
	add	r0, r0, r1
	strb	r3, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bls	.L220	@cond_branch
	ldr	r0, [r2]
	mov	r1, #0x0
	strb	r1, [r0, #0x1]
	ldr	r0, [r2]
	strb	r1, [r0, #0x2]
	ldr	r0, [r2]
	strb	r1, [r0, #0x3]
	ldr	r0, [r2]
	strb	r1, [r0, #0x7]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L223:
	.align	2, 0
.L222:
	.word	gRfuLinkStatus
	.word	0x1000040
.Lfe26:
	.size	 rfu_STC_clearLinkStatus,.Lfe26-rfu_STC_clearLinkStatus
	.align	2, 0
	.globl	rfu_REQ_pollSearchChild
	.type	 rfu_REQ_pollSearchChild,function
	.thumb_func
rfu_REQ_pollSearchChild:
	push	{lr}
	ldr	r0, .L225
	bl	STWI_set_Callback_M
	bl	STWI_send_SC_PollingREQ
	pop	{r0}
	bx	r0
.L226:
	.align	2, 0
.L225:
	.word	rfu_CB_pollAndEndSearchChild
.Lfe27:
	.size	 rfu_REQ_pollSearchChild,.Lfe27-rfu_REQ_pollSearchChild
	.align	2, 0
	.globl	rfu_REQ_endSearchChild
	.type	 rfu_REQ_endSearchChild,function
	.thumb_func
rfu_REQ_endSearchChild:
	push	{lr}
	ldr	r0, .L228
	bl	STWI_set_Callback_M
	bl	STWI_send_SC_EndREQ
	pop	{r0}
	bx	r0
.L229:
	.align	2, 0
.L228:
	.word	rfu_CB_pollAndEndSearchChild
.Lfe28:
	.size	 rfu_REQ_endSearchChild,.Lfe28-rfu_REQ_endSearchChild
	.align	2, 0
	.type	 rfu_CB_pollAndEndSearchChild,function
	.thumb_func
rfu_CB_pollAndEndSearchChild:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	cmp	r6, #0
	bne	.L231	@cond_branch
	bl	rfu_STC_readChildList
.L231:
	cmp	r4, #0x1a
	bne	.L232	@cond_branch
	ldr	r5, .L238
	ldr	r0, [r5]
	add	r0, r0, #0x94
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L235	@cond_branch
	ldr	r0, .L238+0x4
	bl	STWI_set_Callback_M
	bl	STWI_send_SystemStatusREQ
	bl	STWI_poll_CommandEnd
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L235	@cond_branch
	ldr	r1, [r5]
	ldr	r0, .L238+0x8
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x4]
	add	r1, r1, #0x94
	strh	r0, [r1]
	b	.L235
.L239:
	.align	2, 0
.L238:
	.word	gRfuLinkStatus
	.word	rfu_CB_defaultCallback
	.word	gRfuFixed
.L232:
	cmp	r4, #0x1b
	bne	.L235	@cond_branch
	ldr	r0, .L240
	ldr	r1, [r0]
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L237	@cond_branch
	add	r1, r1, #0x94
	mov	r0, #0x0
	strh	r0, [r1]
.L237:
	ldr	r0, .L240+0x4
	ldr	r1, [r0]
	mov	r0, #0x0
	strb	r0, [r1, #0x9]
.L235:
	add	r0, r4, #0
	add	r1, r6, #0
	bl	rfu_STC_REQ_callback
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L241:
	.align	2, 0
.L240:
	.word	gRfuLinkStatus
	.word	gRfuStatic
.Lfe29:
	.size	 rfu_CB_pollAndEndSearchChild,.Lfe29-rfu_CB_pollAndEndSearchChild
	.align	2, 0
	.type	 rfu_STC_readChildList,function
	.thumb_func
rfu_STC_readChildList:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L249
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	ldrb	r7, [r0, #0x1]
	add	r6, r0, #0x4
	cmp	r7, #0
	beq	.L244	@cond_branch
	ldr	r0, .L249+0x4
	mov	r8, r0
	ldr	r1, .L249+0x8
	mov	ip, r1
.L246:
	ldrb	r4, [r6, #0x2]
	cmp	r4, #0x3
	bhi	.L247	@cond_branch
	mov	r2, ip
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x2]
	asr	r0, r0, r4
	mov	r5, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L247	@cond_branch
	ldrb	r0, [r1, #0x3]
	asr	r0, r0, r4
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L247	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0xe
	add	r0, r0, r4
	mov	r1, #0xf0
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r0, r0, #0xa
	add	r0, r0, r4
	mov	r1, #0x10
	strb	r1, [r0]
	ldr	r2, [r2]
	add	r0, r5, #0
	lsl	r0, r0, r4
	ldrb	r1, [r2, #0x2]
	orr	r0, r0, r1
	strb	r0, [r2, #0x2]
	mov	r2, ip
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	ldr	r1, [r2]
	lsl	r3, r4, #0x5
	add	r1, r1, r3
	ldrh	r0, [r6]
	strh	r0, [r1, #0x14]
	strb	r4, [r1, #0x16]
	ldr	r0, [r2]
	strb	r5, [r0]
	mov	r0, r8
	ldr	r2, [r0]
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r2, r8
	ldr	r1, [r2]
	lsl	r0, r4, #0x1
	add	r1, r1, #0x12
	add	r1, r1, r0
	mov	r2, ip
	ldr	r0, [r2]
	add	r0, r0, r3
	ldrh	r0, [r0, #0x14]
	strh	r0, [r1]
.L247:
	sub	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r6, r6, #0x4
	cmp	r7, #0
	bne	.L246	@cond_branch
.L244:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L250:
	.align	2, 0
.L249:
	.word	gRfuFixed
	.word	gRfuStatic
	.word	gRfuLinkStatus
.Lfe30:
	.size	 rfu_STC_readChildList,.Lfe30-rfu_STC_readChildList
	.align	2, 0
	.globl	rfu_REQ_startSearchParent
	.type	 rfu_REQ_startSearchParent,function
	.thumb_func
rfu_REQ_startSearchParent:
	push	{lr}
	ldr	r0, .L252
	bl	STWI_set_Callback_M
	bl	STWI_send_SP_StartREQ
	pop	{r0}
	bx	r0
.L253:
	.align	2, 0
.L252:
	.word	rfu_CB_startSearchParent
.Lfe31:
	.size	 rfu_REQ_startSearchParent,.Lfe31-rfu_REQ_startSearchParent
	.align	2, 0
	.type	 rfu_CB_startSearchParent,function
	.thumb_func
rfu_CB_startSearchParent:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r4, r1, #0
	cmp	r4, #0
	bne	.L255	@cond_branch
	mov	r0, #0x0
	bl	rfu_STC_clearLinkStatus
.L255:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	rfu_STC_REQ_callback
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 rfu_CB_startSearchParent,.Lfe32-rfu_CB_startSearchParent
	.align	2, 0
	.globl	rfu_REQ_pollSearchParent
	.type	 rfu_REQ_pollSearchParent,function
	.thumb_func
rfu_REQ_pollSearchParent:
	push	{lr}
	ldr	r0, .L257
	bl	STWI_set_Callback_M
	bl	STWI_send_SP_PollingREQ
	pop	{r0}
	bx	r0
.L258:
	.align	2, 0
.L257:
	.word	rfu_CB_pollSearchParent
.Lfe33:
	.size	 rfu_REQ_pollSearchParent,.Lfe33-rfu_REQ_pollSearchParent
	.align	2, 0
	.type	 rfu_CB_pollSearchParent,function
	.thumb_func
rfu_CB_pollSearchParent:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r4, r1, #0
	cmp	r4, #0
	bne	.L260	@cond_branch
	bl	rfu_STC_readParentCandidateList
.L260:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	rfu_STC_REQ_callback
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 rfu_CB_pollSearchParent,.Lfe34-rfu_CB_pollSearchParent
	.align	2, 0
	.globl	rfu_REQ_endSearchParent
	.type	 rfu_REQ_endSearchParent,function
	.thumb_func
rfu_REQ_endSearchParent:
	push	{lr}
	ldr	r0, .L262
	bl	STWI_set_Callback_M
	bl	STWI_send_SP_EndREQ
	pop	{r0}
	bx	r0
.L263:
	.align	2, 0
.L262:
	.word	rfu_STC_REQ_callback
.Lfe35:
	.size	 rfu_REQ_endSearchParent,.Lfe35-rfu_REQ_endSearchParent
	.align	2, 0
	.type	 rfu_STC_readParentCandidateList,function
	.thumb_func
rfu_STC_readParentCandidateList:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	mov	r0, sp
	mov	r4, #0x0
	strh	r4, [r0]
	ldr	r5, .L289
	ldr	r1, [r5]
	add	r1, r1, #0x14
	ldr	r2, .L289+0x4
	bl	CpuSet
	ldr	r0, .L289+0x8
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r2, [r0]
	ldrb	r7, [r2, #0x1]
	add	r2, r2, #0x4
	ldr	r0, [r5]
	strb	r4, [r0, #0x8]
	mov	r6, #0x0
	cmp	r7, #0
	beq	.L266	@cond_branch
	mov	ip, r5
	ldr	r0, .L289+0xc
	mov	r8, r0
.L268:
	sub	r0, r7, #0x7
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r1, r2, #0x6
	add	r2, r2, #0x13
	ldrb	r0, [r2]
	mvn	r0, r0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r2, r2, #0x1
	mov	r4, #0x0
	mov	r3, #0x0
	add	r6, r6, #0x1
.L273:
	ldrb	r0, [r2]
	add	r0, r4, r0
	lsl	r0, r0, #0x18
	add	r2, r2, #0x1
	lsr	r0, r0, #0x18
	ldrb	r4, [r1]
	add	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r1, r1, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x7
	bls	.L273	@cond_branch
	cmp	r4, r5
	bne	.L267	@cond_branch
	sub	r2, r2, #0x1c
	mov	r0, ip
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x5
	add	r0, r0, #0x14
	add	r4, r1, r0
	ldrh	r0, [r2]
	mov	r3, #0x0
	strh	r0, [r4]
	add	r2, r2, #0x2
	ldrb	r0, [r2]
	strb	r0, [r4, #0x2]
	add	r2, r2, #0x2
	ldrh	r1, [r2]
	mov	r0, r8
	and	r0, r0, r1
	strh	r0, [r4, #0x4]
	ldrh	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L276	@cond_branch
	mov	r0, #0x1
	strb	r0, [r4, #0x3]
	b	.L277
.L290:
	.align	2, 0
.L289:
	.word	gRfuLinkStatus
	.word	0x1000040
	.word	gRfuFixed
	.word	0x7fff
.L276:
	strb	r3, [r4, #0x3]
.L277:
	add	r2, r2, #0x2
	mov	r3, #0x0
	add	r5, r4, #0
	add	r5, r5, #0x15
	add	r4, r4, #0x6
.L281:
	add	r1, r4, r3
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xc
	bls	.L281	@cond_branch
	add	r2, r2, #0x1
	mov	r3, #0x0
	add	r4, r5, #0
.L286:
	add	r1, r4, r3
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x7
	bls	.L286	@cond_branch
	mov	r4, ip
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x8]
.L267:
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bhi	.L266	@cond_branch
	cmp	r7, #0
	bne	.L268	@cond_branch
.L266:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 rfu_STC_readParentCandidateList,.Lfe36-rfu_STC_readParentCandidateList
	.align	2, 0
	.globl	rfu_REQ_startConnectParent
	.type	 rfu_REQ_startConnectParent,function
	.thumb_func
rfu_REQ_startConnectParent:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r3, #0x0
	mov	r2, #0x0
	ldr	r1, .L301
	ldr	r0, [r1]
	ldrh	r0, [r0, #0x14]
	cmp	r0, r4
	beq	.L293	@cond_branch
	add	r5, r1, #0
.L294:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bhi	.L293	@cond_branch
	ldr	r0, [r5]
	lsl	r1, r2, #0x5
	add	r0, r0, r1
	ldrh	r0, [r0, #0x14]
	cmp	r0, r4
	bne	.L294	@cond_branch
.L293:
	cmp	r2, #0x4
	bne	.L298	@cond_branch
	mov	r3, #0x80
	lsl	r3, r3, #0x1
.L298:
	cmp	r3, #0
	bne	.L299	@cond_branch
	ldr	r0, .L301+0x4
	ldr	r0, [r0]
	strh	r4, [r0, #0x1e]
	ldr	r0, .L301+0x8
	bl	STWI_set_Callback_M
	add	r0, r4, #0
	bl	STWI_send_CP_StartREQ
	b	.L300
.L302:
	.align	2, 0
.L301:
	.word	gRfuLinkStatus
	.word	gRfuStatic
	.word	rfu_STC_REQ_callback
.L299:
	mov	r0, #0x1f
	add	r1, r3, #0
	bl	rfu_STC_REQ_callback
.L300:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 rfu_REQ_startConnectParent,.Lfe37-rfu_REQ_startConnectParent
	.align	2, 0
	.globl	rfu_REQ_pollConnectParent
	.type	 rfu_REQ_pollConnectParent,function
	.thumb_func
rfu_REQ_pollConnectParent:
	push	{lr}
	ldr	r0, .L304
	bl	STWI_set_Callback_M
	bl	STWI_send_CP_PollingREQ
	pop	{r0}
	bx	r0
.L305:
	.align	2, 0
.L304:
	.word	rfu_CB_pollConnectParent
.Lfe38:
	.size	 rfu_REQ_pollConnectParent,.Lfe38-rfu_REQ_pollConnectParent
	.align	2, 0
	.type	 rfu_CB_pollConnectParent,function
	.thumb_func
rfu_CB_pollConnectParent:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x2c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x24]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r1, [sp, #0x28]
	cmp	r1, #0
	bne	.L307	@cond_branch
	ldr	r0, .L319
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	ldrh	r5, [r0, #0x4]
	ldrb	r1, [r0, #0x6]
	mov	sl, r1
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0
	bne	.L307	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r1
	lsr	r2, r0, #0x18
	ldr	r4, .L319+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x2]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L307	@cond_branch
	add	r0, r2, #0
	orr	r0, r0, r1
	strb	r0, [r3, #0x2]
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x3]
	bic	r0, r0, r2
	strb	r0, [r1, #0x3]
	ldr	r1, [r4]
	add	r0, r1, #0
	add	r0, r0, #0x94
	mov	r2, #0x0
	strh	r5, [r0]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	ldr	r0, [r4]
	strb	r2, [r0]
	ldr	r3, .L319+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2]
	mov	r0, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r5, #0x0
	add	r7, r4, #0
	add	r6, sp, #0x20
	mov	r0, #0x0
	mov	r8, r0
.L313:
	ldr	r2, [r7]
	lsl	r4, r5, #0x5
	add	r0, r2, r4
	ldr	r1, [r3]
	ldrh	r0, [r0, #0x14]
	ldrh	r1, [r1, #0x1e]
	cmp	r0, r1
	bne	.L312	@cond_branch
	ldrb	r0, [r2, #0x8]
	cmp	r0, #0
	beq	.L315	@cond_branch
	mov	r9, sp
	add	r0, r4, #0
	add	r0, r0, #0x14
	add	r0, r2, r0
	mov	r1, sp
	mov	r2, #0x10
	bl	CpuSet
	mov	r1, r8
	strh	r1, [r6]
	ldr	r1, [r7]
	add	r1, r1, #0x14
	add	r0, r6, #0
	ldr	r2, .L319+0xc
	bl	CpuSet
	ldr	r0, [r7]
	mov	r1, r8
	strb	r1, [r0, #0x8]
	b	.L311
.L320:
	.align	2, 0
.L319:
	.word	gRfuFixed
	.word	gRfuLinkStatus
	.word	gRfuStatic
	.word	0x1000040
.L315:
	add	r0, r4, #0
	add	r0, r0, #0x14
	add	r2, r2, r0
	mov	r9, r2
	b	.L311
.L312:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L313	@cond_branch
.L311:
	cmp	r5, #0x3
	bhi	.L307	@cond_branch
	ldr	r4, .L321
	mov	r0, sl
	lsl	r5, r0, #0x5
	add	r0, r5, #0
	add	r0, r0, #0x14
	ldr	r1, [r4]
	add	r1, r1, r0
	mov	r0, r9
	mov	r2, #0x10
	bl	CpuSet
	ldr	r0, [r4]
	add	r0, r0, r5
	mov	r1, sl
	strb	r1, [r0, #0x16]
.L307:
	ldr	r0, [sp, #0x24]
	ldr	r1, [sp, #0x28]
	bl	rfu_STC_REQ_callback
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L322:
	.align	2, 0
.L321:
	.word	gRfuLinkStatus
.Lfe39:
	.size	 rfu_CB_pollConnectParent,.Lfe39-rfu_CB_pollConnectParent
	.align	2, 0
	.globl	rfu_getConnectParentStatus
	.type	 rfu_getConnectParentStatus,function
	.thumb_func
rfu_getConnectParentStatus:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0xff
	strb	r0, [r3]
	ldr	r0, .L326
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r2, [r0]
	ldrb	r0, [r2]
	add	r0, r0, #0x60
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L324	@cond_branch
	mov	r0, #0x10
	b	.L325
.L327:
	.align	2, 0
.L326:
	.word	gRfuFixed
.L324:
	add	r2, r2, #0x6
	ldrb	r0, [r2]
	strb	r0, [r1]
	ldrb	r0, [r2, #0x1]
	strb	r0, [r3]
	mov	r0, #0x0
.L325:
	pop	{r1}
	bx	r1
.Lfe40:
	.size	 rfu_getConnectParentStatus,.Lfe40-rfu_getConnectParentStatus
	.align	2, 0
	.globl	rfu_REQ_endConnectParent
	.type	 rfu_REQ_endConnectParent,function
	.thumb_func
rfu_REQ_endConnectParent:
	push	{lr}
	ldr	r0, .L330
	bl	STWI_set_Callback_M
	bl	STWI_send_CP_EndREQ
	ldr	r0, .L330+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0x3
	bhi	.L329	@cond_branch
	ldr	r0, .L330+0x8
	ldr	r0, [r0]
	add	r0, r0, #0xa
	ldrb	r1, [r1, #0x6]
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
.L329:
	pop	{r0}
	bx	r0
.L331:
	.align	2, 0
.L330:
	.word	rfu_CB_pollConnectParent
	.word	gRfuFixed
	.word	gRfuStatic
.Lfe41:
	.size	 rfu_REQ_endConnectParent,.Lfe41-rfu_REQ_endConnectParent
	.align	2, 0
	.globl	rfu_syncVBlank
	.type	 rfu_syncVBlank,function
	.thumb_func
rfu_syncVBlank:
	push	{r4, r5, lr}
	bl	rfu_NI_checkCommFailCounter
	ldr	r0, .L353
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L351	@cond_branch
	ldr	r4, .L353+0x4
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0
	beq	.L334	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x6]
.L334:
	bl	rfu_getMasterSlave
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, [r4]
	ldrb	r1, [r2]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L335	@cond_branch
	cmp	r3, #0
	bne	.L350	@cond_branch
	mov	r0, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, [r4]
	mov	r0, #0xb4
	lsl	r0, r0, #0x1
	strh	r0, [r1, #0x20]
	b	.L337
.L354:
	.align	2, 0
.L353:
	.word	gRfuLinkStatus
	.word	gRfuStatic
.L335:
	cmp	r3, #0
	beq	.L339	@cond_branch
	mov	r0, #0xfb
	and	r0, r0, r1
	strb	r0, [r2]
.L337:
	cmp	r3, #0
	beq	.L339	@cond_branch
.L350:
	ldr	r3, .L355
	ldr	r2, [r3]
	ldrb	r1, [r2]
	mov	r0, #0xfd
	and	r0, r0, r1
	b	.L352
.L356:
	.align	2, 0
.L355:
	.word	gRfuStatic
.L339:
	ldr	r3, .L357
	ldr	r2, [r3]
	ldrb	r1, [r2]
	mov	r0, #0x2
	orr	r0, r0, r1
.L352:
	strb	r0, [r2]
	ldr	r3, [r3]
	ldrb	r1, [r3]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L351	@cond_branch
	ldrh	r0, [r3, #0x20]
	cmp	r0, #0
	bne	.L342	@cond_branch
	mov	r0, #0xfb
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, .L357+0x4
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x2]
	ldrb	r0, [r0, #0x3]
	add	r5, r0, #0
	orr	r5, r5, r1
	mov	r4, #0x0
.L346:
	add	r0, r5, #0
	asr	r0, r0, r4
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L345	@cond_branch
	add	r0, r4, #0
	bl	rfu_STC_removeLinkData
.L345:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L346	@cond_branch
	ldr	r0, .L357+0x4
	ldr	r1, [r0]
	mov	r0, #0xff
	strb	r0, [r1]
	mov	r0, #0x1
	b	.L349
.L358:
	.align	2, 0
.L357:
	.word	gRfuStatic
	.word	gRfuLinkStatus
.L342:
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x20]
.L351:
	mov	r0, #0x0
.L349:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe42:
	.size	 rfu_syncVBlank,.Lfe42-rfu_syncVBlank
	.align	2, 0
	.globl	rfu_REQBN_watchLink
	.type	 rfu_REQBN_watchLink,function
	.thumb_func
rfu_REQBN_watchLink:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	mov	r8, r1
	str	r2, [sp]
	str	r3, [sp, #0x4]
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	mov	r1, #0x0
	str	r1, [sp, #0xc]
	mov	r2, r8
	strb	r1, [r2]
	mov	r0, sp
	ldrb	r1, [r0, #0xc]
	ldr	r0, [sp]
	strb	r1, [r0]
	mov	r2, sp
	ldrb	r0, [r2, #0xc]
	ldr	r2, [sp, #0x4]
	strb	r0, [r2]
	ldr	r5, .L418
	ldr	r0, [r5]
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.LCB2647
	b	.L415	@long jump
.LCB2647:
	ldr	r0, .L418+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x14]
	cmp	r0, #0
	bne	.LCB2654
	b	.L415	@long jump
.LCB2654:
	ldr	r3, .L418+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2]
	mov	r4, #0x4
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L362	@cond_branch
	mov	r0, #0xb4
	lsl	r0, r0, #0x1
	strh	r0, [r2, #0x20]
.L362:
	ldr	r1, [r3]
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0
	bne	.L363	@cond_branch
	strb	r4, [r1, #0x6]
	mov	r1, #0x1
	str	r1, [sp, #0x8]
.L363:
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x29
	bne	.L364	@cond_branch
	ldr	r0, .L418+0xc
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x4]
	mov	r2, r8
	strb	r0, [r2]
	ldrb	r0, [r1, #0x5]
	ldr	r1, [sp]
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L365	@cond_branch
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x2]
	strb	r0, [r2]
.L365:
	mov	r2, #0x2
	str	r2, [sp, #0x8]
	b	.L366
.L419:
	.align	2, 0
.L418:
	.word	gRfuLinkStatus
	.word	gSTWIStatus
	.word	gRfuStatic
	.word	gRfuFixed
.L364:
	mov	r0, #0x9b
	lsl	r0, r0, #0x1
	cmp	r6, r0
	bne	.L367	@cond_branch
	ldr	r0, .L420
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	ldrb	r6, [r0, #0x5]
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x2]
	eor	r6, r6, r0
	and	r6, r6, r0
	mov	r0, r8
	strb	r6, [r0]
	mov	r0, #0x1
	ldr	r1, [sp]
	strb	r0, [r1]
	mov	r5, #0x0
.L371:
	mov	r2, r8
	ldrb	r0, [r2]
	asr	r0, r0, r5
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L370	@cond_branch
	ldr	r0, .L420+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xa
	add	r0, r0, r5
	mov	r1, #0x0
	strb	r1, [r0]
	add	r0, r5, #0
	bl	rfu_STC_removeLinkData
.L370:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L371	@cond_branch
.L367:
	ldr	r0, [sp, #0x8]
	cmp	r0, #0
	bne	.LCB2779
	b	.L415	@long jump
.LCB2779:
.L366:
	ldr	r4, .L420
	ldr	r0, [r4]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	ldr	r1, [r0]
	str	r1, [sp, #0x10]
	ldr	r0, [r0, #0x4]
	str	r0, [sp, #0x14]
	ldr	r0, .L420+0x8
	bl	STWI_set_Callback_M
	bl	STWI_send_LinkStatusREQ
	bl	STWI_poll_CommandEnd
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0xc]
	cmp	r0, #0
	bne	.L375	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	add	r2, r0, #0x4
	mov	r5, #0x0
	ldr	r3, .L420+0x4
.L379:
	ldr	r0, [r3]
	add	r0, r0, #0xa
	add	r0, r0, r5
	ldrb	r1, [r2]
	strb	r1, [r0]
	add	r2, r2, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L379	@cond_branch
	mov	r2, #0x0
	mov	r9, r2
	mov	r5, #0x0
	b	.L385
.L421:
	.align	2, 0
.L420:
	.word	gRfuFixed
	.word	gRfuLinkStatus
	.word	rfu_CB_defaultCallback
.L375:
	mov	r0, #0x11
	ldr	r1, [sp, #0xc]
	bl	rfu_STC_REQ_callback
	ldr	r0, [sp, #0xc]
	b	.L414
.L385:
	ldr	r1, .L422
	ldr	r0, [r1]
	add	r0, r0, #0xe
	add	r2, r0, r5
	ldrb	r0, [r2]
	add	r3, r1, #0
	cmp	r0, #0
	beq	.L386	@cond_branch
	sub	r0, r0, #0x4
	strb	r0, [r2]
	ldr	r0, .L422+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xa
	add	r1, r0, r5
	ldrb	r0, [r1]
	cmp	r0, #0xf
	bhi	.L386	@cond_branch
	mov	r0, #0x10
	strb	r0, [r1]
.L386:
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r5
	lsr	r6, r0, #0x18
	add	r0, r5, #0x1
	mov	sl, r0
	ldr	r1, [sp, #0xc]
	cmp	r1, #0
	beq	.LCB2886
	b	.L388	@long jump
.LCB2886:
	ldr	r2, [sp, #0x8]
	cmp	r2, #0x1
	bne	.L389	@cond_branch
	ldr	r4, .L422+0x4
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x2]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L389	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0xa
	add	r0, r0, r5
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L390	@cond_branch
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bne	.L391	@cond_branch
	ldr	r1, [r3]
	add	r1, r1, #0xa
	add	r1, r1, r5
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0xa
	add	r0, r0, r5
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bls	.L389	@cond_branch
	mov	r0, r8
	ldrb	r1, [r0]
	add	r0, r6, #0
	orr	r0, r0, r1
	mov	r1, r8
	strb	r0, [r1]
	ldr	r0, [sp]
	strb	r2, [r0]
	b	.L389
.L423:
	.align	2, 0
.L422:
	.word	gRfuStatic
	.word	gRfuLinkStatus
.L391:
	bl	STWI_send_SystemStatusREQ
	bl	STWI_poll_CommandEnd
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L389	@cond_branch
	ldr	r0, .L424
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0
	bne	.L395	@cond_branch
	mov	r2, r8
	ldrb	r1, [r2]
	add	r0, r6, #0
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, sp
	ldrb	r1, [r0, #0x8]
	ldr	r0, [sp]
	b	.L416
.L425:
	.align	2, 0
.L424:
	.word	gRfuFixed
.L395:
	ldr	r2, .L426
	ldr	r1, [r2]
	add	r1, r1, #0xa
	add	r1, r1, r5
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	ldr	r2, [r2]
	lsr	r0, r0, #0x18
	ldrh	r1, [r2, #0x1a]
	cmp	r0, r1
	bls	.L389	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xa
	add	r0, r0, r5
	mov	r2, sp
	ldrb	r2, [r2, #0xc]
	strb	r2, [r0]
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x2]
	bl	STWI_send_DisconnectREQ
	bl	STWI_poll_CommandEnd
	mov	r0, r8
	ldrb	r1, [r0]
	add	r0, r6, #0
	orr	r0, r0, r1
	mov	r1, r8
	strb	r0, [r1]
	mov	r2, sp
	ldrb	r0, [r2, #0x8]
	ldr	r2, [sp]
	strb	r0, [r2]
	b	.L389
.L427:
	.align	2, 0
.L426:
	.word	gRfuStatic
.L390:
	ldr	r0, [r3]
	add	r0, r0, #0xa
	add	r0, r0, r5
	mov	r1, sp
	ldrb	r1, [r1, #0xc]
.L416:
	strb	r1, [r0]
.L389:
	ldr	r2, .L428
	mov	ip, r2
	ldr	r1, [r2]
	ldrb	r7, [r1]
	add	r0, r5, #0x1
	mov	sl, r0
	cmp	r7, #0x1
	bne	.L388	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0xa
	add	r4, r0, r5
	ldrb	r3, [r4]
	cmp	r3, #0
	beq	.L388	@cond_branch
	ldrb	r2, [r1, #0x3]
	add	r0, r6, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L400	@cond_branch
	cmp	r3, #0xa
	bls	.L401	@cond_branch
	ldr	r2, [sp, #0x4]
	ldrb	r1, [r2]
	add	r0, r6, #0
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, ip
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x2]
	add	r0, r6, #0
	orr	r0, r0, r1
	mov	r3, #0x0
	strb	r0, [r2, #0x2]
	mov	r2, ip
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x3]
	bic	r0, r0, r6
	strb	r0, [r1, #0x3]
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	ldr	r0, .L428+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xa
	add	r0, r0, r5
	strb	r3, [r0]
	b	.L388
.L429:
	.align	2, 0
.L428:
	.word	gRfuLinkStatus
	.word	gRfuStatic
.L401:
	mov	r0, #0x0
	strb	r0, [r4]
	b	.L388
.L400:
	ldrb	r0, [r1, #0x2]
	orr	r0, r0, r2
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L388	@cond_branch
	bl	STWI_send_SlotStatusREQ
	bl	STWI_poll_CommandEnd
	ldr	r0, .L430
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x1]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r2, r2, #0x8
	cmp	r3, #0
	beq	.L388	@cond_branch
	ldrh	r4, [r2]
	ldrb	r0, [r2, #0x2]
	cmp	r0, r5
	bne	.L407	@cond_branch
	ldr	r0, .L430+0x4
	ldr	r0, [r0]
	lsl	r1, r5, #0x1
	add	r0, r0, #0x12
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	bne	.L407	@cond_branch
	lsl	r7, r7, r5
	mov	r0, r9
	orr	r0, r0, r7
	lsl	r0, r0, #0x18
	b	.L417
.L431:
	.align	2, 0
.L430:
	.word	gRfuFixed
	.word	gRfuStatic
.L407:
	add	r2, r2, #0x4
	sub	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.L388	@cond_branch
	ldrh	r4, [r2]
	ldrb	r0, [r2, #0x2]
	cmp	r0, r5
	bne	.L407	@cond_branch
	ldr	r0, .L432
	ldr	r0, [r0]
	lsl	r1, r5, #0x1
	add	r0, r0, #0x12
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	bne	.L407	@cond_branch
	mov	r0, #0x1
	lsl	r0, r0, r5
	mov	r1, r9
	orr	r1, r1, r0
	lsl	r0, r1, #0x18
.L417:
	lsr	r0, r0, #0x18
	mov	r9, r0
.L388:
	ldr	r0, .L432+0x4
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x2]
	mov	r2, r8
	ldrb	r0, [r2]
	and	r0, r0, r1
	and	r6, r6, r0
	cmp	r6, #0
	beq	.L384	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	rfu_STC_removeLinkData
.L384:
	mov	r1, sl
	lsl	r0, r1, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bhi	.LCB3255
	b	.L385	@long jump
.LCB3255:
	mov	r2, r9
	cmp	r2, #0
	beq	.L413	@cond_branch
	mov	r0, r9
	bl	STWI_send_DisconnectREQ
	bl	STWI_poll_CommandEnd
.L413:
	ldr	r1, .L432+0x8
	ldr	r0, [r1]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	ldr	r2, [sp, #0x10]
	str	r2, [r0]
	ldr	r0, [r1]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	ldr	r1, [sp, #0x14]
	str	r1, [r0, #0x4]
.L415:
	mov	r0, #0x0
.L414:
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L433:
	.align	2, 0
.L432:
	.word	gRfuStatic
	.word	gRfuLinkStatus
	.word	gRfuFixed
.Lfe43:
	.size	 rfu_REQBN_watchLink,.Lfe43-rfu_REQBN_watchLink
	.align	2, 0
	.type	 rfu_STC_removeLinkData,function
	.thumb_func
rfu_STC_removeLinkData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	ip, r1
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r7
	lsr	r6, r0, #0x18
	ldr	r0, .L438
	ldr	r0, [r0]
	add	r0, r0, #0xe
	add	r0, r0, r7
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, .L438+0x4
	ldr	r4, [r1]
	ldrb	r0, [r4, #0x2]
	and	r0, r0, r6
	mov	r8, r1
	cmp	r0, #0
	beq	.L435	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L435	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r4, #0x1]
.L435:
	mov	r3, r8
	ldr	r2, [r3]
	mvn	r5, r6
	ldrb	r1, [r2, #0x2]
	add	r0, r5, #0
	and	r0, r0, r1
	strb	r0, [r2, #0x2]
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x3]
	add	r0, r6, #0
	orr	r0, r0, r1
	strb	r0, [r2, #0x3]
	ldr	r3, [r3]
	ldr	r0, [r3]
	ldr	r1, .L438+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L436	@cond_branch
	mov	r0, #0xff
	strb	r0, [r3]
.L436:
	mov	r0, ip
	cmp	r0, #0
	beq	.L437	@cond_branch
	mov	r1, sp
	mov	r4, #0x0
	mov	r0, #0x0
	strh	r0, [r1]
	lsl	r0, r7, #0x5
	add	r0, r0, #0x14
	mov	r2, r8
	ldr	r1, [r2]
	add	r1, r1, r0
	ldr	r2, .L438+0xc
	mov	r0, sp
	bl	CpuSet
	mov	r0, r8
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x3]
	add	r0, r5, #0
	and	r0, r0, r1
	strb	r0, [r2, #0x3]
	mov	r2, r8
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x7]
	and	r5, r5, r0
	strb	r5, [r1, #0x7]
	ldr	r0, [r2]
	add	r0, r0, #0xa
	add	r0, r0, r7
	strb	r4, [r0]
.L437:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L439:
	.align	2, 0
.L438:
	.word	gRfuStatic
	.word	gRfuLinkStatus
	.word	0xff00ff
	.word	0x1000010
.Lfe44:
	.size	 rfu_STC_removeLinkData,.Lfe44-rfu_STC_removeLinkData
	.align	2, 0
	.globl	rfu_REQ_disconnect
	.type	 rfu_REQ_disconnect,function
	.thumb_func
rfu_REQ_disconnect:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r2, .L447
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x2]
	ldrb	r1, [r1, #0x3]
	orr	r0, r0, r1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L441	@cond_branch
	ldr	r0, .L447+0x4
	ldr	r1, [r0]
	strb	r4, [r1, #0x5]
	ldr	r2, [r2]
	ldrb	r1, [r2]
	add	r3, r0, #0
	cmp	r1, #0xff
	bne	.L442	@cond_branch
	ldr	r0, [r3]
	ldrb	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L442	@cond_branch
	ldrb	r0, [r2, #0x3]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L441	@cond_branch
	mov	r0, #0x30
	mov	r1, #0x0
	bl	rfu_CB_disconnect
	b	.L441
.L448:
	.align	2, 0
.L447:
	.word	gRfuLinkStatus
	.word	gRfuStatic
.L442:
	ldr	r0, [r3]
	ldrb	r0, [r0, #0x9]
	cmp	r0, #0
	beq	.L445	@cond_branch
	ldr	r0, .L449
	bl	STWI_set_Callback_M
	bl	STWI_send_SC_EndREQ
	bl	STWI_poll_CommandEnd
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L445	@cond_branch
	mov	r0, #0x1b
	bl	rfu_STC_REQ_callback
	b	.L441
.L450:
	.align	2, 0
.L449:
	.word	rfu_CB_defaultCallback
.L445:
	ldr	r0, .L451
	bl	STWI_set_Callback_M
	add	r0, r4, #0
	bl	STWI_send_DisconnectREQ
.L441:
	pop	{r4}
	pop	{r0}
	bx	r0
.L452:
	.align	2, 0
.L451:
	.word	rfu_CB_disconnect
.Lfe45:
	.size	 rfu_REQ_disconnect,.Lfe45-rfu_REQ_disconnect
	.align	2, 0
	.type	 rfu_CB_disconnect,function
	.thumb_func
rfu_CB_disconnect:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	cmp	r5, #0x3
	bne	.L454	@cond_branch
	ldr	r0, .L466
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L454	@cond_branch
	ldr	r0, .L466+0x4
	bl	STWI_set_Callback_M
	bl	STWI_send_SystemStatusREQ
	bl	STWI_poll_CommandEnd
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L454	@cond_branch
	ldr	r0, .L466+0x8
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0
	bne	.L454	@cond_branch
	mov	r5, #0x0
.L454:
	ldr	r3, .L466+0xc
	ldr	r2, [r3]
	ldr	r0, .L466
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x2]
	ldrb	r1, [r1, #0x3]
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x5]
	and	r0, r0, r1
	strb	r0, [r2, #0x5]
	ldr	r0, .L466+0x8
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r1, [r0]
	ldr	r0, [r3]
	ldrb	r0, [r0, #0x5]
	strb	r0, [r1, #0x8]
	cmp	r5, #0
	bne	.L456	@cond_branch
	mov	r4, #0x0
.L460:
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r4
	lsr	r0, r0, #0x18
	ldr	r1, .L466+0xc
	ldr	r1, [r1]
	ldrb	r1, [r1, #0x5]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L459	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	rfu_STC_removeLinkData
.L459:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L460	@cond_branch
.L456:
	ldr	r0, .L466
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	orr	r0, r0, r1
	cmp	r0, #0
	bne	.L463	@cond_branch
	mov	r0, #0xff
	strb	r0, [r2]
.L463:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	rfu_STC_REQ_callback
	ldr	r0, .L466+0xc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x9]
	cmp	r0, #0
	beq	.L464	@cond_branch
	ldr	r0, .L466+0x4
	bl	STWI_set_Callback_M
	bl	STWI_send_SC_StartREQ
	bl	STWI_poll_CommandEnd
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L464	@cond_branch
	mov	r0, #0x19
	add	r1, r5, #0
	bl	rfu_STC_REQ_callback
.L464:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L467:
	.align	2, 0
.L466:
	.word	gRfuLinkStatus
	.word	rfu_CB_defaultCallback
	.word	gRfuFixed
	.word	gRfuStatic
.Lfe46:
	.size	 rfu_CB_disconnect,.Lfe46-rfu_CB_disconnect
	.align	2, 0
	.globl	rfu_REQ_CHILD_startConnectRecovery
	.type	 rfu_REQ_CHILD_startConnectRecovery,function
	.thumb_func
rfu_REQ_CHILD_startConnectRecovery:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L475
	ldr	r0, [r0]
	strb	r5, [r0, #0x5]
	mov	r4, #0x0
	mov	r0, #0x1
	and	r0, r0, r5
	ldr	r2, .L475+0x4
	cmp	r0, #0
	bne	.L470	@cond_branch
	mov	r1, #0x1
.L471:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bhi	.L470	@cond_branch
	add	r0, r5, #0
	asr	r0, r0, r4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L471	@cond_branch
.L470:
	add	r0, r2, #0
	bl	STWI_set_Callback_M
	ldr	r0, .L475+0x8
	ldr	r1, [r0]
	lsl	r0, r4, #0x5
	add	r0, r1, r0
	ldrh	r0, [r0, #0x14]
	add	r1, r1, #0x94
	ldrh	r1, [r1]
	add	r2, r5, #0
	bl	STWI_send_CPR_StartREQ
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L476:
	.align	2, 0
.L475:
	.word	gRfuStatic
	.word	rfu_STC_REQ_callback
	.word	gRfuLinkStatus
.Lfe47:
	.size	 rfu_REQ_CHILD_startConnectRecovery,.Lfe47-rfu_REQ_CHILD_startConnectRecovery
	.align	2, 0
	.globl	rfu_REQ_CHILD_pollConnectRecovery
	.type	 rfu_REQ_CHILD_pollConnectRecovery,function
	.thumb_func
rfu_REQ_CHILD_pollConnectRecovery:
	push	{lr}
	ldr	r0, .L478
	bl	STWI_set_Callback_M
	bl	STWI_send_CPR_PollingREQ
	pop	{r0}
	bx	r0
.L479:
	.align	2, 0
.L478:
	.word	rfu_CB_CHILD_pollConnectRecovery
.Lfe48:
	.size	 rfu_REQ_CHILD_pollConnectRecovery,.Lfe48-rfu_REQ_CHILD_pollConnectRecovery
	.align	2, 0
	.type	 rfu_CB_CHILD_pollConnectRecovery,function
	.thumb_func
rfu_CB_CHILD_pollConnectRecovery:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	cmp	r7, #0
	bne	.L481	@cond_branch
	ldr	r0, .L488
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L481	@cond_branch
	ldr	r0, .L488+0x4
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x5]
	add	r6, r0, #0
	cmp	r1, #0
	beq	.L481	@cond_branch
	ldr	r1, .L488+0x8
	ldr	r0, [r1]
	strb	r7, [r0]
	mov	r4, #0x0
	add	r5, r1, #0
	mov	ip, r4
.L485:
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r4
	lsr	r3, r0, #0x18
	ldr	r2, [r5]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x5]
	and	r0, r0, r3
	ldrb	r1, [r2, #0x3]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L484	@cond_branch
	ldrb	r1, [r2, #0x2]
	add	r0, r3, #0
	orr	r0, r0, r1
	strb	r0, [r2, #0x2]
	ldr	r1, [r5]
	ldrb	r0, [r1, #0x3]
	bic	r0, r0, r3
	strb	r0, [r1, #0x3]
	ldr	r1, [r5]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	ldr	r0, [r6]
	add	r0, r0, #0xa
	add	r0, r0, r4
	mov	r1, ip
	strb	r1, [r0]
.L484:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L485	@cond_branch
	ldr	r1, [r6]
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
.L481:
	mov	r0, r8
	add	r1, r7, #0
	bl	rfu_STC_REQ_callback
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L489:
	.align	2, 0
.L488:
	.word	gRfuFixed
	.word	gRfuStatic
	.word	gRfuLinkStatus
.Lfe49:
	.size	 rfu_CB_CHILD_pollConnectRecovery,.Lfe49-rfu_CB_CHILD_pollConnectRecovery
	.align	2, 0
	.globl	rfu_CHILD_getConnectRecoveryStatus
	.type	 rfu_CHILD_getConnectRecoveryStatus,function
	.thumb_func
rfu_CHILD_getConnectRecoveryStatus:
	push	{lr}
	add	r2, r0, #0
	mov	r0, #0xff
	strb	r0, [r2]
	ldr	r0, .L493
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x4d
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L491	@cond_branch
	mov	r0, #0x10
	b	.L492
.L494:
	.align	2, 0
.L493:
	.word	gRfuFixed
.L491:
	ldrb	r0, [r1, #0x4]
	strb	r0, [r2]
	mov	r0, #0x0
.L492:
	pop	{r1}
	bx	r1
.Lfe50:
	.size	 rfu_CHILD_getConnectRecoveryStatus,.Lfe50-rfu_CHILD_getConnectRecoveryStatus
	.align	2, 0
	.globl	rfu_REQ_CHILD_endConnectRecovery
	.type	 rfu_REQ_CHILD_endConnectRecovery,function
	.thumb_func
rfu_REQ_CHILD_endConnectRecovery:
	push	{lr}
	ldr	r0, .L496
	bl	STWI_set_Callback_M
	bl	STWI_send_CPR_EndREQ
	pop	{r0}
	bx	r0
.L497:
	.align	2, 0
.L496:
	.word	rfu_CB_CHILD_pollConnectRecovery
.Lfe51:
	.size	 rfu_REQ_CHILD_endConnectRecovery,.Lfe51-rfu_REQ_CHILD_endConnectRecovery
	.align	2, 0
	.type	 rfu_STC_fastCopy,function
	.thumb_func
rfu_STC_fastCopy:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	ldr	r3, [r5]
	ldr	r1, [r6]
	sub	r2, r2, #0x1
	mov	r0, #0x1
	neg	r0, r0
	cmp	r2, r0
	beq	.L500	@cond_branch
	add	r4, r0, #0
.L502:
	ldrb	r0, [r3]
	strb	r0, [r1]
	add	r3, r3, #0x1
	add	r1, r1, #0x1
	sub	r2, r2, #0x1
	cmp	r2, r4
	bne	.L502	@cond_branch
.L500:
	str	r3, [r5]
	str	r1, [r6]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 rfu_STC_fastCopy,.Lfe52-rfu_STC_fastCopy
	.align	2, 0
	.globl	rfu_REQ_changeMasterSlave
	.type	 rfu_REQ_changeMasterSlave,function
	.thumb_func
rfu_REQ_changeMasterSlave:
	push	{lr}
	mov	r0, #0x1
	bl	STWI_read_status
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L505	@cond_branch
	ldr	r0, .L507
	bl	STWI_set_Callback_M
	bl	STWI_send_MS_ChangeREQ
	b	.L506
.L508:
	.align	2, 0
.L507:
	.word	rfu_STC_REQ_callback
.L505:
	mov	r0, #0x27
	mov	r1, #0x0
	bl	rfu_STC_REQ_callback
.L506:
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 rfu_REQ_changeMasterSlave,.Lfe53-rfu_REQ_changeMasterSlave
	.align	2, 0
	.globl	rfu_getMasterSlave
	.type	 rfu_getMasterSlave,function
	.thumb_func
rfu_getMasterSlave:
	push	{lr}
	mov	r0, #0x1
	bl	STWI_read_status
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x1
	bne	.L510	@cond_branch
	ldr	r0, .L514
	ldr	r1, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x2c
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L510	@cond_branch
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0x27
	beq	.L513	@cond_branch
	cmp	r0, #0x25
	beq	.L513	@cond_branch
	cmp	r0, #0x37
	bne	.L510	@cond_branch
.L513:
	mov	r2, #0x0
.L510:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.L515:
	.align	2, 0
.L514:
	.word	gSTWIStatus
.Lfe54:
	.size	 rfu_getMasterSlave,.Lfe54-rfu_getMasterSlave
	.align	2, 0
	.globl	rfu_clearAllSlot
	.type	 rfu_clearAllSlot,function
	.thumb_func
rfu_clearAllSlot:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	ldr	r1, .L522
	ldrh	r0, [r1]
	mov	r8, r0
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r5, #0x0
	mov	r0, sp
	add	r0, r0, #0x2
	mov	r7, #0x0
	add	r6, r0, #0
.L520:
	mov	r0, sp
	strh	r7, [r0]
	ldr	r0, .L522+0x4
	lsl	r4, r5, #0x2
	add	r0, r4, r0
	ldr	r1, [r0]
	mov	r0, sp
	ldr	r2, .L522+0x8
	bl	CpuSet
	strh	r7, [r6]
	ldr	r0, .L522+0xc
	add	r4, r4, r0
	ldr	r1, [r4]
	add	r0, r6, #0
	ldr	r2, .L522+0x10
	bl	CpuSet
	ldr	r3, .L522+0x14
	ldr	r0, [r3]
	add	r0, r0, #0x10
	add	r0, r0, r5
	mov	r1, #0x10
	strb	r1, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x3
	bls	.L520	@cond_branch
	ldr	r2, [r3]
	mov	r1, #0x0
	mov	r0, #0x57
	strb	r0, [r2, #0xf]
	ldr	r0, [r3]
	strb	r1, [r0, #0x4]
	ldr	r0, [r3]
	strb	r1, [r0, #0x5]
	ldr	r0, [r3]
	strb	r1, [r0, #0x6]
	ldr	r0, .L522+0x18
	ldr	r0, [r0]
	strb	r1, [r0, #0x2]
	ldr	r0, .L522
	mov	r1, r8
	strh	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L523:
	.align	2, 0
.L522:
	.word	0x4000208
	.word	gRfuSlotStatusNI
	.word	0x1000034
	.word	gRfuSlotStatusUNI
	.word	0x100000a
	.word	gRfuLinkStatus
	.word	gRfuStatic
.Lfe55:
	.size	 rfu_clearAllSlot,.Lfe55-rfu_clearAllSlot
	.align	2, 0
	.type	 rfu_STC_releaseFrame,function
	.thumb_func
rfu_STC_releaseFrame:
	push	{r4, r5, r6, lr}
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r5, r2, #0
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	ldr	r0, .L529
	ldr	r0, [r0]
	ldrb	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L525	@cond_branch
	ldr	r6, .L529+0x4
	cmp	r3, #0
	bne	.L526	@cond_branch
	ldr	r1, [r6]
	ldrb	r0, [r1, #0xf]
	ldrh	r4, [r4, #0x2e]
	add	r0, r0, r4
	strb	r0, [r1, #0xf]
.L526:
	ldr	r1, [r6]
	ldrb	r0, [r1, #0xf]
	add	r0, r0, #0x3
	strb	r0, [r1, #0xf]
	b	.L527
.L530:
	.align	2, 0
.L529:
	.word	gRfuStatic
	.word	gRfuLinkStatus
.L525:
	ldr	r6, .L531
	cmp	r3, #0
	bne	.L528	@cond_branch
	ldr	r1, [r6]
	add	r1, r1, #0x10
	add	r1, r1, r2
	ldrb	r0, [r1]
	ldrh	r4, [r4, #0x2e]
	add	r0, r0, r4
	strb	r0, [r1]
.L528:
	ldr	r1, [r6]
	add	r1, r1, #0x10
	add	r1, r1, r5
	ldrb	r0, [r1]
	add	r0, r0, #0x2
	strb	r0, [r1]
.L527:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L532:
	.align	2, 0
.L531:
	.word	gRfuLinkStatus
.Lfe56:
	.size	 rfu_STC_releaseFrame,.Lfe56-rfu_STC_releaseFrame
	.align	2, 0
	.globl	rfu_clearSlot
	.type	 rfu_clearSlot,function
	.thumb_func
rfu_clearSlot:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	cmp	r7, #0x3
	bls	.L534	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	b	.L559
.L534:
	mov	r0, #0xf
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L535	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x3
	b	.L559
.L535:
	ldr	r1, .L560
	ldrh	r0, [r1]
	mov	sl, r0
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r0, #0xc
	mov	r2, r8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L536	@cond_branch
	mov	r3, #0x0
	ldr	r1, .L560+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	mov	r9, r0
.L540:
	mov	r4, #0x0
	cmp	r3, #0
	bne	.L541	@cond_branch
	mov	r0, #0x4
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L543	@cond_branch
	mov	r2, r9
	ldr	r4, [r2]
	ldr	r0, .L560+0x8
	ldr	r2, [r0]
	add	r0, r4, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	ldrb	r0, [r2, #0x4]
	bic	r0, r0, r1
	strb	r0, [r2, #0x4]
	b	.L543
.L561:
	.align	2, 0
.L560:
	.word	0x4000208
	.word	gRfuSlotStatusNI
	.word	gRfuLinkStatus
.L541:
	mov	r0, #0x8
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L543	@cond_branch
	mov	r2, r9
	ldr	r0, [r2]
	add	r4, r0, #0
	add	r4, r4, #0x34
	ldr	r0, .L562
	ldr	r2, [r0]
	mov	r1, #0x1
	lsl	r1, r1, r7
	ldrb	r0, [r2, #0x5]
	bic	r0, r0, r1
	strb	r0, [r2, #0x5]
.L543:
	add	r6, r3, #0x1
	cmp	r4, #0
	beq	.L539	@cond_branch
	ldrh	r0, [r4]
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r1, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L546	@cond_branch
	lsl	r1, r3, #0x18
	lsr	r1, r1, #0x18
	add	r0, r7, #0
	add	r2, r4, #0
	bl	rfu_STC_releaseFrame
	mov	r1, #0x0
	add	r2, r4, #0
	add	r2, r2, #0x2c
	mov	r5, #0x1
	mov	r3, #0x0
.L550:
	ldrb	r0, [r2]
	asr	r0, r0, r1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L549	@cond_branch
	strh	r3, [r4, #0x2]
.L549:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x3
	bls	.L550	@cond_branch
.L546:
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r0, sp
	add	r1, r4, #0
	ldr	r2, .L562+0x4
	bl	CpuSet
.L539:
	lsl	r0, r6, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x1
	bls	.L540	@cond_branch
.L536:
	mov	r0, #0x1
	mov	r4, r8
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L554	@cond_branch
	ldr	r1, .L562+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldr	r3, [r0]
	ldrh	r1, [r3]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L555	@cond_branch
	ldr	r0, .L562+0xc
	ldr	r0, [r0]
	ldrb	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L556	@cond_branch
	ldr	r2, .L562
	ldr	r1, [r2]
	ldrb	r0, [r1, #0xf]
	add	r0, r0, #0x3
	ldrb	r4, [r3, #0x4]
	add	r0, r0, r4
	strb	r0, [r1, #0xf]
	b	.L557
.L563:
	.align	2, 0
.L562:
	.word	gRfuLinkStatus
	.word	0x100001a
	.word	gRfuSlotStatusUNI
	.word	gRfuStatic
.L556:
	ldr	r2, .L564
	ldr	r1, [r2]
	add	r1, r1, #0x10
	add	r1, r1, r7
	ldrb	r0, [r1]
	add	r0, r0, #0x2
	ldrb	r4, [r3, #0x4]
	add	r0, r0, r4
	strb	r0, [r1]
.L557:
	ldr	r2, [r2]
	ldrb	r1, [r3, #0x3]
	ldrb	r0, [r2, #0x6]
	bic	r0, r0, r1
	strb	r0, [r2, #0x6]
.L555:
	mov	r0, sp
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r2, .L564+0x4
	add	r1, r3, #0
	bl	CpuSet
.L554:
	mov	r0, #0x2
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L558	@cond_branch
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L564+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r1, r1, #0xc
	ldr	r2, .L564+0xc
	mov	r0, sp
	bl	CpuSet
.L558:
	ldr	r0, .L564+0x10
	mov	r2, sl
	strh	r2, [r0]
	mov	r0, #0x0
.L559:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L565:
	.align	2, 0
.L564:
	.word	gRfuLinkStatus
	.word	0x1000006
	.word	gRfuSlotStatusUNI
	.word	0x1000004
	.word	0x4000208
.Lfe57:
	.size	 rfu_clearSlot,.Lfe57-rfu_clearSlot
	.align	2, 0
	.globl	rfu_setRecvBuffer
	.type	 rfu_setRecvBuffer,function
	.thumb_func
rfu_setRecvBuffer:
	push	{r4, r5, r6, lr}
	add	r5, r2, #0
	add	r6, r3, #0
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r2, r3, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r4, r1, #0
	cmp	r1, #0x3
	bls	.L567	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	b	.L572
.L567:
	mov	r0, #0x20
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L568	@cond_branch
	ldr	r0, .L573
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r5, [r0, #0x68]
	str	r6, [r0, #0x6c]
	b	.L569
.L574:
	.align	2, 0
.L573:
	.word	gRfuSlotStatusNI
.L568:
	mov	r0, #0x10
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L570	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x3
	b	.L572
.L570:
	ldr	r0, .L575
	lsl	r1, r4, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r5, [r0, #0x14]
	str	r6, [r0, #0x18]
.L569:
	mov	r0, #0x0
.L572:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L576:
	.align	2, 0
.L575:
	.word	gRfuSlotStatusUNI
.Lfe58:
	.size	 rfu_setRecvBuffer,.Lfe58-rfu_setRecvBuffer
	.align	2, 0
	.globl	rfu_NI_setSendData
	.type	 rfu_NI_setSendData,function
	.thumb_func
rfu_NI_setSendData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r3, [sp]
	mov	r0, #0x20
	add	r1, r4, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	rfu_STC_setSendData_org
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe59:
	.size	 rfu_NI_setSendData,.Lfe59-rfu_NI_setSendData
	.align	2, 0
	.globl	rfu_UNI_setSendData
	.type	 rfu_UNI_setSendData,function
	.thumb_func
rfu_UNI_setSendData:
	push	{lr}
	add	sp, sp, #-0x4
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L582
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L579	@cond_branch
	add	r0, r2, #0x3
	b	.L581
.L583:
	.align	2, 0
.L582:
	.word	gRfuLinkStatus
.L579:
	add	r0, r2, #0x2
.L581:
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x10
	bl	rfu_STC_setSendData_org
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	sp, sp, #0x4
	pop	{r1}
	bx	r1
.Lfe60:
	.size	 rfu_UNI_setSendData,.Lfe60-rfu_UNI_setSendData
	.align	2, 0
	.globl	rfu_NI_CHILD_setSendGameName
	.type	 rfu_NI_CHILD_setSendGameName,function
	.thumb_func
rfu_NI_CHILD_setSendGameName:
	push	{lr}
	add	sp, sp, #-0x4
	add	r2, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	lsl	r1, r1, r0
	lsr	r1, r1, #0x18
	ldr	r0, .L585
	ldr	r3, [r0]
	add	r3, r3, #0x98
	mov	r0, #0x1a
	str	r0, [sp]
	mov	r0, #0x40
	bl	rfu_STC_setSendData_org
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	sp, sp, #0x4
	pop	{r1}
	bx	r1
.L586:
	.align	2, 0
.L585:
	.word	gRfuLinkStatus
.Lfe61:
	.size	 rfu_NI_CHILD_setSendGameName,.Lfe61-rfu_NI_CHILD_setSendGameName
	.align	2, 0
	.type	 rfu_STC_setSendData_org,function
	.thumb_func
rfu_STC_setSendData_org:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	str	r3, [sp]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	ldr	r0, .L624
	ldr	r2, [r0]
	ldrb	r1, [r2]
	mov	sl, r0
	cmp	r1, #0xff
	bne	.L588	@cond_branch
	ldr	r0, .L624+0x4
	b	.L622
.L625:
	.align	2, 0
.L624:
	.word	gRfuLinkStatus
	.word	0x301
.L588:
	mov	r0, #0xf
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L589	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	b	.L622
.L589:
	ldrb	r0, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	orr	r0, r0, r1
	and	r0, r0, r3
	cmp	r0, r3
	beq	.L590	@cond_branch
	ldr	r0, .L626
	b	.L622
.L627:
	.align	2, 0
.L626:
	.word	0x401
.L590:
	mov	r0, #0x10
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L591	@cond_branch
	ldrb	r0, [r2, #0x6]
	b	.L592
.L591:
	ldrb	r0, [r2, #0x4]
.L592:
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L593	@cond_branch
	ldr	r0, .L628
	b	.L622
.L629:
	.align	2, 0
.L628:
	.word	0x402
.L593:
	mov	r2, #0x0
	mov	r0, #0x1
	and	r0, r0, r3
	ldr	r4, .L630
	cmp	r0, #0
	bne	.L595	@cond_branch
	mov	r1, #0x1
.L596:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bhi	.L595	@cond_branch
	add	r0, r3, #0
	asr	r0, r0, r2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L596	@cond_branch
.L595:
	mov	r0, sl
	ldr	r1, [r0]
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bne	.L600	@cond_branch
	add	r1, r1, #0xf
	b	.L623
.L631:
	.align	2, 0
.L630:
	.word	llsf_struct
.L600:
	cmp	r0, #0
	bne	.L601	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r1, r1, r0
.L623:
	mov	r9, r1
.L601:
	mov	r1, sl
	ldr	r0, [r1]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r4
	ldrb	r4, [r0]
	mov	r0, r9
	ldrb	r0, [r0]
	cmp	r8, r0
	bhi	.L604	@cond_branch
	cmp	r8, r4
	bhi	.L603	@cond_branch
.L604:
	mov	r0, #0xa0
	lsl	r0, r0, #0x3
	b	.L622
.L603:
	ldr	r1, .L632
	ldrh	r0, [r1]
	str	r0, [sp, #0x4]
	mov	r7, #0x0
	strh	r7, [r1]
	mov	r0, #0x20
	and	r0, r0, r6
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L606	@cond_branch
	cmp	r6, #0x40
	bne	.L605	@cond_branch
.L606:
	ldr	r1, .L632+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	ip, r0
	mov	r1, #0x0
	strh	r1, [r0, #0x18]
	mov	r1, ip
	add	r1, r1, #0x2d
	mov	r2, ip
	str	r1, [r2, #0x4]
	mov	r0, #0x7
	str	r0, [r2, #0x14]
	mov	r0, ip
	add	r0, r0, #0x2c
	strb	r3, [r0]
	strb	r3, [r2, #0x1a]
	mov	r2, r8
	sub	r0, r2, r4
	mov	r2, ip
	strh	r0, [r2, #0x2e]
	cmp	r5, #0
	beq	.L607	@cond_branch
	strb	r7, [r1]
	b	.L608
.L633:
	.align	2, 0
.L632:
	.word	0x4000208
	.word	gRfuSlotStatusNI
.L607:
	mov	r0, #0x1
	strb	r0, [r1]
.L608:
	ldr	r0, [sp, #0x28]
	mov	r1, ip
	str	r0, [r1, #0x30]
	ldr	r2, [sp]
	str	r2, [r1, #0x28]
	mov	r1, #0x0
	mov	r0, ip
	strb	r1, [r0, #0x1f]
	add	r0, r0, #0x20
	strb	r1, [r0]
	.code	16
	mov	r4, ip
	add	r4, r4, #0x1b
	mov	r6, #0x0
	mov	r2, ip
	add	r2, r2, #0x21
	mov	r5, #0x1
.L612:
	add	r0, r4, r1
	strb	r6, [r0]
	add	r0, r2, r1
	strb	r5, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bls	.L612	@cond_branch
	mov	r2, #0x0
	mov	r5, #0x1
	ldr	r4, .L634
	mov	r1, #0x0
.L617:
	add	r0, r3, #0
	asr	r0, r0, r2
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L616	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	strh	r1, [r0, #0x2]
.L616:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L617	@cond_branch
	mov	r1, sl
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x4]
	add	r0, r3, #0
	orr	r0, r0, r1
	strb	r0, [r2, #0x4]
	mov	r2, r9
	ldrb	r0, [r2]
	mov	r1, r8
	sub	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L634+0x4
	mov	r2, ip
	strh	r0, [r2]
	b	.L620
.L635:
	.align	2, 0
.L634:
	.word	gRfuSlotStatusNI
	.word	0x8021
.L605:
	mov	r0, #0x10
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L620	@cond_branch
	ldr	r1, .L636
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	strb	r3, [r1, #0x3]
	ldr	r0, [sp]
	str	r0, [r1, #0x8]
	mov	r2, r8
	sub	r0, r2, r4
	strh	r0, [r1, #0x4]
	mov	r2, r9
	ldrb	r0, [r2]
	mov	r2, r8
	sub	r0, r0, r2
	mov	r2, r9
	strb	r0, [r2]
	ldr	r0, .L636+0x4
	strh	r0, [r1]
	mov	r0, sl
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	add	r0, r3, #0
	orr	r0, r0, r1
	strb	r0, [r2, #0x6]
.L620:
	ldr	r0, .L636+0x8
	mov	r1, sp
	ldrh	r1, [r1, #0x4]
	strh	r1, [r0]
	mov	r0, #0x0
.L622:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L637:
	.align	2, 0
.L636:
	.word	gRfuSlotStatusUNI
	.word	0x8024
	.word	0x4000208
.Lfe62:
	.size	 rfu_STC_setSendData_org,.Lfe62-rfu_STC_setSendData_org
	.align	2, 0
	.globl	rfu_changeSendTarget
	.type	 rfu_changeSendTarget,function
	.thumb_func
rfu_changeSendTarget:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r0, #0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	cmp	r7, #0x3
	bls	.L639	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	b	.L664
.L639:
	cmp	r0, #0x20
	bne	.L640	@cond_branch
	ldr	r0, .L667
	mov	ip, r0
	lsl	r0, r7, #0x2
	add	r0, r0, ip
	ldr	r5, [r0]
	ldrh	r2, [r5]
	ldr	r1, .L667+0x4
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, r1
	bne	.L666	@cond_branch
	ldrb	r0, [r5, #0x1a]
	add	r3, r6, #0
	eor	r3, r3, r0
	add	r2, r3, #0
	and	r2, r2, r6
	cmp	r2, #0
	bne	.L665	@cond_branch
	cmp	r3, #0
	bne	.LCB5176
	b	.L653	@long jump
.LCB5176:
	ldr	r1, .L667+0x8
	ldrh	r0, [r1]
	mov	r8, r0
	strh	r2, [r1]
	mov	r2, #0x0
	mvn	r1, r3
	str	r1, [sp]
	lsl	r4, r6, #0x18
	mov	sl, r4
	mov	r0, #0x1
	mov	r9, r0
	mov	r1, #0x0
.L647:
	add	r0, r3, #0
	asr	r0, r0, r2
	mov	r4, r9
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L646	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, ip
	ldr	r0, [r0]
	strh	r1, [r0, #0x2]
.L646:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L647	@cond_branch
	ldr	r0, .L667+0xc
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x4]
	ldr	r2, [sp]
	and	r2, r2, r0
	strb	r2, [r1, #0x4]
	strb	r6, [r5, #0x1a]
	mov	r0, sl
	cmp	r0, #0
	bne	.L650	@cond_branch
	add	r0, r7, #0
	mov	r1, #0x0
	add	r2, r5, #0
	bl	rfu_STC_releaseFrame
	mov	r0, #0x27
	strh	r0, [r5]
.L650:
	ldr	r0, .L667+0x8
	mov	r1, r8
	strh	r1, [r0]
	b	.L653
.L668:
	.align	2, 0
.L667:
	.word	gRfuSlotStatusNI
	.word	0x8020
	.word	0x4000208
	.word	gRfuLinkStatus
.L640:
	cmp	r3, #0x10
	bne	.L654	@cond_branch
	ldr	r3, .L669
	lsl	r1, r7, #0x2
	add	r0, r1, r3
	ldr	r0, [r0]
	ldrh	r2, [r0]
	ldr	r0, .L669+0x4
	add	r5, r3, #0
	cmp	r2, r0
	beq	.L655	@cond_branch
.L666:
	ldr	r0, .L669+0x8
	b	.L664
.L670:
	.align	2, 0
.L669:
	.word	gRfuSlotStatusUNI
	.word	0x8024
	.word	0x403
.L655:
	mov	r3, #0x0
	mov	r2, #0x0
	add	r4, r5, #0
.L659:
	cmp	r2, r7
	beq	.L658	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x3]
	orr	r3, r3, r0
.L658:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L659	@cond_branch
	add	r2, r6, #0
	and	r2, r2, r3
	cmp	r2, #0
	beq	.L662	@cond_branch
.L665:
	ldr	r0, .L671
	b	.L664
.L672:
	.align	2, 0
.L671:
	.word	0x404
.L662:
	ldr	r3, .L673
	ldrh	r0, [r3]
	mov	r8, r0
	strh	r2, [r3]
	ldr	r4, .L673+0x4
	ldr	r2, [r4]
	add	r5, r1, r5
	ldr	r0, [r5]
	ldrb	r1, [r0, #0x3]
	ldrb	r0, [r2, #0x6]
	bic	r0, r0, r1
	strb	r0, [r2, #0x6]
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x6]
	add	r0, r6, #0
	orr	r0, r0, r1
	strb	r0, [r2, #0x6]
	ldr	r0, [r5]
	strb	r6, [r0, #0x3]
	mov	r2, r8
	strh	r2, [r3]
	b	.L653
.L674:
	.align	2, 0
.L673:
	.word	0x4000208
	.word	gRfuLinkStatus
.L654:
	mov	r0, #0xc0
	lsl	r0, r0, #0x3
	b	.L664
.L653:
	mov	r0, #0x0
.L664:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe63:
	.size	 rfu_changeSendTarget,.Lfe63-rfu_changeSendTarget
	.align	2, 0
	.globl	rfu_NI_stopReceivingData
	.type	 rfu_NI_stopReceivingData,function
	.thumb_func
rfu_NI_stopReceivingData:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L676	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	b	.L680
.L676:
	ldr	r1, .L682
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	add	r5, r2, #0
	add	r5, r5, #0x34
	ldr	r1, .L682+0x4
	ldrh	r0, [r1]
	add	r4, r0, #0
	mov	r0, #0x0
	strh	r0, [r1]
	ldrh	r1, [r2, #0x34]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L677	@cond_branch
	ldr	r0, .L682+0x8
	cmp	r1, r0
	bne	.L678	@cond_branch
	mov	r0, #0x48
	b	.L681
.L683:
	.align	2, 0
.L682:
	.word	gRfuSlotStatusNI
	.word	0x4000208
	.word	0x8043
.L678:
	mov	r0, #0x47
.L681:
	strh	r0, [r2, #0x34]
	ldr	r0, .L684
	ldr	r2, [r0]
	mov	r1, #0x1
	lsl	r1, r1, r3
	ldrb	r0, [r2, #0x5]
	bic	r0, r0, r1
	strb	r0, [r2, #0x5]
	add	r0, r3, #0
	mov	r1, #0x1
	add	r2, r5, #0
	bl	rfu_STC_releaseFrame
.L677:
	ldr	r0, .L684+0x4
	strh	r4, [r0]
	mov	r0, #0x0
.L680:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L685:
	.align	2, 0
.L684:
	.word	gRfuLinkStatus
	.word	0x4000208
.Lfe64:
	.size	 rfu_NI_stopReceivingData,.Lfe64-rfu_NI_stopReceivingData
	.align	2, 0
	.globl	rfu_UNI_changeAndReadySendData
	.type	 rfu_UNI_changeAndReadySendData,function
	.thumb_func
rfu_UNI_changeAndReadySendData:
	push	{r4, r5, r6, r7, lr}
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r0, #0
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	cmp	r0, #0x3
	bls	.L687	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	b	.L692
.L687:
	ldr	r1, .L694
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r4, [r0]
	ldrh	r1, [r4]
	ldr	r0, .L694+0x4
	cmp	r1, r0
	beq	.L688	@cond_branch
	ldr	r0, .L694+0x8
	b	.L692
.L695:
	.align	2, 0
.L694:
	.word	gRfuSlotStatusUNI
	.word	0x8024
	.word	0x403
.L688:
	ldr	r0, .L696
	ldr	r1, [r0]
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bne	.L689	@cond_branch
	add	r6, r1, #0
	add	r6, r6, #0xf
	ldrb	r0, [r4, #0x4]
	ldrb	r1, [r1, #0xf]
	b	.L693
.L697:
	.align	2, 0
.L696:
	.word	gRfuLinkStatus
.L689:
	add	r0, r3, #0
	add	r0, r0, #0x10
	add	r6, r1, r0
	add	r1, r1, #0x10
	add	r1, r1, r3
	ldrb	r0, [r4, #0x4]
	ldrb	r1, [r1]
.L693:
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r5
	bcc	.L691	@cond_branch
	ldr	r2, .L698
	ldrh	r1, [r2]
	mov	r0, #0x0
	strh	r0, [r2]
	str	r7, [r4, #0x8]
	sub	r0, r3, r5
	strb	r0, [r6]
	strh	r5, [r4, #0x4]
	mov	r0, #0x1
	strb	r0, [r4, #0x2]
	strh	r1, [r2]
	mov	r0, #0x0
	b	.L692
.L699:
	.align	2, 0
.L698:
	.word	0x4000208
.L691:
	mov	r0, #0xa0
	lsl	r0, r0, #0x3
.L692:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe65:
	.size	 rfu_UNI_changeAndReadySendData,.Lfe65-rfu_UNI_changeAndReadySendData
	.align	2, 0
	.globl	rfu_UNI_readySendData
	.type	 rfu_UNI_readySendData,function
	.thumb_func
rfu_UNI_readySendData:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bhi	.L701	@cond_branch
	ldr	r1, .L703
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	ldrh	r1, [r2]
	ldr	r0, .L703+0x4
	cmp	r1, r0
	bne	.L701	@cond_branch
	mov	r0, #0x1
	strb	r0, [r2, #0x2]
.L701:
	pop	{r0}
	bx	r0
.L704:
	.align	2, 0
.L703:
	.word	gRfuSlotStatusUNI
	.word	0x8024
.Lfe66:
	.size	 rfu_UNI_readySendData,.Lfe66-rfu_UNI_readySendData
	.align	2, 0
	.globl	rfu_UNI_clearRecvNewDataFlag
	.type	 rfu_UNI_clearRecvNewDataFlag,function
	.thumb_func
rfu_UNI_clearRecvNewDataFlag:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bhi	.L706	@cond_branch
	ldr	r1, .L707
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x0
	strb	r0, [r1, #0x12]
.L706:
	pop	{r0}
	bx	r0
.L708:
	.align	2, 0
.L707:
	.word	gRfuSlotStatusUNI
.Lfe67:
	.size	 rfu_UNI_clearRecvNewDataFlag,.Lfe67-rfu_UNI_clearRecvNewDataFlag
	.align	2, 0
	.globl	rfu_REQ_sendData
	.type	 rfu_REQ_sendData,function
	.thumb_func
rfu_REQ_sendData:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L727
	ldr	r2, [r0]
	ldrb	r1, [r2]
	add	r4, r0, #0
	cmp	r1, #0xff
	bne	.LCB5673
	b	.L709	@long jump
.LCB5673:
	cmp	r1, #0x1
	bne	.L711	@cond_branch
	ldrb	r0, [r2, #0x4]
	ldrb	r1, [r2, #0x5]
	add	r3, r0, #0
	orr	r3, r3, r1
	ldrb	r0, [r2, #0x6]
	orr	r3, r3, r0
	cmp	r3, #0
	bne	.L711	@cond_branch
	ldr	r0, .L727+0x4
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x3]
	add	r4, r0, #0
	cmp	r1, #0
	beq	.L712	@cond_branch
	mov	r0, #0x10
	strb	r0, [r2, #0x8]
	ldr	r0, [r4]
	strb	r3, [r0, #0x7]
.L712:
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.L713	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x8]
	b	.L714
.L728:
	.align	2, 0
.L727:
	.word	gRfuLinkStatus
	.word	gRfuStatic
.L713:
	ldrb	r0, [r1, #0x7]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x7]
.L714:
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0
	bne	.L716	@cond_branch
	ldrb	r1, [r1, #0x7]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L719	@cond_branch
.L716:
	ldr	r4, .L729
	ldr	r1, [r4]
	mov	r0, #0x1
	str	r0, [r1, #0x68]
	mov	r0, #0xff
	str	r0, [r1, #0x78]
	ldr	r0, .L729+0x4
	bl	STWI_set_Callback_M
	cmp	r5, #0
	bne	.L717	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x68
	mov	r1, #0x1
	bl	STWI_send_DataTxREQ
	b	.L709
.L730:
	.align	2, 0
.L729:
	.word	gRfuFixed
	.word	rfu_CB_sendData3
.L717:
	ldr	r0, [r4]
	add	r0, r0, #0x68
	mov	r1, #0x1
	bl	STWI_send_DataTxAndChangeREQ
	b	.L709
.L711:
	ldr	r0, [r4]
	ldrb	r0, [r0, #0xe]
	cmp	r0, #0
	bne	.L720	@cond_branch
	bl	rfu_constructSendLLFrame
.L720:
	ldr	r0, [r4]
	ldrb	r0, [r0, #0xe]
	cmp	r0, #0
	beq	.L719	@cond_branch
	ldr	r0, .L731
	bl	STWI_set_Callback_M
	cmp	r5, #0
	beq	.L722	@cond_branch
	ldr	r0, .L731+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x68
	ldr	r1, .L731+0x8
	ldr	r1, [r1]
	ldr	r1, [r1, #0x24]
	add	r1, r1, #0x4
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	STWI_send_DataTxAndChangeREQ
	b	.L709
.L732:
	.align	2, 0
.L731:
	.word	rfu_CB_sendData
	.word	gRfuFixed
	.word	gRfuStatic
.L722:
	ldr	r0, .L733
	ldr	r0, [r0]
	add	r0, r0, #0x68
	ldr	r1, .L733+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x24]
	add	r1, r1, #0x4
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	STWI_send_DataTxREQ
.L719:
	cmp	r5, #0
	beq	.L709	@cond_branch
	ldr	r0, .L733+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L724	@cond_branch
	ldr	r0, .L733+0xc
	ldr	r0, [r0]
	ldr	r1, [r0, #0x1c]
	cmp	r1, #0
	beq	.L709	@cond_branch
	mov	r0, #0x27
	bl	_call_via_r1
	b	.L709
.L734:
	.align	2, 0
.L733:
	.word	gRfuFixed
	.word	gRfuStatic
	.word	gRfuLinkStatus
	.word	gSTWIStatus
.L724:
	ldr	r0, .L735
	bl	STWI_set_Callback_M
	bl	STWI_send_MS_ChangeREQ
.L709:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L736:
	.align	2, 0
.L735:
	.word	rfu_CB_sendData2
.Lfe68:
	.size	 rfu_REQ_sendData,.Lfe68-rfu_REQ_sendData
	.align	2, 0
	.type	 rfu_CB_sendData,function
	.thumb_func
rfu_CB_sendData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	cmp	r7, #0
	bne	.L738	@cond_branch
	mov	r6, #0x0
	ldr	r0, .L747
	mov	r8, r0
.L742:
	ldr	r0, .L747+0x4
	lsl	r2, r6, #0x2
	add	r0, r2, r0
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L743	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1, #0x2]
.L743:
	ldr	r0, .L747+0x8
	add	r0, r2, r0
	ldr	r4, [r0]
	ldrh	r0, [r4]
	cmp	r0, r8
	bne	.L741	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x0
	add	r2, r4, #0
	bl	rfu_STC_releaseFrame
	ldr	r5, .L747+0xc
	ldr	r2, [r5]
	ldrb	r1, [r4, #0x1a]
	ldrb	r0, [r2, #0x4]
	bic	r0, r0, r1
	strb	r0, [r2, #0x4]
	add	r0, r4, #0
	add	r0, r0, #0x2d
	ldrb	r3, [r0]
	cmp	r3, #0x1
	bne	.L745	@cond_branch
	ldr	r1, [r5]
	lsl	r3, r3, r6
	ldrb	r0, [r1, #0x7]
	orr	r3, r3, r0
	strb	r3, [r1, #0x7]
.L745:
	mov	r0, #0x26
	strh	r0, [r4]
.L741:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L742	@cond_branch
.L738:
	ldr	r0, .L747+0xc
	ldr	r1, [r0]
	ldrb	r0, [r1, #0xe]
	mov	r0, #0x0
	strb	r0, [r1, #0xe]
	mov	r0, #0x24
	add	r1, r7, #0
	bl	rfu_STC_REQ_callback
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L748:
	.align	2, 0
.L747:
	.word	0x8020
	.word	gRfuSlotStatusUNI
	.word	gRfuSlotStatusNI
	.word	gRfuLinkStatus
.Lfe69:
	.size	 rfu_CB_sendData,.Lfe69-rfu_CB_sendData
	.align	2, 0
	.type	 rfu_CB_sendData2,function
	.thumb_func
rfu_CB_sendData2:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x24
	bl	rfu_STC_REQ_callback
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 rfu_CB_sendData2,.Lfe70-rfu_CB_sendData2
	.align	2, 0
	.type	 rfu_CB_sendData3,function
	.thumb_func
rfu_CB_sendData3:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0
	beq	.L751	@cond_branch
	mov	r0, #0x24
	bl	rfu_STC_REQ_callback
	b	.L752
.L751:
	cmp	r0, #0xff
	bne	.L752	@cond_branch
	mov	r0, #0xff
	mov	r1, #0x0
	bl	rfu_STC_REQ_callback
.L752:
	pop	{r0}
	bx	r0
.Lfe71:
	.size	 rfu_CB_sendData3,.Lfe71-rfu_CB_sendData3
	.align	2, 0
	.type	 rfu_constructSendLLFrame,function
	.thumb_func
rfu_constructSendLLFrame:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L773
	ldr	r2, [r0]
	ldrb	r0, [r2]
	cmp	r0, #0xff
	bne	.LCB6038
	b	.L755	@long jump
.LCB6038:
	ldrb	r0, [r2, #0x4]
	ldrb	r1, [r2, #0x5]
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x6]
	orr	r0, r0, r1
	cmp	r0, #0
	beq	.L755	@cond_branch
	ldrb	r0, [r2, #0xe]
	mov	r0, #0x0
	strb	r0, [r2, #0xe]
	mov	r8, r0
	ldr	r0, .L773+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x6c
	str	r0, [sp]
	mov	r6, #0x0
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	mov	r9, r0
	ldr	r1, .L773+0x8
	mov	sl, r1
.L759:
	mov	r5, #0x0
	ldr	r0, .L773+0xc
	lsl	r7, r6, #0x2
	add	r4, r7, r0
	ldr	r2, [r4]
	ldrh	r1, [r2]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L760	@cond_branch
	add	r0, r6, #0
	mov	r1, sp
	bl	rfu_STC_NI_constructLLSF
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L760:
	ldr	r2, [r4]
	ldrh	r1, [r2, #0x34]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L761	@cond_branch
	add	r2, r2, #0x34
	add	r0, r6, #0
	mov	r1, sp
	bl	rfu_STC_NI_constructLLSF
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r5, r5, r0
.L761:
	ldr	r0, .L773+0x10
	add	r0, r7, r0
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, sl
	bne	.L762	@cond_branch
	add	r0, r6, #0
	mov	r1, sp
	bl	rfu_STC_UNI_constructLLSF
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r5, r5, r0
.L762:
	cmp	r5, #0
	beq	.L758	@cond_branch
	ldr	r0, .L773
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L764	@cond_branch
	add	r8, r8, r5
	b	.L758
.L774:
	.align	2, 0
.L773:
	.word	gRfuLinkStatus
	.word	gRfuFixed
	.word	0x8024
	.word	gRfuSlotStatusNI
	.word	gRfuSlotStatusUNI
.L764:
	add	r0, r7, r6
	add	r0, r0, #0x8
	lsl	r5, r5, r0
	mov	r2, r8
	orr	r2, r2, r5
	mov	r8, r2
.L758:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L759	@cond_branch
	ldr	r6, .L775
	mov	r0, r8
	cmp	r0, #0
	beq	.L767	@cond_branch
	ldr	r2, [sp]
	mov	r0, #0x3
	and	r0, r0, r2
	ldr	r5, .L775+0x4
	ldr	r1, .L775+0x8
	cmp	r0, #0
	beq	.L769	@cond_branch
	mov	r4, #0x0
	mov	r3, #0x3
.L770:
	strb	r4, [r2]
	add	r0, r2, #0x1
	str	r0, [sp]
	add	r2, r0, #0
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L770	@cond_branch
.L769:
	ldr	r0, [r1]
	mov	r2, r8
	str	r2, [r0, #0x68]
	ldr	r0, [r5]
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L767	@cond_branch
	ldr	r0, [sp]
	sub	r0, r0, #0x6c
	ldr	r1, [r1]
	sub	r0, r0, r1
	mov	r8, r0
.L767:
	ldr	r0, [r6]
	mov	r1, r8
	str	r1, [r0, #0x24]
.L755:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L776:
	.align	2, 0
.L775:
	.word	gRfuStatic
	.word	gRfuLinkStatus
	.word	gRfuFixed
.Lfe72:
	.size	 rfu_constructSendLLFrame,.Lfe72-rfu_constructSendLLFrame
	.align	2, 0
	.type	 rfu_STC_NI_constructLLSF,function
	.thumb_func
rfu_STC_NI_constructLLSF:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	ip, r1
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r2, .L804
	ldr	r0, [r2]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	ldr	r1, .L804+0x4
	add	r0, r0, r1
	mov	r8, r0
	ldrh	r1, [r4]
	ldr	r0, .L804+0x8
	cmp	r1, r0
	bne	.L778	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x20
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r5, r4, #0x4
	add	r1, r5, r1
	ldr	r2, [r4, #0x28]
	ldr	r0, [r4, #0x30]
	add	r2, r2, r0
	ldr	r0, [r1]
	add	r6, r3, #0
	cmp	r0, r2
	bcc	.L778	@cond_branch
	mov	r7, #0x0
.L781:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L779	@cond_branch
	strb	r7, [r6]
.L779:
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r5, r1
	ldr	r2, [r4, #0x28]
	ldr	r0, [r4, #0x30]
	add	r2, r2, r0
	ldr	r0, [r1]
	cmp	r0, r2
	bcs	.L781	@cond_branch
.L778:
	ldrh	r1, [r4]
	mov	r0, #0x40
	and	r0, r0, r1
	mov	r9, r1
	cmp	r0, #0
	beq	.L784	@cond_branch
	mov	r5, #0x0
	b	.L803
.L805:
	.align	2, 0
.L804:
	.word	gRfuLinkStatus
	.word	llsf_struct
	.word	0x8022
.L784:
	ldr	r0, .L806
	cmp	r9, r0
	bne	.L786	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x20
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r1, r4, #0x4
	add	r1, r1, r0
	ldrh	r7, [r4, #0x2e]
	ldr	r5, [r1]
	add	r2, r5, r7
	ldr	r1, [r4, #0x28]
	ldr	r0, [r4, #0x30]
	add	r0, r1, r0
	add	r6, r3, #0
	cmp	r2, r0
	bls	.L787	@cond_branch
	sub	r0, r0, r5
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	b	.L785
.L807:
	.align	2, 0
.L806:
	.word	0x8022
.L787:
	add	r5, r7, #0
	b	.L785
.L786:
	ldrh	r2, [r4, #0x2e]
	ldr	r0, [r4, #0x14]
	cmp	r0, r2
	bcc	.L790	@cond_branch
	add	r5, r2, #0
	b	.L803
.L790:
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L803:
	add	r6, r4, #0
	add	r6, r6, #0x20
.L785:
	mov	r3, #0xf
	mov	r0, r9
	and	r3, r3, r0
	mov	r1, r8
	ldrb	r1, [r1, #0x3]
	lsl	r3, r3, r1
	ldrb	r0, [r4, #0x1f]
	mov	r2, r8
	ldrb	r2, [r2, #0x4]
	lsl	r0, r0, r2
	orr	r3, r3, r0
	ldrb	r1, [r6]
	add	r0, r1, #0
	mov	r7, r8
	ldrb	r7, [r7, #0x5]
	lsl	r0, r0, r7
	orr	r3, r3, r0
	add	r0, r4, #0
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, r8
	ldrb	r1, [r1, #0x6]
	lsl	r0, r0, r1
	orr	r3, r3, r0
	orr	r3, r3, r5
	str	r3, [sp]
	ldr	r2, .L808
	ldr	r0, [r2]
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L792	@cond_branch
	ldrb	r0, [r4, #0x1a]
	lsl	r0, r0, #0x12
	orr	r3, r3, r0
	str	r3, [sp]
.L792:
	mov	r2, sp
	mov	r3, #0x0
	mov	r7, r8
	ldrb	r7, [r7]
	cmp	r3, r7
	bcs	.L794	@cond_branch
.L796:
	mov	r0, ip
	ldr	r1, [r0]
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	mov	r7, ip
	str	r1, [r7]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r0, r8
	ldrb	r0, [r0]
	cmp	r3, r0
	bcc	.L796	@cond_branch
.L794:
	cmp	r5, #0
	beq	.L798	@cond_branch
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r0, r4, #0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [sp, #0x4]
	ldr	r0, .L808+0x4
	ldr	r1, [r0]
	add	r0, sp, #0x4
	ldr	r3, [r1, #0x4]
	mov	r1, ip
	add	r2, r5, #0
	bl	_call_via_r3
.L798:
	ldrh	r1, [r4]
	ldr	r0, .L808+0x8
	cmp	r1, r0
	bne	.L799	@cond_branch
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L799	@cond_branch
	mov	r0, #0x0
	strb	r0, [r6]
.L799:
	ldr	r0, .L808
	ldr	r2, [r0]
	ldrb	r1, [r2]
	cmp	r1, #0x1
	bne	.L801	@cond_branch
	ldrb	r0, [r2, #0xe]
	strb	r1, [r2, #0xe]
	b	.L802
.L809:
	.align	2, 0
.L808:
	.word	gRfuLinkStatus
	.word	gRfuFixed
	.word	0x8022
.L801:
	mov	r0, #0x1
	mov	r1, sl
	lsl	r0, r0, r1
	ldrb	r1, [r2, #0xe]
	orr	r0, r0, r1
	ldrb	r1, [r2, #0xe]
	strb	r0, [r2, #0xe]
.L802:
	mov	r2, r8
	ldrb	r0, [r2]
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe73:
	.size	 rfu_STC_NI_constructLLSF,.Lfe73-rfu_STC_NI_constructLLSF
	.align	2, 0
	.type	 rfu_STC_UNI_constructLLSF,function
	.thumb_func
rfu_STC_UNI_constructLLSF:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L823
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r4, [r0]
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0
	beq	.L812	@cond_branch
	ldrb	r0, [r4, #0x3]
	cmp	r0, #0
	bne	.L811	@cond_branch
.L812:
	mov	r0, #0x0
	b	.L821
.L824:
	.align	2, 0
.L823:
	.word	gRfuSlotStatusUNI
.L811:
	ldr	r0, .L825
	ldr	r2, [r0]
	ldrb	r0, [r2]
	lsl	r0, r0, #0x4
	ldr	r1, .L825+0x4
	add	r5, r0, r1
	ldrh	r0, [r4]
	mov	r1, #0xf
	and	r1, r1, r0
	ldrb	r0, [r5, #0x3]
	lsl	r1, r1, r0
	ldrh	r0, [r4, #0x4]
	orr	r1, r1, r0
	str	r1, [sp]
	ldrb	r0, [r2]
	cmp	r0, #0x1
	bne	.L813	@cond_branch
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x12
	orr	r1, r1, r0
	str	r1, [sp]
.L813:
	mov	r2, sp
	mov	r3, #0x0
	ldr	r1, .L825+0x8
	mov	ip, r1
	add	r7, sp, #0x4
	ldrb	r0, [r5]
	cmp	r3, r0
	bcs	.L815	@cond_branch
.L817:
	ldr	r1, [r6]
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	str	r1, [r6]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrb	r1, [r5]
	cmp	r3, r1
	bcc	.L817	@cond_branch
.L815:
	ldr	r0, [r4, #0x8]
	str	r0, [sp, #0x4]
	mov	r2, ip
	ldr	r0, [r2]
	ldrh	r2, [r4, #0x4]
	ldr	r3, [r0, #0x4]
	add	r0, r7, #0
	add	r1, r6, #0
	bl	_call_via_r3
	ldr	r0, .L825
	ldr	r2, [r0]
	ldrb	r0, [r2]
	cmp	r0, #0x1
	bne	.L819	@cond_branch
	ldrb	r0, [r2, #0xe]
	mov	r0, #0x10
	b	.L822
.L826:
	.align	2, 0
.L825:
	.word	gRfuLinkStatus
	.word	llsf_struct
	.word	gRfuFixed
.L819:
	mov	r0, #0x10
	mov	r1, r8
	lsl	r0, r0, r1
	ldrb	r1, [r2, #0xe]
	orr	r0, r0, r1
	ldrb	r1, [r2, #0xe]
.L822:
	strb	r0, [r2, #0xe]
	ldrh	r0, [r4, #0x4]
	ldrb	r5, [r5]
	add	r0, r0, r5
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L821:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe74:
	.size	 rfu_STC_UNI_constructLLSF,.Lfe74-rfu_STC_UNI_constructLLSF
	.align	2, 0
	.globl	rfu_REQ_recvData
	.type	 rfu_REQ_recvData,function
	.thumb_func
rfu_REQ_recvData:
	push	{r4, lr}
	ldr	r0, .L829
	ldr	r4, [r0]
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L828	@cond_branch
	ldr	r2, .L829+0x4
	ldr	r3, [r2]
	ldrb	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x5]
	orr	r0, r0, r1
	ldrb	r1, [r4, #0x6]
	orr	r0, r0, r1
	mov	r1, #0x0
	strb	r0, [r3, #0x3]
	ldr	r0, [r2]
	strb	r1, [r0, #0x4]
	ldr	r0, .L829+0x8
	bl	STWI_set_Callback_M
	bl	STWI_send_DataRxREQ
.L828:
	pop	{r4}
	pop	{r0}
	bx	r0
.L830:
	.align	2, 0
.L829:
	.word	gRfuLinkStatus
	.word	gRfuStatic
	.word	rfu_CB_recvData
.Lfe75:
	.size	 rfu_REQ_recvData,.Lfe75-rfu_REQ_recvData
	.align	2, 0
	.type	 rfu_CB_recvData,function
	.thumb_func
rfu_CB_recvData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	cmp	r7, #0
	bne	.L832	@cond_branch
	ldr	r0, .L843
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L832	@cond_branch
	ldr	r0, .L843+0x4
	ldr	r0, [r0]
	strb	r7, [r0, #0x1]
	ldr	r0, .L843+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L833	@cond_branch
	bl	rfu_STC_PARENT_analyzeRecvPacket
	b	.L834
.L844:
	.align	2, 0
.L843:
	.word	gRfuFixed
	.word	gRfuStatic
	.word	gRfuLinkStatus
.L833:
	bl	rfu_STC_CHILD_analyzeRecvPacket
.L834:
	mov	r6, #0x0
	ldr	r0, .L845
	mov	r8, r0
	ldr	r3, .L845+0x4
.L838:
	ldr	r0, .L845+0x8
	lsl	r1, r6, #0x2
	add	r1, r1, r0
	ldr	r4, [r1]
	ldrh	r0, [r4, #0x34]
	cmp	r0, r8
	bne	.L837	@cond_branch
	ldr	r0, .L845+0xc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	asr	r0, r0, r6
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L837	@cond_branch
	add	r5, r4, #0
	add	r5, r5, #0x34
	add	r0, r4, #0
	add	r0, r0, #0x61
	ldrb	r2, [r0]
	cmp	r2, #0x1
	bne	.L840	@cond_branch
	ldr	r1, [r3]
	lsl	r2, r2, r6
	ldrb	r0, [r1, #0x7]
	orr	r2, r2, r0
	strb	r2, [r1, #0x7]
.L840:
	add	r0, r6, #0
	mov	r1, #0x1
	add	r2, r5, #0
	str	r3, [sp]
	bl	rfu_STC_releaseFrame
	ldr	r3, [sp]
	ldr	r2, [r3]
	ldrb	r1, [r5, #0x1a]
	ldrb	r0, [r2, #0x5]
	bic	r0, r0, r1
	strb	r0, [r2, #0x5]
	mov	r0, #0x46
	strh	r0, [r4, #0x34]
.L837:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L838	@cond_branch
	ldr	r0, .L845+0xc
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L832	@cond_branch
	add	r7, r0, #0
	mov	r1, #0xe0
	lsl	r1, r1, #0x3
	add	r0, r1, #0
	orr	r7, r7, r0
.L832:
	mov	r0, r9
	add	r1, r7, #0
	bl	rfu_STC_REQ_callback
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L846:
	.align	2, 0
.L845:
	.word	0x8043
	.word	gRfuLinkStatus
	.word	gRfuSlotStatusNI
	.word	gRfuStatic
.Lfe76:
	.size	 rfu_CB_recvData,.Lfe76-rfu_CB_recvData
	.align	2, 0
	.type	 rfu_STC_PARENT_analyzeRecvPacket,function
	.thumb_func
rfu_STC_PARENT_analyzeRecvPacket:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L866
	ldr	r0, [r1]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsr	r3, r0, #0x8
	mov	r5, #0x0
	mov	ip, r1
	mov	r7, #0x1f
	ldr	r4, .L866+0x4
	mov	r6, #0x1
.L851:
	mov	r0, sp
	add	r1, r0, r5
	add	r0, r3, #0
	and	r0, r0, r7
	strb	r0, [r1]
	lsr	r3, r3, #0x5
	cmp	r0, #0
	bne	.L850	@cond_branch
	ldr	r0, [r4]
	add	r1, r6, #0
	lsl	r1, r1, r5
	ldrb	r2, [r0, #0x1]
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
.L850:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L851	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r0, #0xdc
	ldr	r0, [r0]
	add	r6, r0, #0
	add	r6, r6, #0x8
	mov	r5, #0x0
.L857:
	mov	r0, sp
	add	r1, r0, r5
	ldrb	r0, [r1]
	add	r7, r5, #0x1
	cmp	r0, #0
	beq	.L856	@cond_branch
	add	r4, r1, #0
.L859:
	ldrb	r2, [r4]
	add	r0, r5, #0
	add	r1, r6, #0
	bl	rfu_STC_analyzeLLSF
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r6, r0
	ldrb	r1, [r4]
	sub	r1, r1, r0
	strb	r1, [r4]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L856	@cond_branch
	lsl	r0, r1, #0x18
	cmp	r0, #0
	bne	.L859	@cond_branch
.L856:
	lsl	r0, r7, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L857	@cond_branch
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L867:
	.align	2, 0
.L866:
	.word	gRfuFixed
	.word	gRfuStatic
.Lfe77:
	.size	 rfu_STC_PARENT_analyzeRecvPacket,.Lfe77-rfu_STC_PARENT_analyzeRecvPacket
	.align	2, 0
	.type	 rfu_STC_CHILD_analyzeRecvPacket,function
	.thumb_func
rfu_STC_CHILD_analyzeRecvPacket:
	push	{r4, r5, r6, lr}
	ldr	r0, .L876
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x4]
	mov	r4, #0x7f
	and	r4, r4, r0
	add	r5, r1, #0
	add	r5, r5, #0x8
	cmp	r4, #0
	bne	.L869	@cond_branch
	ldr	r0, .L876+0x4
	ldr	r1, [r0]
	mov	r0, #0xf
	strb	r0, [r1, #0x1]
.L869:
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	add	r6, r0, #0
.L870:
	cmp	r4, #0
	beq	.L871	@cond_branch
	mov	r0, #0x0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	rfu_STC_analyzeLLSF
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r5, r5, r0
	sub	r0, r4, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L870	@cond_branch
.L871:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L877:
	.align	2, 0
.L876:
	.word	gRfuFixed
	.word	gRfuStatic
.Lfe78:
	.size	 rfu_STC_CHILD_analyzeRecvPacket,.Lfe78-rfu_STC_CHILD_analyzeRecvPacket
	.align	2, 0
	.type	 rfu_STC_analyzeLLSF,function
	.thumb_func
rfu_STC_analyzeLLSF:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	lsl	r2, r2, #0x10
	lsr	r3, r2, #0x10
	ldr	r2, .L914
	ldr	r0, [r2]
	ldrb	r0, [r0]
	mvn	r0, r0
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x4
	ldr	r1, .L914+0x4
	add	r6, r0, r1
	ldrb	r0, [r6]
	cmp	r3, r0
	bcs	.L879	@cond_branch
	add	r0, r3, #0
	b	.L912
.L915:
	.align	2, 0
.L914:
	.word	gRfuLinkStatus
	.word	llsf_struct
.L879:
	mov	r5, #0x0
	mov	r4, #0x0
	ldrb	r3, [r6, #0x1]
	ldrb	r1, [r6, #0x7]
	mov	r8, r1
	ldr	r2, [sp]
	mov	r9, r2
	cmp	r4, r0
	bcs	.L881	@cond_branch
	add	r2, r0, #0
.L883:
	ldrb	r0, [r7]
	lsl	r1, r4, #0x3
	lsl	r0, r0, r1
	orr	r5, r5, r0
	add	r7, r7, #0x1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r2
	bcc	.L883	@cond_branch
.L881:
	add	r0, r5, #0
	lsr	r0, r0, r3
	mov	r3, r8
	and	r0, r0, r3
	ldr	r1, .L916
	mov	sl, r1
	mov	r3, sl
	mov	r2, r9
	and	r3, r3, r2
	orr	r3, r3, r0
	str	r3, [sp]
	add	r0, r5, #0
	ldrb	r1, [r6, #0x2]
	lsr	r0, r0, r1
	ldrb	r1, [r6, #0x8]
	and	r0, r0, r1
	lsl	r0, r0, #0x8
	ldr	r4, .L916+0x4
	add	r2, r4, #0
	and	r2, r2, r3
	orr	r2, r2, r0
	str	r2, [sp]
	add	r0, r5, #0
	ldrb	r3, [r6, #0x3]
	lsr	r0, r0, r3
	ldrb	r1, [r6, #0x9]
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	ldr	r3, .L916+0x8
	and	r3, r3, r2
	orr	r3, r3, r0
	str	r3, [sp]
	add	r0, r5, #0
	ldrb	r1, [r6, #0x4]
	lsr	r0, r0, r1
	ldrb	r1, [r6, #0xa]
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	ldr	r2, .L916+0xc
	mov	r8, r2
	mov	r1, r8
	and	r1, r1, r3
	orr	r1, r1, r0
	mov	r8, r1
	str	r1, [sp]
	add	r1, r5, #0
	ldrb	r2, [r6, #0x5]
	lsr	r1, r1, r2
	ldrb	r0, [r6, #0xb]
	and	r1, r1, r0
	mov	r9, sp
	ldr	r2, [sp, #0x4]
	mov	r3, sl
	and	r2, r2, r3
	orr	r2, r2, r1
	str	r2, [sp, #0x4]
	add	r0, r5, #0
	ldrb	r1, [r6, #0x6]
	lsr	r0, r0, r1
	ldrb	r1, [r6, #0xc]
	and	r0, r0, r1
	lsl	r0, r0, #0x8
	and	r4, r4, r2
	orr	r4, r4, r0
	str	r4, [sp, #0x4]
	ldrh	r0, [r6, #0xe]
	and	r5, r5, r0
	lsl	r1, r5, #0x10
	ldr	r0, .L916+0x10
	and	r0, r0, r4
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	lsr	r0, r0, #0x10
	ldrb	r6, [r6]
	add	r0, r0, r6
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB7273
	b	.L885	@long jump
.LCB7273:
	ldr	r2, .L916+0x14
	ldr	r3, [r2]
	ldrb	r2, [r3]
	cmp	r2, #0x1
	bne	.L886	@cond_branch
	ldrb	r0, [r3, #0x2]
	mov	r5, ip
	asr	r0, r0, r5
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB7289
	b	.L885	@long jump
.LCB7289:
	mov	r1, r8
	lsr	r0, r1, #0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L888	@cond_branch
	mov	r0, ip
	mov	r1, sp
	add	r2, r7, #0
	bl	rfu_STC_UNI_receive
	b	.L885
.L917:
	.align	2, 0
.L916:
	.word	-0x100
	.word	-0xff01
	.word	-0xff0001
	.word	0xffffff
	.word	0xffff
	.word	gRfuLinkStatus
.L888:
	mov	r5, r9
	ldrb	r0, [r5, #0x3]
	cmp	r0, #0
	bne	.L890	@cond_branch
	mov	r0, ip
	mov	r1, sp
	add	r2, r7, #0
	bl	rfu_STC_NI_receive_Receiver
	b	.L885
.L890:
	mov	r4, #0x0
	ldr	r1, .L918
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1a]
	mov	r5, ip
	asr	r0, r0, r5
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L894	@cond_branch
	ldrb	r0, [r3, #0x4]
	b	.L913
.L919:
	.align	2, 0
.L918:
	.word	gRfuSlotStatusNI
.L894:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bhi	.L885	@cond_branch
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1a]
	mov	r2, ip
	asr	r0, r0, r2
	mov	r2, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L894	@cond_branch
	ldr	r3, .L920
	ldr	r0, [r3]
	ldrb	r0, [r0, #0x4]
	mov	r5, ip
.L913:
	asr	r0, r0, r5
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L894	@cond_branch
	cmp	r4, #0x3
	bhi	.L885	@cond_branch
	add	r0, r4, #0
	mov	r1, ip
	mov	r2, sp
	add	r3, r7, #0
	bl	rfu_STC_NI_receive_Sender
	b	.L885
.L921:
	.align	2, 0
.L920:
	.word	gRfuLinkStatus
.L886:
	ldrb	r1, [r3, #0x2]
	mov	r2, r9
	ldrb	r0, [r2, #0x1]
	add	r5, r1, #0
	and	r5, r5, r0
	cmp	r5, #0
	beq	.L885	@cond_branch
	mov	r4, #0x0
	mov	r6, #0x1
.L904:
	add	r0, r5, #0
	asr	r0, r0, r4
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L903	@cond_branch
	mov	r1, sp
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0x4
	bne	.L906	@cond_branch
	add	r0, r4, #0
	add	r2, r7, #0
	bl	rfu_STC_UNI_receive
	b	.L903
.L906:
	ldrb	r0, [r1, #0x3]
	cmp	r0, #0
	bne	.L908	@cond_branch
	add	r0, r4, #0
	mov	r1, sp
	add	r2, r7, #0
	bl	rfu_STC_NI_receive_Receiver
	b	.L903
.L908:
	ldr	r0, .L922
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	asr	r0, r0, r4
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L903	@cond_branch
	add	r0, r4, #0
	add	r1, r4, #0
	mov	r2, sp
	add	r3, r7, #0
	bl	rfu_STC_NI_receive_Sender
.L903:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L904	@cond_branch
.L885:
	mov	r0, sl
.L912:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L923:
	.align	2, 0
.L922:
	.word	gRfuLinkStatus
.Lfe79:
	.size	 rfu_STC_analyzeLLSF,.Lfe79-rfu_STC_analyzeLLSF
	.align	2, 0
	.type	 rfu_STC_UNI_receive,function
	.thumb_func
rfu_STC_UNI_receive:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	add	r6, r1, #0
	str	r2, [sp]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r2, .L933
	lsl	r1, r7, #0x2
	add	r1, r1, r2
	ldr	r3, [r1]
	add	r5, r3, #0
	add	r5, r5, #0xc
	mov	r4, #0x0
	mov	r0, #0x0
	strh	r0, [r5, #0x2]
	ldr	r0, [r1]
	ldr	r0, [r0, #0x18]
	add	r1, r2, #0
	ldrh	r2, [r6, #0x6]
	cmp	r0, r2
	bcs	.L925	@cond_branch
	mov	r0, #0x49
	strh	r0, [r3, #0xc]
	ldr	r0, .L933+0x4
	strh	r0, [r5, #0x2]
	b	.L929
.L934:
	.align	2, 0
.L933:
	.word	gRfuSlotStatusUNI
	.word	0x701
.L925:
	ldrb	r0, [r5, #0x7]
	cmp	r0, #0
	beq	.L927	@cond_branch
	ldrb	r0, [r5, #0x6]
	cmp	r0, #0
	beq	.L930	@cond_branch
	ldr	r0, .L935
	strh	r0, [r5, #0x2]
	b	.L929
.L936:
	.align	2, 0
.L935:
	.word	0x709
.L927:
	ldrb	r0, [r5, #0x6]
	cmp	r0, #0
	beq	.L930	@cond_branch
	mov	r0, #0xe1
	lsl	r0, r0, #0x3
	strh	r0, [r5, #0x2]
.L930:
	mov	r4, #0x0
	ldr	r0, .L937
	strh	r0, [r5]
	ldrh	r0, [r6, #0x6]
	strh	r0, [r5, #0x4]
	ldrh	r2, [r6, #0x6]
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	str	r0, [sp, #0x4]
	ldr	r0, .L937+0x4
	ldr	r0, [r0]
	add	r1, sp, #0x4
	ldr	r3, [r0, #0x4]
	mov	r0, sp
	bl	_call_via_r3
	mov	r0, #0x1
	strb	r0, [r5, #0x6]
	strh	r4, [r5]
.L929:
	ldrh	r0, [r5, #0x2]
	cmp	r0, #0
	beq	.L932	@cond_branch
	ldr	r0, .L937+0x8
	ldr	r2, [r0]
	mov	r0, #0x10
	lsl	r0, r0, r7
	ldrb	r1, [r2, #0x4]
	orr	r0, r0, r1
	strb	r0, [r2, #0x4]
.L932:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L938:
	.align	2, 0
.L937:
	.word	0x8042
	.word	gRfuFixed
	.word	gRfuStatic
.Lfe80:
	.size	 rfu_STC_UNI_receive,.Lfe80-rfu_STC_UNI_receive
	.align	2, 0
	.type	 rfu_STC_NI_receive_Sender,function
	.thumb_func
rfu_STC_NI_receive_Sender:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r6, r2, #0
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	ldr	r1, .L965
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	ip, r0
	ldrh	r0, [r0]
	mov	r9, r0
	mov	r0, ip
	add	r0, r0, #0x21
	ldrb	r2, [r6, #0x4]
	add	r0, r0, r2
	ldrb	r0, [r0]
	str	r0, [sp]
	ldrb	r2, [r6, #0x2]
	cmp	r2, #0x2
	bne	.L942	@cond_branch
	ldr	r0, .L965+0x4
	cmp	r9, r0
	beq	.L941	@cond_branch
.L942:
	cmp	r2, #0x1
	bne	.L943	@cond_branch
	ldr	r0, .L965+0x8
	cmp	r9, r0
	beq	.L941	@cond_branch
.L943:
	mov	r3, #0x1b
	add	r3, r3, ip
	mov	r8, r3
	cmp	r2, #0x3
	bne	.L940	@cond_branch
	ldr	r0, .L965+0xc
	cmp	r9, r0
	bne	.L940	@cond_branch
.L941:
	ldrb	r1, [r6, #0x4]
	mov	r0, ip
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r7, #0x1b
	add	r7, r7, ip
	mov	r8, r7
	ldrb	r2, [r6, #0x5]
	cmp	r0, r2
	bne	.L940	@cond_branch
	add	r0, r7, r1
	mov	r1, #0x1
	mov	r3, sl
	lsl	r1, r1, r3
	ldrb	r2, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
.L940:
	ldrb	r2, [r6, #0x4]
	mov	r7, r8
	add	r0, r7, r2
	ldrb	r0, [r0]
	mov	r3, ip
	ldrb	r1, [r3, #0x1a]
	and	r0, r0, r1
	cmp	r0, r1
	bne	.L945	@cond_branch
	add	r3, r3, #0x21
	add	r2, r3, r2
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	mov	r1, #0x0
	strb	r0, [r2]
	ldrb	r0, [r6, #0x4]
	add	r0, r0, r8
	strb	r1, [r0]
	mov	r7, ip
	ldrh	r1, [r7]
	ldr	r2, .L965+0x10
	add	r0, r1, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r5, r3, #0
	cmp	r0, #0x1
	bhi	.L946	@cond_branch
	ldr	r0, .L965+0x8
	cmp	r1, r0
	bne	.L947	@cond_branch
	ldrb	r1, [r6, #0x4]
	lsl	r1, r1, #0x2
	sub	r3, r3, #0x1d
	add	r1, r3, r1
	ldrh	r2, [r7, #0x2e]
	ldr	r0, [r1]
	add	r0, r0, r2
	str	r0, [r1]
	b	.L948
.L966:
	.align	2, 0
.L965:
	.word	gRfuSlotStatusNI
	.word	0x8022
	.word	0x8021
	.word	0x8023
	.word	0x7fdf
.L947:
	ldrb	r2, [r6, #0x4]
	lsl	r2, r2, #0x2
	mov	r3, ip
	add	r3, r3, #0x4
	add	r2, r3, r2
	mov	r7, ip
	ldrh	r1, [r7, #0x2e]
	lsl	r1, r1, #0x2
	ldr	r0, [r2]
	add	r0, r0, r1
	str	r0, [r2]
.L948:
	mov	r0, ip
	ldrh	r1, [r0, #0x2e]
	ldr	r0, [r0, #0x14]
	sub	r0, r0, r1
	mov	r1, ip
	str	r0, [r1, #0x14]
	cmp	r0, #0
	beq	.L951	@cond_branch
	cmp	r0, #0
	bge	.L945	@cond_branch
.L951:
	mov	r0, ip
	add	r0, r0, #0x20
	mov	r2, #0x0
	strb	r2, [r0]
	mov	r7, ip
	ldrh	r1, [r7]
	ldr	r0, .L967
	cmp	r1, r0
	bne	.L952	@cond_branch
	mov	r4, #0x0
.L956:
	add	r0, r5, r4
	mov	r1, #0x1
	strb	r1, [r0]
	lsl	r1, r4, #0x2
	add	r1, r3, r1
	mov	r2, ip
	ldrh	r0, [r2, #0x2e]
	mov	r2, r0
	mul	r2, r2, r4
	mov	r7, ip
	ldr	r0, [r7, #0x28]
	add	r0, r0, r2
	str	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L956	@cond_branch
	ldr	r0, [r7, #0x30]
	str	r0, [r7, #0x14]
	ldr	r0, .L967+0x4
	strh	r0, [r7]
	b	.L945
.L968:
	.align	2, 0
.L967:
	.word	0x8021
	.word	0x8022
.L952:
	strb	r2, [r5]
	mov	r0, ip
	str	r2, [r0, #0x14]
	ldr	r0, .L969
	mov	r1, ip
	strh	r0, [r1]
	b	.L945
.L970:
	.align	2, 0
.L969:
	.word	0x8023
.L946:
	lsl	r1, r1, #0x10
	ldr	r0, .L971
	cmp	r1, r0
	bne	.L945	@cond_branch
	ldr	r0, .L971+0x4
	mov	r2, ip
	strh	r0, [r2]
.L945:
	mov	r3, ip
	ldrh	r0, [r3]
	cmp	r0, r9
	bne	.L964	@cond_branch
	ldrb	r2, [r6, #0x4]
	mov	r0, ip
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	ldr	r7, [sp]
	cmp	r0, r7
	bne	.L964	@cond_branch
	mov	r1, r8
	add	r0, r1, r2
	ldrb	r0, [r0]
	mov	r2, sl
	asr	r0, r0, r2
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L963	@cond_branch
.L964:
	ldr	r4, .L971+0x8
	ldrh	r2, [r4]
	mov	r0, #0x0
	strh	r0, [r4]
	ldr	r0, .L971+0xc
	ldr	r3, [r0]
	mov	r0, #0x10
	mov	r7, sl
	lsl	r0, r0, r7
	ldrb	r1, [r3, #0x2]
	orr	r0, r0, r1
	mov	r1, #0x0
	strb	r0, [r3, #0x2]
	lsl	r0, r7, #0x2
	ldr	r3, .L971+0x10
	add	r0, r0, r3
	ldr	r0, [r0]
	strh	r1, [r0, #0x2]
	strh	r2, [r4]
.L963:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L972:
	.align	2, 0
.L971:
	.word	-0x7fdd0000
	.word	0x8020
	.word	0x4000208
	.word	gRfuStatic
	.word	gRfuSlotStatusNI
.Lfe81:
	.size	 rfu_STC_NI_receive_Sender,.Lfe81-rfu_STC_NI_receive_Sender
	.align	2, 0
	.type	 rfu_STC_NI_receive_Receiver,function
	.thumb_func
rfu_STC_NI_receive_Receiver:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r6, r1, #0
	str	r2, [sp]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r7, #0x0
	ldr	r1, .L992
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r4, [r0]
	add	r5, r4, #0
	add	r5, r5, #0x34
	ldrh	r0, [r4, #0x34]
	mov	r9, r0
	ldrb	r0, [r6, #0x4]
	add	r3, r4, #0
	add	r3, r3, #0x55
	add	r0, r3, r0
	ldrb	r0, [r0]
	mov	sl, r0
	ldrb	r0, [r6, #0x2]
	cmp	r0, #0x3
	bne	.L974	@cond_branch
	ldr	r0, .L992+0x4
	ldr	r2, [r0]
	mov	r0, #0x1
	mov	r1, r8
	lsl	r0, r0, r1
	ldrb	r1, [r2, #0x1]
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldrh	r1, [r4, #0x34]
	ldr	r0, .L992+0x8
	cmp	r1, r0
	bne	.L976	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x54
	strb	r7, [r0]
	strb	r7, [r3]
	ldr	r0, .L992+0xc
	strh	r0, [r4, #0x34]
	b	.L976
.L993:
	.align	2, 0
.L992:
	.word	gRfuSlotStatusNI
	.word	gRfuStatic
	.word	0x8042
	.word	0x8043
.L974:
	cmp	r0, #0x2
	bne	.L977	@cond_branch
	ldr	r0, .L994
	cmp	r9, r0
	bne	.L978	@cond_branch
	ldr	r0, [r5, #0x14]
	cmp	r0, #0
	bne	.L978	@cond_branch
	mov	r0, r8
	add	r1, r5, #0
	bl	rfu_STC_NI_initSlot_asRecvDataEntity
.L978:
	ldrh	r1, [r5]
	ldr	r0, .L994+0x4
	cmp	r1, r0
	bne	.L976	@cond_branch
	b	.L991
.L995:
	.align	2, 0
.L994:
	.word	0x8041
	.word	0x8042
.L977:
	cmp	r0, #0x1
	bne	.L976	@cond_branch
	ldr	r7, .L996
	cmp	r9, r7
	beq	.L991	@cond_branch
	mov	r0, r8
	add	r1, r5, #0
	bl	rfu_STC_NI_initSlot_asRecvControllData
	ldrh	r0, [r4, #0x34]
	cmp	r0, r7
	bne	.L973	@cond_branch
	mov	r7, #0x1
.L976:
	cmp	r7, #0
	beq	.L985	@cond_branch
.L991:
	ldrb	r2, [r6, #0x5]
	ldrb	r3, [r6, #0x4]
	add	r4, r5, #0
	add	r4, r4, #0x21
	add	r0, r4, r3
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r2, r0
	bne	.L985	@cond_branch
	ldr	r0, .L996+0x4
	ldr	r0, [r0]
	lsl	r1, r3, #0x2
	add	r1, r1, #0x4
	add	r1, r5, r1
	ldrh	r2, [r6, #0x6]
	ldr	r3, [r0, #0x4]
	mov	r0, sp
	bl	_call_via_r3
	ldrh	r1, [r5]
	ldr	r0, .L996+0x8
	cmp	r1, r0
	bne	.L987	@cond_branch
	ldrb	r0, [r6, #0x4]
	lsl	r0, r0, #0x2
	add	r2, r5, #0x4
	add	r2, r2, r0
	ldrh	r0, [r5, #0x2e]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	ldr	r0, [r2]
	add	r0, r0, r1
	str	r0, [r2]
.L987:
	ldrh	r1, [r6, #0x6]
	ldr	r0, [r5, #0x14]
	sub	r0, r0, r1
	str	r0, [r5, #0x14]
	ldrb	r0, [r6, #0x4]
	add	r0, r4, r0
	ldrb	r1, [r6, #0x5]
	strb	r1, [r0]
.L985:
	ldrh	r0, [r5, #0x18]
	cmp	r0, #0
	bne	.L973	@cond_branch
	ldrb	r0, [r6, #0x4]
	add	r1, r5, #0
	add	r1, r1, #0x20
	strb	r0, [r1]
	ldrh	r0, [r5]
	cmp	r0, r9
	bne	.L990	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x21
	ldrb	r2, [r6, #0x4]
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, sl
	bne	.L990	@cond_branch
	ldrb	r6, [r6, #0x5]
	cmp	r0, r6
	bne	.L973	@cond_branch
.L990:
	ldr	r3, .L996+0xc
	ldrh	r2, [r3]
	mov	r0, #0x0
	strh	r0, [r3]
	ldr	r0, .L996+0x10
	ldr	r4, [r0]
	mov	r0, #0x1
	mov	r1, r8
	lsl	r0, r0, r1
	ldrb	r1, [r4, #0x2]
	orr	r0, r0, r1
	mov	r1, #0x0
	strb	r0, [r4, #0x2]
	strh	r1, [r5, #0x2]
	strh	r2, [r3]
.L973:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L997:
	.align	2, 0
.L996:
	.word	0x8041
	.word	gRfuFixed
	.word	0x8042
	.word	0x4000208
	.word	gRfuStatic
.Lfe82:
	.size	 rfu_STC_NI_receive_Receiver,.Lfe82-rfu_STC_NI_receive_Receiver
	.align	2, 0
	.type	 rfu_STC_NI_initSlot_asRecvControllData,function
	.thumb_func
rfu_STC_NI_initSlot_asRecvControllData:
	push	{r4, r5, r6, r7, lr}
	add	r2, r1, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1004
	ldr	r3, [r0]
	ldrb	r1, [r3]
	mov	ip, r0
	cmp	r1, #0x1
	bne	.L999	@cond_branch
	mov	r5, #0x3
	add	r1, r3, #0
	add	r1, r1, #0xf
	b	.L1000
.L1005:
	.align	2, 0
.L1004:
	.word	gRfuLinkStatus
.L999:
	mov	r5, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x10
	add	r1, r3, r0
.L1000:
	mov	r7, #0x1
	add	r0, r7, #0
	lsl	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r4, r6, #0
	ldrh	r3, [r2]
	cmp	r3, #0
	bne	.L1001	@cond_branch
	ldrb	r0, [r1]
	cmp	r0, r5
	bcs	.L1002	@cond_branch
	mov	r0, #0x49
	strh	r0, [r2]
	ldr	r0, .L1006
	strh	r0, [r2, #0x18]
	ldr	r0, .L1006+0x4
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x4]
	add	r0, r6, #0
	orr	r0, r0, r1
	strb	r0, [r2, #0x4]
	b	.L1001
.L1007:
	.align	2, 0
.L1006:
	.word	0x702
	.word	gRfuStatic
.L1002:
	strh	r3, [r2, #0x18]
	ldrb	r0, [r1]
	sub	r0, r0, r5
	strb	r0, [r1]
	add	r0, r2, #0
	add	r0, r0, #0x2d
	str	r0, [r2, #0x4]
	mov	r0, #0x7
	str	r0, [r2, #0x14]
	strb	r7, [r2, #0x1f]
	strh	r3, [r2, #0x2e]
	strb	r4, [r2, #0x1a]
	ldr	r0, .L1008
	strh	r0, [r2]
	mov	r0, ip
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x5]
	orr	r4, r4, r0
	strb	r4, [r1, #0x5]
.L1001:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1009:
	.align	2, 0
.L1008:
	.word	0x8041
.Lfe83:
	.size	 rfu_STC_NI_initSlot_asRecvControllData,.Lfe83-rfu_STC_NI_initSlot_asRecvControllData
	.align	2, 0
	.type	 rfu_STC_NI_initSlot_asRecvDataEntity,function
	.thumb_func
rfu_STC_NI_initSlot_asRecvDataEntity:
	push	{r4, r5, r6, r7, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r4, #0
	add	r0, r0, #0x2d
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L1011	@cond_branch
	ldr	r0, .L1020
	lsl	r1, r5, #0x5
	add	r1, r1, #0x14
	ldr	r0, [r0]
	add	r0, r0, r1
	add	r0, r0, #0x4
	b	.L1019
.L1021:
	.align	2, 0
.L1020:
	.word	gRfuLinkStatus
.L1011:
	ldr	r1, .L1022
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	ldr	r1, [r4, #0x30]
	ldr	r0, [r2, #0x6c]
	cmp	r1, r0
	bls	.L1013	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	lsl	r1, r1, r5
	lsr	r1, r1, #0x18
	ldr	r0, .L1022+0x4
	ldr	r3, [r0]
	ldrb	r2, [r3, #0x4]
	add	r0, r1, #0
	orr	r0, r0, r2
	strb	r0, [r3, #0x4]
	ldr	r0, .L1022+0x8
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x5]
	bic	r0, r0, r1
	strb	r0, [r2, #0x5]
	ldr	r0, .L1022+0xc
	strh	r0, [r4, #0x18]
	mov	r0, #0x47
	strh	r0, [r4]
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	rfu_STC_releaseFrame
	b	.L1010
.L1023:
	.align	2, 0
.L1022:
	.word	gRfuSlotStatusNI
	.word	gRfuStatic
	.word	gRfuLinkStatus
	.word	0x701
.L1013:
	ldr	r0, [r2, #0x68]
.L1019:
	str	r0, [r4, #0x4]
	mov	r3, #0x0
	add	r6, r4, #0
	add	r6, r6, #0x21
	mov	r7, #0x0
	add	r5, r4, #0x4
.L1017:
	add	r0, r6, r3
	strb	r7, [r0]
	lsl	r1, r3, #0x2
	add	r1, r5, r1
	ldrh	r0, [r4, #0x2e]
	mov	r2, r0
	mul	r2, r2, r3
	ldr	r0, [r4, #0x4]
	add	r0, r0, r2
	str	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L1017	@cond_branch
	ldr	r0, [r4, #0x30]
	str	r0, [r4, #0x14]
	ldr	r0, .L1024
	strh	r0, [r4]
.L1010:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1025:
	.align	2, 0
.L1024:
	.word	0x8042
.Lfe84:
	.size	 rfu_STC_NI_initSlot_asRecvDataEntity,.Lfe84-rfu_STC_NI_initSlot_asRecvDataEntity
	.align	2, 0
	.type	 rfu_NI_checkCommFailCounter,function
	.thumb_func
rfu_NI_checkCommFailCounter:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L1035
	ldr	r0, [r2]
	ldrb	r1, [r0, #0x4]
	ldrb	r0, [r0, #0x5]
	orr	r0, r0, r1
	cmp	r0, #0
	beq	.L1027	@cond_branch
	ldr	r1, .L1035+0x4
	ldrh	r0, [r1]
	mov	ip, r0
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L1035+0x8
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x2]
	lsr	r7, r0, #0x4
	mov	r3, #0x0
	add	r6, r1, #0
	add	r5, r2, #0
	ldr	r4, .L1035+0xc
.L1031:
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r3
	lsr	r2, r0, #0x18
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x4]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1032	@cond_branch
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x2]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L1032	@cond_branch
	lsl	r0, r3, #0x2
	add	r0, r0, r4
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2]
.L1032:
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x5]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1030	@cond_branch
	add	r0, r7, #0
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L1030	@cond_branch
	lsl	r0, r3, #0x2
	add	r0, r0, r4
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x36]
.L1030:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L1031	@cond_branch
	ldr	r0, [r6]
	mov	r1, #0x0
	strb	r1, [r0, #0x2]
	ldr	r0, .L1035+0x4
	mov	r1, ip
	strh	r1, [r0]
.L1027:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1036:
	.align	2, 0
.L1035:
	.word	gRfuLinkStatus
	.word	0x4000208
	.word	gRfuStatic
	.word	gRfuSlotStatusNI
.Lfe85:
	.size	 rfu_NI_checkCommFailCounter,.Lfe85-rfu_NI_checkCommFailCounter
	.align	2, 0
	.globl	rfu_REQ_noise
	.type	 rfu_REQ_noise,function
	.thumb_func
rfu_REQ_noise:
	push	{lr}
	ldr	r0, .L1038
	bl	STWI_set_Callback_M
	mov	r0, #0x1
	mov	r1, #0x0
	bl	STWI_send_TestModeREQ
	pop	{r0}
	bx	r0
.L1039:
	.align	2, 0
.L1038:
	.word	rfu_STC_REQ_callback
.Lfe86:
	.size	 rfu_REQ_noise,.Lfe86-rfu_REQ_noise
	.comm	gRfuLinkStatus, 4	@ 4
	.comm	gRfuStatic, 4	@ 4
	.comm	gRfuFixed, 4	@ 4
	.comm	gRfuSlotStatusNI, 16	@ 16
	.comm	gRfuSlotStatusUNI, 16	@ 16
.text
	.align	2, 0

