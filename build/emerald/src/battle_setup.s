@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	1, 0
	.type	 sTrainerBattleMode,object
	.size	 sTrainerBattleMode,2
sTrainerBattleMode:
	.short	0x0
	.globl	gTrainerBattleOpponent_A
	.align	1, 0
	.type	 gTrainerBattleOpponent_A,object
	.size	 gTrainerBattleOpponent_A,2
gTrainerBattleOpponent_A:
	.short	0x0
	.globl	gTrainerBattleOpponent_B
	.align	1, 0
	.type	 gTrainerBattleOpponent_B,object
	.size	 gTrainerBattleOpponent_B,2
gTrainerBattleOpponent_B:
	.short	0x0
	.globl	gPartnerTrainerId
	.align	1, 0
	.type	 gPartnerTrainerId,object
	.size	 gPartnerTrainerId,2
gPartnerTrainerId:
	.short	0x0
	.align	1, 0
	.type	 sTrainerObjectEventLocalId,object
	.size	 sTrainerObjectEventLocalId,2
sTrainerObjectEventLocalId:
	.short	0x0
	.align	2, 0
	.type	 sTrainerAIntroSpeech,object
	.size	 sTrainerAIntroSpeech,4
sTrainerAIntroSpeech:
	.word	0x0
	.align	2, 0
	.type	 sTrainerBIntroSpeech,object
	.size	 sTrainerBIntroSpeech,4
sTrainerBIntroSpeech:
	.word	0x0
	.align	2, 0
	.type	 sTrainerADefeatSpeech,object
	.size	 sTrainerADefeatSpeech,4
sTrainerADefeatSpeech:
	.word	0x0
	.align	2, 0
	.type	 sTrainerBDefeatSpeech,object
	.size	 sTrainerBDefeatSpeech,4
sTrainerBDefeatSpeech:
	.word	0x0
	.align	2, 0
	.type	 sTrainerVictorySpeech,object
	.size	 sTrainerVictorySpeech,4
sTrainerVictorySpeech:
	.word	0x0
	.align	2, 0
	.type	 sTrainerCannotBattleSpeech,object
	.size	 sTrainerCannotBattleSpeech,4
sTrainerCannotBattleSpeech:
	.word	0x0
	.align	2, 0
	.type	 sTrainerBattleEndScript,object
	.size	 sTrainerBattleEndScript,4
sTrainerBattleEndScript:
	.word	0x0
	.align	2, 0
	.type	 sTrainerABattleScriptRetAddr,object
	.size	 sTrainerABattleScriptRetAddr,4
sTrainerABattleScriptRetAddr:
	.word	0x0
	.align	2, 0
	.type	 sTrainerBBattleScriptRetAddr,object
	.size	 sTrainerBBattleScriptRetAddr,4
sTrainerBBattleScriptRetAddr:
	.word	0x0
	.type	 sShouldCheckTrainerBScript,object
	.size	 sShouldCheckTrainerBScript,1
sShouldCheckTrainerBScript:
	.byte	0x0
	.type	 sNoOfPossibleTrainerRetScripts,object
	.size	 sNoOfPossibleTrainerRetScripts,1
sNoOfPossibleTrainerRetScripts:
	.byte	0x0
	.section .rodata
	.type	 sBattleTransitionTable_Wild,object
sBattleTransitionTable_Wild:
	.byte	0x8
	.byte	0x9
	.byte	0x5
	.byte	0xa
	.byte	0x0
	.byte	0xa
	.byte	0x7
	.byte	0x6
	.size	 sBattleTransitionTable_Wild,8
	.type	 sBattleTransitionTable_Trainer,object
sBattleTransitionTable_Trainer:
	.byte	0x4
	.byte	0xb
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0xa
	.byte	0x1
	.byte	0x6
	.size	 sBattleTransitionTable_Trainer,8
	.type	 sBattleTransitionTable_BattleFrontier,object
sBattleTransitionTable_BattleFrontier:
	.byte	0x1d
	.byte	0x1e
	.byte	0x1f
	.byte	0x20
	.byte	0x22
	.byte	0x23
	.byte	0x24
	.byte	0x25
	.byte	0x26
	.byte	0x27
	.byte	0x28
	.byte	0x29
	.size	 sBattleTransitionTable_BattleFrontier,12
	.type	 sBattleTransitionTable_BattlePyramid,object
sBattleTransitionTable_BattlePyramid:
	.byte	0x1f
	.byte	0x20
	.byte	0x21
	.size	 sBattleTransitionTable_BattlePyramid,3
	.type	 sBattleTransitionTable_BattleDome,object
sBattleTransitionTable_BattleDome:
	.byte	0x1d
	.byte	0x1f
	.byte	0x20
	.byte	0x21
	.size	 sBattleTransitionTable_BattleDome,4
	.align	2, 0
	.type	 sOrdinaryBattleParams,object
sOrdinaryBattleParams:
	.word	sTrainerBattleMode
	.byte	0x0
	.space	3
	.word	gTrainerBattleOpponent_A
	.byte	0x1
	.space	3
	.word	sTrainerObjectEventLocalId
	.byte	0x1
	.space	3
	.word	sTrainerAIntroSpeech
	.byte	0x2
	.space	3
	.word	sTrainerADefeatSpeech
	.byte	0x2
	.space	3
	.word	sTrainerVictorySpeech
	.byte	0x5
	.space	3
	.word	sTrainerCannotBattleSpeech
	.byte	0x5
	.space	3
	.word	sTrainerABattleScriptRetAddr
	.byte	0x5
	.space	3
	.word	sTrainerBattleEndScript
	.byte	0x6
	.space	3
	.size	 sOrdinaryBattleParams,72
	.align	2, 0
	.type	 sContinueScriptBattleParams,object
sContinueScriptBattleParams:
	.word	sTrainerBattleMode
	.byte	0x0
	.space	3
	.word	gTrainerBattleOpponent_A
	.byte	0x1
	.space	3
	.word	sTrainerObjectEventLocalId
	.byte	0x1
	.space	3
	.word	sTrainerAIntroSpeech
	.byte	0x2
	.space	3
	.word	sTrainerADefeatSpeech
	.byte	0x2
	.space	3
	.word	sTrainerVictorySpeech
	.byte	0x5
	.space	3
	.word	sTrainerCannotBattleSpeech
	.byte	0x5
	.space	3
	.word	sTrainerABattleScriptRetAddr
	.byte	0x2
	.space	3
	.word	sTrainerBattleEndScript
	.byte	0x6
	.space	3
	.size	 sContinueScriptBattleParams,72
	.align	2, 0
	.type	 sDoubleBattleParams,object
sDoubleBattleParams:
	.word	sTrainerBattleMode
	.byte	0x0
	.space	3
	.word	gTrainerBattleOpponent_A
	.byte	0x1
	.space	3
	.word	sTrainerObjectEventLocalId
	.byte	0x1
	.space	3
	.word	sTrainerAIntroSpeech
	.byte	0x2
	.space	3
	.word	sTrainerADefeatSpeech
	.byte	0x2
	.space	3
	.word	sTrainerVictorySpeech
	.byte	0x5
	.space	3
	.word	sTrainerCannotBattleSpeech
	.byte	0x2
	.space	3
	.word	sTrainerABattleScriptRetAddr
	.byte	0x5
	.space	3
	.word	sTrainerBattleEndScript
	.byte	0x6
	.space	3
	.size	 sDoubleBattleParams,72
	.align	2, 0
	.type	 sOrdinaryNoIntroBattleParams,object
sOrdinaryNoIntroBattleParams:
	.word	sTrainerBattleMode
	.byte	0x0
	.space	3
	.word	gTrainerBattleOpponent_A
	.byte	0x1
	.space	3
	.word	sTrainerObjectEventLocalId
	.byte	0x1
	.space	3
	.word	sTrainerAIntroSpeech
	.byte	0x5
	.space	3
	.word	sTrainerADefeatSpeech
	.byte	0x2
	.space	3
	.word	sTrainerVictorySpeech
	.byte	0x5
	.space	3
	.word	sTrainerCannotBattleSpeech
	.byte	0x5
	.space	3
	.word	sTrainerABattleScriptRetAddr
	.byte	0x5
	.space	3
	.word	sTrainerBattleEndScript
	.byte	0x6
	.space	3
	.size	 sOrdinaryNoIntroBattleParams,72
	.align	2, 0
	.type	 sContinueScriptDoubleBattleParams,object
sContinueScriptDoubleBattleParams:
	.word	sTrainerBattleMode
	.byte	0x0
	.space	3
	.word	gTrainerBattleOpponent_A
	.byte	0x1
	.space	3
	.word	sTrainerObjectEventLocalId
	.byte	0x1
	.space	3
	.word	sTrainerAIntroSpeech
	.byte	0x2
	.space	3
	.word	sTrainerADefeatSpeech
	.byte	0x2
	.space	3
	.word	sTrainerVictorySpeech
	.byte	0x5
	.space	3
	.word	sTrainerCannotBattleSpeech
	.byte	0x2
	.space	3
	.word	sTrainerABattleScriptRetAddr
	.byte	0x2
	.space	3
	.word	sTrainerBattleEndScript
	.byte	0x6
	.space	3
	.size	 sContinueScriptDoubleBattleParams,72
	.align	2, 0
	.type	 sTrainerBOrdinaryBattleParams,object
sTrainerBOrdinaryBattleParams:
	.word	sTrainerBattleMode
	.byte	0x0
	.space	3
	.word	gTrainerBattleOpponent_B
	.byte	0x1
	.space	3
	.word	sTrainerObjectEventLocalId
	.byte	0x1
	.space	3
	.word	sTrainerBIntroSpeech
	.byte	0x2
	.space	3
	.word	sTrainerBDefeatSpeech
	.byte	0x2
	.space	3
	.word	sTrainerVictorySpeech
	.byte	0x5
	.space	3
	.word	sTrainerCannotBattleSpeech
	.byte	0x5
	.space	3
	.word	sTrainerBBattleScriptRetAddr
	.byte	0x5
	.space	3
	.word	sTrainerBattleEndScript
	.byte	0x6
	.space	3
	.size	 sTrainerBOrdinaryBattleParams,72
	.align	2, 0
	.type	 sTrainerBContinueScriptBattleParams,object
sTrainerBContinueScriptBattleParams:
	.word	sTrainerBattleMode
	.byte	0x0
	.space	3
	.word	gTrainerBattleOpponent_B
	.byte	0x1
	.space	3
	.word	sTrainerObjectEventLocalId
	.byte	0x1
	.space	3
	.word	sTrainerBIntroSpeech
	.byte	0x2
	.space	3
	.word	sTrainerBDefeatSpeech
	.byte	0x2
	.space	3
	.word	sTrainerVictorySpeech
	.byte	0x5
	.space	3
	.word	sTrainerCannotBattleSpeech
	.byte	0x5
	.space	3
	.word	sTrainerBBattleScriptRetAddr
	.byte	0x2
	.space	3
	.word	sTrainerBattleEndScript
	.byte	0x6
	.space	3
	.size	 sTrainerBContinueScriptBattleParams,72
	.globl	gRematchTable
	.align	2, 0
	.type	 gRematchTable,object
	.size	 gRematchTable,1248
gRematchTable:
	.short	0x25
	.short	0x28
	.short	0x29
	.short	0x2a
	.short	0x2b
	.short	0x0
	.short	0x21
	.space	2
	.short	0x2e1
	.short	0x32c
	.short	0x32d
	.short	0x32e
	.short	0x32f
	.short	0x0
	.short	0x14
	.space	2
	.short	0x2c
	.short	0x2f
	.short	0x30
	.short	0x31
	.short	0x32
	.short	0x0
	.short	0x1a
	.space	2
	.short	0x39
	.short	0x3c
	.short	0x3d
	.short	0x3e
	.short	0x3f
	.short	0x0
	.short	0x18
	.space	2
	.short	0x40
	.short	0x43
	.short	0x44
	.short	0x45
	.short	0x46
	.short	0x0
	.short	0x18
	.space	2
	.short	0x2af
	.short	0x2b0
	.short	0x2b1
	.short	0x2b2
	.short	0x2b3
	.short	0x0
	.short	0x27
	.space	2
	.short	0x2ff
	.short	0x33c
	.short	0x33d
	.short	0x33e
	.short	0x33f
	.short	0x0
	.short	0x24
	.space	2
	.short	0x5e
	.short	0x65
	.short	0x66
	.short	0x67
	.short	0x68
	.short	0x0
	.short	0x1a
	.space	2
	.short	0x4e
	.short	0x54
	.short	0x55
	.short	0x56
	.short	0x57
	.short	0x0
	.short	0x1a
	.space	2
	.short	0x6c
	.short	0x6e
	.short	0x6f
	.short	0x70
	.short	0x71
	.short	0x18
	.short	0x14
	.space	2
	.short	0x72
	.short	0x78
	.short	0x79
	.short	0x7a
	.short	0x7b
	.short	0x0
	.short	0x13
	.space	2
	.short	0x90
	.short	0x34c
	.short	0x34d
	.short	0x34e
	.short	0x34f
	.short	0x18
	.short	0x38
	.space	2
	.short	0x7f
	.short	0x84
	.short	0x85
	.short	0x86
	.short	0x87
	.short	0x0
	.short	0x24
	.space	2
	.short	0x88
	.short	0x8b
	.short	0x8c
	.short	0x8d
	.short	0x8e
	.short	0x0
	.short	0x13
	.space	2
	.short	0x8f
	.short	0x93
	.short	0x94
	.short	0x95
	.short	0x96
	.short	0x0
	.short	0x1d
	.space	2
	.short	0x9b
	.short	0xaf
	.short	0xb0
	.short	0xb1
	.short	0xb2
	.short	0x0
	.short	0x16
	.space	2
	.short	0xb7
	.short	0xb8
	.short	0xb9
	.short	0xba
	.short	0xbb
	.short	0x0
	.short	0x1e
	.space	2
	.short	0x2a0
	.short	0x338
	.short	0x339
	.short	0x33a
	.short	0x33b
	.short	0x0
	.short	0x2a
	.space	2
	.short	0xc3
	.short	0x340
	.short	0x341
	.short	0x342
	.short	0x343
	.short	0x0
	.short	0x26
	.space	2
	.short	0xc4
	.short	0xc5
	.short	0xc6
	.short	0xc7
	.short	0xc8
	.short	0x0
	.short	0x21
	.space	2
	.short	0xce
	.short	0xcf
	.short	0xd0
	.short	0xd1
	.short	0xd2
	.short	0x0
	.short	0x1d
	.space	2
	.short	0xd8
	.short	0xdb
	.short	0xdc
	.short	0xdd
	.short	0xde
	.short	0x18
	.short	0xd
	.space	2
	.short	0x2a9
	.short	0x2aa
	.short	0x2ab
	.short	0x2ac
	.short	0x2ad
	.short	0x18
	.short	0x1
	.space	2
	.short	0xe2
	.short	0xe4
	.short	0xe5
	.short	0xe6
	.short	0xe7
	.short	0x0
	.short	0x23
	.space	2
	.short	0xee
	.short	0xef
	.short	0xf0
	.short	0xf1
	.short	0xf2
	.short	0x0
	.short	0x26
	.space	2
	.short	0xf9
	.short	0xfa
	.short	0xfb
	.short	0xfc
	.short	0xfd
	.short	0x0
	.short	0x26
	.space	2
	.short	0xfe
	.short	0x101
	.short	0x102
	.short	0x103
	.short	0x104
	.short	0x0
	.short	0x24
	.space	2
	.short	0x118
	.short	0x11a
	.short	0x11b
	.short	0x11c
	.short	0x11d
	.short	0x0
	.short	0x1f
	.space	2
	.short	0x111
	.short	0x114
	.short	0x115
	.short	0x116
	.short	0x117
	.short	0x0
	.short	0x1f
	.space	2
	.short	0x11f
	.short	0x120
	.short	0x121
	.short	0x122
	.short	0x123
	.short	0x0
	.short	0x20
	.space	2
	.short	0x12e
	.short	0x12f
	.short	0x130
	.short	0x131
	.short	0x132
	.short	0x0
	.short	0x19
	.space	2
	.short	0x125
	.short	0x127
	.short	0x128
	.short	0x129
	.short	0x12a
	.short	0x0
	.short	0x12
	.space	2
	.short	0x133
	.short	0x134
	.short	0x135
	.short	0x136
	.short	0x137
	.short	0x0
	.short	0x1e
	.space	2
	.short	0x139
	.short	0x13a
	.short	0x13b
	.short	0x13c
	.short	0x13d
	.short	0x18
	.short	0xc
	.space	2
	.short	0x13e
	.short	0x148
	.short	0x149
	.short	0x14a
	.short	0x14b
	.short	0x0
	.short	0x11
	.space	2
	.short	0x153
	.short	0x15a
	.short	0x15b
	.short	0x15c
	.short	0x15d
	.short	0x0
	.short	0x15
	.space	2
	.short	0x178
	.short	0x17b
	.short	0x17c
	.short	0x17d
	.short	0x17e
	.short	0x0
	.short	0x2b
	.space	2
	.short	0x171
	.short	0x172
	.short	0x173
	.short	0x174
	.short	0x175
	.short	0x0
	.short	0x20
	.space	2
	.short	0x166
	.short	0x168
	.short	0x169
	.short	0x16a
	.short	0x16b
	.short	0x0
	.short	0x19
	.space	2
	.short	0x16c
	.short	0x16d
	.short	0x16e
	.short	0x16f
	.short	0x170
	.short	0x0
	.short	0x20
	.space	2
	.short	0x182
	.short	0x184
	.short	0x185
	.short	0x186
	.short	0x187
	.short	0x0
	.short	0x2b
	.space	2
	.short	0x161
	.short	0x162
	.short	0x163
	.short	0x164
	.short	0x165
	.short	0x0
	.short	0x19
	.space	2
	.short	0x179
	.short	0x334
	.short	0x335
	.short	0x336
	.short	0x337
	.short	0x0
	.short	0x29
	.space	2
	.short	0x188
	.short	0x189
	.short	0x18a
	.short	0x18b
	.short	0x18c
	.short	0x18
	.short	0x1
	.space	2
	.short	0x196
	.short	0x199
	.short	0x19a
	.short	0x19b
	.short	0x19c
	.short	0x0
	.short	0x23
	.space	2
	.short	0x1a3
	.short	0x1a5
	.short	0x1a6
	.short	0x1a7
	.short	0x1a8
	.short	0x0
	.short	0x1c
	.space	2
	.short	0x1ab
	.short	0x1ae
	.short	0x1af
	.short	0x1b0
	.short	0x1b1
	.short	0x0
	.short	0x1e
	.space	2
	.short	0x1b2
	.short	0x1b5
	.short	0x1b6
	.short	0x1b7
	.short	0x1b8
	.short	0x0
	.short	0x1c
	.space	2
	.short	0x1c1
	.short	0x1d1
	.short	0x1d2
	.short	0x1d3
	.short	0x1d4
	.short	0x0
	.short	0x27
	.space	2
	.short	0x1da
	.short	0x1dd
	.short	0x1de
	.short	0x1df
	.short	0x1e0
	.short	0x18
	.short	0xd
	.space	2
	.short	0x1e1
	.short	0x1e2
	.short	0x1e7
	.short	0x1e8
	.short	0x1e9
	.short	0x0
	.short	0x12
	.space	2
	.short	0x1ec
	.short	0x1f1
	.short	0x1f2
	.short	0x1f3
	.short	0x1f4
	.short	0x0
	.short	0x28
	.space	2
	.short	0x2e4
	.short	0x330
	.short	0x331
	.short	0x332
	.short	0x333
	.short	0x0
	.short	0x17
	.space	2
	.short	0x200
	.short	0x203
	.short	0x204
	.short	0x205
	.short	0x206
	.short	0x0
	.short	0x19
	.space	2
	.short	0x221
	.short	0x224
	.short	0x225
	.short	0x226
	.short	0x227
	.short	0x0
	.short	0x20
	.space	2
	.short	0x21a
	.short	0x21d
	.short	0x21e
	.short	0x21f
	.short	0x220
	.short	0x0
	.short	0x20
	.space	2
	.short	0x9
	.short	0x348
	.short	0x349
	.short	0x34a
	.short	0x34b
	.short	0x18
	.short	0x11
	.space	2
	.short	0x22f
	.short	0x232
	.short	0x233
	.short	0x234
	.short	0x235
	.short	0x0
	.short	0x22
	.space	2
	.short	0x228
	.short	0x22b
	.short	0x22c
	.short	0x22d
	.short	0x22e
	.short	0x0
	.short	0x22
	.space	2
	.short	0x25c
	.short	0x25f
	.short	0x260
	.short	0x261
	.short	0x262
	.short	0x0
	.short	0x13
	.space	2
	.short	0x26d
	.short	0x26e
	.short	0x26f
	.short	0x270
	.short	0x271
	.short	0x18
	.short	0xb
	.space	2
	.short	0x273
	.short	0x27c
	.short	0x27d
	.short	0x27e
	.short	0x27f
	.short	0x0
	.short	0x1b
	.space	2
	.short	0x1
	.short	0x344
	.short	0x345
	.short	0x346
	.short	0x347
	.short	0x18
	.short	0xc
	.space	2
	.short	0x282
	.short	0x283
	.short	0x284
	.short	0x285
	.short	0x286
	.short	0x18
	.short	0x3e
	.space	2
	.short	0x291
	.short	0x292
	.short	0x293
	.short	0x294
	.short	0x294
	.short	0x18
	.short	0x2b
	.space	2
	.short	0x109
	.short	0x302
	.short	0x303
	.short	0x304
	.short	0x305
	.short	0x0
	.short	0x3
	.space	2
	.short	0x10a
	.short	0x306
	.short	0x307
	.short	0x308
	.short	0x309
	.short	0x0
	.short	0xb
	.space	2
	.short	0x10b
	.short	0x30a
	.short	0x30b
	.short	0x30c
	.short	0x30d
	.short	0x0
	.short	0x2
	.space	2
	.short	0x10c
	.short	0x30e
	.short	0x30f
	.short	0x310
	.short	0x311
	.short	0x0
	.short	0xc
	.space	2
	.short	0x10d
	.short	0x312
	.short	0x313
	.short	0x314
	.short	0x315
	.short	0x0
	.short	0x0
	.space	2
	.short	0x10e
	.short	0x316
	.short	0x317
	.short	0x318
	.short	0x319
	.short	0x0
	.short	0x4
	.space	2
	.short	0x10f
	.short	0x31a
	.short	0x31b
	.short	0x31c
	.short	0x31d
	.short	0x0
	.short	0x6
	.space	2
	.short	0x110
	.short	0x31e
	.short	0x31f
	.short	0x320
	.short	0x321
	.short	0x0
	.short	0x7
	.space	2
	.short	0x105
	.short	0x105
	.short	0x105
	.short	0x105
	.short	0x105
	.short	0x0
	.short	0x8
	.space	2
	.short	0x106
	.short	0x106
	.short	0x106
	.short	0x106
	.short	0x106
	.short	0x0
	.short	0x8
	.space	2
	.short	0x107
	.short	0x107
	.short	0x107
	.short	0x107
	.short	0x107
	.short	0x0
	.short	0x8
	.space	2
	.short	0x108
	.short	0x108
	.short	0x108
	.short	0x108
	.short	0x108
	.short	0x0
	.short	0x8
	.space	2
	.short	0x14f
	.short	0x14f
	.short	0x14f
	.short	0x14f
	.short	0x14f
	.short	0x0
	.short	0x8
	.space	2
	.align	1, 0
	.type	 sBadgeFlags,object
	.size	 sBadgeFlags,16
sBadgeFlags:
	.short	0x867
	.short	0x868
	.short	0x869
	.short	0x86a
	.short	0x86b
	.short	0x86c
	.short	0x86d
	.short	0x86e
.text
	.align	2, 0
	.type	 Task_BattleStart,function
	.thumb_func
Task_BattleStart:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L10
	add	r4, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L4	@cond_branch
	cmp	r0, #0x1
	beq	.L6	@cond_branch
	b	.L3
.L11:
	.align	2, 0
.L10:
	.word	gTasks+0x8
.L4:
	bl	FldEffPoison_IsActive
	cmp	r0, #0
	bne	.L3	@cond_branch
	ldrb	r0, [r4, #0x2]
	bl	BattleTransition_StartOnField
	bl	ClearMirageTowerPulseBlendEffect
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L3
.L6:
	bl	IsBattleTransitionDone
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L3	@cond_branch
	bl	CleanupOverworldWindowsAndTilemaps
	ldr	r0, .L12
	bl	SetMainCallback2
	bl	RestartWildEncounterImmunitySteps
	bl	ClearPoisonStepCounter
	add	r0, r5, #0
	bl	DestroyTask
.L3:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	CB2_InitBattle
.Lfe1:
	.size	 Task_BattleStart,.Lfe1-Task_BattleStart
	.align	2, 0
	.type	 CreateBattleStartTask,function
	.thumb_func
CreateBattleStartTask:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r0, .L15
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L15+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0xa]
	add	r0, r5, #0
	bl	PlayMapChosenOrBattleBGM
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	Task_BattleStart
	.word	gTasks
.Lfe2:
	.size	 CreateBattleStartTask,.Lfe2-CreateBattleStartTask
	.align	2, 0
	.globl	BattleSetup_StartWildBattle
	.type	 BattleSetup_StartWildBattle,function
	.thumb_func
BattleSetup_StartWildBattle:
	push	{lr}
	bl	GetSafariZoneFlag
	cmp	r0, #0
	beq	.L18	@cond_branch
	bl	DoSafariBattle
	b	.L19
.L18:
	mov	r0, #0x0
	bl	DoStandardWildBattle
.L19:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 BattleSetup_StartWildBattle,.Lfe3-BattleSetup_StartWildBattle
	.align	2, 0
	.globl	BattleSetup_StartDoubleWildBattle
	.type	 BattleSetup_StartDoubleWildBattle,function
	.thumb_func
BattleSetup_StartDoubleWildBattle:
	push	{lr}
	mov	r0, #0x1
	bl	DoStandardWildBattle
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 BattleSetup_StartDoubleWildBattle,.Lfe4-BattleSetup_StartDoubleWildBattle
	.align	2, 0
	.globl	BattleSetup_StartBattlePikeWildBattle
	.type	 BattleSetup_StartBattlePikeWildBattle,function
	.thumb_func
BattleSetup_StartBattlePikeWildBattle:
	push	{lr}
	bl	DoBattlePikeWildBattle
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 BattleSetup_StartBattlePikeWildBattle,.Lfe5-BattleSetup_StartBattlePikeWildBattle
	.align	2, 0
	.type	 DoStandardWildBattle,function
	.thumb_func
DoStandardWildBattle:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	ScriptContext2_Enable
	bl	FreezeObjectEvents
	bl	sub_808BCF4
	ldr	r1, .L25
	ldr	r0, .L25+0x4
	str	r0, [r1, #0x8]
	ldr	r5, .L25+0x8
	mov	r0, #0x0
	str	r0, [r5]
	cmp	r4, #0
	beq	.L23	@cond_branch
	mov	r0, #0x1
	str	r0, [r5]
.L23:
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L24	@cond_branch
	ldr	r0, .L25+0xc
	mov	r1, #0x0
	bl	VarSet
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	orr	r0, r0, r1
	str	r0, [r5]
.L24:
	bl	GetWildBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L26:
	.align	2, 0
.L25:
	.word	gMain
	.word	CB2_EndWildBattle
	.word	gBattleTypeFlags
	.word	0x400e
.Lfe6:
	.size	 DoStandardWildBattle,.Lfe6-DoStandardWildBattle
	.align	2, 0
	.globl	BattleSetup_StartRoamerBattle
	.type	 BattleSetup_StartRoamerBattle,function
	.thumb_func
BattleSetup_StartRoamerBattle:
	push	{lr}
	bl	ScriptContext2_Enable
	bl	FreezeObjectEvents
	bl	sub_808BCF4
	ldr	r1, .L28
	ldr	r0, .L28+0x4
	str	r0, [r1, #0x8]
	ldr	r1, .L28+0x8
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	str	r0, [r1]
	bl	GetWildBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r0}
	bx	r0
.L29:
	.align	2, 0
.L28:
	.word	gMain
	.word	CB2_EndWildBattle
	.word	gBattleTypeFlags
.Lfe7:
	.size	 BattleSetup_StartRoamerBattle,.Lfe7-BattleSetup_StartRoamerBattle
	.align	2, 0
	.type	 DoSafariBattle,function
	.thumb_func
DoSafariBattle:
	push	{lr}
	bl	ScriptContext2_Enable
	bl	FreezeObjectEvents
	bl	sub_808BCF4
	ldr	r1, .L31
	ldr	r0, .L31+0x4
	str	r0, [r1, #0x8]
	ldr	r1, .L31+0x8
	mov	r0, #0x80
	str	r0, [r1]
	bl	GetWildBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	gMain
	.word	CB2_EndSafariBattle
	.word	gBattleTypeFlags
.Lfe8:
	.size	 DoSafariBattle,.Lfe8-DoSafariBattle
	.align	2, 0
	.type	 DoBattlePikeWildBattle,function
	.thumb_func
DoBattlePikeWildBattle:
	push	{lr}
	bl	ScriptContext2_Enable
	bl	FreezeObjectEvents
	bl	sub_808BCF4
	ldr	r1, .L34
	ldr	r0, .L34+0x4
	str	r0, [r1, #0x8]
	ldr	r1, .L34+0x8
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	str	r0, [r1]
	bl	GetWildBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r0}
	bx	r0
.L35:
	.align	2, 0
.L34:
	.word	gMain
	.word	CB2_EndWildBattle
	.word	gBattleTypeFlags
.Lfe9:
	.size	 DoBattlePikeWildBattle,.Lfe9-DoBattlePikeWildBattle
	.align	2, 0
	.type	 DoTrainerBattle,function
	.thumb_func
DoTrainerBattle:
	push	{lr}
	bl	GetTrainerBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x9
	bl	IncrementGameStat
	bl	TryUpdateGymLeaderRematchFromTrainer
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 DoTrainerBattle,.Lfe10-DoTrainerBattle
	.align	2, 0
	.type	 sub_80B0828,function
	.thumb_func
sub_80B0828:
	push	{lr}
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L38	@cond_branch
	mov	r0, #0xa
	bl	GetSpecialBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	b	.L39
.L38:
	mov	r0, #0xb
	bl	GetSpecialBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
.L39:
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x9
	bl	IncrementGameStat
	bl	TryUpdateGymLeaderRematchFromTrainer
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 sub_80B0828,.Lfe11-sub_80B0828
	.align	2, 0
	.globl	StartWallyTutorialBattle
	.type	 StartWallyTutorialBattle,function
	.thumb_func
StartWallyTutorialBattle:
	push	{lr}
	ldr	r0, .L41
	mov	r1, #0x8c
	lsl	r1, r1, #0x1
	mov	r2, #0x5
	mov	r3, #0x0
	bl	CreateMaleMon
	bl	ScriptContext2_Enable
	ldr	r1, .L41+0x4
	ldr	r0, .L41+0x8
	str	r0, [r1, #0x8]
	ldr	r1, .L41+0xc
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	str	r0, [r1]
	mov	r0, #0x8
	mov	r1, #0x0
	bl	CreateBattleStartTask
	pop	{r0}
	bx	r0
.L42:
	.align	2, 0
.L41:
	.word	gEnemyParty
	.word	gMain
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
	.word	gBattleTypeFlags
.Lfe12:
	.size	 StartWallyTutorialBattle,.Lfe12-StartWallyTutorialBattle
	.align	2, 0
	.globl	BattleSetup_StartScriptedWildBattle
	.type	 BattleSetup_StartScriptedWildBattle,function
	.thumb_func
BattleSetup_StartScriptedWildBattle:
	push	{lr}
	bl	ScriptContext2_Enable
	ldr	r1, .L44
	ldr	r0, .L44+0x4
	str	r0, [r1, #0x8]
	ldr	r1, .L44+0x8
	mov	r0, #0x0
	str	r0, [r1]
	bl	GetWildBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r0}
	bx	r0
.L45:
	.align	2, 0
.L44:
	.word	gMain
	.word	CB2_EndScriptedWildBattle
	.word	gBattleTypeFlags
.Lfe13:
	.size	 BattleSetup_StartScriptedWildBattle,.Lfe13-BattleSetup_StartScriptedWildBattle
	.align	2, 0
	.globl	BattleSetup_StartScriptedDoubleWildBattle
	.type	 BattleSetup_StartScriptedDoubleWildBattle,function
	.thumb_func
BattleSetup_StartScriptedDoubleWildBattle:
	push	{lr}
	bl	ScriptContext2_Enable
	ldr	r1, .L47
	ldr	r0, .L47+0x4
	str	r0, [r1, #0x8]
	ldr	r1, .L47+0x8
	mov	r0, #0x1
	str	r0, [r1]
	bl	GetWildBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r0}
	bx	r0
.L48:
	.align	2, 0
.L47:
	.word	gMain
	.word	CB2_EndScriptedWildBattle
	.word	gBattleTypeFlags
.Lfe14:
	.size	 BattleSetup_StartScriptedDoubleWildBattle,.Lfe14-BattleSetup_StartScriptedDoubleWildBattle
	.align	2, 0
	.globl	BattleSetup_StartLatiBattle
	.type	 BattleSetup_StartLatiBattle,function
	.thumb_func
BattleSetup_StartLatiBattle:
	push	{lr}
	bl	ScriptContext2_Enable
	ldr	r1, .L50
	ldr	r0, .L50+0x4
	str	r0, [r1, #0x8]
	ldr	r1, .L50+0x8
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	str	r0, [r1]
	bl	GetWildBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r0}
	bx	r0
.L51:
	.align	2, 0
.L50:
	.word	gMain
	.word	CB2_EndScriptedWildBattle
	.word	gBattleTypeFlags
.Lfe15:
	.size	 BattleSetup_StartLatiBattle,.Lfe15-BattleSetup_StartLatiBattle
	.align	2, 0
	.globl	BattleSetup_StartLegendaryBattle
	.type	 BattleSetup_StartLegendaryBattle,function
	.thumb_func
BattleSetup_StartLegendaryBattle:
	push	{r4, lr}
	bl	ScriptContext2_Enable
	ldr	r1, .L99
	ldr	r0, .L99+0x4
	str	r0, [r1, #0x8]
	ldr	r4, .L99+0x8
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	str	r0, [r4]
	ldr	r0, .L99+0xc
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	add	r1, r0, #0
	ldr	r0, .L99+0x10
	cmp	r1, r0
	bne	.LCB566
	b	.L63	@long jump
.LCB566:
	cmp	r1, r0
	bhi	.L88	@cond_branch
	cmp	r1, #0xf3
	beq	.L61	@cond_branch
	cmp	r1, #0xf3
	bhi	.L89	@cond_branch
	cmp	r1, #0x96
	beq	.L58	@cond_branch
	cmp	r1, #0x96
	bls	.L57	@cond_branch
	cmp	r1, #0x97
	beq	.L59	@cond_branch
	b	.L57
.L100:
	.align	2, 0
.L99:
	.word	gMain
	.word	CB2_EndScriptedWildBattle
	.word	gBattleTypeFlags
	.word	gEnemyParty
	.word	0x17f
.L89:
	cmp	r1, #0xf9
	bne	.LCB593
	b	.L76	@long jump
.LCB593:
	cmp	r1, #0xf9
	bhi	.L91	@cond_branch
	cmp	r1, #0xf4
	beq	.L62	@cond_branch
	cmp	r1, #0xf5
	beq	.L60	@cond_branch
	b	.L57
.L91:
	cmp	r1, #0xfa
	bne	.LCB604
	b	.L77	@long jump
.LCB604:
	mov	r0, #0xbf
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L67	@cond_branch
	b	.L57
.L88:
	mov	r0, #0xf2
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bhi	.L92	@cond_branch
	sub	r0, r0, #0x1
	cmp	r1, r0
	bcc	.LCB618
	b	.L84	@long jump
.LCB618:
	sub	r0, r0, #0x61
	cmp	r1, r0
	bne	.LCB621
	b	.L75	@long jump
.LCB621:
	cmp	r1, r0
	bhi	.L93	@cond_branch
	sub	r0, r0, #0x2
	cmp	r1, r0
	bne	.LCB626
	b	.L71	@long jump
.LCB626:
	b	.L57
.L93:
	mov	r0, #0xf0
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bcc	.L57	@cond_branch
	ldr	r1, .L101
	b	.L95
.L102:
	.align	2, 0
.L101:
	.word	0x287
.L92:
	ldr	r0, .L103
	cmp	r1, r0
	bne	.LCB647
	b	.L85	@long jump
.LCB647:
	cmp	r1, r0
	bhi	.L94	@cond_branch
	sub	r0, r0, #0x2
	cmp	r1, r0
	bne	.LCB652
	b	.L82	@long jump
.LCB652:
	b	.L57
.L104:
	.align	2, 0
.L103:
	.word	0x1e7
.L94:
	ldr	r0, .L105
	cmp	r1, r0
	bne	.LCB664
	b	.L82	@long jump
.LCB664:
	add	r0, r0, #0x2
	cmp	r1, r0
	bne	.LCB667
	b	.L86	@long jump
.LCB667:
.L57:
	mov	r1, #0xfa
	lsl	r1, r1, #0x1
	b	.L95
.L106:
	.align	2, 0
.L105:
	.word	0x1eb
.L58:
	ldr	r1, .L107
	b	.L95
.L108:
	.align	2, 0
.L107:
	.word	0x1f3
.L59:
	ldr	r1, .L109
	mov	r0, #0xa
	bl	CreateBattleStartTask
	b	.L53
.L110:
	.align	2, 0
.L109:
	.word	0x209
.L60:
	ldr	r1, .L111
	b	.L96
.L112:
	.align	2, 0
.L111:
	.word	0x32f
.L61:
	ldr	r1, .L113
	b	.L96
.L114:
	.align	2, 0
.L113:
	.word	0x30f
.L62:
	ldr	r1, .L115
	b	.L96
.L116:
	.align	2, 0
.L115:
	.word	0x31e
.L63:
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x15
	orr	r0, r0, r1
	str	r0, [r4]
	ldr	r0, .L117
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x15]
	mov	r1, #0x1f
	and	r1, r1, r0
	cmp	r1, #0x1
	beq	.L65	@cond_branch
	cmp	r1, #0x3
	bne	.L64	@cond_branch
.L65:
	ldr	r1, .L117+0x4
	b	.L96
.L118:
	.align	2, 0
.L117:
	.word	gSaveBlock2Ptr
	.word	0x373
.L64:
	mov	r1, #0xd9
	lsl	r1, r1, #0x1
.L96:
	mov	r0, #0x17
	bl	CreateBattleStartTask
	b	.L53
.L67:
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	orr	r0, r0, r1
	str	r0, [r4]
	ldr	r0, .L119
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x15]
	mov	r1, #0x1f
	and	r1, r1, r0
	cmp	r1, #0x1
	beq	.L69	@cond_branch
	cmp	r1, #0x3
	bne	.L68	@cond_branch
.L69:
	ldr	r1, .L119+0x4
	b	.L97
.L120:
	.align	2, 0
.L119:
	.word	gSaveBlock2Ptr
	.word	0x373
.L68:
	mov	r1, #0xd9
	lsl	r1, r1, #0x1
.L97:
	mov	r0, #0x16
	bl	CreateBattleStartTask
	b	.L53
.L71:
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x17
	orr	r0, r0, r1
	str	r0, [r4]
	ldr	r0, .L121
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x15]
	mov	r1, #0x1f
	and	r1, r1, r0
	cmp	r1, #0x1
	beq	.L73	@cond_branch
	cmp	r1, #0x3
	bne	.L72	@cond_branch
.L73:
	ldr	r1, .L121+0x4
	b	.L98
.L122:
	.align	2, 0
.L121:
	.word	gSaveBlock2Ptr
	.word	0x373
.L72:
	mov	r1, #0xd9
	lsl	r1, r1, #0x1
.L98:
	mov	r0, #0x18
	bl	CreateBattleStartTask
	b	.L53
.L75:
	mov	r1, #0xf9
	lsl	r1, r1, #0x1
	b	.L95
.L76:
	mov	r1, #0xdb
	lsl	r1, r1, #0x2
	b	.L95
.L77:
	ldr	r1, .L123
	b	.L95
.L124:
	.align	2, 0
.L123:
	.word	0x322
.L82:
	ldr	r1, .L125
	b	.L95
.L126:
	.align	2, 0
.L125:
	.word	0x296
.L84:
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	b	.L95
.L85:
	ldr	r1, .L127
.L95:
	mov	r0, #0x0
	bl	CreateBattleStartTask
	b	.L53
.L128:
	.align	2, 0
.L127:
	.word	0x2b2
.L86:
	mov	r1, #0xa9
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	CreateBattleStartTask
.L53:
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 BattleSetup_StartLegendaryBattle,.Lfe16-BattleSetup_StartLegendaryBattle
	.align	2, 0
	.globl	StartGroudonKyogreBattle
	.type	 StartGroudonKyogreBattle,function
	.thumb_func
StartGroudonKyogreBattle:
	push	{lr}
	bl	ScriptContext2_Enable
	ldr	r1, .L132
	ldr	r0, .L132+0x4
	str	r0, [r1, #0x8]
	ldr	r1, .L132+0x8
	mov	r0, #0xc0
	lsl	r0, r0, #0x6
	str	r0, [r1]
	ldr	r0, .L132+0xc
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L130	@cond_branch
	mov	r1, #0xd9
	lsl	r1, r1, #0x1
	mov	r0, #0xb
	bl	CreateBattleStartTask
	b	.L131
.L133:
	.align	2, 0
.L132:
	.word	gMain
	.word	CB2_EndScriptedWildBattle
	.word	gBattleTypeFlags
	.word	gGameVersion
.L130:
	mov	r1, #0xd9
	lsl	r1, r1, #0x1
	mov	r0, #0x6
	bl	CreateBattleStartTask
.L131:
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 StartGroudonKyogreBattle,.Lfe17-StartGroudonKyogreBattle
	.align	2, 0
	.globl	StartRegiBattle
	.type	 StartRegiBattle,function
	.thumb_func
StartRegiBattle:
	push	{lr}
	bl	ScriptContext2_Enable
	ldr	r1, .L144
	ldr	r0, .L144+0x4
	str	r0, [r1, #0x8]
	ldr	r1, .L144+0x8
	mov	r0, #0xc0
	lsl	r0, r0, #0x7
	str	r0, [r1]
	ldr	r0, .L144+0xc
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	add	r2, r1, #0
	mov	r0, #0xbd
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L137	@cond_branch
	cmp	r1, r0
	bgt	.L141	@cond_branch
	sub	r0, r0, #0x1
	cmp	r1, r0
	beq	.L136	@cond_branch
	b	.L139
.L145:
	.align	2, 0
.L144:
	.word	gMain
	.word	CB2_EndScriptedWildBattle
	.word	gBattleTypeFlags
	.word	gEnemyParty
.L141:
	ldr	r0, .L146
	cmp	r2, r0
	beq	.L138	@cond_branch
	b	.L139
.L147:
	.align	2, 0
.L146:
	.word	0x17b
.L136:
	mov	r2, #0x15
	b	.L135
.L137:
	mov	r2, #0x13
	b	.L135
.L138:
	mov	r2, #0x14
	b	.L135
.L139:
	mov	r2, #0xa
.L135:
	ldr	r0, .L148
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x1f
	and	r0, r0, r1
	cmp	r0, #0x3
	bne	.L142	@cond_branch
	ldr	r1, .L148+0x4
	add	r0, r2, #0
	bl	CreateBattleStartTask
	b	.L143
.L149:
	.align	2, 0
.L148:
	.word	gSaveBlock2Ptr
	.word	0x2c6
.L142:
	ldr	r1, .L150
	add	r0, r2, #0
	bl	CreateBattleStartTask
.L143:
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r0}
	bx	r0
.L151:
	.align	2, 0
.L150:
	.word	0x1b1
.Lfe18:
	.size	 StartRegiBattle,.Lfe18-StartRegiBattle
	.align	2, 0
	.type	 CB2_EndWildBattle,function
	.thumb_func
CB2_EndWildBattle:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	ldr	r2, .L155
	mov	r0, sp
	bl	CpuSet
	mov	r0, #0x0
	mov	r1, #0x80
	bl	ResetOamRange
	ldr	r0, .L155+0x4
	ldrb	r0, [r0]
	bl	IsPlayerDefeated
	cmp	r0, #0x1
	bne	.L153	@cond_branch
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L153	@cond_branch
	bl	InBattlePike
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L153	@cond_branch
	ldr	r0, .L155+0x8
	bl	SetMainCallback2
	b	.L154
.L156:
	.align	2, 0
.L155:
	.word	0x1000100
	.word	gBattleOutcome
	.word	CB2_WhiteOut
.L153:
	ldr	r0, .L157
	bl	SetMainCallback2
	ldr	r1, .L157+0x4
	ldr	r0, .L157+0x8
	str	r0, [r1]
.L154:
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L158:
	.align	2, 0
.L157:
	.word	CB2_ReturnToField
	.word	gFieldCallback
	.word	sub_80AF6F0
.Lfe19:
	.size	 CB2_EndWildBattle,.Lfe19-CB2_EndWildBattle
	.align	2, 0
	.type	 CB2_EndScriptedWildBattle,function
	.thumb_func
CB2_EndScriptedWildBattle:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	ldr	r2, .L164
	mov	r0, sp
	bl	CpuSet
	mov	r0, #0x0
	mov	r1, #0x80
	bl	ResetOamRange
	ldr	r0, .L164+0x4
	ldrb	r0, [r0]
	bl	IsPlayerDefeated
	cmp	r0, #0x1
	bne	.L160	@cond_branch
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L161	@cond_branch
	ldr	r0, .L164+0x8
	bl	SetMainCallback2
	b	.L163
.L165:
	.align	2, 0
.L164:
	.word	0x1000100
	.word	gBattleOutcome
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.L161:
	ldr	r0, .L166
	bl	SetMainCallback2
	b	.L163
.L167:
	.align	2, 0
.L166:
	.word	CB2_WhiteOut
.L160:
	ldr	r0, .L168
	bl	SetMainCallback2
.L163:
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L169:
	.align	2, 0
.L168:
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe20:
	.size	 CB2_EndScriptedWildBattle,.Lfe20-CB2_EndScriptedWildBattle
	.align	2, 0
	.globl	BattleSetup_GetTerrainId
	.type	 BattleSetup_GetTerrainId,function
	.thumb_func
BattleSetup_GetTerrainId:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	PlayerGetDestCoords
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileBehaviorAt
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	MetatileBehavior_IsTallGrass
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L171	@cond_branch
	bl	GetCurrentTimeOfDay
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	beq	.L173	@cond_branch
	cmp	r0, #0x3
	beq	.L174	@cond_branch
	mov	r0, #0x0
	b	.L201
.L173:
	mov	r0, #0xa
	b	.L201
.L174:
	mov	r0, #0xb
	b	.L201
.L171:
	add	r0, r4, #0
	bl	MetatileBehavior_IsLongGrass
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L177	@cond_branch
	mov	r0, #0x1
	b	.L201
.L177:
	add	r0, r4, #0
	bl	MetatileBehavior_IsSandOrDeepSand
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L200	@cond_branch
	ldr	r0, .L206
	ldrb	r0, [r0, #0x17]
	sub	r0, r0, #0x1
	cmp	r0, #0x8
	bhi	.L179	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L206+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L207:
	.align	2, 0
.L206:
	.word	gMapHeader
	.word	.L191
	.align	2, 0
	.align	2, 0
.L191:
	.word	.L179
	.word	.L179
	.word	.L179
	.word	.L183
	.word	.L188
	.word	.L189
	.word	.L179
	.word	.L203
	.word	.L203
.L183:
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	MetatileBehavior_IsIndoorEncounter
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L184	@cond_branch
.L203:
	mov	r0, #0x8
	b	.L201
.L184:
	add	r0, r4, #0
	bl	MetatileBehavior_IsSurfableWaterOrUnderwater
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L202	@cond_branch
	mov	r0, #0x7
	b	.L201
.L188:
	mov	r0, #0x3
	b	.L201
.L189:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	MetatileBehavior_IsSurfableWaterOrUnderwater
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L204	@cond_branch
	b	.L205
.L179:
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	MetatileBehavior_IsDeepOrOceanWater
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L204	@cond_branch
	add	r0, r4, #0
	bl	MetatileBehavior_IsSurfableWaterOrUnderwater
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L202	@cond_branch
	add	r0, r4, #0
	bl	MetatileBehavior_IsMountain
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L195	@cond_branch
	mov	r0, #0x6
	b	.L201
.L195:
	mov	r0, #0x8
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L196	@cond_branch
	add	r0, r4, #0
	bl	MetatileBehavior_GetBridgeType
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L197	@cond_branch
.L202:
	mov	r0, #0x5
	b	.L201
.L197:
	add	r0, r4, #0
	bl	MetatileBehavior_IsBridge
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L196	@cond_branch
.L204:
	mov	r0, #0x4
	b	.L201
.L196:
	ldr	r0, .L208
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0xe0
	lsl	r0, r0, #0x5
	cmp	r1, r0
	beq	.L200	@cond_branch
	bl	GetSav1Weather
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x8
	beq	.L200	@cond_branch
.L205:
	mov	r0, #0x9
	b	.L201
.L209:
	.align	2, 0
.L208:
	.word	gSaveBlock1Ptr
.L200:
	mov	r0, #0x2
.L201:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 BattleSetup_GetTerrainId,.Lfe21-BattleSetup_GetTerrainId
	.align	2, 0
	.type	 GetBattleTransitionTypeByMap,function
	.thumb_func
GetBattleTransitionTypeByMap:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	PlayerGetDestCoords
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileBehaviorAt
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	Overworld_GetFlashLevel
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L211	@cond_branch
	mov	r0, #0x2
	b	.L218
.L211:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	MetatileBehavior_IsSurfableWaterOrUnderwater
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L212	@cond_branch
	ldr	r0, .L219
	ldrb	r0, [r0, #0x17]
	cmp	r0, #0x4
	beq	.L214	@cond_branch
	cmp	r0, #0x5
	beq	.L215	@cond_branch
	mov	r0, #0x0
	b	.L218
.L220:
	.align	2, 0
.L219:
	.word	gMapHeader
.L214:
	mov	r0, #0x1
	b	.L218
.L215:
.L212:
	mov	r0, #0x3
.L218:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 GetBattleTransitionTypeByMap,.Lfe22-GetBattleTransitionTypeByMap
	.align	2, 0
	.type	 GetSumOfPlayerPartyLevel,function
	.thumb_func
GetSumOfPlayerPartyLevel:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r7, #0x0
	mov	r6, #0x0
.L225:
	mov	r0, #0x64
	mov	r1, r6
	mul	r1, r1, r0
	ldr	r0, .L229
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	add	r1, r0, #0
	ldr	r0, .L229+0x4
	cmp	r1, r0
	beq	.L224	@cond_branch
	cmp	r1, #0
	beq	.L224	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L224	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r0, r7, r0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	sub	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	beq	.L223	@cond_branch
.L224:
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L225	@cond_branch
.L223:
	add	r0, r7, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L230:
	.align	2, 0
.L229:
	.word	gPlayerParty
	.word	0x4b7
.Lfe23:
	.size	 GetSumOfPlayerPartyLevel,.Lfe23-GetSumOfPlayerPartyLevel
	.align	2, 0
	.type	 GetSumOfEnemyPartyLevel,function
	.thumb_func
GetSumOfEnemyPartyLevel:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	ldr	r5, .L261
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r2, r1, r5
	add	r0, r2, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, r4
	bcs	.L232	@cond_branch
	add	r4, r0, #0
.L232:
	mov	r3, #0x0
	ldrb	r0, [r2]
	cmp	r0, #0x1
	beq	.L240	@cond_branch
	cmp	r0, #0x1
	bgt	.L260	@cond_branch
	cmp	r0, #0
	beq	.L234	@cond_branch
	b	.L233
.L262:
	.align	2, 0
.L261:
	.word	gTrainers
.L260:
	cmp	r0, #0x2
	beq	.L246	@cond_branch
	cmp	r0, #0x3
	beq	.L252	@cond_branch
	b	.L233
.L234:
	add	r0, r5, #0
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r1, [r0]
	mov	r2, #0x0
	cmp	r3, r4
	bcs	.L233	@cond_branch
.L238:
	lsl	r0, r2, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	add	r0, r3, r0
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r4
	bcc	.L238	@cond_branch
	b	.L233
.L240:
	add	r0, r5, #0
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r1, [r0]
	mov	r2, #0x0
	cmp	r3, r4
	bcs	.L233	@cond_branch
.L244:
	lsl	r0, r2, #0x5
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	add	r0, r3, r0
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r4
	bcc	.L244	@cond_branch
	b	.L233
.L246:
	add	r0, r5, #0
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r1, [r0]
	mov	r2, #0x0
	cmp	r3, r4
	bcs	.L233	@cond_branch
.L250:
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	add	r0, r3, r0
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r4
	bcc	.L250	@cond_branch
	b	.L233
.L252:
	add	r0, r5, #0
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r1, [r0]
	mov	r2, #0x0
	cmp	r3, r4
	bcs	.L233	@cond_branch
.L256:
	lsl	r0, r2, #0x3
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	add	r0, r3, r0
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r4
	bcc	.L256	@cond_branch
.L233:
	add	r0, r3, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 GetSumOfEnemyPartyLevel,.Lfe24-GetSumOfEnemyPartyLevel
	.align	2, 0
	.globl	GetWildBattleTransition
	.type	 GetWildBattleTransition,function
	.thumb_func
GetWildBattleTransition:
	push	{r4, r5, r6, lr}
	bl	GetBattleTransitionTypeByMap
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	ldr	r0, .L272
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	bl	GetSumOfPlayerPartyLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bcs	.L264	@cond_branch
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L265	@cond_branch
	mov	r0, #0x0
	b	.L270
.L273:
	.align	2, 0
.L272:
	.word	gEnemyParty
.L265:
	ldr	r0, .L274
	lsl	r1, r5, #0x1
	b	.L271
.L275:
	.align	2, 0
.L274:
	.word	sBattleTransitionTable_Wild
.L264:
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L268	@cond_branch
	ldr	r0, .L276
	lsl	r1, r6, #0x1
	add	r0, r0, #0x1
.L271:
	add	r1, r1, r0
	ldrb	r0, [r1]
	b	.L270
.L277:
	.align	2, 0
.L276:
	.word	sBattleTransitionTable_Wild
.L268:
	mov	r0, #0xa
.L270:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 GetWildBattleTransition,.Lfe25-GetWildBattleTransition
	.align	2, 0
	.globl	GetTrainerBattleTransition
	.type	 GetTrainerBattleTransition,function
	.thumb_func
GetTrainerBattleTransition:
	push	{r4, r5, r6, lr}
	ldr	r4, .L298
	ldrh	r1, [r4]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L295	@cond_branch
	ldr	r1, .L298+0x4
	ldrh	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	cmp	r1, #0x1f
	bne	.L280	@cond_branch
	add	r1, r2, #0
	ldr	r0, .L298+0x8
	cmp	r1, r0
	bne	.L281	@cond_branch
	mov	r0, #0xc
	b	.L294
.L299:
	.align	2, 0
.L298:
	.word	gTrainerBattleOpponent_A
	.word	gTrainers
	.word	0x105
.L281:
	mov	r0, #0x83
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L282	@cond_branch
	mov	r0, #0xd
	b	.L294
.L282:
	ldr	r0, .L300
	cmp	r1, r0
	bne	.L283	@cond_branch
	mov	r0, #0xe
	b	.L294
.L301:
	.align	2, 0
.L300:
	.word	0x107
.L283:
	mov	r0, #0x84
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L295	@cond_branch
	mov	r0, #0xf
	b	.L294
.L280:
	cmp	r1, #0x26
	bne	.L285	@cond_branch
.L295:
	mov	r0, #0x10
	b	.L294
.L285:
	cmp	r1, #0x9
	beq	.L287	@cond_branch
	cmp	r1, #0x35
	beq	.L287	@cond_branch
	cmp	r1, #0x31
	bne	.L286	@cond_branch
.L287:
	mov	r0, #0x12
	b	.L294
.L286:
	cmp	r1, #0x3
	beq	.L289	@cond_branch
	cmp	r1, #0xd
	beq	.L289	@cond_branch
	cmp	r1, #0xb
	bne	.L288	@cond_branch
.L289:
	mov	r0, #0x11
	b	.L294
.L288:
	ldrb	r0, [r0, #0x18]
	mov	r5, #0x1
	cmp	r0, #0x1
	bne	.L290	@cond_branch
	mov	r5, #0x2
.L290:
	bl	GetBattleTransitionTypeByMap
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrh	r0, [r4]
	add	r1, r5, #0
	bl	GetSumOfEnemyPartyLevel
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	bl	GetSumOfPlayerPartyLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bcc	.L292	@cond_branch
	ldr	r0, .L302
	lsl	r1, r6, #0x1
	add	r0, r0, #0x1
	b	.L297
.L303:
	.align	2, 0
.L302:
	.word	sBattleTransitionTable_Trainer
.L292:
	ldr	r0, .L304
	lsl	r1, r6, #0x1
.L297:
	add	r1, r1, r0
	ldrb	r0, [r1]
.L294:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L305:
	.align	2, 0
.L304:
	.word	sBattleTransitionTable_Trainer
.Lfe26:
	.size	 GetTrainerBattleTransition,.Lfe26-GetTrainerBattleTransition
	.align	2, 0
	.globl	GetSpecialBattleTransition
	.type	 GetSpecialBattleTransition,function
	.thumb_func
GetSpecialBattleTransition:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L339
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	bl	GetSumOfPlayerPartyLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bcs	.L307	@cond_branch
	cmp	r5, #0xa
	beq	.L312	@cond_branch
	cmp	r5, #0xa
	bgt	.L316	@cond_branch
	cmp	r5, #0x3
	beq	.L313	@cond_branch
	b	.L308
.L340:
	.align	2, 0
.L339:
	.word	gEnemyParty
.L316:
	cmp	r5, #0xd
	bgt	.L308	@cond_branch
	mov	r0, #0x4
	b	.L329
.L312:
	ldr	r4, .L341
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	b	.L331
.L342:
	.align	2, 0
.L341:
	.word	sBattleTransitionTable_BattlePyramid
.L313:
	ldr	r4, .L343
	bl	Random
	and	r5, r5, r0
	lsl	r0, r5, #0x10
	b	.L333
.L344:
	.align	2, 0
.L343:
	.word	sBattleTransitionTable_BattleDome
.L308:
	ldr	r0, .L345
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x3
	beq	.L318	@cond_branch
	ldr	r4, .L345+0x4
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L335
.L346:
	.align	2, 0
.L345:
	.word	0x40ce
	.word	sBattleTransitionTable_BattleFrontier
.L307:
	cmp	r5, #0xa
	beq	.L323	@cond_branch
	cmp	r5, #0xa
	bgt	.L327	@cond_branch
	cmp	r5, #0x3
	beq	.L324	@cond_branch
	b	.L319
.L327:
	cmp	r5, #0xd
	bgt	.L319	@cond_branch
	mov	r0, #0x3
	b	.L329
.L323:
	ldr	r4, .L347
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	b	.L331
.L348:
	.align	2, 0
.L347:
	.word	sBattleTransitionTable_BattlePyramid
.L324:
	ldr	r4, .L349
	bl	Random
	and	r5, r5, r0
	lsl	r0, r5, #0x10
	b	.L333
.L350:
	.align	2, 0
.L349:
	.word	sBattleTransitionTable_BattleDome
.L319:
	ldr	r0, .L351
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x3
	beq	.L318	@cond_branch
	ldr	r4, .L351+0x4
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L335
.L352:
	.align	2, 0
.L351:
	.word	0x40ce
	.word	sBattleTransitionTable_BattleFrontier
.L318:
	ldr	r0, .L353
	ldr	r1, [r0]
	ldr	r2, .L353+0x4
	add	r0, r1, r2
	ldrh	r0, [r0]
	lsl	r2, r0, #0x2
	mov	r3, #0xc4
	lsl	r3, r3, #0x4
	add	r1, r1, r3
	add	r2, r1, r2
	lsl	r0, r0, #0x1
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrh	r2, [r2]
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L353+0x8
.L335:
	mov	r1, #0xc
.L331:
	bl	__umodsi3
	lsl	r0, r0, #0x10
.L333:
	lsr	r0, r0, #0x10
	add	r0, r0, r4
	ldrb	r0, [r0]
.L329:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L354:
	.align	2, 0
.L353:
	.word	gSaveBlock2Ptr
	.word	0xc3e
	.word	sBattleTransitionTable_BattleFrontier
.Lfe27:
	.size	 GetSpecialBattleTransition,.Lfe27-GetSpecialBattleTransition
	.align	2, 0
	.globl	ChooseStarter
	.type	 ChooseStarter,function
	.thumb_func
ChooseStarter:
	push	{lr}
	ldr	r0, .L356
	bl	SetMainCallback2
	ldr	r1, .L356+0x4
	ldr	r0, .L356+0x8
	str	r0, [r1, #0x8]
	pop	{r0}
	bx	r0
.L357:
	.align	2, 0
.L356:
	.word	CB2_ChooseStarter
	.word	gMain
	.word	CB2_GiveStarter
.Lfe28:
	.size	 ChooseStarter,.Lfe28-ChooseStarter
	.align	2, 0
	.type	 CB2_GiveStarter,function
	.thumb_func
CB2_GiveStarter:
	push	{lr}
	add	sp, sp, #-0x8
	ldr	r0, .L359
	bl	GetVarPointer
	ldr	r2, .L359+0x4
	ldrh	r1, [r2]
	strh	r1, [r0]
	ldrh	r0, [r2]
	bl	GetStarterPokemon
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x0
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r1, #0x5
	mov	r2, #0x0
	mov	r3, #0x0
	bl	ScriptGiveMon
	bl	ResetTasks
	bl	PlayBattleBGM
	ldr	r0, .L359+0x8
	bl	SetMainCallback2
	mov	r0, #0x0
	bl	BattleTransition_Start
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.L360:
	.align	2, 0
.L359:
	.word	0x4023
	.word	gSpecialVar_Result
	.word	CB2_StartFirstBattle
.Lfe29:
	.size	 CB2_GiveStarter,.Lfe29-CB2_GiveStarter
	.align	2, 0
	.type	 CB2_StartFirstBattle,function
	.thumb_func
CB2_StartFirstBattle:
	push	{lr}
	bl	UpdatePaletteFade
	bl	RunTasks
	bl	IsBattleTransitionDone
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L362	@cond_branch
	ldr	r1, .L363
	mov	r0, #0x10
	str	r0, [r1]
	ldr	r1, .L363+0x4
	ldr	r0, .L363+0x8
	str	r0, [r1, #0x8]
	bl	FreeAllWindowBuffers
	ldr	r0, .L363+0xc
	bl	SetMainCallback2
	bl	RestartWildEncounterImmunitySteps
	bl	ClearPoisonStepCounter
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
.L362:
	pop	{r0}
	bx	r0
.L364:
	.align	2, 0
.L363:
	.word	gBattleTypeFlags
	.word	gMain
	.word	CB2_EndFirstBattle
	.word	CB2_InitBattle
.Lfe30:
	.size	 CB2_StartFirstBattle,.Lfe30-CB2_StartFirstBattle
	.align	2, 0
	.type	 CB2_EndFirstBattle,function
	.thumb_func
CB2_EndFirstBattle:
	push	{lr}
	bl	Overworld_ClearSavedMusic
	ldr	r0, .L366
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L367:
	.align	2, 0
.L366:
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe31:
	.size	 CB2_EndFirstBattle,.Lfe31-CB2_EndFirstBattle
	.align	2, 0
	.type	 TryUpdateGymLeaderRematchFromWild,function
	.thumb_func
TryUpdateGymLeaderRematchFromWild:
	push	{lr}
	mov	r0, #0x8
	bl	GetGameStat
	mov	r1, #0x3c
	bl	__umodsi3
	cmp	r0, #0
	bne	.L369	@cond_branch
	bl	UpdateGymLeaderRematch
.L369:
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 TryUpdateGymLeaderRematchFromWild,.Lfe32-TryUpdateGymLeaderRematchFromWild
	.align	2, 0
	.type	 TryUpdateGymLeaderRematchFromTrainer,function
	.thumb_func
TryUpdateGymLeaderRematchFromTrainer:
	push	{lr}
	mov	r0, #0x9
	bl	GetGameStat
	mov	r1, #0x14
	bl	__umodsi3
	cmp	r0, #0
	bne	.L371	@cond_branch
	bl	UpdateGymLeaderRematch
.L371:
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 TryUpdateGymLeaderRematchFromTrainer,.Lfe33-TryUpdateGymLeaderRematchFromTrainer
	.align	2, 0
	.type	 TrainerBattleLoadArg32,function
	.thumb_func
TrainerBattleLoadArg32:
	add	r2, r0, #0
	ldrb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x2]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	bx	lr
.Lfe34:
	.size	 TrainerBattleLoadArg32,.Lfe34-TrainerBattleLoadArg32
	.align	2, 0
	.type	 TrainerBattleLoadArg16,function
	.thumb_func
TrainerBattleLoadArg16:
	add	r1, r0, #0
	ldrb	r0, [r1]
	ldrb	r1, [r1, #0x1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bx	lr
.Lfe35:
	.size	 TrainerBattleLoadArg16,.Lfe35-TrainerBattleLoadArg16
	.align	2, 0
	.type	 TrainerBattleLoadArg8,function
	.thumb_func
TrainerBattleLoadArg8:
	ldrb	r0, [r0]
	bx	lr
.Lfe36:
	.size	 TrainerBattleLoadArg8,.Lfe36-TrainerBattleLoadArg8
	.align	2, 0
	.type	 GetTrainerAFlag,function
	.thumb_func
GetTrainerAFlag:
	ldr	r1, .L376
	mov	r2, #0xa0
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r1, [r1]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bx	lr
.L377:
	.align	2, 0
.L376:
	.word	gTrainerBattleOpponent_A
.Lfe37:
	.size	 GetTrainerAFlag,.Lfe37-GetTrainerAFlag
	.align	2, 0
	.type	 GetTrainerBFlag,function
	.thumb_func
GetTrainerBFlag:
	ldr	r1, .L379
	mov	r2, #0xa0
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r1, [r1]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bx	lr
.L380:
	.align	2, 0
.L379:
	.word	gTrainerBattleOpponent_B
.Lfe38:
	.size	 GetTrainerBFlag,.Lfe38-GetTrainerBFlag
	.align	2, 0
	.type	 IsPlayerDefeated,function
	.thumb_func
IsPlayerDefeated:
	push	{lr}
	sub	r0, r0, #0x1
	cmp	r0, #0x6
	bhi	.L390	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L393
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L394:
	.align	2, 0
.L393:
	.word	.L391
	.align	2, 0
	.align	2, 0
.L391:
	.word	.L389
	.word	.L384
	.word	.L384
	.word	.L389
	.word	.L389
	.word	.L389
	.word	.L389
.L384:
	mov	r0, #0x1
	b	.L392
.L389:
.L390:
	mov	r0, #0x0
.L392:
	pop	{r1}
	bx	r1
.Lfe39:
	.size	 IsPlayerDefeated,.Lfe39-IsPlayerDefeated
	.align	2, 0
	.globl	ResetTrainerOpponentIds
	.type	 ResetTrainerOpponentIds,function
	.thumb_func
ResetTrainerOpponentIds:
	ldr	r0, .L396
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L396+0x4
	strh	r1, [r0]
	bx	lr
.L397:
	.align	2, 0
.L396:
	.word	gTrainerBattleOpponent_A
	.word	gTrainerBattleOpponent_B
.Lfe40:
	.size	 ResetTrainerOpponentIds,.Lfe40-ResetTrainerOpponentIds
	.align	2, 0
	.type	 InitTrainerBattleVariables,function
	.thumb_func
InitTrainerBattleVariables:
	push	{lr}
	ldr	r0, .L402
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L402+0x4
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L399	@cond_branch
	ldr	r0, .L402+0x8
	str	r1, [r0]
	ldr	r0, .L402+0xc
	str	r1, [r0]
	ldr	r0, .L402+0x10
	b	.L401
.L403:
	.align	2, 0
.L402:
	.word	sTrainerBattleMode
	.word	gApproachingTrainerId
	.word	sTrainerAIntroSpeech
	.word	sTrainerADefeatSpeech
	.word	sTrainerABattleScriptRetAddr
.L399:
	ldr	r0, .L404
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L404+0x4
	str	r1, [r0]
	ldr	r0, .L404+0x8
.L401:
	str	r1, [r0]
	ldr	r1, .L404+0xc
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, .L404+0x10
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L404+0x14
	str	r1, [r0]
	ldr	r0, .L404+0x18
	str	r1, [r0]
	pop	{r0}
	bx	r0
.L405:
	.align	2, 0
.L404:
	.word	sTrainerBIntroSpeech
	.word	sTrainerBDefeatSpeech
	.word	sTrainerBBattleScriptRetAddr
	.word	sTrainerObjectEventLocalId
	.word	sTrainerVictorySpeech
	.word	sTrainerCannotBattleSpeech
	.word	sTrainerBattleEndScript
.Lfe41:
	.size	 InitTrainerBattleVariables,.Lfe41-InitTrainerBattleVariables
	.align	2, 0
	.type	 TrainerBattleLoadArgs,function
	.thumb_func
TrainerBattleLoadArgs:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
.L413:
	ldrb	r0, [r4, #0x4]
	cmp	r0, #0x6
	bhi	.L414	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L432
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L433:
	.align	2, 0
.L432:
	.word	.L429
	.align	2, 0
	.align	2, 0
.L429:
	.word	.L415
	.word	.L417
	.word	.L419
	.word	.L421
	.word	.L423
	.word	.L425
	.word	.L410
.L415:
	add	r0, r5, #0
	bl	TrainerBattleLoadArg8
	ldr	r1, [r4]
	strb	r0, [r1]
	add	r5, r5, #0x1
	b	.L414
.L417:
	add	r0, r5, #0
	bl	TrainerBattleLoadArg16
	ldr	r1, [r4]
	strh	r0, [r1]
	add	r5, r5, #0x2
	b	.L414
.L419:
	add	r0, r5, #0
	bl	TrainerBattleLoadArg32
	ldr	r1, [r4]
	str	r0, [r1]
	add	r5, r5, #0x4
	b	.L414
.L421:
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L414
.L423:
	ldr	r1, [r4]
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L414
.L425:
	ldr	r1, [r4]
	mov	r0, #0x0
	str	r0, [r1]
.L414:
	add	r4, r4, #0x8
	b	.L413
.L410:
	ldr	r0, [r4]
	str	r5, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 TrainerBattleLoadArgs,.Lfe42-TrainerBattleLoadArgs
	.align	2, 0
	.globl	SetMapVarsToTrainer
	.type	 SetMapVarsToTrainer,function
	.thumb_func
SetMapVarsToTrainer:
	push	{lr}
	ldr	r0, .L436
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L435	@cond_branch
	ldr	r0, .L436+0x4
	strh	r1, [r0]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L436+0x8
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	GetObjectEventIdByLocalIdAndMap
	ldr	r1, .L436+0xc
	strb	r0, [r1]
.L435:
	pop	{r0}
	bx	r0
.L437:
	.align	2, 0
.L436:
	.word	sTrainerObjectEventLocalId
	.word	gSpecialVar_LastTalked
	.word	gSaveBlock1Ptr
	.word	gSelectedObjectEvent
.Lfe43:
	.size	 SetMapVarsToTrainer,.Lfe43-SetMapVarsToTrainer
	.align	2, 0
	.globl	BattleSetup_ConfigureTrainerBattle
	.type	 BattleSetup_ConfigureTrainerBattle,function
	.thumb_func
BattleSetup_ConfigureTrainerBattle:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	TrainerBattleLoadArg8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xb
	beq	.L439	@cond_branch
	bl	InitTrainerBattleVariables
.L439:
	ldr	r4, .L472
	add	r0, r5, #0
	bl	TrainerBattleLoadArg8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	ldrh	r0, [r4]
	sub	r0, r0, #0x1
	cmp	r0, #0xb
	bls	.LCB2889
	b	.L459	@long jump
.LCB2889:
	lsl	r0, r0, #0x2
	ldr	r1, .L472+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L473:
	.align	2, 0
.L472:
	.word	sTrainerBattleMode
	.word	.L462
	.align	2, 0
	.align	2, 0
.L462:
	.word	.L446
	.word	.L443
	.word	.L441
	.word	.L442
	.word	.L450
	.word	.L448
	.word	.L449
	.word	.L448
	.word	.L451
	.word	.L454
	.word	.L455
	.word	.L456
.L441:
	ldr	r0, .L474
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	ldr	r0, .L474+0x4
	b	.L463
.L475:
	.align	2, 0
.L474:
	.word	sOrdinaryNoIntroBattleParams
	.word	EventScript_DoNoIntroTrainerBattle
.L442:
	ldr	r0, .L476
	b	.L464
.L477:
	.align	2, 0
.L476:
	.word	sDoubleBattleParams
.L443:
	ldr	r0, .L478
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L444	@cond_branch
	ldr	r0, .L478+0x4
	b	.L465
.L479:
	.align	2, 0
.L478:
	.word	gApproachingTrainerId
	.word	sContinueScriptBattleParams
.L444:
	ldr	r0, .L480
	b	.L470
.L481:
	.align	2, 0
.L480:
	.word	sTrainerBContinueScriptBattleParams
.L446:
	ldr	r0, .L482
	b	.L465
.L483:
	.align	2, 0
.L482:
	.word	sContinueScriptBattleParams
.L448:
	ldr	r0, .L484
.L464:
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	bl	SetMapVarsToTrainer
	ldr	r0, .L484+0x4
	b	.L463
.L485:
	.align	2, 0
.L484:
	.word	sContinueScriptDoubleBattleParams
	.word	EventScript_TryDoDoubleTrainerBattle
.L449:
	ldr	r0, .L486
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	bl	SetMapVarsToTrainer
	ldr	r4, .L486+0x4
	ldrh	r0, [r4]
	bl	GetRematchTrainerId
	strh	r0, [r4]
	ldr	r0, .L486+0x8
	b	.L463
.L487:
	.align	2, 0
.L486:
	.word	sDoubleBattleParams
	.word	gTrainerBattleOpponent_A
	.word	EventScript_TryDoDoubleRematchBattle
.L450:
	ldr	r0, .L488
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	bl	SetMapVarsToTrainer
	ldr	r4, .L488+0x4
	ldrh	r0, [r4]
	bl	GetRematchTrainerId
	strh	r0, [r4]
	ldr	r0, .L488+0x8
	b	.L463
.L489:
	.align	2, 0
.L488:
	.word	sOrdinaryBattleParams
	.word	gTrainerBattleOpponent_A
	.word	EventScript_TryDoRematchBattle
.L451:
	ldr	r0, .L490
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L452	@cond_branch
	ldr	r0, .L490+0x4
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	bl	SetMapVarsToTrainer
	ldr	r0, .L490+0x8
	ldrb	r0, [r0]
	bl	LocalIdToPyramidTrainerId
	ldr	r1, .L490+0xc
	b	.L466
.L491:
	.align	2, 0
.L490:
	.word	gApproachingTrainerId
	.word	sOrdinaryBattleParams
	.word	gSpecialVar_LastTalked
	.word	gTrainerBattleOpponent_A
.L452:
	ldr	r0, .L492
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	ldr	r0, .L492+0x4
	ldrb	r0, [r0]
	bl	LocalIdToPyramidTrainerId
.L471:
	ldr	r1, .L492+0x8
.L466:
	strh	r0, [r1]
	b	.L461
.L493:
	.align	2, 0
.L492:
	.word	sTrainerBOrdinaryBattleParams
	.word	gSpecialVar_LastTalked
	.word	gTrainerBattleOpponent_B
.L454:
	ldr	r0, .L494
	b	.L467
.L495:
	.align	2, 0
.L494:
	.word	sOrdinaryBattleParams
.L455:
	ldr	r0, .L496
.L467:
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	ldr	r0, .L496+0x4
	ldr	r0, [r0]
	b	.L463
.L497:
	.align	2, 0
.L496:
	.word	sTrainerBOrdinaryBattleParams
	.word	sTrainerBattleEndScript
.L456:
	ldr	r0, .L498
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L457	@cond_branch
	ldr	r0, .L498+0x4
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	bl	SetMapVarsToTrainer
	ldr	r0, .L498+0x8
	ldrb	r0, [r0]
	bl	LocalIdToHillTrainerId
	ldr	r1, .L498+0xc
	b	.L466
.L499:
	.align	2, 0
.L498:
	.word	gApproachingTrainerId
	.word	sOrdinaryBattleParams
	.word	gSpecialVar_LastTalked
	.word	gTrainerBattleOpponent_A
.L457:
	ldr	r0, .L500
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	ldr	r0, .L500+0x4
	ldrb	r0, [r0]
	bl	LocalIdToHillTrainerId
	b	.L471
.L501:
	.align	2, 0
.L500:
	.word	sTrainerBOrdinaryBattleParams
	.word	gSpecialVar_LastTalked
.L459:
	ldr	r0, .L502
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L460	@cond_branch
	ldr	r0, .L502+0x4
.L465:
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	bl	SetMapVarsToTrainer
	b	.L461
.L503:
	.align	2, 0
.L502:
	.word	gApproachingTrainerId
	.word	sOrdinaryBattleParams
.L460:
	ldr	r0, .L504
.L470:
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
.L461:
	ldr	r0, .L504+0x4
.L463:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L505:
	.align	2, 0
.L504:
	.word	sTrainerBOrdinaryBattleParams
	.word	EventScript_TryDoNormalTrainerBattle
.Lfe44:
	.size	 BattleSetup_ConfigureTrainerBattle,.Lfe44-BattleSetup_ConfigureTrainerBattle
	.align	2, 0
	.globl	ConfigureAndSetUpOneTrainerBattle
	.type	 ConfigureAndSetUpOneTrainerBattle,function
	.thumb_func
ConfigureAndSetUpOneTrainerBattle:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L507
	strb	r0, [r2]
	ldr	r4, .L507+0x4
	ldr	r3, .L507+0x8
	lsl	r2, r0, #0x3
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrb	r0, [r2, #0x8]
	strh	r0, [r4]
	add	r1, r1, #0x1
	add	r0, r1, #0
	bl	BattleSetup_ConfigureTrainerBattle
	ldr	r0, .L507+0xc
	bl	ScriptContext1_SetupScript
	bl	ScriptContext2_Enable
	pop	{r4}
	pop	{r0}
	bx	r0
.L508:
	.align	2, 0
.L507:
	.word	gSelectedObjectEvent
	.word	gSpecialVar_LastTalked
	.word	gObjectEvents
	.word	EventScript_271354
.Lfe45:
	.size	 ConfigureAndSetUpOneTrainerBattle,.Lfe45-ConfigureAndSetUpOneTrainerBattle
	.align	2, 0
	.globl	ConfigureTwoTrainersBattle
	.type	 ConfigureTwoTrainersBattle,function
	.thumb_func
ConfigureTwoTrainersBattle:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L510
	strb	r0, [r2]
	ldr	r4, .L510+0x4
	ldr	r3, .L510+0x8
	lsl	r2, r0, #0x3
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrb	r0, [r2, #0x8]
	strh	r0, [r4]
	add	r1, r1, #0x1
	add	r0, r1, #0
	bl	BattleSetup_ConfigureTrainerBattle
	pop	{r4}
	pop	{r0}
	bx	r0
.L511:
	.align	2, 0
.L510:
	.word	gSelectedObjectEvent
	.word	gSpecialVar_LastTalked
	.word	gObjectEvents
.Lfe46:
	.size	 ConfigureTwoTrainersBattle,.Lfe46-ConfigureTwoTrainersBattle
	.align	2, 0
	.globl	SetUpTwoTrainersBattle
	.type	 SetUpTwoTrainersBattle,function
	.thumb_func
SetUpTwoTrainersBattle:
	push	{lr}
	ldr	r0, .L513
	bl	ScriptContext1_SetupScript
	bl	ScriptContext2_Enable
	pop	{r0}
	bx	r0
.L514:
	.align	2, 0
.L513:
	.word	EventScript_271354
.Lfe47:
	.size	 SetUpTwoTrainersBattle,.Lfe47-SetUpTwoTrainersBattle
	.align	2, 0
	.globl	GetTrainerFlagFromScriptPointer
	.type	 GetTrainerFlagFromScriptPointer,function
	.thumb_func
GetTrainerFlagFromScriptPointer:
	push	{lr}
	add	r0, r0, #0x2
	bl	TrainerBattleLoadArg16
	lsl	r0, r0, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe48:
	.size	 GetTrainerFlagFromScriptPointer,.Lfe48-GetTrainerFlagFromScriptPointer
	.align	2, 0
	.globl	SetUpTrainerMovement
	.type	 SetUpTrainerMovement,function
	.thumb_func
SetUpTrainerMovement:
	push	{r4, lr}
	ldr	r0, .L517
	ldrb	r0, [r0]
	lsl	r4, r0, #0x3
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	ldr	r0, .L517+0x4
	add	r4, r4, r0
	ldrb	r0, [r4, #0x18]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	bl	GetTrainerFacingDirectionMovementType
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	SetTrainerMovementType
	pop	{r4}
	pop	{r0}
	bx	r0
.L518:
	.align	2, 0
.L517:
	.word	gSelectedObjectEvent
	.word	gObjectEvents
.Lfe49:
	.size	 SetUpTrainerMovement,.Lfe49-SetUpTrainerMovement
	.align	2, 0
	.globl	GetTrainerBattleMode
	.type	 GetTrainerBattleMode,function
	.thumb_func
GetTrainerBattleMode:
	ldr	r0, .L520
	ldrb	r0, [r0]
	bx	lr
.L521:
	.align	2, 0
.L520:
	.word	sTrainerBattleMode
.Lfe50:
	.size	 GetTrainerBattleMode,.Lfe50-GetTrainerBattleMode
	.align	2, 0
	.globl	GetTrainerFlag
	.type	 GetTrainerFlag,function
	.thumb_func
GetTrainerFlag:
	push	{lr}
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L523	@cond_branch
	ldr	r0, .L531
	ldrb	r0, [r0]
	bl	GetBattlePyramidTrainerFlag
	b	.L529
.L532:
	.align	2, 0
.L531:
	.word	gSelectedObjectEvent
.L523:
	bl	InTrainerHill
	cmp	r0, #0
	bne	.L525	@cond_branch
	bl	GetTrainerAFlag
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FlagGet
	b	.L529
.L525:
	ldr	r0, .L533
	ldrb	r0, [r0]
	bl	GetHillTrainerFlag
.L529:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L534:
	.align	2, 0
.L533:
	.word	gSelectedObjectEvent
.Lfe51:
	.size	 GetTrainerFlag,.Lfe51-GetTrainerFlag
	.align	2, 0
	.type	 SetBattledTrainersFlags,function
	.thumb_func
SetBattledTrainersFlags:
	push	{lr}
	ldr	r0, .L537
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L536	@cond_branch
	bl	GetTrainerBFlag
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FlagSet
.L536:
	bl	GetTrainerAFlag
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FlagSet
	pop	{r0}
	bx	r0
.L538:
	.align	2, 0
.L537:
	.word	gTrainerBattleOpponent_B
.Lfe52:
	.size	 SetBattledTrainersFlags,.Lfe52-SetBattledTrainersFlags
	.align	2, 0
	.type	 SetBattledTrainerFlag,function
	.thumb_func
SetBattledTrainerFlag:
	push	{lr}
	bl	GetTrainerAFlag
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FlagSet
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 SetBattledTrainerFlag,.Lfe53-SetBattledTrainerFlag
	.align	2, 0
	.globl	HasTrainerBeenFought
	.type	 HasTrainerBeenFought,function
	.thumb_func
HasTrainerBeenFought:
	push	{lr}
	lsl	r0, r0, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe54:
	.size	 HasTrainerBeenFought,.Lfe54-HasTrainerBeenFought
	.align	2, 0
	.globl	SetTrainerFlag
	.type	 SetTrainerFlag,function
	.thumb_func
SetTrainerFlag:
	push	{lr}
	lsl	r0, r0, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	bl	FlagSet
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 SetTrainerFlag,.Lfe55-SetTrainerFlag
	.align	2, 0
	.globl	ClearTrainerFlag
	.type	 ClearTrainerFlag,function
	.thumb_func
ClearTrainerFlag:
	push	{lr}
	lsl	r0, r0, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	bl	FlagClear
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 ClearTrainerFlag,.Lfe56-ClearTrainerFlag
	.align	2, 0
	.globl	BattleSetup_StartTrainerBattle
	.type	 BattleSetup_StartTrainerBattle,function
	.thumb_func
BattleSetup_StartTrainerBattle:
	push	{r4, lr}
	ldr	r0, .L557
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L544	@cond_branch
	ldr	r1, .L557+0x4
	ldr	r0, .L557+0x8
	b	.L556
.L558:
	.align	2, 0
.L557:
	.word	gNoOfApproachingTrainers
	.word	gBattleTypeFlags
	.word	0x8009
.L544:
	ldr	r1, .L559
	mov	r0, #0x8
.L556:
	str	r0, [r1]
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L546	@cond_branch
	ldr	r0, .L559+0x4
	mov	r1, #0x0
	bl	VarSet
	ldr	r2, .L559
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L559+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L547	@cond_branch
	mov	r0, #0x1
	bl	FillFrontierTrainersParties
	ldr	r4, .L559+0xc
	add	r0, r4, #0
	bl	ZeroMonData
	add	r0, r4, #0
	add	r0, r0, #0x64
	bl	ZeroMonData
	mov	r1, #0x96
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	bl	ZeroMonData
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	bl	ZeroMonData
	b	.L548
.L560:
	.align	2, 0
.L559:
	.word	gBattleTypeFlags
	.word	0x400e
	.word	gNoOfApproachingTrainers
	.word	gEnemyParty+0x64
.L547:
	mov	r0, #0x1
	bl	FillFrontierTrainerParty
	ldr	r4, .L561
	add	r0, r4, #0
	bl	ZeroMonData
	add	r4, r4, #0x64
	add	r0, r4, #0
	bl	ZeroMonData
.L548:
	bl	MarkApproachingPyramidTrainersAsBattled
	b	.L549
.L562:
	.align	2, 0
.L561:
	.word	gEnemyParty+0x64
.L546:
	bl	InTrainerHillChallenge
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L549	@cond_branch
	ldr	r2, .L563
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L563+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L551	@cond_branch
	bl	FillHillTrainersParties
	b	.L552
.L564:
	.align	2, 0
.L563:
	.word	gBattleTypeFlags
	.word	gNoOfApproachingTrainers
.L551:
	bl	FillHillTrainerParty
.L552:
	bl	SetHillTrainerFlag
.L549:
	ldr	r1, .L565
	ldr	r2, .L565+0x4
	ldrb	r0, [r2]
	strb	r0, [r1]
	mov	r1, #0x0
	strb	r1, [r2]
	ldr	r0, .L565+0x8
	strb	r1, [r0]
	ldr	r1, .L565+0xc
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L565+0x10
	ldr	r0, .L565+0x14
	str	r0, [r1, #0x8]
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L554	@cond_branch
	bl	InTrainerHillChallenge
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L553	@cond_branch
.L554:
	bl	sub_80B0828
	b	.L555
.L566:
	.align	2, 0
.L565:
	.word	sNoOfPossibleTrainerRetScripts
	.word	gNoOfApproachingTrainers
	.word	sShouldCheckTrainerBScript
	.word	gWhichTrainerToFaceAfterBattle
	.word	gMain
	.word	CB2_EndTrainerBattle
.L553:
	bl	DoTrainerBattle
.L555:
	bl	ScriptContext1_Stop
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 BattleSetup_StartTrainerBattle,.Lfe57-BattleSetup_StartTrainerBattle
	.align	2, 0
	.type	 CB2_EndTrainerBattle,function
	.thumb_func
CB2_EndTrainerBattle:
	push	{lr}
	ldr	r0, .L576
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L572	@cond_branch
	ldr	r0, .L576+0x4
	ldrb	r0, [r0]
	bl	IsPlayerDefeated
	cmp	r0, #0x1
	bne	.L570	@cond_branch
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L572	@cond_branch
	bl	InTrainerHillChallenge
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L571	@cond_branch
.L572:
	ldr	r0, .L576+0x8
	bl	SetMainCallback2
	b	.L569
.L577:
	.align	2, 0
.L576:
	.word	gTrainerBattleOpponent_A
	.word	gBattleOutcome
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.L571:
	ldr	r0, .L578
	bl	SetMainCallback2
	b	.L569
.L579:
	.align	2, 0
.L578:
	.word	CB2_WhiteOut
.L570:
	ldr	r0, .L580
	bl	SetMainCallback2
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L569	@cond_branch
	bl	InTrainerHillChallenge
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L569	@cond_branch
	bl	RegisterTrainerInMatchCall
	bl	SetBattledTrainersFlags
.L569:
	pop	{r0}
	bx	r0
.L581:
	.align	2, 0
.L580:
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe58:
	.size	 CB2_EndTrainerBattle,.Lfe58-CB2_EndTrainerBattle
	.align	2, 0
	.type	 CB2_EndRematchBattle,function
	.thumb_func
CB2_EndRematchBattle:
	push	{lr}
	ldr	r0, .L587
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	bne	.L583	@cond_branch
	ldr	r0, .L587+0x4
	bl	SetMainCallback2
	b	.L584
.L588:
	.align	2, 0
.L587:
	.word	gTrainerBattleOpponent_A
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.L583:
	ldr	r0, .L589
	ldrb	r0, [r0]
	bl	IsPlayerDefeated
	cmp	r0, #0x1
	bne	.L585	@cond_branch
	ldr	r0, .L589+0x4
	bl	SetMainCallback2
	b	.L584
.L590:
	.align	2, 0
.L589:
	.word	gBattleOutcome
	.word	CB2_WhiteOut
.L585:
	ldr	r0, .L591
	bl	SetMainCallback2
	bl	RegisterTrainerInMatchCall
	bl	SetBattledTrainersFlags
	bl	HandleRematchVarsOnBattleEnd
.L584:
	pop	{r0}
	bx	r0
.L592:
	.align	2, 0
.L591:
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe59:
	.size	 CB2_EndRematchBattle,.Lfe59-CB2_EndRematchBattle
	.align	2, 0
	.globl	BattleSetup_StartRematchBattle
	.type	 BattleSetup_StartRematchBattle,function
	.thumb_func
BattleSetup_StartRematchBattle:
	push	{lr}
	ldr	r1, .L594
	mov	r0, #0x8
	str	r0, [r1]
	ldr	r1, .L594+0x4
	ldr	r0, .L594+0x8
	str	r0, [r1, #0x8]
	bl	DoTrainerBattle
	bl	ScriptContext1_Stop
	pop	{r0}
	bx	r0
.L595:
	.align	2, 0
.L594:
	.word	gBattleTypeFlags
	.word	gMain
	.word	CB2_EndRematchBattle
.Lfe60:
	.size	 BattleSetup_StartRematchBattle,.Lfe60-BattleSetup_StartRematchBattle
	.align	2, 0
	.globl	ShowTrainerIntroSpeech
	.type	 ShowTrainerIntroSpeech,function
	.thumb_func
ShowTrainerIntroSpeech:
	push	{lr}
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L597	@cond_branch
	ldr	r0, .L606
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.L598	@cond_branch
	ldr	r0, .L606+0x4
	ldrb	r0, [r0]
	bl	LocalIdToPyramidTrainerId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	CopyPyramidTrainerSpeechBefore
	b	.L603
.L607:
	.align	2, 0
.L606:
	.word	gNoOfApproachingTrainers
	.word	gSpecialVar_LastTalked
.L598:
	ldr	r3, .L608
	ldr	r2, .L608+0x4
	ldr	r0, .L608+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x8]
	bl	LocalIdToPyramidTrainerId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	CopyPyramidTrainerSpeechBefore
	b	.L605
.L609:
	.align	2, 0
.L608:
	.word	gObjectEvents
	.word	gApproachingTrainers
	.word	gApproachingTrainerId
.L597:
	bl	InTrainerHillChallenge
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L601	@cond_branch
	ldr	r0, .L610
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.L602	@cond_branch
	ldr	r0, .L610+0x4
	ldrb	r0, [r0]
	bl	LocalIdToHillTrainerId
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x2
	bl	CopyTrainerHillTrainerText
	b	.L603
.L611:
	.align	2, 0
.L610:
	.word	gNoOfApproachingTrainers
	.word	gSpecialVar_LastTalked
.L602:
	ldr	r3, .L612
	ldr	r2, .L612+0x4
	ldr	r0, .L612+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x8]
	bl	LocalIdToHillTrainerId
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x2
	bl	CopyTrainerHillTrainerText
.L605:
.L603:
	bl	ShowFieldMessageFromBuffer
	b	.L600
.L613:
	.align	2, 0
.L612:
	.word	gObjectEvents
	.word	gApproachingTrainers
	.word	gApproachingTrainerId
.L601:
	bl	GetIntroSpeechOfApproachingTrainer
	bl	ShowFieldMessage
.L600:
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 ShowTrainerIntroSpeech,.Lfe61-ShowTrainerIntroSpeech
	.align	2, 0
	.globl	BattleSetup_GetScriptAddrAfterBattle
	.type	 BattleSetup_GetScriptAddrAfterBattle,function
	.thumb_func
BattleSetup_GetScriptAddrAfterBattle:
	push	{lr}
	ldr	r0, .L618
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L617	@cond_branch
	ldr	r0, .L618+0x4
.L617:
	pop	{r1}
	bx	r1
.L619:
	.align	2, 0
.L618:
	.word	sTrainerBattleEndScript
	.word	EventScript_TestSignpostMsg
.Lfe62:
	.size	 BattleSetup_GetScriptAddrAfterBattle,.Lfe62-BattleSetup_GetScriptAddrAfterBattle
	.align	2, 0
	.globl	BattleSetup_GetTrainerPostBattleScript
	.type	 BattleSetup_GetTrainerPostBattleScript,function
	.thumb_func
BattleSetup_GetTrainerPostBattleScript:
	push	{lr}
	ldr	r1, .L626
	ldrb	r2, [r1]
	cmp	r2, #0
	beq	.L621	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L626+0x4
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L623	@cond_branch
	ldr	r1, .L626+0x8
	mov	r0, #0x1
	strh	r0, [r1]
	add	r0, r2, #0
	b	.L625
.L627:
	.align	2, 0
.L626:
	.word	sShouldCheckTrainerBScript
	.word	sTrainerBBattleScriptRetAddr
	.word	gWhichTrainerToFaceAfterBattle
.L621:
	ldr	r0, .L628
	ldr	r1, [r0]
	cmp	r1, #0
	beq	.L623	@cond_branch
	ldr	r0, .L628+0x4
	strh	r2, [r0]
	add	r0, r1, #0
	b	.L625
.L629:
	.align	2, 0
.L628:
	.word	sTrainerABattleScriptRetAddr
	.word	gWhichTrainerToFaceAfterBattle
.L623:
	ldr	r0, .L630
.L625:
	pop	{r1}
	bx	r1
.L631:
	.align	2, 0
.L630:
	.word	EventScript_TryGetTrainerScript
.Lfe63:
	.size	 BattleSetup_GetTrainerPostBattleScript,.Lfe63-BattleSetup_GetTrainerPostBattleScript
	.align	2, 0
	.globl	ShowTrainerCantBattleSpeech
	.type	 ShowTrainerCantBattleSpeech,function
	.thumb_func
ShowTrainerCantBattleSpeech:
	push	{lr}
	bl	GetTrainerCantBattleSpeech
	bl	ShowFieldMessage
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 ShowTrainerCantBattleSpeech,.Lfe64-ShowTrainerCantBattleSpeech
	.align	2, 0
	.globl	SetUpTrainerEncounterMusic
	.type	 SetUpTrainerEncounterMusic,function
	.thumb_func
SetUpTrainerEncounterMusic:
	push	{lr}
	ldr	r0, .L654
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L634	@cond_branch
	ldr	r0, .L654+0x4
	b	.L653
.L655:
	.align	2, 0
.L654:
	.word	gApproachingTrainerId
	.word	gTrainerBattleOpponent_A
.L634:
	ldr	r0, .L656
.L653:
	ldrh	r1, [r0]
	ldr	r0, .L656+0x4
	ldrh	r0, [r0]
	cmp	r0, #0x1
	beq	.L636	@cond_branch
	cmp	r0, #0x8
	beq	.L636	@cond_branch
	add	r0, r1, #0
	bl	GetTrainerEncounterMusicId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xd
	bhi	.L651	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L656+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L657:
	.align	2, 0
.L656:
	.word	gTrainerBattleOpponent_B
	.word	sTrainerBattleMode
	.word	.L652
	.align	2, 0
	.align	2, 0
.L652:
	.word	.L638
	.word	.L639
	.word	.L640
	.word	.L651
	.word	.L641
	.word	.L642
	.word	.L643
	.word	.L644
	.word	.L645
	.word	.L646
	.word	.L647
	.word	.L648
	.word	.L649
	.word	.L650
.L638:
	ldr	r0, .L658
	b	.L637
.L659:
	.align	2, 0
.L658:
	.word	0x15f
.L639:
	mov	r0, #0xbd
	lsl	r0, r0, #0x1
	b	.L637
.L640:
	mov	r0, #0xaf
	lsl	r0, r0, #0x1
	b	.L637
.L641:
	ldr	r0, .L660
	b	.L637
.L661:
	.align	2, 0
.L660:
	.word	0x183
.L642:
	mov	r0, #0xc2
	lsl	r0, r0, #0x1
	b	.L637
.L643:
	mov	r0, #0xc3
	lsl	r0, r0, #0x1
	b	.L637
.L644:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	b	.L637
.L645:
	mov	r0, #0xb2
	lsl	r0, r0, #0x1
	b	.L637
.L646:
	mov	r0, #0xd2
	lsl	r0, r0, #0x1
	b	.L637
.L647:
	ldr	r0, .L662
	b	.L637
.L663:
	.align	2, 0
.L662:
	.word	0x1a5
.L648:
	mov	r0, #0xd3
	lsl	r0, r0, #0x1
	b	.L637
.L649:
	mov	r0, #0xd4
	lsl	r0, r0, #0x1
	b	.L637
.L650:
	mov	r0, #0xb8
	lsl	r0, r0, #0x1
	b	.L637
.L651:
	mov	r0, #0xc5
	lsl	r0, r0, #0x1
.L637:
	bl	PlayNewMapMusic
.L636:
	pop	{r0}
	bx	r0
.Lfe65:
	.size	 SetUpTrainerEncounterMusic,.Lfe65-SetUpTrainerEncounterMusic
	.align	2, 0
	.type	 ReturnEmptyStringIfNull,function
	.thumb_func
ReturnEmptyStringIfNull:
	push	{lr}
	cmp	r0, #0
	bne	.L667	@cond_branch
	ldr	r0, .L668
.L667:
	pop	{r1}
	bx	r1
.L669:
	.align	2, 0
.L668:
	.word	gText_EmptyString2
.Lfe66:
	.size	 ReturnEmptyStringIfNull,.Lfe66-ReturnEmptyStringIfNull
	.align	2, 0
	.type	 GetIntroSpeechOfApproachingTrainer,function
	.thumb_func
GetIntroSpeechOfApproachingTrainer:
	push	{lr}
	ldr	r0, .L676
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L671	@cond_branch
	ldr	r0, .L676+0x4
	b	.L675
.L677:
	.align	2, 0
.L676:
	.word	gApproachingTrainerId
	.word	sTrainerBIntroSpeech
.L671:
	ldr	r0, .L678
.L675:
	ldr	r0, [r0]
	bl	ReturnEmptyStringIfNull
	pop	{r1}
	bx	r1
.L679:
	.align	2, 0
.L678:
	.word	sTrainerAIntroSpeech
.Lfe67:
	.size	 GetIntroSpeechOfApproachingTrainer,.Lfe67-GetIntroSpeechOfApproachingTrainer
	.align	2, 0
	.globl	GetTrainerALoseText
	.type	 GetTrainerALoseText,function
	.thumb_func
GetTrainerALoseText:
	push	{r4, lr}
	ldr	r0, .L683
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	bne	.L681	@cond_branch
	bl	GetSecretBaseTrainerLoseText
	b	.L682
.L684:
	.align	2, 0
.L683:
	.word	gTrainerBattleOpponent_A
.L681:
	ldr	r0, .L685
	ldr	r0, [r0]
.L682:
	ldr	r4, .L685+0x4
	bl	ReturnEmptyStringIfNull
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L686:
	.align	2, 0
.L685:
	.word	sTrainerADefeatSpeech
	.word	gStringVar4
.Lfe68:
	.size	 GetTrainerALoseText,.Lfe68-GetTrainerALoseText
	.align	2, 0
	.globl	GetTrainerBLoseText
	.type	 GetTrainerBLoseText,function
	.thumb_func
GetTrainerBLoseText:
	push	{r4, lr}
	ldr	r4, .L688
	ldr	r0, .L688+0x4
	ldr	r0, [r0]
	bl	ReturnEmptyStringIfNull
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L689:
	.align	2, 0
.L688:
	.word	gStringVar4
	.word	sTrainerBDefeatSpeech
.Lfe69:
	.size	 GetTrainerBLoseText,.Lfe69-GetTrainerBLoseText
	.align	2, 0
	.globl	GetTrainerWonSpeech
	.type	 GetTrainerWonSpeech,function
	.thumb_func
GetTrainerWonSpeech:
	push	{lr}
	ldr	r0, .L691
	ldr	r0, [r0]
	bl	ReturnEmptyStringIfNull
	pop	{r1}
	bx	r1
.L692:
	.align	2, 0
.L691:
	.word	sTrainerVictorySpeech
.Lfe70:
	.size	 GetTrainerWonSpeech,.Lfe70-GetTrainerWonSpeech
	.align	2, 0
	.type	 GetTrainerCantBattleSpeech,function
	.thumb_func
GetTrainerCantBattleSpeech:
	push	{lr}
	ldr	r0, .L694
	ldr	r0, [r0]
	bl	ReturnEmptyStringIfNull
	pop	{r1}
	bx	r1
.L695:
	.align	2, 0
.L694:
	.word	sTrainerCannotBattleSpeech
.Lfe71:
	.size	 GetTrainerCantBattleSpeech,.Lfe71-GetTrainerCantBattleSpeech
	.align	2, 0
	.type	 FirstBattleTrainerIdToRematchTableId,function
	.thumb_func
FirstBattleTrainerIdToRematchTableId:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r3, #0x0
	add	r2, r0, #0
.L700:
	ldrh	r0, [r2]
	cmp	r0, r1
	bne	.L699	@cond_branch
	add	r0, r3, #0
	b	.L703
.L699:
	add	r2, r2, #0x10
	add	r3, r3, #0x1
	cmp	r3, #0x4d
	ble	.L700	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
.L703:
	pop	{r1}
	bx	r1
.Lfe72:
	.size	 FirstBattleTrainerIdToRematchTableId,.Lfe72-FirstBattleTrainerIdToRematchTableId
	.align	2, 0
	.type	 TrainerIdToRematchTableId,function
	.thumb_func
TrainerIdToRematchTableId:
	push	{r4, r5, lr}
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r4, #0x0
	add	r2, r0, #0
.L708:
	mov	r1, #0x0
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L707	@cond_branch
	mov	r3, #0x0
.L713:
	add	r0, r2, r3
	ldrh	r0, [r0]
	cmp	r0, r5
	bne	.L711	@cond_branch
	add	r0, r4, #0
	b	.L717
.L711:
	add	r3, r3, #0x2
	add	r1, r1, #0x1
	cmp	r1, #0x4
	bgt	.L707	@cond_branch
	add	r0, r2, r3
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L713	@cond_branch
.L707:
	add	r2, r2, #0x10
	add	r4, r4, #0x1
	cmp	r4, #0x4d
	ble	.L708	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
.L717:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe73:
	.size	 TrainerIdToRematchTableId,.Lfe73-TrainerIdToRematchTableId
	.align	2, 0
	.type	 sub_80B1D94,function
	.thumb_func
sub_80B1D94:
	push	{lr}
	cmp	r0, #0x48
	ble	.L719	@cond_branch
	mov	r0, #0x1
	b	.L724
.L719:
	cmp	r0, #0x40
	bne	.L721	@cond_branch
	mov	r0, #0x7e
	bl	FlagGet
	mov	r1, #0x0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L722	@cond_branch
	mov	r1, #0x1
.L722:
	add	r0, r1, #0
	b	.L724
.L721:
	mov	r0, #0x0
.L724:
	pop	{r1}
	bx	r1
.Lfe74:
	.size	 sub_80B1D94,.Lfe74-sub_80B1D94
	.align	2, 0
	.type	 SetRematchIdForTrainer,function
	.thumb_func
SetRematchIdForTrainer:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	mov	r5, #0x1
	lsl	r1, r6, #0x4
	add	r1, r1, r0
	add	r4, r1, #0x2
	b	.L726
.L728:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
.L726:
	cmp	r5, #0x4
	bgt	.L727	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L727	@cond_branch
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L728	@cond_branch
.L727:
	ldr	r0, .L733
	ldr	r0, [r0]
	ldr	r1, .L733+0x4
	add	r0, r0, r1
	add	r0, r0, r6
	strb	r5, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L734:
	.align	2, 0
.L733:
	.word	gSaveBlock1Ptr
	.word	0xfaa
.Lfe75:
	.size	 SetRematchIdForTrainer,.Lfe75-SetRematchIdForTrainer
	.align	2, 0
	.type	 UpdateRandomTrainerRematches,function
	.thumb_func
UpdateRandomTrainerRematches:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r9, r1
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r8, r2
	mov	r7, #0x0
	mov	r5, #0x0
	add	r4, r6, #0
	add	r4, r4, #0xa
.L739:
	ldrh	r0, [r4]
	cmp	r0, r9
	bne	.L738	@cond_branch
	ldrh	r0, [r4, #0x2]
	cmp	r0, r8
	bne	.L738	@cond_branch
	add	r0, r5, #0
	bl	sub_80B1D94
	cmp	r0, #0
	bne	.L738	@cond_branch
	ldr	r0, .L746
	ldr	r0, [r0]
	ldr	r1, .L746+0x4
	add	r0, r0, r1
	add	r0, r0, r5
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L745	@cond_branch
	mov	r1, #0xae
	lsl	r1, r1, #0x1
	add	r0, r5, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L738	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1e
	bhi	.L738	@cond_branch
	add	r0, r6, #0
	add	r1, r5, #0
	bl	SetRematchIdForTrainer
.L745:
	mov	r7, #0x1
.L738:
	add	r4, r4, #0x10
	add	r5, r5, #0x1
	cmp	r5, #0x40
	ble	.L739	@cond_branch
	add	r0, r7, #0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L747:
	.align	2, 0
.L746:
	.word	gSaveBlock1Ptr
	.word	0xfaa
.Lfe76:
	.size	 UpdateRandomTrainerRematches,.Lfe76-UpdateRandomTrainerRematches
	.align	2, 0
	.globl	UpdateRematchIfDefeated
	.type	 UpdateRematchIfDefeated,function
	.thumb_func
UpdateRematchIfDefeated:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L750
	lsl	r0, r4, #0x4
	add	r0, r0, r5
	ldrh	r0, [r0]
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L749	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	SetRematchIdForTrainer
.L749:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L751:
	.align	2, 0
.L750:
	.word	gRematchTable
.Lfe77:
	.size	 UpdateRematchIfDefeated,.Lfe77-UpdateRematchIfDefeated
	.align	2, 0
	.type	 DoesSomeoneWantRematchIn_,function
	.thumb_func
DoesSomeoneWantRematchIn_:
	push	{r4, r5, r6, lr}
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r1, #0x0
	add	r3, r0, #0
	add	r3, r3, #0xa
	ldr	r5, .L760
.L756:
	ldrh	r0, [r3]
	cmp	r0, r4
	bne	.L755	@cond_branch
	ldrh	r0, [r3, #0x2]
	cmp	r0, r2
	bne	.L755	@cond_branch
	ldr	r0, [r5]
	ldr	r6, .L760+0x4
	add	r0, r0, r6
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L755	@cond_branch
	mov	r0, #0x1
	b	.L759
.L761:
	.align	2, 0
.L760:
	.word	gSaveBlock1Ptr
	.word	0xfaa
.L755:
	add	r3, r3, #0x10
	add	r1, r1, #0x1
	cmp	r1, #0x4d
	ble	.L756	@cond_branch
	mov	r0, #0x0
.L759:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe78:
	.size	 DoesSomeoneWantRematchIn_,.Lfe78-DoesSomeoneWantRematchIn_
	.align	2, 0
	.type	 IsRematchTrainerIn_,function
	.thumb_func
IsRematchTrainerIn_:
	push	{r4, lr}
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r1, #0x0
	add	r3, r0, #0
	add	r3, r3, #0xa
.L766:
	ldrh	r0, [r3]
	cmp	r0, r4
	bne	.L765	@cond_branch
	ldrh	r0, [r3, #0x2]
	cmp	r0, r2
	bne	.L765	@cond_branch
	mov	r0, #0x1
	b	.L769
.L765:
	add	r3, r3, #0x10
	add	r1, r1, #0x1
	cmp	r1, #0x4d
	ble	.L766	@cond_branch
	mov	r0, #0x0
.L769:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe79:
	.size	 IsRematchTrainerIn_,.Lfe79-IsRematchTrainerIn_
	.align	2, 0
	.type	 IsFirstTrainerIdReadyForRematch,function
	.thumb_func
IsFirstTrainerIdReadyForRematch:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	FirstBattleTrainerIdToRematchTableId
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L773	@cond_branch
	cmp	r1, #0x63
	bgt	.L773	@cond_branch
	ldr	r0, .L775
	ldr	r0, [r0]
	ldr	r2, .L775+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L773	@cond_branch
	mov	r0, #0x1
	b	.L774
.L776:
	.align	2, 0
.L775:
	.word	gSaveBlock1Ptr
	.word	0xfaa
.L773:
	mov	r0, #0x0
.L774:
	pop	{r1}
	bx	r1
.Lfe80:
	.size	 IsFirstTrainerIdReadyForRematch,.Lfe80-IsFirstTrainerIdReadyForRematch
	.align	2, 0
	.type	 IsTrainerReadyForRematch_,function
	.thumb_func
IsTrainerReadyForRematch_:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	TrainerIdToRematchTableId
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L780	@cond_branch
	cmp	r1, #0x63
	bgt	.L780	@cond_branch
	ldr	r0, .L782
	ldr	r0, [r0]
	ldr	r2, .L782+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L780	@cond_branch
	mov	r0, #0x1
	b	.L781
.L783:
	.align	2, 0
.L782:
	.word	gSaveBlock1Ptr
	.word	0xfaa
.L780:
	mov	r0, #0x0
.L781:
	pop	{r1}
	bx	r1
.Lfe81:
	.size	 IsTrainerReadyForRematch_,.Lfe81-IsTrainerReadyForRematch_
	.align	2, 0
	.type	 GetRematchTrainerIdFromTable,function
	.thumb_func
GetRematchTrainerIdFromTable:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	FirstBattleTrainerIdToRematchTableId
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L785	@cond_branch
	mov	r0, #0x0
	b	.L793
.L794:
	sub	r0, r6, #0x1
	lsl	r0, r0, #0x1
	add	r0, r7, r0
	ldrh	r0, [r0]
	b	.L796
.L795:
	ldrh	r0, [r5]
	b	.L796
.L785:
	lsl	r0, r1, #0x4
	add	r7, r4, r0
	mov	r6, #0x1
	add	r5, r7, #0x2
	add	r4, r5, #0
.L789:
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L794	@cond_branch
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L795	@cond_branch
	add	r4, r4, #0x2
	add	r5, r5, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x4
	ble	.L789	@cond_branch
	ldrh	r0, [r7, #0x8]
.L796:
.L793:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe82:
	.size	 GetRematchTrainerIdFromTable,.Lfe82-GetRematchTrainerIdFromTable
	.align	2, 0
	.type	 GetLastBeatenRematchTrainerIdFromTable,function
	.thumb_func
GetLastBeatenRematchTrainerIdFromTable:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	FirstBattleTrainerIdToRematchTableId
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L798	@cond_branch
	mov	r0, #0x0
	b	.L806
.L807:
	sub	r0, r5, #0x1
	lsl	r0, r0, #0x1
	add	r0, r6, r0
	ldrh	r0, [r0]
	b	.L809
.L808:
	sub	r0, r5, #0x1
	lsl	r0, r0, #0x1
	add	r0, r6, r0
	ldrh	r0, [r0]
	b	.L809
.L798:
	lsl	r0, r1, #0x4
	add	r6, r4, r0
	mov	r5, #0x1
	add	r4, r6, #0x2
.L802:
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L807	@cond_branch
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L808	@cond_branch
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x4
	ble	.L802	@cond_branch
	ldrh	r0, [r6, #0x8]
.L809:
.L806:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe83:
	.size	 GetLastBeatenRematchTrainerIdFromTable,.Lfe83-GetLastBeatenRematchTrainerIdFromTable
	.align	2, 0
	.type	 ClearTrainerWantRematchState,function
	.thumb_func
ClearTrainerWantRematchState:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	TrainerIdToRematchTableId
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L811	@cond_branch
	ldr	r0, .L812
	ldr	r0, [r0]
	ldr	r2, .L812+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
.L811:
	pop	{r0}
	bx	r0
.L813:
	.align	2, 0
.L812:
	.word	gSaveBlock1Ptr
	.word	0xfaa
.Lfe84:
	.size	 ClearTrainerWantRematchState,.Lfe84-ClearTrainerWantRematchState
	.align	2, 0
	.type	 GetTrainerMatchCallFlag,function
	.thumb_func
GetTrainerMatchCallFlag:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r1, #0x0
	mov	r4, #0xae
	lsl	r4, r4, #0x1
	ldr	r2, .L822
.L818:
	ldrh	r0, [r2]
	cmp	r0, r3
	bne	.L817	@cond_branch
	add	r0, r1, r4
	b	.L821
.L823:
	.align	2, 0
.L822:
	.word	gRematchTable
.L817:
	add	r2, r2, #0x10
	add	r1, r1, #0x1
	cmp	r1, #0x4d
	ble	.L818	@cond_branch
	ldr	r0, .L824
.L821:
	pop	{r4}
	pop	{r1}
	bx	r1
.L825:
	.align	2, 0
.L824:
	.word	0xffff
.Lfe85:
	.size	 GetTrainerMatchCallFlag,.Lfe85-GetTrainerMatchCallFlag
	.align	2, 0
	.type	 RegisterTrainerInMatchCall,function
	.thumb_func
RegisterTrainerInMatchCall:
	push	{lr}
	ldr	r0, .L829
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L827	@cond_branch
	ldr	r0, .L829+0x4
	ldrh	r0, [r0]
	bl	GetTrainerMatchCallFlag
	add	r1, r0, #0
	ldr	r0, .L829+0x8
	cmp	r1, r0
	beq	.L827	@cond_branch
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	bl	FlagSet
.L827:
	pop	{r0}
	bx	r0
.L830:
	.align	2, 0
.L829:
	.word	0x12f
	.word	gTrainerBattleOpponent_A
	.word	0xffff
.Lfe86:
	.size	 RegisterTrainerInMatchCall,.Lfe86-RegisterTrainerInMatchCall
	.align	2, 0
	.type	 WasSecondRematchWon,function
	.thumb_func
WasSecondRematchWon:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	FirstBattleTrainerIdToRematchTableId
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L833	@cond_branch
	lsl	r0, r1, #0x4
	add	r0, r0, r4
	ldrh	r0, [r0, #0x2]
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L833	@cond_branch
	mov	r0, #0x1
	b	.L834
.L833:
	mov	r0, #0x0
.L834:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe87:
	.size	 WasSecondRematchWon,.Lfe87-WasSecondRematchWon
	.align	2, 0
	.type	 HasAtLeastFiveBadges,function
	.thumb_func
HasAtLeastFiveBadges:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	mov	r5, #0x0
	ldr	r4, .L844
.L839:
	ldrh	r0, [r4]
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L838	@cond_branch
	add	r6, r6, #0x1
	cmp	r6, #0x4
	ble	.L838	@cond_branch
	mov	r0, #0x1
	b	.L843
.L845:
	.align	2, 0
.L844:
	.word	sBadgeFlags
.L838:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x7
	bls	.L839	@cond_branch
	mov	r0, #0x0
.L843:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe88:
	.size	 HasAtLeastFiveBadges,.Lfe88-HasAtLeastFiveBadges
	.align	2, 0
	.globl	IncrementRematchStepCounter
	.type	 IncrementRematchStepCounter,function
	.thumb_func
IncrementRematchStepCounter:
	push	{lr}
	bl	HasAtLeastFiveBadges
	cmp	r0, #0
	beq	.L847	@cond_branch
	ldr	r0, .L851
	ldr	r0, [r0]
	ldr	r2, .L851+0x4
	add	r1, r0, r2
	ldrh	r0, [r1]
	cmp	r0, #0xfe
	bls	.L848	@cond_branch
	mov	r0, #0xff
	b	.L850
.L852:
	.align	2, 0
.L851:
	.word	gSaveBlock1Ptr
	.word	0xfa8
.L848:
	add	r0, r0, #0x1
.L850:
	strh	r0, [r1]
.L847:
	pop	{r0}
	bx	r0
.Lfe89:
	.size	 IncrementRematchStepCounter,.Lfe89-IncrementRematchStepCounter
	.align	2, 0
	.type	 IsRematchStepCounterMaxed,function
	.thumb_func
IsRematchStepCounterMaxed:
	push	{lr}
	bl	HasAtLeastFiveBadges
	cmp	r0, #0
	beq	.L854	@cond_branch
	ldr	r0, .L857
	ldr	r0, [r0]
	ldr	r1, .L857+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0xfe
	bls	.L854	@cond_branch
	mov	r0, #0x1
	b	.L856
.L858:
	.align	2, 0
.L857:
	.word	gSaveBlock1Ptr
	.word	0xfa8
.L854:
	mov	r0, #0x0
.L856:
	pop	{r1}
	bx	r1
.Lfe90:
	.size	 IsRematchStepCounterMaxed,.Lfe90-IsRematchStepCounterMaxed
	.align	2, 0
	.globl	TryUpdateRandomTrainerRematches
	.type	 TryUpdateRandomTrainerRematches,function
	.thumb_func
TryUpdateRandomTrainerRematches:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	bl	IsRematchStepCounterMaxed
	cmp	r0, #0
	beq	.L860	@cond_branch
	ldr	r0, .L861
	add	r1, r5, #0
	add	r2, r4, #0
	bl	UpdateRandomTrainerRematches
	cmp	r0, #0x1
	bne	.L860	@cond_branch
	ldr	r0, .L861+0x4
	ldr	r0, [r0]
	ldr	r1, .L861+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
.L860:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L862:
	.align	2, 0
.L861:
	.word	gRematchTable
	.word	gSaveBlock1Ptr
	.word	0xfa8
.Lfe91:
	.size	 TryUpdateRandomTrainerRematches,.Lfe91-TryUpdateRandomTrainerRematches
	.align	2, 0
	.globl	DoesSomeoneWantRematchIn
	.type	 DoesSomeoneWantRematchIn,function
	.thumb_func
DoesSomeoneWantRematchIn:
	push	{lr}
	add	r3, r0, #0
	add	r2, r1, #0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r0, .L864
	add	r1, r3, #0
	bl	DoesSomeoneWantRematchIn_
	pop	{r1}
	bx	r1
.L865:
	.align	2, 0
.L864:
	.word	gRematchTable
.Lfe92:
	.size	 DoesSomeoneWantRematchIn,.Lfe92-DoesSomeoneWantRematchIn
	.align	2, 0
	.globl	IsRematchTrainerIn
	.type	 IsRematchTrainerIn,function
	.thumb_func
IsRematchTrainerIn:
	push	{lr}
	add	r3, r0, #0
	add	r2, r1, #0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r0, .L867
	add	r1, r3, #0
	bl	IsRematchTrainerIn_
	pop	{r1}
	bx	r1
.L868:
	.align	2, 0
.L867:
	.word	gRematchTable
.Lfe93:
	.size	 IsRematchTrainerIn,.Lfe93-IsRematchTrainerIn
	.align	2, 0
	.type	 GetRematchTrainerId,function
	.thumb_func
GetRematchTrainerId:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, .L870
	bl	GetRematchTrainerIdFromTable
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.L871:
	.align	2, 0
.L870:
	.word	gRematchTable
.Lfe94:
	.size	 GetRematchTrainerId,.Lfe94-GetRematchTrainerId
	.align	2, 0
	.globl	GetLastBeatenRematchTrainerId
	.type	 GetLastBeatenRematchTrainerId,function
	.thumb_func
GetLastBeatenRematchTrainerId:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, .L873
	bl	GetLastBeatenRematchTrainerIdFromTable
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.L874:
	.align	2, 0
.L873:
	.word	gRematchTable
.Lfe95:
	.size	 GetLastBeatenRematchTrainerId,.Lfe95-GetLastBeatenRematchTrainerId
	.align	2, 0
	.globl	ShouldTryRematchBattle
	.type	 ShouldTryRematchBattle,function
	.thumb_func
ShouldTryRematchBattle:
	push	{r4, r5, lr}
	ldr	r5, .L878
	ldr	r4, .L878+0x4
	ldrh	r1, [r4]
	add	r0, r5, #0
	bl	IsFirstTrainerIdReadyForRematch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L876	@cond_branch
	ldrh	r1, [r4]
	add	r0, r5, #0
	bl	WasSecondRematchWon
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L877
.L879:
	.align	2, 0
.L878:
	.word	gRematchTable
	.word	gTrainerBattleOpponent_A
.L876:
	mov	r0, #0x1
.L877:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe96:
	.size	 ShouldTryRematchBattle,.Lfe96-ShouldTryRematchBattle
	.align	2, 0
	.globl	IsTrainerReadyForRematch
	.type	 IsTrainerReadyForRematch,function
	.thumb_func
IsTrainerReadyForRematch:
	push	{lr}
	ldr	r0, .L881
	ldr	r1, .L881+0x4
	ldrh	r1, [r1]
	bl	IsTrainerReadyForRematch_
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L882:
	.align	2, 0
.L881:
	.word	gRematchTable
	.word	gTrainerBattleOpponent_A
.Lfe97:
	.size	 IsTrainerReadyForRematch,.Lfe97-IsTrainerReadyForRematch
	.align	2, 0
	.type	 HandleRematchVarsOnBattleEnd,function
	.thumb_func
HandleRematchVarsOnBattleEnd:
	push	{lr}
	ldr	r0, .L884
	ldr	r1, .L884+0x4
	ldrh	r1, [r1]
	bl	ClearTrainerWantRematchState
	bl	SetBattledTrainersFlags
	pop	{r0}
	bx	r0
.L885:
	.align	2, 0
.L884:
	.word	gRematchTable
	.word	gTrainerBattleOpponent_A
.Lfe98:
	.size	 HandleRematchVarsOnBattleEnd,.Lfe98-HandleRematchVarsOnBattleEnd
	.align	2, 0
	.globl	ShouldTryGetTrainerScript
	.type	 ShouldTryGetTrainerScript,function
	.thumb_func
ShouldTryGetTrainerScript:
	push	{lr}
	ldr	r1, .L890
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bls	.L887	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L890+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L890+0x8
	mov	r0, #0x1
	b	.L889
.L891:
	.align	2, 0
.L890:
	.word	sNoOfPossibleTrainerRetScripts
	.word	sShouldCheckTrainerBScript
	.word	gSpecialVar_Result
.L887:
	ldr	r1, .L892
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L892+0x4
	mov	r0, #0x0
.L889:
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L893:
	.align	2, 0
.L892:
	.word	sShouldCheckTrainerBScript
	.word	gSpecialVar_Result
.Lfe99:
	.size	 ShouldTryGetTrainerScript,.Lfe99-ShouldTryGetTrainerScript
	.align	2, 0
	.globl	CountBattledRematchTeams
	.type	 CountBattledRematchTeams,function
	.thumb_func
CountBattledRematchTeams:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x10
	ldr	r7, .L904
	lsr	r4, r0, #0xc
	add	r6, r4, r7
	ldrh	r0, [r6]
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L895	@cond_branch
	mov	r0, #0x0
	b	.L903
.L905:
	.align	2, 0
.L904:
	.word	gRematchTable
.L895:
	mov	r5, #0x1
	add	r0, r4, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L897	@cond_branch
	add	r4, r6, #0x2
.L900:
	ldrh	r0, [r4]
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L897	@cond_branch
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x4
	bgt	.L897	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0
	bne	.L900	@cond_branch
.L897:
	lsl	r0, r5, #0x10
	lsr	r0, r0, #0x10
.L903:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe100:
	.size	 CountBattledRematchTeams,.Lfe100-CountBattledRematchTeams
.text
	.align	2, 0

