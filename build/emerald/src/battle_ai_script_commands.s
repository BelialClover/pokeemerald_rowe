@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gAIScriptPtr
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gAIScriptPtr,object
	.size	 gAIScriptPtr,4
gAIScriptPtr:
	.word	0x0
	.type	 sBattler_AI,object
	.size	 sBattler_AI,1
sBattler_AI:
	.byte	0x0
	.section .rodata
	.align	2, 0
	.type	 sBattleAICmdTable,object
sBattleAICmdTable:
	.word	Cmd_if_random_less_than
	.word	Cmd_if_random_greater_than
	.word	Cmd_if_random_equal
	.word	Cmd_if_random_not_equal
	.word	Cmd_score
	.word	Cmd_if_hp_less_than
	.word	Cmd_if_hp_more_than
	.word	Cmd_if_hp_equal
	.word	Cmd_if_hp_not_equal
	.word	Cmd_if_status
	.word	Cmd_if_not_status
	.word	Cmd_if_status2
	.word	Cmd_if_not_status2
	.word	Cmd_if_status3
	.word	Cmd_if_not_status3
	.word	Cmd_if_side_affecting
	.word	Cmd_if_not_side_affecting
	.word	Cmd_if_less_than
	.word	Cmd_if_more_than
	.word	Cmd_if_equal
	.word	Cmd_if_not_equal
	.word	Cmd_if_less_than_ptr
	.word	Cmd_if_more_than_ptr
	.word	Cmd_if_equal_ptr
	.word	Cmd_if_not_equal_ptr
	.word	Cmd_if_move
	.word	Cmd_if_not_move
	.word	Cmd_if_in_bytes
	.word	Cmd_if_not_in_bytes
	.word	Cmd_if_in_hwords
	.word	Cmd_if_not_in_hwords
	.word	Cmd_if_user_has_attacking_move
	.word	Cmd_if_user_has_no_attacking_moves
	.word	Cmd_get_turn_count
	.word	Cmd_get_type
	.word	Cmd_get_considered_move_power
	.word	Cmd_get_how_powerful_move_is
	.word	Cmd_get_last_used_battler_move
	.word	Cmd_if_equal_u32
	.word	Cmd_if_not_equal_u32
	.word	Cmd_if_user_goes
	.word	Cmd_if_cant_use_belch
	.word	Cmd_nullsub_2A
	.word	Cmd_nullsub_2B
	.word	Cmd_count_usable_party_mons
	.word	Cmd_get_considered_move
	.word	Cmd_get_considered_move_effect
	.word	Cmd_get_ability
	.word	Cmd_get_highest_type_effectiveness
	.word	Cmd_if_type_effectiveness
	.word	Cmd_nullsub_32
	.word	Cmd_nullsub_33
	.word	Cmd_if_status_in_party
	.word	Cmd_if_status_not_in_party
	.word	Cmd_get_weather
	.word	Cmd_if_effect
	.word	Cmd_if_not_effect
	.word	Cmd_if_stat_level_less_than
	.word	Cmd_if_stat_level_more_than
	.word	Cmd_if_stat_level_equal
	.word	Cmd_if_stat_level_not_equal
	.word	Cmd_if_can_faint
	.word	Cmd_if_cant_faint
	.word	Cmd_if_has_move
	.word	Cmd_if_doesnt_have_move
	.word	Cmd_if_has_move_with_effect
	.word	Cmd_if_doesnt_have_move_with_effect
	.word	Cmd_if_any_move_disabled_or_encored
	.word	Cmd_if_curr_move_disabled_or_encored
	.word	Cmd_flee
	.word	Cmd_if_random_safari_flee
	.word	Cmd_watch
	.word	Cmd_get_hold_effect
	.word	Cmd_get_gender
	.word	Cmd_is_first_turn_for
	.word	Cmd_get_stockpile_count
	.word	Cmd_is_double_battle
	.word	Cmd_get_used_held_item
	.word	Cmd_get_move_type_from_result
	.word	Cmd_get_move_power_from_result
	.word	Cmd_get_move_effect_from_result
	.word	Cmd_get_protect_count
	.word	Cmd_if_move_flag
	.word	Cmd_if_field_status
	.word	Cmd_get_move_accuracy
	.word	Cmd_call_if_eq
	.word	Cmd_call_if_move_flag
	.word	Cmd_nullsub_57
	.word	Cmd_call
	.word	Cmd_goto
	.word	Cmd_end
	.word	Cmd_if_level_cond
	.word	Cmd_if_target_taunted
	.word	Cmd_if_target_not_taunted
	.word	Cmd_if_target_is_ally
	.word	Cmd_is_of_type
	.word	Cmd_check_ability
	.word	Cmd_if_flash_fired
	.word	Cmd_if_holds_item
	.word	Cmd_get_ally_chosen_move
	.word	Cmd_if_has_no_attacking_moves
	.word	Cmd_get_hazards_count
	.word	Cmd_if_doesnt_hold_berry
	.word	Cmd_if_share_type
	.word	Cmd_if_cant_use_last_resort
	.word	Cmd_if_has_move_with_split
	.word	Cmd_if_has_no_move_with_split
	.word	Cmd_if_physical_moves_unusable
	.word	Cmd_if_ai_can_go_down
	.word	Cmd_if_has_move_with_type
	.word	Cmd_if_no_move_used
	.word	Cmd_if_has_move_with_flag
	.word	Cmd_if_battler_absent
	.word	Cmd_is_grounded
	.word	Cmd_get_best_dmg_hp_percent
	.word	Cmd_get_curr_dmg_hp_percent
	.word	Cmd_get_move_split_from_result
	.word	Cmd_get_considered_move_split
	.word	Cmd_get_considered_move_target
	.word	Cmd_compare_speeds
	.word	Cmd_is_wakeup_turn
	.word	Cmd_if_has_move_with_accuracy_lt
	.size	 sBattleAICmdTable,488
	.align	1, 0
	.type	 sDiscouragedPowerfulMoveEffects,object
sDiscouragedPowerfulMoveEffects:
	.short	0x7
	.short	0x8
	.short	0x50
	.short	0x91
	.short	0x97
	.short	0xa1
	.short	0xaa
	.short	0xb6
	.short	0xbe
	.short	0xcc
	.short	0x154
	.short	0xffff
	.size	 sDiscouragedPowerfulMoveEffects,24
.text
	.align	2, 0
	.globl	BattleAI_SetupItems
	.type	 BattleAI_SetupItems,function
	.thumb_func
BattleAI_SetupItems:
	push	{lr}
	ldr	r0, .L8
	ldr	r0, [r0]
	ldr	r2, [r0, #0x18]
	mov	r1, #0x0
	mov	r3, #0x0
.L6:
	add	r0, r2, r1
	strb	r3, [r0]
	add	r1, r1, #0x1
	cmp	r1, #0x57
	bls	.L6	@cond_branch
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gBattleResources
.Lfe1:
	.size	 BattleAI_SetupItems,.Lfe1-BattleAI_SetupItems
	.align	2, 0
	.globl	BattleAI_SetupFlags
	.type	 BattleAI_SetupFlags,function
	.thumb_func
BattleAI_SetupFlags:
	push	{r4, r5, lr}
	bl	GetPlayerUsableMons
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L31
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L11	@cond_branch
	bl	GetAiScriptsInRecordedBattle
	b	.L30
.L32:
	.align	2, 0
.L31:
	.word	gBattleTypeFlags
.L11:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L13	@cond_branch
	ldr	r0, .L33
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x80
	lsl	r0, r0, #0x17
	str	r0, [r1, #0xc]
	b	.L12
.L34:
	.align	2, 0
.L33:
	.word	gBattleResources
.L13:
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L15	@cond_branch
	ldr	r0, .L35
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x80
	lsl	r0, r0, #0x16
	str	r0, [r1, #0xc]
	b	.L12
.L36:
	.align	2, 0
.L35:
	.word	gBattleResources
.L15:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L17	@cond_branch
	ldr	r0, .L37
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x80
	lsl	r0, r0, #0x18
	str	r0, [r1, #0xc]
	b	.L12
.L38:
	.align	2, 0
.L37:
	.word	gBattleResources
.L17:
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L19	@cond_branch
	bl	GetAiScriptsInBattleFactory
.L30:
	ldr	r1, .L39
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	str	r0, [r1, #0xc]
	b	.L12
.L40:
	.align	2, 0
.L39:
	.word	gBattleResources
.L19:
	ldr	r0, .L41
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L26	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L23	@cond_branch
	ldr	r0, .L41+0x4
	ldr	r0, [r0]
	ldr	r4, [r0, #0x14]
	ldr	r3, .L41+0x8
	ldr	r0, .L41+0xc
	ldrh	r0, [r0]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r3, r3, #0x1c
	add	r1, r1, r3
	ldr	r0, .L41+0x10
	ldrh	r2, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldr	r1, [r1]
	ldr	r0, [r0]
	orr	r1, r1, r0
	str	r1, [r4, #0xc]
	b	.L12
.L42:
	.align	2, 0
.L41:
	.word	0xc3f0900
	.word	gBattleResources
	.word	gTrainers
	.word	gTrainerBattleOpponent_A
	.word	gTrainerBattleOpponent_B
.L23:
	mov	r0, #0x26
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L26	@cond_branch
	mov	r0, #0x27
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L25	@cond_branch
.L26:
	ldr	r0, .L43
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x7
	str	r0, [r1, #0xc]
	b	.L12
.L44:
	.align	2, 0
.L43:
	.word	gBattleResources
.L25:
	ldr	r0, .L45
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L45+0x4
	ldr	r0, .L45+0x8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [r3, #0xc]
.L12:
	ldr	r0, .L45+0xc
	ldr	r0, [r0]
	ldr	r1, .L45+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L29	@cond_branch
	ldr	r2, .L45+0x4
	ldr	r0, .L45+0x8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x18]
	cmp	r0, #0
	bne	.L29	@cond_branch
	mov	r0, #0x2a
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L28	@cond_branch
	cmp	r5, #0x1
	bls	.L28	@cond_branch
.L29:
	ldr	r0, .L45
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r0, [r2, #0xc]
	mov	r1, #0x80
	orr	r0, r0, r1
	str	r0, [r2, #0xc]
.L28:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	gBattleResources
	.word	gTrainers
	.word	gTrainerBattleOpponent_A
	.word	gBattleTypeFlags
	.word	0x8001
.Lfe2:
	.size	 BattleAI_SetupFlags,.Lfe2-BattleAI_SetupFlags
	.align	2, 0
	.globl	BattleAI_SetupAIData
	.type	 BattleAI_SetupAIData,function
	.thumb_func
BattleAI_SetupAIData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r4, .L75
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	ldr	r5, [r0, #0xc]
	mov	r2, #0xac
	lsl	r2, r2, #0x1
	mov	r1, #0x0
	bl	memset
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	str	r5, [r0, #0xc]
	mov	r5, #0x0
	mov	r2, #0x1
.L51:
	add	r1, r6, #0
	and	r1, r1, r2
	cmp	r1, #0
	beq	.L52	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r5
	mov	r1, #0x64
	b	.L74
.L76:
	.align	2, 0
.L75:
	.word	gBattleResources
.L52:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r5
.L74:
	strb	r1, [r0]
	lsr	r6, r6, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L51	@cond_branch
	ldr	r0, .L77
	ldrb	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0xff
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	ldr	r4, .L77+0x4
	mov	r3, #0x0
	ldr	r1, .L77+0x8
.L58:
	ldr	r0, [r1]
	mov	r2, r8
	and	r0, r0, r2
	ldr	r2, .L77+0x4
	cmp	r0, #0
	beq	.L57	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r5
	strb	r3, [r0]
.L57:
	add	r1, r1, #0x4
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L58	@cond_branch
	ldr	r0, [r2]
	ldr	r0, [r0, #0x1c]
	add	r0, r0, #0x20
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r3, .L77+0xc
	ldr	r0, .L77
	ldrb	r0, [r0]
	strb	r0, [r3]
	ldr	r0, .L77+0x10
	strb	r1, [r0]
	ldr	r2, .L77+0x14
	ldrb	r2, [r2]
	cmp	r1, r2
	bcs	.L62	@cond_branch
	ldr	r0, .L77+0x18
	mov	sl, r0
	ldr	r7, .L77+0x10
.L64:
	ldr	r1, .L77+0xc
	ldrb	r0, [r1]
	add	r0, r0, sl
	ldrb	r3, [r0]
	mov	r1, #0x1
	ldr	r2, .L77+0x10
	ldrb	r0, [r2]
	add	r0, r0, sl
	ldrb	r2, [r0]
	add	r0, r1, #0
	and	r0, r0, r3
	and	r1, r1, r2
	cmp	r0, r1
	beq	.L63	@cond_branch
	mov	r5, #0x0
	ldr	r0, .L77+0x1c
	mov	r9, r0
	mov	r6, #0x0
.L69:
	mov	r4, #0x0
	lsl	r1, r5, #0x1
	ldr	r0, .L77+0xc
	ldrb	r3, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r1, r1, r9
	ldrh	r2, [r1]
	ldr	r1, .L77+0x20
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L70	@cond_branch
	ldr	r0, .L77+0x8
	add	r0, r6, r0
	ldr	r0, [r0]
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L70	@cond_branch
	add	r0, r2, #0
	ldrb	r2, [r7]
	add	r1, r3, #0
	bl	AI_CalcDamage
	add	r4, r0, #0
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	sub	r1, r1, r0
	mov	r0, r4
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L70	@cond_branch
	mov	r4, #0x1
.L70:
	ldr	r0, .L77+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r6, r1
	ldr	r0, .L77+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r2, r2, #0x14
	add	r2, r2, r1
	str	r4, [r2]
	add	r6, r6, #0x4
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L69	@cond_branch
.L63:
	ldrb	r0, [r7]
	add	r0, r0, #0x1
	strb	r0, [r7]
	ldr	r1, .L77+0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L64	@cond_branch
.L62:
	ldr	r2, .L77+0xc
	ldrb	r0, [r2]
	bl	SetRandomTarget
	ldr	r1, .L77+0x10
	strb	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L78:
	.align	2, 0
.L77:
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBitTable
	.word	sBattler_AI
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBattlerPositions
	.word	gBattleMons+0xc
	.word	gBattleMoves
.Lfe3:
	.size	 BattleAI_SetupAIData,.Lfe3-BattleAI_SetupAIData
	.align	2, 0
	.globl	BattleAI_ChooseMoveOrAction
	.type	 BattleAI_ChooseMoveOrAction,function
	.thumb_func
BattleAI_ChooseMoveOrAction:
	push	{r4, lr}
	ldr	r0, .L83
	ldrh	r4, [r0]
	ldr	r0, .L83+0x4
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L80	@cond_branch
	bl	ChooseMoveOrAction_Singles
	b	.L82
.L84:
	.align	2, 0
.L83:
	.word	gCurrentMove
	.word	gBattleTypeFlags
.L80:
	bl	ChooseMoveOrAction_Doubles
.L82:
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L85
	strh	r4, [r0]
	add	r0, r1, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L86:
	.align	2, 0
.L85:
	.word	gCurrentMove
.Lfe4:
	.size	 BattleAI_ChooseMoveOrAction,.Lfe4-BattleAI_ChooseMoveOrAction
	.align	2, 0
	.type	 GetTotalBaseStat,function
	.thumb_func
GetTotalBaseStat:
	ldr	r2, .L88
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1]
	ldrb	r2, [r1, #0x1]
	add	r0, r0, r2
	ldrb	r2, [r1, #0x2]
	add	r0, r0, r2
	ldrb	r2, [r1, #0x3]
	add	r0, r0, r2
	ldrb	r2, [r1, #0x4]
	add	r0, r0, r2
	ldrb	r1, [r1, #0x5]
	add	r0, r0, r1
	bx	lr
.L89:
	.align	2, 0
.L88:
	.word	gBaseStats
.Lfe5:
	.size	 GetTotalBaseStat,.Lfe5-GetTotalBaseStat
	.align	2, 0
	.globl	IsTruantMonVulnerable
	.type	 IsTruantMonVulnerable,function
	.thumb_func
IsTruantMonVulnerable:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r1, #0
	mov	r4, #0x0
	ldr	r6, .L100
	mov	r8, r6
	lsl	r7, r0, #0x18
.L94:
	ldr	r0, .L100+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x18]
	lsl	r0, r4, #0x1
	lsl	r1, r5, #0x4
	add	r0, r0, r1
	add	r2, r2, r0
	ldrh	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrh	r0, [r0]
	cmp	r0, #0x6f
	bne	.L95	@cond_branch
	cmp	r1, #0xcb
	bne	.L99	@cond_branch
.L95:
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r0, [r0]
	cmp	r0, #0x9b
	bne	.L93	@cond_branch
	lsl	r1, r5, #0x18
	lsr	r0, r7, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x1
	bl	GetWhoStrikesFirst
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L93	@cond_branch
.L99:
	mov	r0, #0x1
	b	.L98
.L101:
	.align	2, 0
.L100:
	.word	gBattleMoves
	.word	gBattleResources
.L93:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L94	@cond_branch
	mov	r0, #0x0
.L98:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 IsTruantMonVulnerable,.Lfe6-IsTruantMonVulnerable
	.align	2, 0
	.type	 ChooseMoveOrAction_Singles,function
	.thumb_func
ChooseMoveOrAction_Singles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r5, .L138
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	ldr	r4, [r0, #0xc]
	bl	RecordLastUsedMoveByTarget
	cmp	r4, #0
	beq	.L104	@cond_branch
	mov	r6, #0x0
.L105:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L106	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	strb	r6, [r0]
	bl	BattleAI_DoAIProcessing
.L106:
	lsr	r4, r4, #0x1
	ldr	r0, [r5]
	ldr	r1, [r0, #0x14]
	ldrb	r0, [r1, #0x11]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x11]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	strb	r6, [r0, #0x1]
	cmp	r4, #0
	bne	.L105	@cond_branch
.L104:
	mov	r4, #0x0
	ldr	r0, .L138
	mov	r8, r0
	ldr	r1, .L138+0x4
	mov	r9, r1
	ldr	r7, .L138+0x8
	ldr	r6, .L138+0xc
	mov	r5, r9
	mov	r3, #0xbf
	lsl	r3, r3, #0x2
.L111:
	ldr	r2, [r7]
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r2, r2, r3
	add	r2, r2, r1
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r4
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L111	@cond_branch
	ldr	r0, [r1]
	ldr	r0, [r0, #0x14]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L113	@cond_branch
	mov	r0, #0x4
	b	.L136
.L139:
	.align	2, 0
.L138:
	.word	gBattleResources
	.word	sBattler_AI
	.word	gBattleStruct
	.word	gBattlerTarget
.L113:
	mov	r7, #0x4
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L114	@cond_branch
	mov	r0, #0x5
	b	.L136
.L114:
	ldr	r5, .L140
	mov	r2, r9
	ldrb	r0, [r2]
	strb	r0, [r5]
	ldrb	r0, [r2]
	bl	CountUsablePartyMons
	cmp	r0, #0
	bgt	.LCB857
	b	.L115	@long jump
.LCB857:
	mov	r1, r9
	ldrb	r0, [r1]
	bl	IsAbilityPreventingEscape
	cmp	r0, #0
	beq	.LCB864
	b	.L115	@long jump
.LCB864:
	ldr	r6, .L140+0x4
	ldrb	r2, [r5]
	mov	r4, #0x5c
	mov	r0, r2
	mul	r0, r0, r4
	add	r1, r6, #0
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L140+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB876
	b	.L115	@long jump
.LCB876:
	ldr	r1, .L140+0xc
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB885
	b	.L115	@long jump
.LCB885:
	ldr	r0, .L140+0x10
	ldr	r0, [r0]
	mov	r1, #0xc0
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB892
	b	.L115	@long jump
.LCB892:
	mov	r2, r8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x47
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB900
	b	.L115	@long jump
.LCB900:
	mov	r1, r9
	ldrb	r0, [r1]
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	bl	GetTotalBaseStat
	ldr	r1, .L140+0x14
	cmp	r0, r1
	bls	.L116	@cond_branch
	mov	r2, r9
	ldrb	r0, [r2]
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r1, [r0, #0x2e]
	ldrh	r0, [r0, #0x2a]
	lsr	r1, r1, #0x1
	cmp	r0, r1
	bcc	.L116	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r1, [r0, #0x14]
	ldr	r0, [r1, #0xc]
	and	r0, r0, r7
	mov	r2, #0x5d
	cmp	r0, #0
	beq	.L117	@cond_branch
	mov	r2, #0x5f
.L117:
	mov	r4, #0x0
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	cmp	r0, r2
	bgt	.L120	@cond_branch
	mov	r3, r8
.L121:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L120	@cond_branch
	ldr	r0, [r3]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r4
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, r2
	ble	.L121	@cond_branch
.L120:
	cmp	r4, #0x4
	bne	.L116	@cond_branch
	bl	GetMostSuitableMonToSwitchInto
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	beq	.L116	@cond_branch
	ldr	r0, .L140+0x18
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	mov	r2, #0xaa
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	b	.L137
.L141:
	.align	2, 0
.L140:
	.word	gActiveBattler
	.word	gBattleMons
	.word	0x4002000
	.word	gStatuses3
	.word	gBattleTypeFlags
	.word	0x135
	.word	gBattleResources
.L116:
	ldr	r4, .L142
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x36
	bne	.L115	@cond_branch
	ldrb	r0, [r4]
	ldr	r1, .L142+0x4
	ldrb	r1, [r1]
	bl	IsTruantMonVulnerable
	cmp	r0, #0
	beq	.L115	@cond_branch
	ldr	r0, .L142+0x8
	ldrb	r4, [r4]
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1a]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L115	@cond_branch
	ldr	r1, .L142+0xc
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r1, [r0, #0x2e]
	ldrh	r0, [r0, #0x2a]
	lsr	r1, r1, #0x1
	cmp	r0, r1
	bcc	.L115	@cond_branch
	bl	GetMostSuitableMonToSwitchInto
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	beq	.L115	@cond_branch
	ldr	r0, .L142+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	mov	r1, #0xaa
	lsl	r1, r1, #0x1
	add	r0, r0, r1
.L137:
	mov	r1, #0x1
	strb	r1, [r0]
	mov	r0, #0x7
	b	.L136
.L143:
	.align	2, 0
.L142:
	.word	sBattler_AI
	.word	gBattlerTarget
	.word	gDisableStructs
	.word	gBattleMons
	.word	gBattleResources
.L115:
	mov	r6, #0x1
	mov	r2, sp
	ldr	r3, .L144
	ldr	r0, [r3]
	ldr	r0, [r0, #0x14]
	ldrb	r0, [r0, #0x4]
	mov	r1, #0x0
	strb	r0, [r2]
	add	r0, sp, #0x4
	strb	r1, [r0]
	mov	r4, #0x1
	mov	r8, r3
	ldr	r2, .L144+0x4
	mov	sl, r0
	ldr	r1, .L144+0x8
	ldrb	r2, [r2]
	mov	r5, sp
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r3, r1, #0
	add	r3, r3, #0xe
	mov	r7, sl
.L131:
	ldrh	r0, [r3]
	cmp	r0, #0
	beq	.L130	@cond_branch
	ldrb	r1, [r5]
	mov	r2, r8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r2, r0, r4
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bne	.L133	@cond_branch
	mov	r1, sp
	add	r0, r1, r6
	ldrb	r1, [r2]
	strb	r1, [r0]
	add	r0, r7, r6
	strb	r4, [r0]
	add	r6, r6, #0x1
.L133:
	ldrb	r1, [r5]
	mov	r2, r8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r2, r0, r4
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bge	.L130	@cond_branch
	mov	r6, #0x1
	ldrb	r0, [r2]
	strb	r0, [r5]
	strb	r4, [r7]
.L130:
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L131	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r6, #0
	bl	__umodsi3
	add	r0, r0, sl
	ldrb	r0, [r0]
.L136:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L145:
	.align	2, 0
.L144:
	.word	gBattleResources
	.word	sBattler_AI
	.word	gBattleMons
.Lfe7:
	.size	 ChooseMoveOrAction_Singles,.Lfe7-ChooseMoveOrAction_Singles
	.align	2, 0
	.type	 ChooseMoveOrAction_Doubles,function
	.thumb_func
ChooseMoveOrAction_Doubles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	mov	r0, #0x0
	mov	r8, r0
	ldr	r7, .L188
	mov	r1, sp
	add	r1, r1, #0xc
	str	r1, [sp, #0x1c]
	mov	r2, sp
	add	r2, r2, #0x8
	str	r2, [sp, #0x18]
	str	r1, [sp, #0x20]
	mov	r9, sp
.L150:
	ldrb	r0, [r7]
	cmp	r8, r0
	beq	.L152	@cond_branch
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r2, .L188+0x4
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.L151	@cond_branch
.L152:
	mov	r0, #0xff
	ldr	r1, [sp, #0x20]
	strb	r0, [r1]
	ldr	r0, .L188+0x8
	mov	r2, r9
	strh	r0, [r2]
	b	.L149
.L189:
	.align	2, 0
.L188:
	.word	sBattler_AI
	.word	gBattleMons
	.word	0xffff
.L151:
	ldr	r0, .L190
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L154	@cond_branch
	ldr	r0, .L190+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x8b
	ldrb	r0, [r0]
	lsr	r0, r0, #0x4
	bl	BattleAI_SetupAIData
	b	.L155
.L191:
	.align	2, 0
.L190:
	.word	gBattleTypeFlags
	.word	gBattleStruct
.L154:
	mov	r0, #0xf
	bl	BattleAI_SetupAIData
.L155:
	ldr	r0, .L192
	mov	r7, r8
	strb	r7, [r0]
	mov	r1, #0x1
	mov	r2, r8
	and	r2, r2, r1
	ldr	r0, .L192+0x4
	ldrb	r0, [r0]
	and	r1, r1, r0
	cmp	r2, r1
	beq	.L156	@cond_branch
	bl	RecordLastUsedMoveByTarget
.L156:
	ldr	r2, .L192+0x8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	mov	r1, #0x0
	strb	r1, [r0, #0x11]
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	strb	r1, [r0, #0x1]
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	ldr	r4, [r0, #0xc]
	cmp	r4, #0
	beq	.L158	@cond_branch
	add	r5, r2, #0
	mov	r6, #0x0
.L159:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L160	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	strb	r6, [r0]
	bl	BattleAI_DoAIProcessing
.L160:
	lsr	r4, r4, #0x1
	ldr	r0, [r5]
	ldr	r1, [r0, #0x14]
	ldrb	r0, [r1, #0x11]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x11]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	strb	r6, [r0, #0x1]
	cmp	r4, #0
	bne	.L159	@cond_branch
.L158:
	ldr	r1, .L192+0x8
	ldr	r0, [r1]
	ldr	r3, [r0, #0x14]
	ldrb	r1, [r3, #0x10]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L162	@cond_branch
	mov	r0, #0x4
	ldr	r2, [sp, #0x20]
	strb	r0, [r2]
	b	.L163
.L193:
	.align	2, 0
.L192:
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleResources
.L162:
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L164	@cond_branch
	mov	r0, #0x5
	ldr	r7, [sp, #0x20]
	strb	r0, [r7]
	b	.L163
.L164:
	add	r1, sp, #0x10
	ldrb	r0, [r3, #0x4]
	strb	r0, [r1]
	add	r0, sp, #0x14
	strb	r2, [r0]
	mov	r5, #0x1
	mov	r3, #0x1
	ldr	r7, .L194
	add	r6, r1, #0
	mov	sl, r0
	ldrb	r1, [r7]
	mov	r0, #0x5c
	mul	r0, r0, r1
	ldr	r1, .L194+0x4
	add	r0, r0, r1
	add	r4, r0, #0x2
	mov	r7, sl
.L169:
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L168	@cond_branch
	ldrb	r1, [r6]
	ldr	r2, .L194+0x8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r2, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bne	.L171	@cond_branch
	add	r0, r6, r5
	ldrb	r1, [r2]
	strb	r1, [r0]
	add	r0, r7, r5
	strb	r3, [r0]
	add	r5, r5, #0x1
.L171:
	ldrb	r1, [r6]
	ldr	r2, .L194+0x8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r2, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bge	.L168	@cond_branch
	ldrb	r0, [r2]
	strb	r0, [r6]
	strb	r3, [r7]
	mov	r5, #0x1
.L168:
	add	r4, r4, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L169	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	bl	__modsi3
	add	r0, r0, sl
	ldrb	r0, [r0]
	ldr	r7, [sp, #0x20]
	strb	r0, [r7]
	ldrb	r2, [r6]
	mov	r0, r9
	strh	r2, [r0]
	ldr	r0, .L194
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	cmp	r8, r0
	bne	.L163	@cond_branch
	cmp	r2, #0x63
	bgt	.L163	@cond_branch
	ldr	r0, .L194+0xc
	mov	r1, r9
	strh	r0, [r1]
.L163:
	mov	r3, #0x0
	ldr	r7, .L194
	ldr	r5, .L194+0x10
	ldr	r4, .L194+0x14
.L178:
	ldr	r2, [r5]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r3, r1
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	mov	r0, #0xbf
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r2, r2, r1
	ldr	r1, .L194+0x8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r3
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L178	@cond_branch
.L149:
	ldr	r2, [sp, #0x20]
	add	r2, r2, #0x1
	str	r2, [sp, #0x20]
	mov	r0, #0x2
	add	r9, r9, r0
	mov	r1, #0x1
	add	r8, r8, r1
	mov	r2, r8
	cmp	r2, #0x3
	bgt	.LCB1545
	b	.L150	@long jump
.LCB1545:
	mov	r0, sp
	ldrh	r5, [r0]
	mov	r0, #0x0
	ldr	r7, [sp, #0x18]
	strb	r0, [r7]
	mov	r4, #0x1
	mov	r8, r4
	ldr	r6, .L194+0x14
	ldr	r3, [sp, #0x18]
	mov	r1, sp
	add	r1, r1, #0x2
.L184:
	lsl	r0, r5, #0x10
	asr	r2, r0, #0x10
	mov	r7, #0x0
	ldrsh	r0, [r1, r7]
	cmp	r2, r0
	bne	.L185	@cond_branch
	add	r0, r3, r4
	mov	r7, r8
	strb	r7, [r0]
	add	r4, r4, #0x1
.L185:
	mov	r7, #0x0
	ldrsh	r0, [r1, r7]
	cmp	r2, r0
	bge	.L183	@cond_branch
	ldrh	r5, [r1]
	mov	r0, r8
	strb	r0, [r3]
	mov	r4, #0x1
.L183:
	add	r1, r1, #0x2
	mov	r2, #0x1
	add	r8, r8, r2
	mov	r7, r8
	cmp	r7, #0x3
	ble	.L184	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0
	bl	__modsi3
	ldr	r1, [sp, #0x18]
	add	r0, r1, r0
	ldrb	r0, [r0]
	strb	r0, [r6]
	ldrb	r0, [r6]
	ldr	r2, [sp, #0x1c]
	add	r0, r2, r0
	ldrb	r0, [r0]
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L195:
	.align	2, 0
.L194:
	.word	sBattler_AI
	.word	gBattleMons+0xc
	.word	gBattleResources
	.word	0xffff
	.word	gBattleStruct
	.word	gBattlerTarget
.Lfe8:
	.size	 ChooseMoveOrAction_Doubles,.Lfe8-ChooseMoveOrAction_Doubles
	.align	2, 0
	.type	 BattleAI_DoAIProcessing,function
	.thumb_func
BattleAI_DoAIProcessing:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r7, .L216
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	ldrb	r0, [r0]
	add	r6, r7, #0
	cmp	r0, #0x2
	bne	.LCB1662
	b	.L198	@long jump
.LCB1662:
	mov	r9, r7
	ldr	r0, .L216+0x4
	mov	r8, r0
.L199:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r2, [r0, #0x14]
	ldrb	r0, [r2]
	cmp	r0, #0x1
	beq	.L205	@cond_branch
	cmp	r0, #0x1
	bgt	.L197	@cond_branch
	cmp	r0, #0
	bne	.L197	@cond_branch
	ldr	r1, .L216+0x8
	ldrb	r0, [r2, #0x11]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, r8
	str	r0, [r1]
	ldr	r5, .L216+0xc
	ldrb	r4, [r2, #0x1]
	ldr	r0, .L216+0x10
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mov	r3, r1
	mul	r3, r3, r0
	add	r0, r4, r3
	add	r1, r5, #0
	add	r1, r1, #0x25
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L215	@cond_branch
	lsl	r0, r4, #0x1
	add	r0, r0, r3
	add	r1, r5, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
.L215:
	strh	r0, [r2, #0x2]
	ldr	r0, [r6]
	ldr	r1, [r0, #0x14]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L197
.L217:
	.align	2, 0
.L216:
	.word	gBattleResources
	.word	gAIScriptPtr
	.word	gBattleAI_ScriptsTable
	.word	gBattleMons
	.word	sBattler_AI
.L205:
	ldrh	r1, [r2, #0x2]
	cmp	r1, #0
	beq	.L206	@cond_branch
	ldr	r1, .L218
	mov	r2, r8
	ldr	r0, [r2]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	b	.L207
.L219:
	.align	2, 0
.L218:
	.word	sBattleAICmdTable
.L206:
	add	r0, r2, #0x4
	ldrb	r2, [r2, #0x1]
	add	r0, r0, r2
	strb	r1, [r0]
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
.L207:
	ldr	r2, .L220
	ldr	r0, [r2]
	ldr	r3, [r0, #0x14]
	ldrb	r1, [r3, #0x10]
	mov	r0, #0x1
	and	r0, r0, r1
	add	r6, r2, #0
	cmp	r0, #0
	beq	.L197	@cond_branch
	ldrb	r0, [r3, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r3, #0x1]
	ldr	r0, [r6]
	ldr	r2, [r0, #0x14]
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x3
	bhi	.L209	@cond_branch
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x8
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L209	@cond_branch
	strb	r0, [r2]
	b	.L210
.L221:
	.align	2, 0
.L220:
	.word	gBattleResources
.L209:
	ldr	r0, [r6]
	ldr	r1, [r0, #0x14]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L210:
	ldr	r0, [r6]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0xfe
	and	r0, r0, r1
	strb	r0, [r2, #0x10]
.L197:
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.LCB1834
	b	.L199	@long jump
.LCB1834:
.L198:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 BattleAI_DoAIProcessing,.Lfe9-BattleAI_DoAIProcessing
	.align	2, 0
	.type	 RecordLastUsedMoveByTarget,function
	.thumb_func
RecordLastUsedMoveByTarget:
	push	{lr}
	ldr	r0, .L223
	ldrb	r0, [r0]
	ldr	r2, .L223+0x4
	lsl	r1, r0, #0x1
	add	r1, r1, r2
	ldrh	r1, [r1]
	bl	RecordKnownMove
	pop	{r0}
	bx	r0
.L224:
	.align	2, 0
.L223:
	.word	gBattlerTarget
	.word	gLastMoves
.Lfe10:
	.size	 RecordLastUsedMoveByTarget,.Lfe10-RecordLastUsedMoveByTarget
	.align	2, 0
	.globl	IsBattlerAIControlled
	.type	 IsBattlerAIControlled,function
	.thumb_func
IsBattlerAIControlled:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L231	@cond_branch
	cmp	r0, #0x1
	ble	.L228	@cond_branch
	cmp	r0, #0x2
	beq	.L230	@cond_branch
	cmp	r0, #0x3
	beq	.L231	@cond_branch
.L228:
	mov	r0, #0x0
	b	.L234
.L230:
	ldr	r0, .L235
	ldr	r0, [r0]
	lsr	r0, r0, #0x16
	mov	r1, #0x1
	and	r0, r0, r1
	b	.L234
.L236:
	.align	2, 0
.L235:
	.word	gBattleTypeFlags
.L231:
	mov	r0, #0x1
.L234:
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 IsBattlerAIControlled,.Lfe11-IsBattlerAIControlled
	.align	2, 0
	.globl	ClearBattlerMoveHistory
	.type	 ClearBattlerMoveHistory,function
	.thumb_func
ClearBattlerMoveHistory:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	ldr	r5, .L238
	ldr	r0, [r5]
	ldr	r0, [r0, #0x18]
	lsr	r4, r4, #0x14
	add	r0, r4, r0
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	ldr	r0, [r5]
	ldr	r0, [r0, #0x18]
	add	r0, r4, r0
	add	r0, r0, #0x8
	mov	r1, #0x0
	mov	r2, #0x6
	bl	memset
	ldr	r0, [r5]
	ldr	r0, [r0, #0x18]
	add	r0, r0, r4
	mov	r1, #0x0
	strb	r1, [r0, #0xe]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L239:
	.align	2, 0
.L238:
	.word	gBattleResources
.Lfe12:
	.size	 ClearBattlerMoveHistory,.Lfe12-ClearBattlerMoveHistory
	.align	2, 0
	.globl	RecordLastUsedMoveBy
	.type	 RecordLastUsedMoveBy,function
	.thumb_func
RecordLastUsedMoveBy:
	push	{r4, r5, lr}
	add	r5, r1, #0
	ldr	r4, .L242
	ldr	r1, [r4]
	lsl	r3, r0, #0x4
	ldr	r0, [r1, #0x18]
	add	r2, r0, r3
	ldrb	r0, [r2, #0xe]
	add	r0, r0, #0x1
	strb	r0, [r2, #0xe]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bls	.L241	@cond_branch
	mov	r0, #0x0
	strb	r0, [r2, #0xe]
.L241:
	ldr	r0, [r4]
	ldr	r1, [r0, #0x18]
	ldrb	r0, [r2, #0xe]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	add	r1, r1, #0x8
	add	r1, r1, r0
	strh	r5, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L243:
	.align	2, 0
.L242:
	.word	gBattleResources
.Lfe13:
	.size	 RecordLastUsedMoveBy,.Lfe13-RecordLastUsedMoveBy
	.align	2, 0
	.globl	RecordKnownMove
	.type	 RecordKnownMove,function
	.thumb_func
RecordKnownMove:
	push	{r4, r5, r6, r7, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	mov	r7, #0x0
	ldr	r2, .L252
	ldr	r1, [r2]
	ldr	r1, [r1, #0x18]
	lsr	r3, r0, #0x14
	add	r1, r1, r3
	ldrh	r0, [r1]
	cmp	r0, r6
	beq	.L246	@cond_branch
	mov	ip, r2
	mov	r5, #0x0
.L249:
	mov	r1, ip
	ldr	r0, [r1]
	ldr	r4, [r0, #0x18]
	add	r1, r3, #0
	add	r0, r5, r1
	add	r2, r4, r0
	ldrh	r0, [r2]
	cmp	r0, #0
	bne	.L247	@cond_branch
	strh	r6, [r2]
	b	.L246
.L253:
	.align	2, 0
.L252:
	.word	gBattleResources
.L247:
	add	r5, r5, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	bgt	.L246	@cond_branch
	add	r0, r5, r1
	add	r0, r4, r0
	ldrh	r0, [r0]
	cmp	r0, r6
	bne	.L249	@cond_branch
.L246:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 RecordKnownMove,.Lfe14-RecordKnownMove
	.align	2, 0
	.globl	RecordAbilityBattle
	.type	 RecordAbilityBattle,function
	.thumb_func
RecordAbilityBattle:
	lsl	r0, r0, #0x18
	ldr	r2, .L255
	ldr	r2, [r2]
	ldr	r2, [r2, #0x18]
	lsr	r0, r0, #0x17
	add	r2, r2, #0x40
	add	r2, r2, r0
	strh	r1, [r2]
	bx	lr
.L256:
	.align	2, 0
.L255:
	.word	gBattleResources
.Lfe15:
	.size	 RecordAbilityBattle,.Lfe15-RecordAbilityBattle
	.align	2, 0
	.globl	ClearBattlerAbilityHistory
	.type	 ClearBattlerAbilityHistory,function
	.thumb_func
ClearBattlerAbilityHistory:
	lsl	r0, r0, #0x18
	ldr	r1, .L258
	ldr	r1, [r1]
	ldr	r1, [r1, #0x18]
	lsr	r0, r0, #0x17
	add	r1, r1, #0x40
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1]
	bx	lr
.L259:
	.align	2, 0
.L258:
	.word	gBattleResources
.Lfe16:
	.size	 ClearBattlerAbilityHistory,.Lfe16-ClearBattlerAbilityHistory
	.align	2, 0
	.globl	RecordItemEffectBattle
	.type	 RecordItemEffectBattle,function
	.thumb_func
RecordItemEffectBattle:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L261
	ldr	r2, [r2]
	ldr	r2, [r2, #0x18]
	add	r2, r2, #0x48
	add	r2, r2, r0
	strb	r1, [r2]
	bx	lr
.L262:
	.align	2, 0
.L261:
	.word	gBattleResources
.Lfe17:
	.size	 RecordItemEffectBattle,.Lfe17-RecordItemEffectBattle
	.align	2, 0
	.globl	ClearBattlerItemEffectHistory
	.type	 ClearBattlerItemEffectHistory,function
	.thumb_func
ClearBattlerItemEffectHistory:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L264
	ldr	r1, [r1]
	ldr	r1, [r1, #0x18]
	add	r1, r1, #0x48
	add	r1, r1, r0
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L265:
	.align	2, 0
.L264:
	.word	gBattleResources
.Lfe18:
	.size	 ClearBattlerItemEffectHistory,.Lfe18-ClearBattlerItemEffectHistory
	.align	2, 0
	.type	 SaveBattlerData,function
	.thumb_func
SaveBattlerData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r6, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L267	@cond_branch
	ldr	r0, .L273
	mov	r8, r0
	ldr	r3, [r0]
	ldr	r1, [r3, #0x14]
	lsl	r5, r6, #0x4
	add	r1, r1, r5
	ldr	r4, .L273+0x4
	mov	r0, #0x5c
	mul	r6, r6, r0
	add	r2, r6, r4
	ldrh	r0, [r2, #0x20]
	mov	r7, #0x8a
	lsl	r7, r7, #0x1
	add	r1, r1, r7
	strh	r0, [r1]
	ldr	r0, [r3, #0x14]
	add	r0, r0, r5
	ldrh	r1, [r2, #0x30]
	add	r7, r7, #0xa
	add	r0, r0, r7
	strh	r1, [r0]
	ldr	r1, [r3, #0x14]
	add	r1, r1, r5
	ldrh	r0, [r2]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	strh	r0, [r1]
	mov	r2, #0x0
	mov	r7, r8
	mov	r3, #0x8b
	lsl	r3, r3, #0x1
	add	r4, r4, #0xc
	add	r6, r6, r4
.L271:
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	add	r0, r0, r3
	add	r0, r0, r5
	ldrh	r1, [r6]
	strh	r1, [r0]
	add	r6, r6, #0x2
	add	r5, r5, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bls	.L271	@cond_branch
.L267:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L274:
	.align	2, 0
.L273:
	.word	gBattleResources
	.word	gBattleMons
.Lfe19:
	.size	 SaveBattlerData,.Lfe19-SaveBattlerData
	.align	2, 0
	.type	 SetBattlerData,function
	.thumb_func
SetBattlerData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L276	@cond_branch
	ldr	r2, .L290
	ldr	r0, [r2]
	ldr	r0, [r0, #0x18]
	lsl	r1, r4, #0x1
	add	r0, r0, #0x40
	add	r0, r0, r1
	ldrh	r3, [r0]
	add	r7, r3, #0
	mov	ip, r2
	cmp	r7, #0
	beq	.L277	@cond_branch
	ldr	r1, .L290+0x4
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	strh	r3, [r0, #0x20]
	mov	r8, r1
	b	.L278
.L291:
	.align	2, 0
.L290:
	.word	gBattleResources
	.word	gBattleMons
.L277:
	ldr	r6, .L292
	ldr	r2, .L292+0x4
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r5, r0, r2
	ldrh	r0, [r5]
	lsl	r3, r0, #0x15
	lsr	r1, r3, #0x15
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r0, [r0, #0x1a]
	mov	r8, r2
	cmp	r0, #0
	beq	.L280	@cond_branch
	add	r0, r1, #0
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	add	r2, r0, #0
	lsl	r0, r2, #0x3
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r1, [r1, #0x1a]
	ldrh	r0, [r0, #0x18]
	cmp	r1, r0
	bne	.L279	@cond_branch
.L280:
	lsr	r0, r3, #0x15
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r0, [r1, #0x18]
	strh	r0, [r5, #0x20]
	b	.L278
.L293:
	.align	2, 0
.L292:
	.word	gBaseStats
	.word	gBattleMons
.L279:
	strh	r7, [r5, #0x20]
.L278:
	mov	r1, ip
	ldr	r0, [r1]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x48
	add	r0, r0, r4
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L282	@cond_branch
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r8
	strh	r1, [r0, #0x30]
.L282:
	mov	r2, #0x0
	mov	r5, ip
	ldr	r0, .L294
	mov	r1, #0x5c
	mul	r1, r1, r4
	add	r0, r0, #0xc
	add	r1, r1, r0
	lsl	r3, r4, #0x4
.L286:
	ldr	r0, [r5]
	ldr	r0, [r0, #0x18]
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L285	@cond_branch
	strh	r0, [r1]
.L285:
	add	r1, r1, #0x2
	add	r3, r3, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bls	.L286	@cond_branch
	add	r0, r4, #0
	bl	GetIllusionMonPtr
	cmp	r0, #0
	beq	.L276	@cond_branch
	mov	r1, #0x41
	bl	GetMonData
	ldr	r3, .L294
	mov	r1, #0x5c
	mov	r2, r4
	mul	r2, r2, r1
	add	r2, r2, r3
	ldr	r3, .L294+0x4
	add	r1, r3, #0
	and	r0, r0, r1
	ldrh	r3, [r2]
	ldr	r1, .L294+0x8
	and	r1, r1, r3
	orr	r1, r1, r0
	strh	r1, [r2]
.L276:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L295:
	.align	2, 0
.L294:
	.word	gBattleMons
	.word	0x7ff
	.word	-0x800
.Lfe20:
	.size	 SetBattlerData,.Lfe20-SetBattlerData
	.align	2, 0
	.type	 RestoreBattlerData,function
	.thumb_func
RestoreBattlerData:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L297	@cond_branch
	ldr	r5, .L303
	mov	r0, #0x5c
	mov	r1, r4
	mul	r1, r1, r0
	mov	r8, r1
	add	r3, r1, r5
	ldr	r6, .L303+0x4
	ldr	r1, [r6]
	ldr	r0, [r1, #0x14]
	lsl	r4, r4, #0x4
	add	r0, r0, r4
	mov	r2, #0x8a
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r3, #0x20]
	ldr	r0, [r1, #0x14]
	add	r0, r0, r4
	add	r2, r2, #0xa
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r3, #0x30]
	ldr	r0, [r1, #0x14]
	add	r0, r0, r4
	mov	r1, #0x90
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldr	r1, .L303+0x8
	and	r1, r1, r0
	ldrh	r2, [r3]
	ldr	r0, .L303+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3]
	mov	r2, #0x0
	add	r5, r5, #0xc
	mov	r0, r8
	add	r1, r0, r5
	mov	r3, #0x8b
	lsl	r3, r3, #0x1
.L301:
	ldr	r0, [r6]
	ldr	r0, [r0, #0x14]
	add	r0, r0, r3
	add	r0, r0, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	add	r4, r4, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bls	.L301	@cond_branch
.L297:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L304:
	.align	2, 0
.L303:
	.word	gBattleMons
	.word	gBattleResources
	.word	0x7ff
	.word	-0x800
.Lfe21:
	.size	 RestoreBattlerData,.Lfe21-RestoreBattlerData
	.align	2, 0
	.type	 AI_GetIfCrit,function
	.thumb_func
AI_GetIfCrit:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	add	r1, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, r4, #0
	mov	r3, #0x0
	bl	CalcCritChanceStage
	add	r0, r0, #0x2
	cmp	r0, #0x6
	bhi	.L316	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L323
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L324:
	.align	2, 0
.L323:
	.word	.L321
	.align	2, 0
	.align	2, 0
.L321:
	.word	.L320
	.word	.L316
	.word	.L316
	.word	.L310
	.word	.L313
	.word	.L320
	.word	.L320
.L310:
	ldr	r1, .L325
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L316	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x5
	bl	__umodsi3
	lsl	r0, r0, #0x10
	mov	r2, #0x1
	cmp	r0, #0
	beq	.L306	@cond_branch
	b	.L316
.L326:
	.align	2, 0
.L325:
	.word	gBattleMoves
.L313:
	ldr	r1, .L327
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L322	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L316	@cond_branch
	b	.L320
.L328:
	.align	2, 0
.L327:
	.word	gBattleMoves
.L322:
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r0
	mov	r2, #0x1
	cmp	r1, #0
	beq	.L306	@cond_branch
.L316:
	mov	r2, #0x0
	b	.L306
.L320:
	mov	r2, #0x1
.L306:
	add	r0, r2, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 AI_GetIfCrit,.Lfe22-AI_GetIfCrit
	.align	2, 0
	.globl	AI_CalcDamage
	.type	 AI_CalcDamage,function
	.thumb_func
AI_CalcDamage:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	add	r0, r5, #0
	bl	SaveBattlerData
	add	r0, r7, #0
	bl	SaveBattlerData
	add	r0, r5, #0
	bl	SetBattlerData
	add	r0, r7, #0
	bl	SetBattlerData
	ldr	r4, .L332
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1, #0x12]
	add	r0, r6, #0
	add	r1, r5, #0
	bl	SetTypeBeforeUsingMove
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L330	@cond_branch
	mov	r4, #0x3f
	and	r4, r4, r0
	b	.L331
.L333:
	.align	2, 0
.L332:
	.word	gBattleStruct
.L330:
	ldr	r1, .L334
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x3]
.L331:
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r7, #0
	bl	AI_GetIfCrit
	add	r3, r4, #0
	mov	r1, #0x0
	str	r1, [sp]
	str	r0, [sp, #0x4]
	str	r1, [sp, #0x8]
	str	r1, [sp, #0xc]
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r7, #0
	bl	CalculateMoveDamage
	add	r4, r0, #0
	add	r0, r5, #0
	bl	RestoreBattlerData
	add	r0, r7, #0
	bl	RestoreBattlerData
	add	r0, r4, #0
	add	sp, sp, #0x10
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L335:
	.align	2, 0
.L334:
	.word	gBattleMoves
.Lfe23:
	.size	 AI_CalcDamage,.Lfe23-AI_CalcDamage
	.align	2, 0
	.globl	AI_CalcPartyMonDamage
	.type	 AI_CalcPartyMonDamage,function
	.thumb_func
AI_CalcPartyMonDamage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	str	r3, [sp, #0x4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	mov	r0, #0xb8
	lsl	r0, r0, #0x1
	bl	Alloc
	add	r7, r0, #0
	add	r4, r7, #0
	mov	r5, #0x0
	mov	r0, #0x8a
	lsl	r0, r0, #0x1
	add	r6, r7, r0
	ldr	r0, .L347
	mov	r8, r0
.L340:
	mov	r0, r8
	add	r1, r5, r0
	add	r0, r4, #0
	mov	r2, #0x5c
	bl	memcpy
	add	r4, r4, #0x5c
	add	r5, r5, #0x5c
	cmp	r4, r6
	bls	.L340	@cond_branch
	mov	r0, #0x5c
	mov	r1, r9
	mul	r1, r1, r0
	ldr	r4, .L347
	add	r1, r1, r4
	ldr	r0, [sp, #0x4]
	bl	PokemonToBattleMon
	ldr	r0, [sp]
	mov	r1, r9
	mov	r2, sl
	bl	AI_CalcDamage
	mov	r8, r0
	add	r5, r7, #0
	mov	r0, #0x8a
	lsl	r0, r0, #0x1
	add	r6, r7, r0
.L345:
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x5c
	bl	memcpy
	add	r5, r5, #0x5c
	add	r4, r4, #0x5c
	cmp	r5, r6
	bls	.L345	@cond_branch
	add	r0, r7, #0
	bl	Free
	mov	r0, r8
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L348:
	.align	2, 0
.L347:
	.word	gBattleMons
.Lfe24:
	.size	 AI_CalcPartyMonDamage,.Lfe24-AI_CalcPartyMonDamage
	.align	2, 0
	.globl	AI_GetTypeEffectiveness
	.type	 AI_GetTypeEffectiveness,function
	.thumb_func
AI_GetTypeEffectiveness:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	add	r0, r5, #0
	bl	SaveBattlerData
	add	r0, r7, #0
	bl	SaveBattlerData
	add	r0, r5, #0
	bl	SetBattlerData
	add	r0, r7, #0
	bl	SetBattlerData
	ldr	r4, .L352
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1, #0x12]
	add	r0, r6, #0
	add	r1, r5, #0
	bl	SetTypeBeforeUsingMove
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L350	@cond_branch
	mov	r1, #0x3f
	and	r1, r1, r0
	b	.L351
.L353:
	.align	2, 0
.L352:
	.word	gBattleStruct
.L350:
	ldr	r1, .L354
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x3]
.L351:
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r6, #0
	add	r2, r5, #0
	add	r3, r7, #0
	bl	CalcTypeEffectivenessMultiplier
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	RestoreBattlerData
	add	r0, r7, #0
	bl	RestoreBattlerData
	add	r0, r4, #0
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L355:
	.align	2, 0
.L354:
	.word	gBattleMoves
.Lfe25:
	.size	 AI_GetTypeEffectiveness,.Lfe25-AI_GetTypeEffectiveness
	.align	2, 0
	.type	 Cmd_if_random_less_than,function
	.thumb_func
Cmd_if_random_less_than:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L359
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	bcs	.L357	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L358
.L360:
	.align	2, 0
.L359:
	.word	gAIScriptPtr
.L357:
	add	r0, r2, #0x6
	str	r0, [r3]
.L358:
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 Cmd_if_random_less_than,.Lfe26-Cmd_if_random_less_than
	.align	2, 0
	.type	 Cmd_if_random_greater_than,function
	.thumb_func
Cmd_if_random_greater_than:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L364
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	bls	.L362	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L363
.L365:
	.align	2, 0
.L364:
	.word	gAIScriptPtr
.L362:
	add	r0, r2, #0x6
	str	r0, [r3]
.L363:
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 Cmd_if_random_greater_than,.Lfe27-Cmd_if_random_greater_than
	.align	2, 0
	.type	 Cmd_if_random_equal,function
	.thumb_func
Cmd_if_random_equal:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L369
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	bne	.L367	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L368
.L370:
	.align	2, 0
.L369:
	.word	gAIScriptPtr
.L367:
	add	r0, r2, #0x6
	str	r0, [r3]
.L368:
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 Cmd_if_random_equal,.Lfe28-Cmd_if_random_equal
	.align	2, 0
	.type	 Cmd_if_random_not_equal,function
	.thumb_func
Cmd_if_random_not_equal:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L374
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	beq	.L372	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L373
.L375:
	.align	2, 0
.L374:
	.word	gAIScriptPtr
.L372:
	add	r0, r2, #0x6
	str	r0, [r3]
.L373:
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 Cmd_if_random_not_equal,.Lfe29-Cmd_if_random_not_equal
	.align	2, 0
	.type	 Cmd_score,function
	.thumb_func
Cmd_score:
	push	{r4, lr}
	ldr	r2, .L378
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r1, r0, #0x4
	ldrb	r0, [r0, #0x1]
	add	r1, r1, r0
	ldr	r3, .L378+0x4
	ldr	r0, [r3]
	ldrb	r0, [r0, #0x1]
	ldrb	r4, [r1]
	add	r0, r0, r4
	strb	r0, [r1]
	ldr	r0, [r2]
	ldr	r1, [r0, #0x14]
	add	r0, r1, #0x4
	ldrb	r1, [r1, #0x1]
	add	r1, r0, r1
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0
	bge	.L377	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
.L377:
	ldr	r0, [r3]
	add	r0, r0, #0x2
	str	r0, [r3]
	pop	{r4}
	pop	{r0}
	bx	r0
.L379:
	.align	2, 0
.L378:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe30:
	.size	 Cmd_score,.Lfe30-Cmd_score
	.align	2, 0
	.type	 BattleAI_GetWantedBattler,function
	.thumb_func
BattleAI_GetWantedBattler:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L382	@cond_branch
	ldr	r0, .L392
	ldrb	r0, [r0]
	b	.L390
.L393:
	.align	2, 0
.L392:
	.word	sBattler_AI
.L382:
	cmp	r0, #0x1
	ble	.L384	@cond_branch
	cmp	r0, #0x2
	beq	.L386	@cond_branch
	cmp	r0, #0x3
	beq	.L385	@cond_branch
.L384:
	ldr	r0, .L394
	ldrb	r0, [r0]
	b	.L390
.L395:
	.align	2, 0
.L394:
	.word	gBattlerTarget
.L385:
	ldr	r0, .L396
	b	.L391
.L397:
	.align	2, 0
.L396:
	.word	sBattler_AI
.L386:
	ldr	r0, .L398
.L391:
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
.L390:
	pop	{r1}
	bx	r1
.L399:
	.align	2, 0
.L398:
	.word	gBattlerTarget
.Lfe31:
	.size	 BattleAI_GetWantedBattler,.Lfe31-BattleAI_GetWantedBattler
	.align	2, 0
	.type	 Cmd_if_hp_less_than,function
	.thumb_func
Cmd_if_hp_less_than:
	push	{r4, lr}
	ldr	r4, .L403
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L403+0x4
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x2a]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	bcs	.L401	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L402
.L404:
	.align	2, 0
.L403:
	.word	gAIScriptPtr
	.word	gBattleMons
.L401:
	add	r0, r2, #0x7
	str	r0, [r4]
.L402:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 Cmd_if_hp_less_than,.Lfe32-Cmd_if_hp_less_than
	.align	2, 0
	.type	 Cmd_if_hp_more_than,function
	.thumb_func
Cmd_if_hp_more_than:
	push	{r4, lr}
	ldr	r4, .L408
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L408+0x4
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x2a]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	bls	.L406	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L407
.L409:
	.align	2, 0
.L408:
	.word	gAIScriptPtr
	.word	gBattleMons
.L406:
	add	r0, r2, #0x7
	str	r0, [r4]
.L407:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 Cmd_if_hp_more_than,.Lfe33-Cmd_if_hp_more_than
	.align	2, 0
	.type	 Cmd_if_hp_equal,function
	.thumb_func
Cmd_if_hp_equal:
	push	{r4, lr}
	ldr	r4, .L413
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L413+0x4
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x2a]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	bne	.L411	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L412
.L414:
	.align	2, 0
.L413:
	.word	gAIScriptPtr
	.word	gBattleMons
.L411:
	add	r0, r2, #0x7
	str	r0, [r4]
.L412:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 Cmd_if_hp_equal,.Lfe34-Cmd_if_hp_equal
	.align	2, 0
	.type	 Cmd_if_hp_not_equal,function
	.thumb_func
Cmd_if_hp_not_equal:
	push	{r4, lr}
	ldr	r4, .L418
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L418+0x4
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x2a]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	beq	.L416	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L417
.L419:
	.align	2, 0
.L418:
	.word	gAIScriptPtr
	.word	gBattleMons
.L416:
	add	r0, r2, #0x7
	str	r0, [r4]
.L417:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 Cmd_if_hp_not_equal,.Lfe35-Cmd_if_hp_not_equal
	.align	2, 0
	.type	 Cmd_if_status,function
	.thumb_func
Cmd_if_status:
	push	{r4, r5, lr}
	ldr	r5, .L423
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, [r5]
	ldrb	r3, [r4, #0x2]
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	ldr	r1, .L423+0x4
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L421	@cond_branch
	ldrb	r1, [r4, #0x6]
	ldrb	r0, [r4, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L422
.L424:
	.align	2, 0
.L423:
	.word	gAIScriptPtr
	.word	gBattleMons
.L421:
	add	r0, r4, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L422:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 Cmd_if_status,.Lfe36-Cmd_if_status
	.align	2, 0
	.type	 Cmd_if_not_status,function
	.thumb_func
Cmd_if_not_status:
	push	{r4, r5, lr}
	ldr	r5, .L428
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, [r5]
	ldrb	r3, [r4, #0x2]
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	ldr	r1, .L428+0x4
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L426	@cond_branch
	ldrb	r1, [r4, #0x6]
	ldrb	r0, [r4, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L427
.L429:
	.align	2, 0
.L428:
	.word	gAIScriptPtr
	.word	gBattleMons
.L426:
	add	r0, r4, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L427:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 Cmd_if_not_status,.Lfe37-Cmd_if_not_status
	.align	2, 0
	.type	 Cmd_if_status2,function
	.thumb_func
Cmd_if_status2:
	push	{r4, r5, lr}
	ldr	r5, .L433
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, [r5]
	ldrb	r3, [r4, #0x2]
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	ldr	r1, .L433+0x4
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L431	@cond_branch
	ldrb	r1, [r4, #0x6]
	ldrb	r0, [r4, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L432
.L434:
	.align	2, 0
.L433:
	.word	gAIScriptPtr
	.word	gBattleMons
.L431:
	add	r0, r4, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L432:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 Cmd_if_status2,.Lfe38-Cmd_if_status2
	.align	2, 0
	.type	 Cmd_if_not_status2,function
	.thumb_func
Cmd_if_not_status2:
	push	{r4, r5, lr}
	ldr	r5, .L438
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, [r5]
	ldrb	r3, [r4, #0x2]
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	ldr	r1, .L438+0x4
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L436	@cond_branch
	ldrb	r1, [r4, #0x6]
	ldrb	r0, [r4, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L437
.L439:
	.align	2, 0
.L438:
	.word	gAIScriptPtr
	.word	gBattleMons
.L436:
	add	r0, r4, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L437:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 Cmd_if_not_status2,.Lfe39-Cmd_if_not_status2
	.align	2, 0
	.type	 Cmd_if_status3,function
	.thumb_func
Cmd_if_status3:
	push	{r4, lr}
	ldr	r4, .L443
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	ldr	r3, [r4]
	ldrb	r2, [r3, #0x2]
	ldrb	r1, [r3, #0x3]
	lsl	r1, r1, #0x8
	orr	r2, r2, r1
	ldrb	r1, [r3, #0x4]
	lsl	r1, r1, #0x10
	orr	r2, r2, r1
	ldrb	r1, [r3, #0x5]
	lsl	r1, r1, #0x18
	orr	r2, r2, r1
	ldr	r1, .L443+0x4
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L441	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L442
.L444:
	.align	2, 0
.L443:
	.word	gAIScriptPtr
	.word	gStatuses3
.L441:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r4]
.L442:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 Cmd_if_status3,.Lfe40-Cmd_if_status3
	.align	2, 0
	.type	 Cmd_if_not_status3,function
	.thumb_func
Cmd_if_not_status3:
	push	{r4, lr}
	ldr	r4, .L448
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	ldr	r3, [r4]
	ldrb	r2, [r3, #0x2]
	ldrb	r1, [r3, #0x3]
	lsl	r1, r1, #0x8
	orr	r2, r2, r1
	ldrb	r1, [r3, #0x4]
	lsl	r1, r1, #0x10
	orr	r2, r2, r1
	ldrb	r1, [r3, #0x5]
	lsl	r1, r1, #0x18
	orr	r2, r2, r1
	ldr	r1, .L448+0x4
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L446	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L447
.L449:
	.align	2, 0
.L448:
	.word	gAIScriptPtr
	.word	gStatuses3
.L446:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r4]
.L447:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 Cmd_if_not_status3,.Lfe41-Cmd_if_not_status3
	.align	2, 0
	.type	 Cmd_if_side_affecting,function
	.thumb_func
Cmd_if_side_affecting:
	push	{r4, r5, lr}
	ldr	r5, .L453
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	ldr	r2, [r5]
	ldrb	r4, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	orr	r4, r4, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	orr	r4, r4, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	orr	r4, r4, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	ldr	r0, .L453+0x4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L451	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L452
.L454:
	.align	2, 0
.L453:
	.word	gAIScriptPtr
	.word	gSideStatuses
.L451:
	ldr	r0, [r5]
	add	r0, r0, #0xa
	str	r0, [r5]
.L452:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 Cmd_if_side_affecting,.Lfe42-Cmd_if_side_affecting
	.align	2, 0
	.type	 Cmd_if_not_side_affecting,function
	.thumb_func
Cmd_if_not_side_affecting:
	push	{r4, r5, lr}
	ldr	r5, .L458
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	ldr	r2, [r5]
	ldrb	r4, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	orr	r4, r4, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	orr	r4, r4, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	orr	r4, r4, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	ldr	r0, .L458+0x4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L456	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L457
.L459:
	.align	2, 0
.L458:
	.word	gAIScriptPtr
	.word	gSideStatuses
.L456:
	ldr	r0, [r5]
	add	r0, r0, #0xa
	str	r0, [r5]
.L457:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 Cmd_if_not_side_affecting,.Lfe43-Cmd_if_not_side_affecting
	.align	2, 0
	.type	 Cmd_if_less_than,function
	.thumb_func
Cmd_if_less_than:
	push	{lr}
	ldr	r0, .L463
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r3, .L463+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bcs	.L461	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L462
.L464:
	.align	2, 0
.L463:
	.word	gBattleResources
	.word	gAIScriptPtr
.L461:
	add	r0, r2, #0x6
	str	r0, [r3]
.L462:
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 Cmd_if_less_than,.Lfe44-Cmd_if_less_than
	.align	2, 0
	.type	 Cmd_if_more_than,function
	.thumb_func
Cmd_if_more_than:
	push	{lr}
	ldr	r0, .L468
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r3, .L468+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bls	.L466	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L467
.L469:
	.align	2, 0
.L468:
	.word	gBattleResources
	.word	gAIScriptPtr
.L466:
	add	r0, r2, #0x6
	str	r0, [r3]
.L467:
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 Cmd_if_more_than,.Lfe45-Cmd_if_more_than
	.align	2, 0
	.type	 Cmd_if_equal,function
	.thumb_func
Cmd_if_equal:
	push	{lr}
	ldr	r0, .L473
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r3, .L473+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L471	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L472
.L474:
	.align	2, 0
.L473:
	.word	gBattleResources
	.word	gAIScriptPtr
.L471:
	add	r0, r2, #0x6
	str	r0, [r3]
.L472:
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 Cmd_if_equal,.Lfe46-Cmd_if_equal
	.align	2, 0
	.type	 Cmd_if_not_equal,function
	.thumb_func
Cmd_if_not_equal:
	push	{lr}
	ldr	r0, .L478
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r3, .L478+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	beq	.L476	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L477
.L479:
	.align	2, 0
.L478:
	.word	gBattleResources
	.word	gAIScriptPtr
.L476:
	add	r0, r2, #0x6
	str	r0, [r3]
.L477:
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 Cmd_if_not_equal,.Lfe47-Cmd_if_not_equal
	.align	2, 0
	.type	 Cmd_if_less_than_ptr,function
	.thumb_func
Cmd_if_less_than_ptr:
	push	{lr}
	ldr	r3, .L483
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L483+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L481	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L482
.L484:
	.align	2, 0
.L483:
	.word	gAIScriptPtr
	.word	gBattleResources
.L481:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L482:
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 Cmd_if_less_than_ptr,.Lfe48-Cmd_if_less_than_ptr
	.align	2, 0
	.type	 Cmd_if_more_than_ptr,function
	.thumb_func
Cmd_if_more_than_ptr:
	push	{lr}
	ldr	r3, .L488
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L488+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	bls	.L486	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L487
.L489:
	.align	2, 0
.L488:
	.word	gAIScriptPtr
	.word	gBattleResources
.L486:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L487:
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 Cmd_if_more_than_ptr,.Lfe49-Cmd_if_more_than_ptr
	.align	2, 0
	.type	 Cmd_if_equal_ptr,function
	.thumb_func
Cmd_if_equal_ptr:
	push	{lr}
	ldr	r3, .L493
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L493+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L491	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L492
.L494:
	.align	2, 0
.L493:
	.word	gAIScriptPtr
	.word	gBattleResources
.L491:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L492:
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 Cmd_if_equal_ptr,.Lfe50-Cmd_if_equal_ptr
	.align	2, 0
	.type	 Cmd_if_not_equal_ptr,function
	.thumb_func
Cmd_if_not_equal_ptr:
	push	{lr}
	ldr	r3, .L498
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L498+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L496	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L497
.L499:
	.align	2, 0
.L498:
	.word	gAIScriptPtr
	.word	gBattleResources
.L496:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L497:
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 Cmd_if_not_equal_ptr,.Lfe51-Cmd_if_not_equal_ptr
	.align	2, 0
	.type	 Cmd_if_move,function
	.thumb_func
Cmd_if_move:
	push	{lr}
	ldr	r3, .L503
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r0, .L503+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	cmp	r0, r1
	bne	.L501	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L502
.L504:
	.align	2, 0
.L503:
	.word	gAIScriptPtr
	.word	gBattleResources
.L501:
	add	r0, r2, #0x7
	str	r0, [r3]
.L502:
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 Cmd_if_move,.Lfe52-Cmd_if_move
	.align	2, 0
	.type	 Cmd_if_not_move,function
	.thumb_func
Cmd_if_not_move:
	push	{lr}
	ldr	r3, .L508
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r0, .L508+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	cmp	r0, r1
	beq	.L506	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L507
.L509:
	.align	2, 0
.L508:
	.word	gAIScriptPtr
	.word	gBattleResources
.L506:
	add	r0, r2, #0x7
	str	r0, [r3]
.L507:
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 Cmd_if_not_move,.Lfe53-Cmd_if_not_move
	.align	2, 0
	.type	 Cmd_if_in_bytes,function
	.thumb_func
Cmd_if_in_bytes:
	push	{r4, lr}
	ldr	r2, .L516
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrb	r0, [r3]
	cmp	r0, #0xff
	beq	.L512	@cond_branch
	ldr	r0, .L516+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r1, [r0, #0x8]
	add	r4, r2, #0
.L513:
	ldrb	r0, [r3]
	cmp	r1, r0
	bne	.L514	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L510
.L517:
	.align	2, 0
.L516:
	.word	gAIScriptPtr
	.word	gBattleResources
.L514:
	add	r3, r3, #0x1
	ldrb	r0, [r3]
	cmp	r0, #0xff
	bne	.L513	@cond_branch
.L512:
	ldr	r0, [r2]
	add	r0, r0, #0x9
	str	r0, [r2]
.L510:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 Cmd_if_in_bytes,.Lfe54-Cmd_if_in_bytes
	.align	2, 0
	.type	 Cmd_if_not_in_bytes,function
	.thumb_func
Cmd_if_not_in_bytes:
	push	{r4, lr}
	ldr	r2, .L524
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrb	r0, [r3]
	add	r4, r2, #0
	cmp	r0, #0xff
	beq	.L520	@cond_branch
	ldr	r0, .L524+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r2, [r0, #0x8]
	add	r1, r4, #0
.L521:
	ldrb	r0, [r3]
	cmp	r2, r0
	bne	.L522	@cond_branch
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
	b	.L518
.L525:
	.align	2, 0
.L524:
	.word	gAIScriptPtr
	.word	gBattleResources
.L522:
	add	r3, r3, #0x1
	ldrb	r0, [r3]
	cmp	r0, #0xff
	bne	.L521	@cond_branch
.L520:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L518:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 Cmd_if_not_in_bytes,.Lfe55-Cmd_if_not_in_bytes
	.align	2, 0
	.type	 Cmd_if_in_hwords,function
	.thumb_func
Cmd_if_in_hwords:
	push	{r4, r5, lr}
	ldr	r2, .L532
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrh	r0, [r3]
	ldr	r5, .L532+0x4
	cmp	r0, r5
	beq	.L528	@cond_branch
	ldr	r0, .L532+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r1, [r0, #0x8]
	add	r4, r2, #0
.L529:
	ldrh	r0, [r3]
	cmp	r1, r0
	bne	.L530	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L526
.L533:
	.align	2, 0
.L532:
	.word	gAIScriptPtr
	.word	0xffff
	.word	gBattleResources
.L530:
	add	r3, r3, #0x2
	ldrh	r0, [r3]
	cmp	r0, r5
	bne	.L529	@cond_branch
.L528:
	ldr	r0, [r2]
	add	r0, r0, #0x9
	str	r0, [r2]
.L526:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 Cmd_if_in_hwords,.Lfe56-Cmd_if_in_hwords
	.align	2, 0
	.type	 Cmd_if_not_in_hwords,function
	.thumb_func
Cmd_if_not_in_hwords:
	push	{r4, r5, lr}
	ldr	r2, .L540
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrh	r0, [r3]
	ldr	r4, .L540+0x4
	add	r5, r2, #0
	cmp	r0, r4
	beq	.L536	@cond_branch
	ldr	r0, .L540+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r2, [r0, #0x8]
	add	r1, r5, #0
.L537:
	ldrh	r0, [r3]
	cmp	r2, r0
	bne	.L538	@cond_branch
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
	b	.L534
.L541:
	.align	2, 0
.L540:
	.word	gAIScriptPtr
	.word	0xffff
	.word	gBattleResources
.L538:
	add	r3, r3, #0x2
	ldrh	r0, [r3]
	cmp	r0, r4
	bne	.L537	@cond_branch
.L536:
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
.L534:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 Cmd_if_not_in_hwords,.Lfe57-Cmd_if_not_in_hwords
	.align	2, 0
	.type	 Cmd_if_user_has_attacking_move,function
	.thumb_func
Cmd_if_user_has_attacking_move:
	push	{r4, r5, lr}
	mov	r3, #0x0
	ldr	r4, .L551
	ldr	r1, .L551+0x4
	ldr	r0, .L551+0x8
	ldrb	r2, [r0]
	ldr	r5, .L551+0xc
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
.L546:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L545	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L544	@cond_branch
.L545:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L546	@cond_branch
.L544:
	cmp	r3, #0x4
	bne	.L549	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x5
	str	r0, [r4]
	b	.L550
.L552:
	.align	2, 0
.L551:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
.L549:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L550:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 Cmd_if_user_has_attacking_move,.Lfe58-Cmd_if_user_has_attacking_move
	.align	2, 0
	.type	 Cmd_if_user_has_no_attacking_moves,function
	.thumb_func
Cmd_if_user_has_no_attacking_moves:
	push	{r4, r5, lr}
	mov	r3, #0x0
	ldr	r4, .L562
	ldr	r1, .L562+0x4
	ldr	r0, .L562+0x8
	ldrb	r2, [r0]
	ldr	r5, .L562+0xc
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
.L557:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L556	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L555	@cond_branch
.L556:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L557	@cond_branch
.L555:
	cmp	r3, #0x4
	beq	.L560	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x5
	str	r0, [r4]
	b	.L561
.L563:
	.align	2, 0
.L562:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
.L560:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L561:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 Cmd_if_user_has_no_attacking_moves,.Lfe59-Cmd_if_user_has_no_attacking_moves
	.align	2, 0
	.type	 Cmd_get_turn_count,function
	.thumb_func
Cmd_get_turn_count:
	ldr	r0, .L565
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	ldr	r0, .L565+0x4
	ldrb	r0, [r0, #0x13]
	str	r0, [r1, #0x8]
	ldr	r1, .L565+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L566:
	.align	2, 0
.L565:
	.word	gBattleResources
	.word	gBattleResults
	.word	gAIScriptPtr
.Lfe60:
	.size	 Cmd_get_turn_count,.Lfe60-Cmd_get_turn_count
	.align	2, 0
	.type	 Cmd_get_type,function
	.thumb_func
Cmd_get_type:
	push	{r4, lr}
	ldr	r1, .L577
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	add	r4, r1, #0
	cmp	r0, #0x4
	bhi	.L568	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L577+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L578:
	.align	2, 0
.L577:
	.word	gAIScriptPtr
	.word	.L574
	.align	2, 0
	.align	2, 0
.L574:
	.word	.L570
	.word	.L569
	.word	.L572
	.word	.L571
	.word	.L573
.L569:
	ldr	r0, .L579
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L579+0x4
	ldr	r0, .L579+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	b	.L576
.L580:
	.align	2, 0
.L579:
	.word	gBattleResources
	.word	gBattleMons
	.word	sBattler_AI
.L570:
	ldr	r0, .L581
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L581+0x4
	ldr	r0, .L581+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	b	.L576
.L582:
	.align	2, 0
.L581:
	.word	gBattleResources
	.word	gBattleMons
	.word	gBattlerTarget
.L571:
	ldr	r0, .L583
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L583+0x4
	ldr	r0, .L583+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	b	.L576
.L584:
	.align	2, 0
.L583:
	.word	gBattleResources
	.word	gBattleMons
	.word	sBattler_AI
.L572:
	ldr	r0, .L585
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L585+0x4
	ldr	r0, .L585+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	b	.L576
.L586:
	.align	2, 0
.L585:
	.word	gBattleResources
	.word	gBattleMons
	.word	gBattlerTarget
.L573:
	ldr	r0, .L587
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L587+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x3]
.L576:
	str	r0, [r3, #0x8]
.L568:
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L588:
	.align	2, 0
.L587:
	.word	gBattleResources
	.word	gBattleMoves
.Lfe61:
	.size	 Cmd_get_type,.Lfe61-Cmd_get_type
	.align	2, 0
	.type	 Cmd_is_of_type,function
	.thumb_func
Cmd_is_of_type:
	push	{r4, lr}
	ldr	r4, .L594
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L594+0x4
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r3, r0, r2
	add	r1, r3, #0
	add	r1, r1, #0x22
	ldr	r0, [r4]
	ldrb	r1, [r1]
	ldrb	r2, [r0, #0x2]
	cmp	r1, r2
	beq	.L591	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L591	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L590	@cond_branch
.L591:
	ldr	r0, .L594+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x1
	b	.L593
.L595:
	.align	2, 0
.L594:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	gBattleResources
.L590:
	ldr	r0, .L596
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
.L593:
	str	r0, [r1, #0x8]
	ldr	r1, .L596+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L597:
	.align	2, 0
.L596:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe62:
	.size	 Cmd_is_of_type,.Lfe62-Cmd_is_of_type
	.align	2, 0
	.type	 Cmd_get_considered_move_power,function
	.thumb_func
Cmd_get_considered_move_power:
	ldr	r0, .L599
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L599+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	str	r0, [r3, #0x8]
	ldr	r1, .L599+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L600:
	.align	2, 0
.L599:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe63:
	.size	 Cmd_get_considered_move_power,.Lfe63-Cmd_get_considered_move_power
	.align	2, 0
	.type	 WhichMoveBetter,function
	.thumb_func
WhichMoveBetter:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	ldr	r7, .L623
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	AI_GetAbility
	add	r6, r0, #0
	ldr	r0, .L623+0x4
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x95
	beq	.L602	@cond_branch
	ldr	r0, .L623+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x48
	ldrb	r7, [r7]
	add	r0, r0, r7
	ldrb	r0, [r0]
	cmp	r0, #0x78
	beq	.L603	@cond_branch
	cmp	r6, #0xa0
	beq	.L603	@cond_branch
	cmp	r6, #0x18
	bne	.L602	@cond_branch
.L603:
	add	r0, r5, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L604	@cond_branch
	add	r0, r4, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L621	@cond_branch
.L604:
	add	r0, r4, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L602	@cond_branch
	add	r0, r5, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L622	@cond_branch
.L602:
	ldr	r0, .L623+0x4
	ldrb	r0, [r0]
	bl	GetBattlerAbility
	lsl	r6, r5, #0x2
	lsl	r3, r4, #0x2
	cmp	r0, #0x45
	beq	.L606	@cond_branch
	ldr	r1, .L623+0xc
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r2, [r0]
	add	r7, r1, #0
	cmp	r2, #0x30
	beq	.L608	@cond_branch
	cmp	r2, #0x2d
	beq	.L608	@cond_branch
	ldr	r0, .L623+0x10
	cmp	r2, r0
	beq	.L608	@cond_branch
	cmp	r2, #0xc6
	beq	.L608	@cond_branch
	sub	r0, r0, #0x2
	cmp	r2, r0
	bne	.L607	@cond_branch
.L608:
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r2, [r0]
	add	r3, r1, #0
	cmp	r2, #0x30
	beq	.L610	@cond_branch
	cmp	r2, #0x2d
	beq	.L607	@cond_branch
	ldr	r0, .L623+0x10
	cmp	r2, r0
	beq	.L607	@cond_branch
	cmp	r2, #0xc6
	beq	.L607	@cond_branch
	sub	r0, r0, #0x2
	cmp	r2, r0
	beq	.L607	@cond_branch
	cmp	r2, #0x50
	bne	.L621	@cond_branch
.L607:
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0]
	cmp	r1, #0x30
	beq	.L610	@cond_branch
	cmp	r1, #0x2d
	beq	.L610	@cond_branch
	ldr	r0, .L623+0x10
	cmp	r1, r0
	beq	.L610	@cond_branch
	cmp	r1, #0xc6
	beq	.L610	@cond_branch
	sub	r0, r0, #0x2
	cmp	r1, r0
	bne	.L606	@cond_branch
.L610:
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0]
	cmp	r1, #0x30
	beq	.L606	@cond_branch
	cmp	r1, #0x2d
	beq	.L606	@cond_branch
	ldr	r0, .L623+0x10
	cmp	r1, r0
	beq	.L606	@cond_branch
	cmp	r1, #0xc6
	beq	.L606	@cond_branch
	sub	r0, r0, #0x2
	cmp	r1, r0
	beq	.L606	@cond_branch
	cmp	r1, #0x50
	beq	.L616	@cond_branch
.L622:
	mov	r0, #0x0
	b	.L615
.L624:
	.align	2, 0
.L623:
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleResources
	.word	gBattleMoves
	.word	0x121
.L606:
	ldr	r0, .L625
	add	r1, r6, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r1, [r1]
	add	r7, r0, #0
	cmp	r1, #0x50
	bne	.L611	@cond_branch
.L616:
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0x50
	beq	.L617	@cond_branch
.L621:
	mov	r0, #0x1
	b	.L615
.L626:
	.align	2, 0
.L625:
	.word	gBattleMoves
.L611:
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0x50
	bne	.L612	@cond_branch
.L617:
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0x50
	bne	.L622	@cond_branch
.L612:
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L613	@cond_branch
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L618	@cond_branch
	b	.L621
.L613:
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L614	@cond_branch
.L618:
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L622	@cond_branch
.L614:
	mov	r0, #0x2
.L615:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe64:
	.size	 WhichMoveBetter,.Lfe64-WhichMoveBetter
	.align	2, 0
	.type	 Cmd_get_how_powerful_move_is,function
	.thumb_func
Cmd_get_how_powerful_move_is:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	mov	r4, #0x0
	ldr	r0, .L674
	ldrh	r1, [r0]
	ldr	r3, .L674+0x4
	add	r5, r0, #0
	ldr	r6, .L674+0x8
	ldr	r0, .L674+0xc
	mov	sl, r0
	cmp	r1, r3
	beq	.L629	@cond_branch
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r2, [r0]
	add	r1, r5, #0
.L631:
	ldrh	r0, [r1]
	cmp	r2, r0
	beq	.L629	@cond_branch
	add	r1, r1, #0x2
	add	r4, r4, #0x1
	ldrh	r0, [r1]
	cmp	r0, r3
	bne	.L631	@cond_branch
.L629:
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.LCB5709
	b	.L634	@long jump
.LCB5709:
	lsl	r0, r4, #0x1
	add	r0, r0, r5
	ldrh	r1, [r0]
	ldr	r0, .L674+0x4
	cmp	r1, r0
	beq	.LCB5720
	b	.L634	@long jump
.LCB5720:
	mov	r0, #0x0
	ldr	r2, .L674+0x10
	mov	ip, r2
	mov	r9, r5
	ldrh	r4, [r5]
	str	r4, [sp, #0x10]
	add	r7, r1, #0
.L638:
	mov	r4, #0x0
	lsl	r3, r0, #0x1
	lsl	r5, r0, #0x2
	add	r0, r0, #0x1
	mov	r8, r0
	ldr	r0, [sp, #0x10]
	cmp	r0, r7
	beq	.L640	@cond_branch
	ldr	r2, .L674+0x8
	ldr	r0, .L674+0x14
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r3, r0
	ldr	r1, .L674+0x18
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r2, [r0]
	ldr	r1, .L674
.L642:
	ldrh	r0, [r1]
	cmp	r2, r0
	beq	.L640	@cond_branch
	add	r1, r1, #0x2
	add	r4, r4, #0x1
	ldrh	r0, [r1]
	cmp	r0, r7
	bne	.L642	@cond_branch
.L640:
	ldr	r1, .L674+0x14
	ldrb	r6, [r1]
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r0, r3, r0
	ldr	r1, .L674+0x1c
	add	r1, r1, #0xc
	add	r1, r0, r1
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L645	@cond_branch
	lsl	r0, r4, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	cmp	r0, r7
	bne	.L645	@cond_branch
	ldrh	r0, [r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, .L674+0x8
	add	r1, r1, r2
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L645	@cond_branch
	mov	r4, sp
	add	r3, r4, r5
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r2, [r0, #0x14]
	mov	r4, ip
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	add	r0, r5, r0
	lsl	r1, r6, #0x6
	add	r0, r0, r1
	add	r2, r2, #0x14
	add	r2, r2, r0
	ldr	r0, [r2]
	str	r0, [r3]
	b	.L637
.L675:
	.align	2, 0
.L674:
	.word	sDiscouragedPowerfulMoveEffects
	.word	0xffff
	.word	gBattleMoves
	.word	gBattleResources
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleMons+0xc
	.word	gBattleMons
.L645:
	mov	r0, sp
	add	r1, r0, r5
	mov	r0, #0x0
	str	r0, [r1]
.L637:
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L638	@cond_branch
	mov	r2, ip
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	ldr	r4, .L676
	add	r0, r0, r4
	ldrh	r4, [r0, #0x2a]
	add	r0, r4, #0
	mov	r1, #0x5
	bl	__divsi3
	add	r6, r4, r0
	mov	r1, sp
	mov	r4, #0x3
.L651:
	ldr	r0, [r1]
	cmp	r0, r6
	ble	.L650	@cond_branch
	str	r6, [r1]
.L650:
	add	r1, r1, #0x4
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L651	@cond_branch
	mov	r7, #0x0
	mov	r4, #0x1
	ldr	r0, .L676+0x4
	mov	r8, r0
	add	r5, sp, #0x4
.L657:
	lsl	r0, r7, #0x2
	add	r0, r0, sp
	ldr	r1, [r5]
	ldr	r0, [r0]
	cmp	r1, r0
	ble	.L658	@cond_branch
	add	r7, r4, #0
.L658:
	lsl	r0, r7, #0x2
	add	r0, r0, sp
	ldr	r0, [r0]
	cmp	r1, r0
	bne	.L656	@cond_branch
	lsl	r1, r7, #0x1
	ldr	r0, .L676+0x8
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, r2
	add	r1, r1, r8
	ldrh	r0, [r1]
	lsl	r1, r4, #0x1
	add	r1, r1, r2
	add	r1, r1, r8
	ldrh	r1, [r1]
	bl	WhichMoveBetter
	cmp	r0, #0x1
	beq	.L663	@cond_branch
	cmp	r0, #0x2
	bne	.L656	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L656	@cond_branch
.L663:
	add	r7, r4, #0
.L656:
	add	r5, r5, #0x4
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L657	@cond_branch
	ldr	r1, .L676+0xc
	mov	sl, r1
	ldr	r0, [r1]
	ldr	r1, [r0, #0x14]
	ldrb	r2, [r1, #0x1]
	mov	r8, r2
	cmp	r8, r7
	bne	.L667	@cond_branch
	mov	r0, #0x1
	b	.L673
.L677:
	.align	2, 0
.L676:
	.word	gBattleMons
	.word	gBattleMons+0xc
	.word	sBattler_AI
	.word	gBattleResources
.L667:
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, sp
	ldr	r0, [r0]
	mov	r9, r0
	lsl	r1, r7, #0x2
	cmp	r9, r6
	bge	.L670	@cond_branch
	mov	r2, sp
	add	r0, r2, r1
	ldr	r0, [r0]
	cmp	r0, r6
	bge	.L669	@cond_branch
.L670:
	mov	r4, sp
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	add	r1, r6, #0
	bl	__divsi3
	add	r4, r0, #0
	mov	r0, r9
	mul	r0, r0, r5
	add	r1, r6, #0
	bl	__divsi3
	sub	r4, r4, r0
	cmp	r4, #0x1e
	bgt	.L669	@cond_branch
	ldr	r3, .L678
	lsl	r1, r7, #0x1
	ldr	r0, .L678+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, r2
	add	r3, r3, #0xc
	add	r1, r1, r3
	ldrh	r0, [r1]
	mov	r4, r8
	lsl	r1, r4, #0x1
	add	r1, r1, r2
	add	r1, r1, r3
	ldrh	r1, [r1]
	bl	WhichMoveBetter
	cmp	r0, #0
	beq	.L669	@cond_branch
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x2
	b	.L673
.L679:
	.align	2, 0
.L678:
	.word	gBattleMons
	.word	sBattler_AI
.L669:
	ldr	r0, .L680
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x3
	b	.L673
.L681:
	.align	2, 0
.L680:
	.word	gBattleResources
.L634:
	mov	r2, sl
	ldr	r0, [r2]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
.L673:
	str	r0, [r1, #0x8]
	ldr	r1, .L682
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L683:
	.align	2, 0
.L682:
	.word	gAIScriptPtr
.Lfe65:
	.size	 Cmd_get_how_powerful_move_is,.Lfe65-Cmd_get_how_powerful_move_is
	.align	2, 0
	.type	 Cmd_get_last_used_battler_move,function
	.thumb_func
Cmd_get_last_used_battler_move:
	push	{r4, lr}
	ldr	r4, .L685
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	ldr	r1, .L685+0x4
	ldr	r1, [r1]
	ldr	r2, [r1, #0x14]
	ldr	r1, .L685+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	ldrh	r0, [r0]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L686:
	.align	2, 0
.L685:
	.word	gAIScriptPtr
	.word	gBattleResources
	.word	gLastMoves
.Lfe66:
	.size	 Cmd_get_last_used_battler_move,.Lfe66-Cmd_get_last_used_battler_move
	.align	2, 0
	.type	 Cmd_if_equal_u32,function
	.thumb_func
Cmd_if_equal_u32:
	push	{lr}
	ldr	r3, .L690
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L690+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	cmp	r1, r0
	bne	.L688	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L689
.L691:
	.align	2, 0
.L690:
	.word	gAIScriptPtr
	.word	gBattleResources
.L688:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L689:
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 Cmd_if_equal_u32,.Lfe67-Cmd_if_equal_u32
	.align	2, 0
	.type	 Cmd_if_not_equal_u32,function
	.thumb_func
Cmd_if_not_equal_u32:
	push	{lr}
	ldr	r3, .L695
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L695+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	cmp	r1, r0
	beq	.L693	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L694
.L696:
	.align	2, 0
.L695:
	.word	gAIScriptPtr
	.word	gBattleResources
.L693:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L694:
	pop	{r0}
	bx	r0
.Lfe68:
	.size	 Cmd_if_not_equal_u32,.Lfe68-Cmd_if_not_equal_u32
	.align	2, 0
	.type	 Cmd_if_user_goes,function
	.thumb_func
Cmd_if_user_goes:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r6, #0x0
	mov	r5, #0x0
	ldr	r0, .L719
	ldrb	r0, [r0]
	ldr	r1, .L719+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	ldrh	r1, [r1, #0x2]
	bl	GetMovePriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r4, .L719+0x8
	ldrb	r0, [r4]
	bl	SaveBattlerData
	ldrb	r0, [r4]
	bl	SetBattlerData
	mov	r4, #0x0
	ldr	r0, .L719+0xc
	mov	sl, r0
	ldr	r1, .L719+0x10
	mov	r9, r1
.L701:
	lsl	r1, r4, #0x1
	ldr	r2, .L719+0x8
	ldrb	r3, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r1, r1, sl
	ldrh	r0, [r1]
	add	r7, r2, #0
	cmp	r0, #0
	beq	.L700	@cond_branch
	cmp	r0, r9
	beq	.L700	@cond_branch
	add	r1, r0, #0
	add	r0, r3, #0
	bl	GetMovePriority
	mov	r2, r8
	lsl	r1, r2, #0x18
	asr	r1, r1, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r1, r0
	ble	.L704	@cond_branch
	add	r6, r6, #0x1
	b	.L700
.L720:
	.align	2, 0
.L719:
	.word	sBattler_AI
	.word	gBattleResources
	.word	gBattlerTarget
	.word	gBattleMons+0xc
	.word	0xffff
.L704:
	cmp	r0, r1
	ble	.L700	@cond_branch
	add	r5, r5, #0x1
.L700:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bls	.L701	@cond_branch
	ldrb	r0, [r7]
	bl	RestoreBattlerData
	cmp	r6, r5
	bls	.L708	@cond_branch
	ldr	r3, .L721
	ldr	r2, [r3]
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0
	beq	.L718	@cond_branch
	b	.L716
.L722:
	.align	2, 0
.L721:
	.word	gAIScriptPtr
.L708:
	cmp	r6, r5
	bcs	.L712	@cond_branch
	ldr	r3, .L723
	ldr	r2, [r3]
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x1
	beq	.L718	@cond_branch
	b	.L716
.L724:
	.align	2, 0
.L723:
	.word	gAIScriptPtr
.L712:
	ldr	r0, .L725
	ldrb	r0, [r0]
	ldrb	r1, [r7]
	mov	r2, #0x1
	bl	GetWhoStrikesFirst
	ldr	r3, .L725+0x4
	ldr	r2, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L716	@cond_branch
.L718:
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L711
.L726:
	.align	2, 0
.L725:
	.word	sBattler_AI
	.word	gAIScriptPtr
.L716:
	add	r0, r2, #0x6
	str	r0, [r3]
.L711:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 Cmd_if_user_goes,.Lfe69-Cmd_if_user_goes
	.align	2, 0
	.type	 Cmd_nullsub_2A,function
	.thumb_func
Cmd_nullsub_2A:
	bx	lr
.Lfe70:
	.size	 Cmd_nullsub_2A,.Lfe70-Cmd_nullsub_2A
	.align	2, 0
	.type	 Cmd_nullsub_2B,function
	.thumb_func
Cmd_nullsub_2B:
	bx	lr
.Lfe71:
	.size	 Cmd_nullsub_2B,.Lfe71-Cmd_nullsub_2B
	.align	2, 0
	.type	 CountUsablePartyMons,function
	.thumb_func
CountUsablePartyMons:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r5, #0
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L740
	mov	r9, r1
	cmp	r0, #0
	bne	.L730	@cond_branch
	ldr	r0, .L740+0x4
	mov	r9, r0
.L730:
	ldr	r0, .L740+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L732	@cond_branch
	ldr	r4, .L740+0xc
	lsl	r0, r5, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r8, r0
	add	r0, r5, #0
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r4
	ldrh	r6, [r0]
	b	.L733
.L741:
	.align	2, 0
.L740:
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
.L732:
	ldr	r1, .L742
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r6, [r0]
	mov	r8, r6
.L733:
	mov	r7, #0x0
	mov	r5, #0x0
.L737:
	cmp	r5, r8
	beq	.L736	@cond_branch
	cmp	r5, r6
	beq	.L736	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r9
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L736	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L736	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L742+0x4
	cmp	r0, r1
	beq	.L736	@cond_branch
	add	r7, r7, #0x1
.L736:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L737	@cond_branch
	add	r0, r7, #0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L743:
	.align	2, 0
.L742:
	.word	gBattlerPartyIndexes
	.word	0x4b7
.Lfe72:
	.size	 CountUsablePartyMons,.Lfe72-CountUsablePartyMons
	.align	2, 0
	.type	 Cmd_count_usable_party_mons,function
	.thumb_func
Cmd_count_usable_party_mons:
	push	{r4, lr}
	ldr	r4, .L745
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	CountUsablePartyMons
	ldr	r1, .L745+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	str	r0, [r1, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L746:
	.align	2, 0
.L745:
	.word	gAIScriptPtr
	.word	gBattleResources
.Lfe73:
	.size	 Cmd_count_usable_party_mons,.Lfe73-Cmd_count_usable_party_mons
	.align	2, 0
	.type	 Cmd_get_considered_move,function
	.thumb_func
Cmd_get_considered_move:
	ldr	r0, .L748
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	ldrh	r0, [r1, #0x2]
	str	r0, [r1, #0x8]
	ldr	r1, .L748+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L749:
	.align	2, 0
.L748:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe74:
	.size	 Cmd_get_considered_move,.Lfe74-Cmd_get_considered_move
	.align	2, 0
	.type	 Cmd_get_considered_move_effect,function
	.thumb_func
Cmd_get_considered_move_effect:
	ldr	r0, .L751
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L751+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	str	r0, [r3, #0x8]
	ldr	r1, .L751+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L752:
	.align	2, 0
.L751:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe75:
	.size	 Cmd_get_considered_move_effect,.Lfe75-Cmd_get_considered_move_effect
	.align	2, 0
	.type	 AI_GetAbility,function
	.thumb_func
AI_GetAbility:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	beq	.L754	@cond_branch
	ldr	r1, .L763
	b	.L757
.L764:
	.align	2, 0
.L763:
	.word	gBattleMons
.L754:
	ldr	r0, .L765
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	lsl	r1, r4, #0x1
	add	r0, r0, #0x40
	add	r1, r0, r1
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L762	@cond_branch
	ldr	r0, .L765+0x4
	mov	r1, #0x5c
	mul	r1, r1, r4
	add	r5, r1, r0
	ldrh	r2, [r5, #0x20]
	add	r1, r0, #0
	cmp	r2, #0x17
	beq	.L757	@cond_branch
	cmp	r2, #0x2a
	beq	.L757	@cond_branch
	cmp	r2, #0x47
	bne	.L756	@cond_branch
.L757:
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x20]
	b	.L762
.L766:
	.align	2, 0
.L765:
	.word	gBattleResources
	.word	gBattleMons
.L756:
	ldr	r4, .L767
	ldrh	r0, [r5]
	lsl	r2, r0, #0x15
	lsr	r1, r2, #0x15
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0
	beq	.L758	@cond_branch
	add	r0, r1, #0
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x1a]
	cmp	r0, #0
	beq	.L759	@cond_branch
	cmp	r6, #0
	beq	.L758	@cond_branch
	bl	Random
	mov	r2, #0x1
	and	r2, r2, r0
	lsl	r2, r2, #0x1
	ldrh	r1, [r5]
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x15
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	add	r0, r0, #0x18
	add	r2, r2, r0
	ldrh	r0, [r2]
	b	.L762
.L768:
	.align	2, 0
.L767:
	.word	gBaseStats
.L759:
	lsr	r0, r2, #0x15
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x18]
	b	.L762
.L758:
	mov	r0, #0x1
	neg	r0, r0
.L762:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe76:
	.size	 AI_GetAbility,.Lfe76-AI_GetAbility
	.align	2, 0
	.type	 Cmd_get_ability,function
	.thumb_func
Cmd_get_ability:
	push	{r4, lr}
	ldr	r4, .L770
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	AI_GetAbility
	ldr	r1, .L770+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	str	r0, [r1, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L771:
	.align	2, 0
.L770:
	.word	gAIScriptPtr
	.word	gBattleResources
.Lfe77:
	.size	 Cmd_get_ability,.Lfe77-Cmd_get_ability
	.align	2, 0
	.type	 Cmd_check_ability,function
	.thumb_func
Cmd_check_ability:
	push	{r4, lr}
	ldr	r4, .L778
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	AI_GetAbility
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L773	@cond_branch
	ldr	r0, .L778+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x2
	b	.L777
.L779:
	.align	2, 0
.L778:
	.word	gAIScriptPtr
	.word	gBattleResources
.L773:
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x2]
	cmp	r1, r0
	bne	.L775	@cond_branch
	ldr	r0, .L780
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x1
	b	.L777
.L781:
	.align	2, 0
.L780:
	.word	gBattleResources
.L775:
	ldr	r0, .L782
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
.L777:
	str	r0, [r1, #0x8]
	ldr	r1, .L782+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L783:
	.align	2, 0
.L782:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe78:
	.size	 Cmd_check_ability,.Lfe78-Cmd_check_ability
	.align	2, 0
	.type	 Cmd_get_highest_type_effectiveness,function
	.thumb_func
Cmd_get_highest_type_effectiveness:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r1, .L804
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, .L804+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
	str	r0, [r1, #0x8]
	mov	r5, #0x0
	ldr	r7, .L804+0x8
	ldr	r6, .L804+0xc
	ldr	r0, .L804+0x10
	mov	r8, r0
	ldr	r4, .L804+0x14
.L788:
	lsl	r1, r5, #0x1
	ldrb	r2, [r6]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r8
	ldrh	r0, [r1]
	strh	r0, [r7]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L787	@cond_branch
	ldrh	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, .L804+0x18
	ldrb	r2, [r2]
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	cmp	r1, r0
	beq	.L794	@cond_branch
	cmp	r1, r0
	bhi	.L799	@cond_branch
	cmp	r1, #0
	beq	.L792	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L793	@cond_branch
	b	.L792
.L805:
	.align	2, 0
.L804:
	.word	gMoveResultFlags
	.word	gBattleResources
	.word	gCurrentMove
	.word	sBattler_AI
	.word	gBattleMons+0xc
	.word	gBattleMoveDamage
	.word	gBattlerTarget
.L799:
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	cmp	r1, r0
	beq	.L796	@cond_branch
	cmp	r1, r0
	bhi	.L800	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r1, r0
	beq	.L795	@cond_branch
	b	.L792
.L800:
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L797	@cond_branch
.L792:
	mov	r0, #0x0
	b	.L803
.L793:
	mov	r0, #0xa
	b	.L803
.L794:
	mov	r0, #0x14
	b	.L803
.L795:
	mov	r0, #0x28
	b	.L803
.L796:
	mov	r0, #0x50
	b	.L803
.L797:
	mov	r0, #0xa0
.L803:
	str	r0, [r4]
	ldr	r1, .L806
	ldr	r0, .L806+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r0, [r2, #0x8]
	ldr	r1, [r1]
	cmp	r0, r1
	bcs	.L787	@cond_branch
	str	r1, [r2, #0x8]
.L787:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L788	@cond_branch
	ldr	r1, .L806+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L807:
	.align	2, 0
.L806:
	.word	gBattleMoveDamage
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe79:
	.size	 Cmd_get_highest_type_effectiveness,.Lfe79-Cmd_get_highest_type_effectiveness
	.align	2, 0
	.type	 Cmd_if_type_effectiveness,function
	.thumb_func
Cmd_if_type_effectiveness:
	push	{lr}
	ldr	r1, .L822
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L822+0x4
	ldr	r0, .L822+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	strh	r0, [r1]
	ldrh	r0, [r1]
	ldr	r1, .L822+0xc
	ldrb	r1, [r1]
	ldr	r2, .L822+0x10
	ldrb	r2, [r2]
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	cmp	r1, r0
	beq	.L813	@cond_branch
	cmp	r1, r0
	bhi	.L818	@cond_branch
	cmp	r1, #0
	beq	.L811	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L812	@cond_branch
	b	.L811
.L823:
	.align	2, 0
.L822:
	.word	gMoveResultFlags
	.word	gCurrentMove
	.word	gBattleResources
	.word	sBattler_AI
	.word	gBattlerTarget
.L818:
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	cmp	r1, r0
	beq	.L815	@cond_branch
	cmp	r1, r0
	bhi	.L819	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r1, r0
	beq	.L814	@cond_branch
	b	.L811
.L819:
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L816	@cond_branch
.L811:
	mov	r0, #0x0
	b	.L809
.L812:
	mov	r0, #0xa
	b	.L809
.L813:
	mov	r0, #0x14
	b	.L809
.L814:
	mov	r0, #0x28
	b	.L809
.L815:
	mov	r0, #0x50
	b	.L809
.L816:
	mov	r0, #0xa0
.L809:
	ldr	r3, .L824
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L820	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L821
.L825:
	.align	2, 0
.L824:
	.word	gAIScriptPtr
.L820:
	add	r0, r2, #0x6
	str	r0, [r3]
.L821:
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 Cmd_if_type_effectiveness,.Lfe80-Cmd_if_type_effectiveness
	.align	2, 0
	.type	 Cmd_nullsub_32,function
	.thumb_func
Cmd_nullsub_32:
	bx	lr
.Lfe81:
	.size	 Cmd_nullsub_32,.Lfe81-Cmd_nullsub_32
	.align	2, 0
	.type	 Cmd_nullsub_33,function
	.thumb_func
Cmd_nullsub_33:
	bx	lr
.Lfe82:
	.size	 Cmd_nullsub_33,.Lfe82-Cmd_nullsub_33
	.align	2, 0
	.type	 Cmd_if_status_in_party,function
	.thumb_func
Cmd_if_status_in_party:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, .L837
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L837+0x4
	mov	sl, r1
	cmp	r0, #0
	bne	.L829	@cond_branch
	ldr	r0, .L837+0x8
	mov	sl, r0
.L829:
	ldr	r1, [r4]
	ldrb	r7, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	orr	r7, r7, r0
	mov	r1, #0x0
	mov	r8, r1
	mov	r9, r4
.L834:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	add	r4, r4, sl
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	cmp	r5, #0
	beq	.L833	@cond_branch
	ldr	r1, .L837+0xc
	cmp	r5, r1
	beq	.L833	@cond_branch
	cmp	r6, #0
	beq	.L833	@cond_branch
	cmp	r0, r7
	bne	.L833	@cond_branch
	mov	r0, r9
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	mov	r0, r9
	str	r1, [r0]
	b	.L828
.L838:
	.align	2, 0
.L837:
	.word	gAIScriptPtr
	.word	gEnemyParty
	.word	gPlayerParty
	.word	0x4b7
.L833:
	mov	r1, #0x1
	add	r8, r8, r1
	mov	r0, r8
	cmp	r0, #0x5
	ble	.L834	@cond_branch
	ldr	r1, .L839
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L828:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L840:
	.align	2, 0
.L839:
	.word	gAIScriptPtr
.Lfe83:
	.size	 Cmd_if_status_in_party,.Lfe83-Cmd_if_status_in_party
	.align	2, 0
	.type	 Cmd_if_status_not_in_party,function
	.thumb_func
Cmd_if_status_not_in_party:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, .L850
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L850+0x4
	mov	sl, r1
	cmp	r0, #0
	bne	.L842	@cond_branch
	ldr	r0, .L850+0x8
	mov	sl, r0
.L842:
	ldr	r1, [r4]
	ldrb	r7, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	orr	r7, r7, r0
	mov	r1, #0x0
	mov	r8, r1
	mov	r9, r4
.L847:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	add	r4, r4, sl
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	cmp	r5, #0
	beq	.L846	@cond_branch
	ldr	r1, .L850+0xc
	cmp	r5, r1
	beq	.L846	@cond_branch
	cmp	r6, #0
	beq	.L846	@cond_branch
	cmp	r0, r7
	bne	.L846	@cond_branch
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
	b	.L841
.L851:
	.align	2, 0
.L850:
	.word	gAIScriptPtr
	.word	gEnemyParty
	.word	gPlayerParty
	.word	0x4b7
.L846:
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x5
	ble	.L847	@cond_branch
	ldr	r3, .L852
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L841:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L853:
	.align	2, 0
.L852:
	.word	gAIScriptPtr
.Lfe84:
	.size	 Cmd_if_status_not_in_party,.Lfe84-Cmd_if_status_not_in_party
	.align	2, 0
	.type	 Cmd_get_weather,function
	.thumb_func
Cmd_get_weather:
	push	{lr}
	ldr	r0, .L863
	ldrh	r2, [r0]
	mov	r0, #0x7
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L855	@cond_branch
	ldr	r0, .L863+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x2
	str	r0, [r1, #0x8]
	b	.L856
.L864:
	.align	2, 0
.L863:
	.word	gBattleWeather
	.word	gBattleResources
.L855:
	mov	r0, #0x18
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L857	@cond_branch
	ldr	r0, .L865
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x3
	str	r0, [r1, #0x8]
	b	.L856
.L866:
	.align	2, 0
.L865:
	.word	gBattleResources
.L857:
	mov	r0, #0x60
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L859	@cond_branch
	ldr	r0, .L867
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x1
	str	r0, [r1, #0x8]
	b	.L856
.L868:
	.align	2, 0
.L867:
	.word	gBattleResources
.L859:
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	and	r1, r1, r2
	cmp	r1, #0
	beq	.L861	@cond_branch
	ldr	r0, .L869
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x4
	str	r0, [r1, #0x8]
	b	.L856
.L870:
	.align	2, 0
.L869:
	.word	gBattleResources
.L861:
	ldr	r0, .L871
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	str	r1, [r0, #0x8]
.L856:
	ldr	r1, .L871+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L872:
	.align	2, 0
.L871:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe85:
	.size	 Cmd_get_weather,.Lfe85-Cmd_get_weather
	.align	2, 0
	.type	 Cmd_if_effect,function
	.thumb_func
Cmd_if_effect:
	push	{r4, lr}
	ldr	r2, .L876
	ldr	r0, .L876+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r2, [r0]
	ldr	r4, .L876+0x8
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r2, r1
	bne	.L874	@cond_branch
	ldrb	r1, [r3, #0x3]
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L875
.L877:
	.align	2, 0
.L876:
	.word	gBattleMoves
	.word	gBattleResources
	.word	gAIScriptPtr
.L874:
	add	r0, r3, #0x7
	str	r0, [r4]
.L875:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe86:
	.size	 Cmd_if_effect,.Lfe86-Cmd_if_effect
	.align	2, 0
	.type	 Cmd_if_not_effect,function
	.thumb_func
Cmd_if_not_effect:
	push	{r4, lr}
	ldr	r2, .L881
	ldr	r0, .L881+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r2, [r0]
	ldr	r4, .L881+0x8
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r2, r1
	beq	.L879	@cond_branch
	ldrb	r1, [r3, #0x3]
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L880
.L882:
	.align	2, 0
.L881:
	.word	gBattleMoves
	.word	gBattleResources
	.word	gAIScriptPtr
.L879:
	add	r0, r3, #0x7
	str	r0, [r4]
.L880:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe87:
	.size	 Cmd_if_not_effect,.Lfe87-Cmd_if_not_effect
	.align	2, 0
	.type	 Cmd_if_stat_level_less_than,function
	.thumb_func
Cmd_if_stat_level_less_than:
	push	{r4, lr}
	ldr	r0, .L889
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L884	@cond_branch
	ldr	r0, .L889+0x4
	b	.L888
.L890:
	.align	2, 0
.L889:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L884:
	ldr	r0, .L891
.L888:
	ldrb	r3, [r0]
	ldr	r1, .L891+0x4
	ldr	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	bge	.L886	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L887
.L892:
	.align	2, 0
.L891:
	.word	gBattlerTarget
	.word	gBattleMons
.L886:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L887:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe88:
	.size	 Cmd_if_stat_level_less_than,.Lfe88-Cmd_if_stat_level_less_than
	.align	2, 0
	.type	 Cmd_if_stat_level_more_than,function
	.thumb_func
Cmd_if_stat_level_more_than:
	push	{r4, lr}
	ldr	r0, .L899
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L894	@cond_branch
	ldr	r0, .L899+0x4
	b	.L898
.L900:
	.align	2, 0
.L899:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L894:
	ldr	r0, .L901
.L898:
	ldrb	r3, [r0]
	ldr	r1, .L901+0x4
	ldr	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	ble	.L896	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L897
.L902:
	.align	2, 0
.L901:
	.word	gBattlerTarget
	.word	gBattleMons
.L896:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L897:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe89:
	.size	 Cmd_if_stat_level_more_than,.Lfe89-Cmd_if_stat_level_more_than
	.align	2, 0
	.type	 Cmd_if_stat_level_equal,function
	.thumb_func
Cmd_if_stat_level_equal:
	push	{r4, lr}
	ldr	r0, .L909
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L904	@cond_branch
	ldr	r0, .L909+0x4
	b	.L908
.L910:
	.align	2, 0
.L909:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L904:
	ldr	r0, .L911
.L908:
	ldrb	r3, [r0]
	ldr	r1, .L911+0x4
	ldr	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	bne	.L906	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L907
.L912:
	.align	2, 0
.L911:
	.word	gBattlerTarget
	.word	gBattleMons
.L906:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L907:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe90:
	.size	 Cmd_if_stat_level_equal,.Lfe90-Cmd_if_stat_level_equal
	.align	2, 0
	.type	 Cmd_if_stat_level_not_equal,function
	.thumb_func
Cmd_if_stat_level_not_equal:
	push	{r4, lr}
	ldr	r0, .L919
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L914	@cond_branch
	ldr	r0, .L919+0x4
	b	.L918
.L920:
	.align	2, 0
.L919:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L914:
	ldr	r0, .L921
.L918:
	ldrb	r3, [r0]
	ldr	r1, .L921+0x4
	ldr	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	beq	.L916	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L917
.L922:
	.align	2, 0
.L921:
	.word	gBattlerTarget
	.word	gBattleMons
.L916:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L917:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe91:
	.size	 Cmd_if_stat_level_not_equal,.Lfe91-Cmd_if_stat_level_not_equal
	.align	2, 0
	.type	 Cmd_if_can_faint,function
	.thumb_func
Cmd_if_can_faint:
	push	{r4, lr}
	ldr	r2, .L927
	ldr	r0, .L927+0x4
	ldr	r0, [r0]
	ldr	r4, [r0, #0x14]
	ldrh	r1, [r4, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L925	@cond_branch
	ldrb	r1, [r4, #0x1]
	lsl	r1, r1, #0x2
	ldr	r0, .L927+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x4
	add	r1, r1, r0
	ldr	r0, .L927+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x14
	add	r0, r0, r1
	ldr	r2, [r0]
	ldr	r1, .L927+0x10
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, r2
	bgt	.L925	@cond_branch
	ldr	r3, .L927+0x14
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L923
.L928:
	.align	2, 0
.L927:
	.word	gBattleMoves
	.word	gBattleResources
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleMons
	.word	gAIScriptPtr
.L925:
	ldr	r1, .L929
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L923:
	pop	{r4}
	pop	{r0}
	bx	r0
.L930:
	.align	2, 0
.L929:
	.word	gAIScriptPtr
.Lfe92:
	.size	 Cmd_if_can_faint,.Lfe92-Cmd_if_can_faint
	.align	2, 0
	.type	 Cmd_if_cant_faint,function
	.thumb_func
Cmd_if_cant_faint:
	push	{r4, lr}
	ldr	r2, .L935
	ldr	r0, .L935+0x4
	ldr	r0, [r0]
	ldr	r4, [r0, #0x14]
	ldrh	r1, [r4, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0x1
	bls	.L933	@cond_branch
	ldrb	r1, [r4, #0x1]
	lsl	r1, r1, #0x2
	ldr	r0, .L935+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x4
	add	r1, r1, r0
	ldr	r0, .L935+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x14
	add	r0, r0, r1
	ldr	r2, [r0]
	ldr	r1, .L935+0x10
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, r2
	ble	.L933	@cond_branch
	ldr	r3, .L935+0x14
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L931
.L936:
	.align	2, 0
.L935:
	.word	gBattleMoves
	.word	gBattleResources
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleMons
	.word	gAIScriptPtr
.L933:
	ldr	r1, .L937
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L931:
	pop	{r4}
	pop	{r0}
	bx	r0
.L938:
	.align	2, 0
.L937:
	.word	gAIScriptPtr
.Lfe93:
	.size	 Cmd_if_cant_faint,.Lfe93-Cmd_if_cant_faint
	.align	2, 0
	.type	 Cmd_if_has_move,function
	.thumb_func
Cmd_if_has_move:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L976
	ldr	r5, [r0]
	add	r7, r5, #0x2
	ldrb	r1, [r5, #0x1]
	add	r6, r0, #0
	cmp	r1, #0x1
	beq	.L941	@cond_branch
	cmp	r1, #0x1
	bgt	.L973	@cond_branch
	cmp	r1, #0
	beq	.L962	@cond_branch
	b	.L940
.L977:
	.align	2, 0
.L976:
	.word	gAIScriptPtr
.L973:
	cmp	r1, #0x2
	beq	.L962	@cond_branch
	cmp	r1, #0x3
	beq	.L950	@cond_branch
	b	.L940
.L941:
	mov	r4, #0x0
	ldr	r3, .L978
	ldr	r2, .L978+0x4
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldrh	r0, [r0]
	ldrh	r5, [r5, #0x2]
	cmp	r0, r5
	beq	.L943	@cond_branch
	mov	r5, #0x5c
.L944:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L943	@cond_branch
	lsl	r1, r4, #0x1
	ldrb	r0, [r2]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r1, r1, r3
	ldrh	r0, [r1]
	ldrh	r1, [r7]
	cmp	r0, r1
	bne	.L944	@cond_branch
.L943:
	cmp	r4, #0x4
	beq	.L974	@cond_branch
	b	.L969
.L979:
	.align	2, 0
.L978:
	.word	gBattleMons
	.word	sBattler_AI
.L950:
	ldr	r3, .L980
	ldr	r2, .L980+0x4
	ldrb	r1, [r2]
	mov	r0, #0x2
	eor	r0, r0, r1
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r0, r1, r3
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.L951	@cond_branch
	add	r0, r5, #0
	b	.L975
.L981:
	.align	2, 0
.L980:
	.word	gBattleMons
	.word	sBattler_AI
.L951:
	mov	r4, #0x0
	add	r3, r3, #0xc
	add	r0, r1, r3
	ldrh	r0, [r0]
	ldrh	r5, [r5, #0x2]
	cmp	r0, r5
	beq	.L943	@cond_branch
	mov	ip, r3
	add	r5, r2, #0
	mov	r3, #0x2
.L955:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L943	@cond_branch
	lsl	r1, r4, #0x1
	ldrb	r0, [r5]
	add	r2, r3, #0
	eor	r2, r2, r0
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, ip
	ldrh	r0, [r1]
	ldrh	r1, [r7]
	cmp	r0, r1
	bne	.L955	@cond_branch
	b	.L943
.L962:
	mov	r4, #0x0
	ldr	r3, .L982
	ldr	r0, [r3]
	ldr	r1, [r0, #0x18]
	ldr	r2, .L982+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrh	r1, [r7]
	cmp	r0, r1
	beq	.L964	@cond_branch
	add	r7, r3, #0
	add	r5, r2, #0
	add	r3, r1, #0
.L965:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L964	@cond_branch
	ldr	r0, [r7]
	ldr	r2, [r0, #0x18]
	lsl	r1, r4, #0x1
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r2, r2, r1
	ldrh	r0, [r2]
	cmp	r0, r3
	bne	.L965	@cond_branch
.L964:
	cmp	r4, #0x4
	bne	.L969	@cond_branch
.L974:
	ldr	r0, [r6]
.L975:
	add	r0, r0, #0x8
	str	r0, [r6]
	b	.L940
.L983:
	.align	2, 0
.L982:
	.word	gBattleResources
	.word	gBattlerTarget
.L969:
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r6]
.L940:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe94:
	.size	 Cmd_if_has_move,.Lfe94-Cmd_if_has_move
	.align	2, 0
	.type	 Cmd_if_doesnt_have_move,function
	.thumb_func
Cmd_if_doesnt_have_move:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L1010
	ldr	r0, [r1]
	add	r6, r0, #0x2
	ldrb	r0, [r0, #0x1]
	add	r5, r1, #0
	cmp	r0, #0x1
	beq	.L987	@cond_branch
	cmp	r0, #0x1
	bgt	.L1008	@cond_branch
	cmp	r0, #0
	beq	.L997	@cond_branch
	b	.L985
.L1011:
	.align	2, 0
.L1010:
	.word	gAIScriptPtr
.L1008:
	cmp	r0, #0x2
	beq	.L997	@cond_branch
	cmp	r0, #0x3
	bne	.L985	@cond_branch
.L987:
	mov	r3, #0x0
	ldr	r2, .L1012
	ldr	r4, .L1012+0x4
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	ldrh	r1, [r6]
	cmp	r0, r1
	beq	.L989	@cond_branch
	add	r7, r4, #0
	mov	r6, #0x5c
	add	r4, r2, #0
	add	r2, r1, #0
.L990:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bgt	.L989	@cond_branch
	lsl	r1, r3, #0x1
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r1, r1, r0
	add	r1, r1, r4
	ldrh	r0, [r1]
	cmp	r0, r2
	bne	.L990	@cond_branch
.L989:
	cmp	r3, #0x4
	bne	.L1009	@cond_branch
	b	.L1004
.L1013:
	.align	2, 0
.L1012:
	.word	gBattleMons
	.word	sBattler_AI
.L997:
	mov	r3, #0x0
	ldr	r4, .L1014
	ldr	r0, [r4]
	ldr	r1, [r0, #0x18]
	ldr	r2, .L1014+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrh	r1, [r6]
	cmp	r0, r1
	beq	.L999	@cond_branch
	add	r7, r4, #0
	add	r6, r2, #0
	add	r4, r1, #0
.L1000:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bgt	.L999	@cond_branch
	ldr	r0, [r7]
	ldr	r2, [r0, #0x18]
	lsl	r1, r3, #0x1
	ldrb	r0, [r6]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r2, r2, r1
	ldrh	r0, [r2]
	cmp	r0, r4
	bne	.L1000	@cond_branch
.L999:
	cmp	r3, #0x4
	beq	.L1004	@cond_branch
.L1009:
	ldr	r0, [r5]
	add	r0, r0, #0x8
	str	r0, [r5]
	b	.L985
.L1015:
	.align	2, 0
.L1014:
	.word	gBattleResources
	.word	gBattlerTarget
.L1004:
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
.L985:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe95:
	.size	 Cmd_if_doesnt_have_move,.Lfe95-Cmd_if_doesnt_have_move
	.align	2, 0
	.type	 Cmd_if_has_move_with_effect,function
	.thumb_func
Cmd_if_has_move_with_effect:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L1042
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	add	r5, r1, #0
	cmp	r0, #0x1
	beq	.L1019	@cond_branch
	cmp	r0, #0x1
	bgt	.L1040	@cond_branch
	cmp	r0, #0
	beq	.L1029	@cond_branch
	b	.L1017
.L1043:
	.align	2, 0
.L1042:
	.word	gAIScriptPtr
.L1040:
	cmp	r0, #0x2
	beq	.L1029	@cond_branch
	cmp	r0, #0x3
	bne	.L1017	@cond_branch
.L1019:
	mov	r3, #0x0
	ldr	r1, .L1044
	ldr	r0, .L1044+0x4
	ldrb	r2, [r0]
	ldr	r6, .L1044+0x8
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
	ldr	r4, .L1044+0xc
.L1023:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1022	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r4]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L1021	@cond_branch
.L1022:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1023	@cond_branch
.L1021:
	cmp	r3, #0x4
	beq	.L1041	@cond_branch
	b	.L1036
.L1045:
	.align	2, 0
.L1044:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
	.word	gAIScriptPtr
.L1029:
	mov	r3, #0x0
	ldr	r1, .L1046
	ldr	r0, .L1046+0x4
	ldrb	r2, [r0]
	ldr	r7, .L1046+0x8
	ldr	r6, .L1046+0xc
	lsl	r4, r2, #0x4
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
.L1033:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1032	@cond_branch
	ldr	r0, [r6]
	ldr	r0, [r0, #0x18]
	add	r0, r0, r4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, [r5]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L1031	@cond_branch
.L1032:
	add	r4, r4, #0x2
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1033	@cond_branch
.L1031:
	cmp	r3, #0x4
	bne	.L1036	@cond_branch
.L1041:
	ldr	r0, [r5]
	add	r0, r0, #0x7
	str	r0, [r5]
	b	.L1017
.L1047:
	.align	2, 0
.L1046:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gBattleResources
.L1036:
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
.L1017:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe96:
	.size	 Cmd_if_has_move_with_effect,.Lfe96-Cmd_if_has_move_with_effect
	.align	2, 0
	.type	 Cmd_if_doesnt_have_move_with_effect,function
	.thumb_func
Cmd_if_doesnt_have_move_with_effect:
	push	{r4, r5, r6, lr}
	ldr	r1, .L1074
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	add	r4, r1, #0
	cmp	r0, #0x1
	beq	.L1051	@cond_branch
	cmp	r0, #0x1
	bgt	.L1072	@cond_branch
	cmp	r0, #0
	beq	.L1061	@cond_branch
	b	.L1049
.L1075:
	.align	2, 0
.L1074:
	.word	gAIScriptPtr
.L1072:
	cmp	r0, #0x2
	beq	.L1061	@cond_branch
	cmp	r0, #0x3
	bne	.L1049	@cond_branch
.L1051:
	mov	r3, #0x0
	ldr	r1, .L1076
	ldr	r0, .L1076+0x4
	ldrb	r2, [r0]
	ldr	r6, .L1076+0x8
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
	ldr	r5, .L1076+0xc
.L1055:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1054	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r5]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L1053	@cond_branch
.L1054:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1055	@cond_branch
.L1053:
	cmp	r3, #0x4
	bne	.L1073	@cond_branch
	b	.L1068
.L1077:
	.align	2, 0
.L1076:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
	.word	gAIScriptPtr
.L1061:
	mov	r3, #0x0
	ldr	r0, .L1078
	ldr	r0, [r0]
	ldr	r1, [r0, #0x18]
	ldr	r0, .L1078+0x4
	ldrb	r0, [r0]
	ldr	r6, .L1078+0x8
	lsl	r0, r0, #0x4
	add	r2, r0, r1
	ldr	r5, .L1078+0xc
.L1065:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1064	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r5]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L1063	@cond_branch
.L1064:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1065	@cond_branch
.L1063:
	cmp	r3, #0x4
	beq	.L1068	@cond_branch
.L1073:
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
	b	.L1049
.L1079:
	.align	2, 0
.L1078:
	.word	gBattleResources
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gAIScriptPtr
.L1068:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L1049:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe97:
	.size	 Cmd_if_doesnt_have_move_with_effect,.Lfe97-Cmd_if_doesnt_have_move_with_effect
	.align	2, 0
	.type	 Cmd_if_any_move_disabled_or_encored,function
	.thumb_func
Cmd_if_any_move_disabled_or_encored:
	push	{r4, r5, lr}
	ldr	r0, .L1094
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L1081	@cond_branch
	ldr	r0, .L1094+0x4
	b	.L1091
.L1095:
	.align	2, 0
.L1094:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1081:
	ldr	r0, .L1096
.L1091:
	ldrb	r3, [r0]
	add	r4, r5, #0
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x2]
	cmp	r0, #0
	bne	.L1083	@cond_branch
	ldr	r0, .L1096+0x4
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L1092	@cond_branch
	b	.L1093
.L1097:
	.align	2, 0
.L1096:
	.word	gBattlerTarget
	.word	gDisableStructs
.L1083:
	cmp	r0, #0x1
	beq	.L1087	@cond_branch
.L1092:
	add	r0, r2, #0x7
	str	r0, [r4]
	b	.L1086
.L1087:
	ldr	r0, .L1098
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x6]
	cmp	r0, #0
	beq	.L1089	@cond_branch
.L1093:
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1086
.L1099:
	.align	2, 0
.L1098:
	.word	gDisableStructs
.L1089:
	add	r0, r2, #0x7
	str	r0, [r5]
.L1086:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe98:
	.size	 Cmd_if_any_move_disabled_or_encored,.Lfe98-Cmd_if_any_move_disabled_or_encored
	.align	2, 0
	.type	 Cmd_if_curr_move_disabled_or_encored,function
	.thumb_func
Cmd_if_curr_move_disabled_or_encored:
	push	{r4, lr}
	ldr	r4, .L1111
	ldr	r3, [r4]
	ldrb	r0, [r3, #0x1]
	cmp	r0, #0
	beq	.L1102	@cond_branch
	cmp	r0, #0x1
	beq	.L1105	@cond_branch
	b	.L1106
.L1112:
	.align	2, 0
.L1111:
	.word	gAIScriptPtr
.L1102:
	ldr	r2, .L1113
	ldr	r0, .L1113+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L1113+0x8
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	ldrh	r0, [r0, #0x4]
	ldrh	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L1110	@cond_branch
	b	.L1106
.L1114:
	.align	2, 0
.L1113:
	.word	gDisableStructs
	.word	gActiveBattler
	.word	gBattleResources
.L1105:
	ldr	r2, .L1115
	ldr	r0, .L1115+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L1115+0x8
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	ldrh	r0, [r0, #0x6]
	ldrh	r1, [r1, #0x2]
	cmp	r0, r1
	bne	.L1106	@cond_branch
.L1110:
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1101
.L1116:
	.align	2, 0
.L1115:
	.word	gDisableStructs
	.word	gActiveBattler
	.word	gBattleResources
.L1106:
	add	r0, r3, #0x6
	str	r0, [r4]
.L1101:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 Cmd_if_curr_move_disabled_or_encored,.Lfe99-Cmd_if_curr_move_disabled_or_encored
	.align	2, 0
	.type	 Cmd_flee,function
	.thumb_func
Cmd_flee:
	ldr	r0, .L1118
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0xb
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
	bx	lr
.L1119:
	.align	2, 0
.L1118:
	.word	gBattleResources
.Lfe100:
	.size	 Cmd_flee,.Lfe100-Cmd_flee
	.align	2, 0
	.type	 Cmd_if_random_safari_flee,function
	.thumb_func
Cmd_if_random_safari_flee:
	push	{r4, lr}
	ldr	r0, .L1123
	ldr	r0, [r0]
	add	r0, r0, #0x7a
	ldrb	r0, [r0]
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcs	.L1121	@cond_branch
	ldr	r3, .L1123+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1122
.L1124:
	.align	2, 0
.L1123:
	.word	gBattleStruct
	.word	gAIScriptPtr
.L1121:
	ldr	r1, .L1125
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1122:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1126:
	.align	2, 0
.L1125:
	.word	gAIScriptPtr
.Lfe101:
	.size	 Cmd_if_random_safari_flee,.Lfe101-Cmd_if_random_safari_flee
	.align	2, 0
	.type	 Cmd_watch,function
	.thumb_func
Cmd_watch:
	ldr	r0, .L1128
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0xd
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
	bx	lr
.L1129:
	.align	2, 0
.L1128:
	.word	gBattleResources
.Lfe102:
	.size	 Cmd_watch,.Lfe102-Cmd_watch
	.align	2, 0
	.type	 Cmd_get_hold_effect,function
	.thumb_func
Cmd_get_hold_effect:
	push	{r4, lr}
	ldr	r0, .L1134
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L1131	@cond_branch
	ldr	r0, .L1134+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x48
	add	r0, r0, r4
	ldrb	r0, [r0]
	b	.L1133
.L1135:
	.align	2, 0
.L1134:
	.word	gAIScriptPtr
	.word	gBattleResources
.L1131:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBattlerHoldEffect
	ldr	r1, .L1136
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
.L1133:
	str	r0, [r1, #0x8]
	ldr	r1, .L1136+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1137:
	.align	2, 0
.L1136:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe103:
	.size	 Cmd_get_hold_effect,.Lfe103-Cmd_get_hold_effect
	.align	2, 0
	.type	 Cmd_if_holds_item,function
	.thumb_func
Cmd_if_holds_item:
	push	{r4, lr}
	ldr	r0, .L1143
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r0, #0x1
	ldr	r1, .L1143+0x4
	ldrb	r2, [r1]
	add	r1, r3, #0
	and	r1, r1, r0
	and	r0, r0, r2
	cmp	r1, r0
	bne	.L1139	@cond_branch
	ldr	r1, .L1143+0x8
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r3, [r0, #0x30]
	b	.L1140
.L1144:
	.align	2, 0
.L1143:
	.word	gAIScriptPtr
	.word	sBattler_AI
	.word	gBattleMons
.L1139:
	ldr	r0, .L1145
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x48
	add	r0, r0, r3
	ldrb	r3, [r0]
.L1140:
	ldr	r4, .L1145+0x4
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r1, r3
	bne	.L1141	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1142
.L1146:
	.align	2, 0
.L1145:
	.word	gBattleResources
	.word	gAIScriptPtr
.L1141:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L1142:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe104:
	.size	 Cmd_if_holds_item,.Lfe104-Cmd_if_holds_item
	.align	2, 0
	.type	 Cmd_get_gender,function
	.thumb_func
Cmd_get_gender:
	push	{lr}
	ldr	r0, .L1151
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L1148	@cond_branch
	ldr	r0, .L1151+0x4
	b	.L1150
.L1152:
	.align	2, 0
.L1151:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1148:
	ldr	r0, .L1153
.L1150:
	ldrb	r1, [r0]
	ldr	r2, .L1153+0x4
	mov	r0, #0x5c
	mul	r1, r1, r0
	add	r0, r1, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	add	r2, r2, #0x4c
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	GetGenderFromSpeciesAndPersonality
	ldr	r1, .L1153+0x8
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1, #0x8]
	ldr	r1, .L1153+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1154:
	.align	2, 0
.L1153:
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe105:
	.size	 Cmd_get_gender,.Lfe105-Cmd_get_gender
	.align	2, 0
	.type	 Cmd_is_first_turn_for,function
	.thumb_func
Cmd_is_first_turn_for:
	push	{r4, lr}
	ldr	r0, .L1159
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L1156	@cond_branch
	ldr	r0, .L1159+0x4
	b	.L1158
.L1160:
	.align	2, 0
.L1159:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1156:
	ldr	r0, .L1161
.L1158:
	ldrb	r3, [r0]
	ldr	r0, .L1161+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1161+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x19]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1162:
	.align	2, 0
.L1161:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	gDisableStructs
.Lfe106:
	.size	 Cmd_is_first_turn_for,.Lfe106-Cmd_is_first_turn_for
	.align	2, 0
	.type	 Cmd_get_stockpile_count,function
	.thumb_func
Cmd_get_stockpile_count:
	push	{r4, lr}
	ldr	r0, .L1167
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L1164	@cond_branch
	ldr	r0, .L1167+0x4
	b	.L1166
.L1168:
	.align	2, 0
.L1167:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1164:
	ldr	r0, .L1169
.L1166:
	ldrb	r3, [r0]
	ldr	r0, .L1169+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1169+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x9]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1170:
	.align	2, 0
.L1169:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	gDisableStructs
.Lfe107:
	.size	 Cmd_get_stockpile_count,.Lfe107-Cmd_get_stockpile_count
	.align	2, 0
	.type	 Cmd_is_double_battle,function
	.thumb_func
Cmd_is_double_battle:
	ldr	r0, .L1172
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r0, .L1172+0x4
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	str	r0, [r2, #0x8]
	ldr	r1, .L1172+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1173:
	.align	2, 0
.L1172:
	.word	gBattleResources
	.word	gBattleTypeFlags
	.word	gAIScriptPtr
.Lfe108:
	.size	 Cmd_is_double_battle,.Lfe108-Cmd_is_double_battle
	.align	2, 0
	.type	 Cmd_get_used_held_item,function
	.thumb_func
Cmd_get_used_held_item:
	push	{lr}
	ldr	r0, .L1178
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r3, r0, #0
	cmp	r1, #0x1
	bne	.L1175	@cond_branch
	ldr	r0, .L1178+0x4
	b	.L1177
.L1179:
	.align	2, 0
.L1178:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1175:
	ldr	r0, .L1180
.L1177:
	ldrb	r1, [r0]
	ldr	r0, .L1180+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r0, .L1180+0x8
	ldr	r0, [r0]
	lsl	r1, r1, #0x1
	add	r0, r0, #0xb0
	add	r0, r0, r1
	ldrh	r0, [r0]
	str	r0, [r2, #0x8]
	ldr	r0, [r3]
	add	r0, r0, #0x2
	str	r0, [r3]
	pop	{r0}
	bx	r0
.L1181:
	.align	2, 0
.L1180:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	gBattleStruct
.Lfe109:
	.size	 Cmd_get_used_held_item,.Lfe109-Cmd_get_used_held_item
	.align	2, 0
	.type	 Cmd_get_move_type_from_result,function
	.thumb_func
Cmd_get_move_type_from_result:
	ldr	r0, .L1183
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1183+0x4
	ldr	r1, [r3, #0x8]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x3]
	str	r0, [r3, #0x8]
	ldr	r1, .L1183+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1184:
	.align	2, 0
.L1183:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe110:
	.size	 Cmd_get_move_type_from_result,.Lfe110-Cmd_get_move_type_from_result
	.align	2, 0
	.type	 Cmd_get_move_power_from_result,function
	.thumb_func
Cmd_get_move_power_from_result:
	ldr	r0, .L1186
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1186+0x4
	ldr	r1, [r3, #0x8]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	str	r0, [r3, #0x8]
	ldr	r1, .L1186+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1187:
	.align	2, 0
.L1186:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe111:
	.size	 Cmd_get_move_power_from_result,.Lfe111-Cmd_get_move_power_from_result
	.align	2, 0
	.type	 Cmd_get_move_effect_from_result,function
	.thumb_func
Cmd_get_move_effect_from_result:
	ldr	r0, .L1189
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1189+0x4
	ldr	r1, [r3, #0x8]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	str	r0, [r3, #0x8]
	ldr	r1, .L1189+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1190:
	.align	2, 0
.L1189:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe112:
	.size	 Cmd_get_move_effect_from_result,.Lfe112-Cmd_get_move_effect_from_result
	.align	2, 0
	.type	 Cmd_get_protect_count,function
	.thumb_func
Cmd_get_protect_count:
	push	{r4, lr}
	ldr	r0, .L1195
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L1192	@cond_branch
	ldr	r0, .L1195+0x4
	b	.L1194
.L1196:
	.align	2, 0
.L1195:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1192:
	ldr	r0, .L1197
.L1194:
	ldrb	r3, [r0]
	ldr	r0, .L1197+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1197+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1198:
	.align	2, 0
.L1197:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	gDisableStructs
.Lfe113:
	.size	 Cmd_get_protect_count,.Lfe113-Cmd_get_protect_count
	.align	2, 0
	.type	 Cmd_if_move_flag,function
	.thumb_func
Cmd_if_move_flag:
	push	{r4, r5, lr}
	ldr	r5, .L1202
	ldr	r4, [r5]
	ldrb	r2, [r4, #0x1]
	ldrb	r0, [r4, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r3, .L1202+0x4
	ldr	r0, .L1202+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1200	@cond_branch
	ldrb	r1, [r4, #0x5]
	ldrb	r0, [r4, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1201
.L1203:
	.align	2, 0
.L1202:
	.word	gAIScriptPtr
	.word	gBattleMoves
	.word	gBattleResources
.L1200:
	add	r0, r4, #0
	add	r0, r0, #0x9
	str	r0, [r5]
.L1201:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 Cmd_if_move_flag,.Lfe114-Cmd_if_move_flag
	.align	2, 0
	.type	 Cmd_if_field_status,function
	.thumb_func
Cmd_if_field_status:
	push	{lr}
	ldr	r3, .L1207
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L1207+0x4
	ldr	r0, [r0]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1205	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1206
.L1208:
	.align	2, 0
.L1207:
	.word	gAIScriptPtr
	.word	gFieldStatuses
.L1205:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L1206:
	pop	{r0}
	bx	r0
.Lfe115:
	.size	 Cmd_if_field_status,.Lfe115-Cmd_if_field_status
	.align	2, 0
	.type	 Cmd_get_move_accuracy,function
	.thumb_func
Cmd_get_move_accuracy:
	ldr	r0, .L1210
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1210+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	str	r0, [r3, #0x8]
	ldr	r1, .L1210+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1211:
	.align	2, 0
.L1210:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe116:
	.size	 Cmd_get_move_accuracy,.Lfe116-Cmd_get_move_accuracy
	.align	2, 0
	.type	 Cmd_call_if_eq,function
	.thumb_func
Cmd_call_if_eq:
	push	{r4, lr}
	ldr	r0, .L1215
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r4, .L1215+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r0, [r2, #0x8]
	cmp	r0, r1
	bne	.L1213	@cond_branch
	add	r0, r3, #0x7
	bl	AIStackPushVar
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1214
.L1216:
	.align	2, 0
.L1215:
	.word	gBattleResources
	.word	gAIScriptPtr
.L1213:
	add	r0, r3, #0x7
	str	r0, [r4]
.L1214:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe117:
	.size	 Cmd_call_if_eq,.Lfe117-Cmd_call_if_eq
	.align	2, 0
	.type	 Cmd_call_if_move_flag,function
	.thumb_func
Cmd_call_if_move_flag:
	push	{r4, r5, lr}
	ldr	r5, .L1220
	ldr	r4, [r5]
	ldrb	r2, [r4, #0x1]
	ldrb	r0, [r4, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r3, .L1220+0x4
	ldr	r0, .L1220+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1218	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x9
	bl	AIStackPushVar
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1219
.L1221:
	.align	2, 0
.L1220:
	.word	gAIScriptPtr
	.word	gBattleMoves
	.word	gBattleResources
.L1218:
	add	r0, r4, #0
	add	r0, r0, #0x9
	str	r0, [r5]
.L1219:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe118:
	.size	 Cmd_call_if_move_flag,.Lfe118-Cmd_call_if_move_flag
	.align	2, 0
	.type	 Cmd_nullsub_57,function
	.thumb_func
Cmd_nullsub_57:
	bx	lr
.Lfe119:
	.size	 Cmd_nullsub_57,.Lfe119-Cmd_nullsub_57
	.align	2, 0
	.type	 Cmd_call,function
	.thumb_func
Cmd_call:
	push	{r4, lr}
	ldr	r4, .L1224
	ldr	r0, [r4]
	add	r0, r0, #0x5
	bl	AIStackPushVar
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1225:
	.align	2, 0
.L1224:
	.word	gAIScriptPtr
.Lfe120:
	.size	 Cmd_call,.Lfe120-Cmd_call
	.align	2, 0
	.type	 Cmd_goto,function
	.thumb_func
Cmd_goto:
	ldr	r3, .L1227
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	bx	lr
.L1228:
	.align	2, 0
.L1227:
	.word	gAIScriptPtr
.Lfe121:
	.size	 Cmd_goto,.Lfe121-Cmd_goto
	.align	2, 0
	.type	 Cmd_end,function
	.thumb_func
Cmd_end:
	push	{lr}
	bl	AIStackPop
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1230	@cond_branch
	ldr	r0, .L1231
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
.L1230:
	pop	{r0}
	bx	r0
.L1232:
	.align	2, 0
.L1231:
	.word	gBattleResources
.Lfe122:
	.size	 Cmd_end,.Lfe122-Cmd_end
	.align	2, 0
	.type	 Cmd_if_level_cond,function
	.thumb_func
Cmd_if_level_cond:
	push	{r4, r5, lr}
	ldr	r5, .L1248
	ldr	r4, [r5]
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x1
	beq	.L1238	@cond_branch
	cmp	r0, #0x1
	bgt	.L1246	@cond_branch
	cmp	r0, #0
	beq	.L1235	@cond_branch
	b	.L1234
.L1249:
	.align	2, 0
.L1248:
	.word	gAIScriptPtr
.L1246:
	cmp	r0, #0x2
	beq	.L1241	@cond_branch
	b	.L1234
.L1235:
	ldr	r3, .L1250
	ldr	r0, .L1250+0x4
	ldrb	r0, [r0]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2c
	ldr	r0, .L1250+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2c
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bhi	.L1247	@cond_branch
	b	.L1242
.L1251:
	.align	2, 0
.L1250:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattlerTarget
.L1238:
	ldr	r3, .L1252
	ldr	r0, .L1252+0x4
	ldrb	r0, [r0]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2c
	ldr	r0, .L1252+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2c
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.L1247	@cond_branch
	b	.L1242
.L1253:
	.align	2, 0
.L1252:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattlerTarget
.L1241:
	ldr	r3, .L1254
	ldr	r0, .L1254+0x4
	ldrb	r0, [r0]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2c
	ldr	r0, .L1254+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2c
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L1242	@cond_branch
.L1247:
	ldrb	r1, [r4, #0x2]
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1234
.L1255:
	.align	2, 0
.L1254:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattlerTarget
.L1242:
	add	r0, r4, #0x6
	str	r0, [r5]
.L1234:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe123:
	.size	 Cmd_if_level_cond,.Lfe123-Cmd_if_level_cond
	.align	2, 0
	.type	 Cmd_if_target_taunted,function
	.thumb_func
Cmd_if_target_taunted:
	push	{lr}
	ldr	r2, .L1259
	ldr	r0, .L1259+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x16]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	beq	.L1257	@cond_branch
	ldr	r3, .L1259+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1258
.L1260:
	.align	2, 0
.L1259:
	.word	gDisableStructs
	.word	gBattlerTarget
	.word	gAIScriptPtr
.L1257:
	ldr	r1, .L1261
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1258:
	pop	{r0}
	bx	r0
.L1262:
	.align	2, 0
.L1261:
	.word	gAIScriptPtr
.Lfe124:
	.size	 Cmd_if_target_taunted,.Lfe124-Cmd_if_target_taunted
	.align	2, 0
	.type	 Cmd_if_target_not_taunted,function
	.thumb_func
Cmd_if_target_not_taunted:
	push	{lr}
	ldr	r2, .L1266
	ldr	r0, .L1266+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x16]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bne	.L1264	@cond_branch
	ldr	r3, .L1266+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1265
.L1267:
	.align	2, 0
.L1266:
	.word	gDisableStructs
	.word	gBattlerTarget
	.word	gAIScriptPtr
.L1264:
	ldr	r1, .L1268
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1265:
	pop	{r0}
	bx	r0
.L1269:
	.align	2, 0
.L1268:
	.word	gAIScriptPtr
.Lfe125:
	.size	 Cmd_if_target_not_taunted,.Lfe125-Cmd_if_target_not_taunted
	.align	2, 0
	.type	 Cmd_if_target_is_ally,function
	.thumb_func
Cmd_if_target_is_ally:
	push	{lr}
	ldr	r0, .L1273
	ldrb	r3, [r0]
	mov	r0, #0x1
	ldr	r1, .L1273+0x4
	ldrb	r2, [r1]
	add	r1, r0, #0
	and	r1, r1, r3
	and	r0, r0, r2
	cmp	r1, r0
	bne	.L1271	@cond_branch
	ldr	r3, .L1273+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1272
.L1274:
	.align	2, 0
.L1273:
	.word	sBattler_AI
	.word	gBattlerTarget
	.word	gAIScriptPtr
.L1271:
	ldr	r1, .L1275
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1272:
	pop	{r0}
	bx	r0
.L1276:
	.align	2, 0
.L1275:
	.word	gAIScriptPtr
.Lfe126:
	.size	 Cmd_if_target_is_ally,.Lfe126-Cmd_if_target_is_ally
	.align	2, 0
	.type	 Cmd_if_flash_fired,function
	.thumb_func
Cmd_if_flash_fired:
	push	{r4, lr}
	ldr	r4, .L1280
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	ldr	r1, .L1280+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x4]
	lsr	r0, r0, #0x16
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1278	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1279
.L1281:
	.align	2, 0
.L1280:
	.word	gAIScriptPtr
	.word	gBattleResources
.L1278:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L1279:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe127:
	.size	 Cmd_if_flash_fired,.Lfe127-Cmd_if_flash_fired
	.align	2, 0
	.type	 AIStackPushVar,function
	.thumb_func
AIStackPushVar:
	push	{r4, lr}
	ldr	r1, .L1283
	ldr	r1, [r1]
	ldr	r3, [r1, #0x1c]
	add	r4, r3, #0
	add	r4, r4, #0x20
	ldrb	r1, [r4]
	add	r2, r1, #0x1
	strb	r2, [r4]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x16
	add	r3, r3, r1
	str	r0, [r3]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1284:
	.align	2, 0
.L1283:
	.word	gBattleResources
.Lfe128:
	.size	 AIStackPushVar,.Lfe128-AIStackPushVar
	.align	2, 0
	.type	 AIStackPushVar_cursor,function
	.thumb_func
AIStackPushVar_cursor:
	ldr	r0, .L1286
	ldr	r0, [r0]
	ldr	r2, [r0, #0x1c]
	add	r3, r2, #0
	add	r3, r3, #0x20
	ldrb	r0, [r3]
	add	r1, r0, #0x1
	strb	r1, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r2, r2, r0
	ldr	r0, .L1286+0x4
	ldr	r0, [r0]
	str	r0, [r2]
	bx	lr
.L1287:
	.align	2, 0
.L1286:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe129:
	.size	 AIStackPushVar_cursor,.Lfe129-AIStackPushVar_cursor
	.align	2, 0
	.type	 AIStackPop,function
	.thumb_func
AIStackPop:
	push	{lr}
	ldr	r3, .L1292
	ldr	r0, [r3]
	ldr	r0, [r0, #0x1c]
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L1289	@cond_branch
	mov	r0, #0x0
	b	.L1291
.L1293:
	.align	2, 0
.L1292:
	.word	gBattleResources
.L1289:
	sub	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r2, .L1294
	ldr	r0, [r3]
	ldr	r1, [r0, #0x1c]
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r2]
	mov	r0, #0x1
.L1291:
	pop	{r1}
	bx	r1
.L1295:
	.align	2, 0
.L1294:
	.word	gAIScriptPtr
.Lfe130:
	.size	 AIStackPop,.Lfe130-AIStackPop
	.align	2, 0
	.type	 Cmd_get_ally_chosen_move,function
	.thumb_func
Cmd_get_ally_chosen_move:
	push	{r4, r5, lr}
	ldr	r5, .L1303
	ldrb	r0, [r5]
	mov	r1, #0x2
	add	r4, r1, #0
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L1302	@cond_branch
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	beq	.L1302	@cond_branch
	ldrb	r5, [r5]
	cmp	r4, r5
	bls	.L1300	@cond_branch
.L1302:
	ldr	r0, .L1303+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
	str	r0, [r1, #0x8]
	b	.L1299
.L1304:
	.align	2, 0
.L1303:
	.word	sBattler_AI
	.word	gBattleResources
.L1300:
	ldr	r0, .L1305
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1305+0x4
	ldr	r0, .L1305+0x8
	ldr	r0, [r0]
	add	r0, r0, #0x7f
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, #0x5c
	mul	r1, r1, r4
	add	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	str	r0, [r3, #0x8]
.L1299:
	ldr	r1, .L1305+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1306:
	.align	2, 0
.L1305:
	.word	gBattleResources
	.word	gBattleMons
	.word	gBattleStruct
	.word	gAIScriptPtr
.Lfe131:
	.size	 Cmd_get_ally_chosen_move,.Lfe131-Cmd_get_ally_chosen_move
	.align	2, 0
	.type	 Cmd_if_has_no_attacking_moves,function
	.thumb_func
Cmd_if_has_no_attacking_moves:
	push	{r4, r5, r6, lr}
	ldr	r5, .L1324
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	beq	.L1308	@cond_branch
	mov	r3, #0x0
	add	r6, r5, #0
	ldr	r0, .L1324+0x4
	ldr	r5, .L1324+0x8
	mov	r1, #0x5c
	mul	r1, r1, r4
	add	r0, r0, #0xc
	add	r2, r1, r0
.L1312:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1311	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L1315	@cond_branch
.L1311:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1312	@cond_branch
	b	.L1315
.L1325:
	.align	2, 0
.L1324:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	gBattleMoves
.L1308:
	mov	r3, #0x0
	add	r6, r5, #0
	lsl	r1, r4, #0x4
	ldr	r0, .L1326
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	ldr	r4, .L1326+0x4
	add	r2, r1, r0
.L1319:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1318	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L1315	@cond_branch
.L1318:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1319	@cond_branch
.L1315:
	cmp	r3, #0x4
	bne	.L1322	@cond_branch
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r6]
	b	.L1323
.L1327:
	.align	2, 0
.L1326:
	.word	gBattleResources
	.word	gBattleMoves
.L1322:
	ldr	r0, [r6]
	add	r0, r0, #0x6
	str	r0, [r6]
.L1323:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe132:
	.size	 Cmd_if_has_no_attacking_moves,.Lfe132-Cmd_if_has_no_attacking_moves
	.align	2, 0
	.type	 Cmd_get_hazards_count,function
	.thumb_func
Cmd_get_hazards_count:
	push	{r4, lr}
	ldr	r4, .L1335
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x2]
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r1, #0x70
	beq	.L1330	@cond_branch
	cmp	r1, #0xf7
	beq	.L1331	@cond_branch
	b	.L1329
.L1336:
	.align	2, 0
.L1335:
	.word	gAIScriptPtr
.L1330:
	ldr	r0, .L1337
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1337+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0xa]
	b	.L1334
.L1338:
	.align	2, 0
.L1337:
	.word	gBattleResources
	.word	gSideTimers
.L1331:
	ldr	r0, .L1339
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1339+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0xb]
.L1334:
	str	r0, [r2, #0x8]
.L1329:
	ldr	r1, .L1339+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1340:
	.align	2, 0
.L1339:
	.word	gBattleResources
	.word	gSideTimers
	.word	gAIScriptPtr
.Lfe133:
	.size	 Cmd_get_hazards_count,.Lfe133-Cmd_get_hazards_count
	.align	2, 0
	.type	 Cmd_if_doesnt_hold_berry,function
	.thumb_func
Cmd_if_doesnt_hold_berry:
	push	{r4, lr}
	ldr	r0, .L1346
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	beq	.L1342	@cond_branch
	ldr	r1, .L1346+0x4
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x30]
	b	.L1343
.L1347:
	.align	2, 0
.L1346:
	.word	gAIScriptPtr
	.word	gBattleMons
.L1342:
	ldr	r0, .L1348
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x48
	add	r0, r0, r4
	ldrb	r0, [r0]
.L1343:
	bl	ItemId_GetPocket
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x7
	bne	.L1344	@cond_branch
	ldr	r1, .L1348+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
	b	.L1345
.L1349:
	.align	2, 0
.L1348:
	.word	gBattleResources
	.word	gAIScriptPtr
.L1344:
	ldr	r3, .L1350
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L1345:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1351:
	.align	2, 0
.L1350:
	.word	gAIScriptPtr
.Lfe134:
	.size	 Cmd_if_doesnt_hold_berry,.Lfe134-Cmd_if_doesnt_hold_berry
	.align	2, 0
	.type	 Cmd_if_share_type,function
	.thumb_func
Cmd_if_share_type:
	push	{r4, r5, lr}
	ldr	r5, .L1355
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x2]
	bl	BattleAI_GetWantedBattler
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	DoBattlersShareType
	cmp	r0, #0
	beq	.L1353	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1354
.L1356:
	.align	2, 0
.L1355:
	.word	gAIScriptPtr
.L1353:
	ldr	r0, [r5]
	add	r0, r0, #0x7
	str	r0, [r5]
.L1354:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe135:
	.size	 Cmd_if_share_type,.Lfe135-Cmd_if_share_type
	.align	2, 0
	.type	 Cmd_if_cant_use_last_resort,function
	.thumb_func
Cmd_if_cant_use_last_resort:
	push	{r4, lr}
	ldr	r4, .L1360
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	CanUseLastResort
	cmp	r0, #0
	beq	.L1358	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
	b	.L1359
.L1361:
	.align	2, 0
.L1360:
	.word	gAIScriptPtr
.L1358:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L1359:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe136:
	.size	 Cmd_if_cant_use_last_resort,.Lfe136-Cmd_if_cant_use_last_resort
	.align	2, 0
	.type	 GetMovesArray,function
	.thumb_func
GetMovesArray:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L1364	@cond_branch
	mov	r0, #0x2
	eor	r0, r0, r4
	bl	IsBattlerAIControlled
	cmp	r0, #0
	beq	.L1363	@cond_branch
.L1364:
	mov	r0, #0x5c
	mul	r0, r0, r4
	ldr	r1, .L1369
	b	.L1368
.L1370:
	.align	2, 0
.L1369:
	.word	gBattleMons+0xc
.L1363:
	ldr	r0, .L1371
	ldr	r0, [r0]
	lsl	r1, r4, #0x4
	ldr	r0, [r0, #0x18]
.L1368:
	add	r0, r0, r1
	pop	{r4}
	pop	{r1}
	bx	r1
.L1372:
	.align	2, 0
.L1371:
	.word	gBattleResources
.Lfe137:
	.size	 GetMovesArray,.Lfe137-GetMovesArray
	.align	2, 0
	.type	 HasMoveWithSplit,function
	.thumb_func
HasMoveWithSplit:
	push	{r4, r5, r6, r7, lr}
	add	r6, r1, #0
	bl	GetMovesArray
	mov	r5, #0x0
	ldr	r7, .L1381
	add	r4, r0, #0
.L1377:
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L1376	@cond_branch
	cmp	r0, r7
	beq	.L1376	@cond_branch
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r6
	bne	.L1376	@cond_branch
	mov	r0, #0x1
	b	.L1380
.L1382:
	.align	2, 0
.L1381:
	.word	0xffff
.L1376:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1377	@cond_branch
	mov	r0, #0x0
.L1380:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe138:
	.size	 HasMoveWithSplit,.Lfe138-HasMoveWithSplit
	.align	2, 0
	.type	 Cmd_if_has_move_with_split,function
	.thumb_func
Cmd_if_has_move_with_split:
	push	{r4, lr}
	ldr	r4, .L1386
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r4]
	ldrb	r1, [r1, #0x2]
	bl	HasMoveWithSplit
	cmp	r0, #0
	beq	.L1384	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1385
.L1387:
	.align	2, 0
.L1386:
	.word	gAIScriptPtr
.L1384:
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
.L1385:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe139:
	.size	 Cmd_if_has_move_with_split,.Lfe139-Cmd_if_has_move_with_split
	.align	2, 0
	.type	 Cmd_if_has_no_move_with_split,function
	.thumb_func
Cmd_if_has_no_move_with_split:
	push	{r4, lr}
	ldr	r4, .L1391
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r4]
	ldrb	r1, [r1, #0x2]
	bl	HasMoveWithSplit
	cmp	r0, #0
	bne	.L1389	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1390
.L1392:
	.align	2, 0
.L1391:
	.word	gAIScriptPtr
.L1389:
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
.L1390:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe140:
	.size	 Cmd_if_has_no_move_with_split,.Lfe140-Cmd_if_has_no_move_with_split
	.align	2, 0
	.type	 MovesWithSplitUnusable,function
	.thumb_func
MovesWithSplitUnusable:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	add	r7, r0, #0
	add	r4, r1, #0
	str	r2, [sp, #0x4]
	mov	r0, #0x0
	mov	r9, r0
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	mov	r2, #0xff
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	add	r0, r7, #0
	bl	GetMovesArray
	ldr	r1, .L1404
	mov	r8, r1
	add	r5, r0, #0
	mov	r6, r8
	lsl	r4, r4, #0x18
	mov	sl, r4
.L1397:
	ldrh	r1, [r5]
	cmp	r1, #0
	beq	.L1396	@cond_branch
	ldr	r0, .L1404+0x4
	cmp	r1, r0
	beq	.L1396	@cond_branch
	add	r0, r1, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, [sp, #0x4]
	cmp	r0, r4
	bne	.L1396	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [sp, #0x8]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1396	@cond_branch
	ldrh	r0, [r5]
	lsl	r4, r7, #0x18
	lsr	r1, r4, #0x18
	bl	SetTypeBeforeUsingMove
	ldr	r0, .L1404+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L1399	@cond_branch
	mov	r1, #0x3f
	and	r1, r1, r0
	b	.L1400
.L1405:
	.align	2, 0
.L1404:
	.word	gBitTable
	.word	0xffff
	.word	gBattleStruct
.L1399:
	ldr	r2, .L1406
	ldrh	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x3]
.L1400:
	ldrh	r0, [r5]
	lsr	r2, r4, #0x18
	mov	r3, #0x0
	str	r3, [sp]
	mov	r4, sl
	lsr	r3, r4, #0x18
	bl	CalcTypeEffectivenessMultiplier
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L1396	@cond_branch
	ldr	r0, [r6]
	mov	r1, r9
	orr	r1, r1, r0
	mov	r9, r1
.L1396:
	add	r5, r5, #0x2
	add	r6, r6, #0x4
	mov	r0, r8
	add	r0, r0, #0xc
	cmp	r6, r0
	ble	.L1397	@cond_branch
	mov	r0, #0x0
	mov	r4, r9
	cmp	r4, #0
	bne	.L1403	@cond_branch
	mov	r0, #0x1
.L1403:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1407:
	.align	2, 0
.L1406:
	.word	gBattleMoves
.Lfe141:
	.size	 MovesWithSplitUnusable,.Lfe141-MovesWithSplitUnusable
	.align	2, 0
	.type	 Cmd_if_physical_moves_unusable,function
	.thumb_func
Cmd_if_physical_moves_unusable:
	push	{r4, r5, lr}
	ldr	r5, .L1411
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x2]
	bl	BattleAI_GetWantedBattler
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	mov	r2, #0x0
	bl	MovesWithSplitUnusable
	cmp	r0, #0
	beq	.L1409	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1410
.L1412:
	.align	2, 0
.L1411:
	.word	gAIScriptPtr
.L1409:
	ldr	r0, [r5]
	add	r0, r0, #0x7
	str	r0, [r5]
.L1410:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe142:
	.size	 Cmd_if_physical_moves_unusable,.Lfe142-Cmd_if_physical_moves_unusable
	.align	2, 0
	.type	 Cmd_if_ai_can_go_down,function
	.thumb_func
Cmd_if_ai_can_go_down:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r4, .L1420
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0xfd
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L1420+0x4
	ldr	r1, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	ldr	r1, [r1, #0x18]
	mov	r5, #0x0
	ldr	r6, .L1420+0x8
	ldr	r7, .L1420+0xc
	add	r4, r1, r0
	ldr	r0, .L1420+0x10
	mov	r9, r0
.L1417:
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L1416	@cond_branch
	cmp	r0, r9
	beq	.L1416	@cond_branch
	ldr	r0, .L1420+0x14
	lsl	r1, r5, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1416	@cond_branch
	ldrh	r0, [r4]
	ldr	r1, .L1420
	ldrb	r1, [r1]
	ldrb	r2, [r6]
	bl	AI_CalcDamage
	ldr	r3, .L1420+0x18
	ldrb	r2, [r6]
	mov	r1, #0x5c
	mul	r1, r1, r2
	add	r1, r1, r3
	ldrh	r1, [r1, #0x2a]
	cmp	r0, r1
	blt	.L1416	@cond_branch
	ldr	r2, [r7]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r7]
	b	.L1413
.L1421:
	.align	2, 0
.L1420:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	sBattler_AI
	.word	gAIScriptPtr
	.word	0xffff
	.word	gBitTable
	.word	gBattleMons
.L1416:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1417	@cond_branch
	ldr	r1, .L1422
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1413:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1423:
	.align	2, 0
.L1422:
	.word	gAIScriptPtr
.Lfe143:
	.size	 Cmd_if_ai_can_go_down,.Lfe143-Cmd_if_ai_can_go_down
	.align	2, 0
	.type	 Cmd_if_cant_use_belch,function
	.thumb_func
Cmd_if_cant_use_belch:
	push	{r4, lr}
	ldr	r4, .L1427
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1427+0x4
	ldr	r2, [r1]
	mov	r1, #0x1
	and	r1, r1, r0
	ldr	r3, .L1427+0x8
	add	r2, r2, r3
	add	r2, r2, r1
	ldrb	r2, [r2]
	ldr	r3, .L1427+0xc
	ldr	r1, .L1427+0x10
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L1425	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
	b	.L1426
.L1428:
	.align	2, 0
.L1427:
	.word	gAIScriptPtr
	.word	gBattleStruct
	.word	0x2b6
	.word	gBitTable
	.word	gBattlerPartyIndexes
.L1425:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L1426:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe144:
	.size	 Cmd_if_cant_use_belch,.Lfe144-Cmd_if_cant_use_belch
	.align	2, 0
	.type	 Cmd_if_has_move_with_type,function
	.thumb_func
Cmd_if_has_move_with_type:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L1441
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetMovesArray
	mov	r6, #0x0
	ldr	r7, .L1441+0x4
	add	r5, r0, #0
	lsl	r4, r4, #0x18
.L1433:
	ldrh	r0, [r5]
	cmp	r0, #0
	beq	.L1432	@cond_branch
	lsr	r1, r4, #0x18
	bl	SetTypeBeforeUsingMove
	ldr	r0, .L1441+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L1435	@cond_branch
	mov	r1, #0x3f
	and	r1, r1, r0
	b	.L1436
.L1442:
	.align	2, 0
.L1441:
	.word	gAIScriptPtr
	.word	gBattleMoves
	.word	gBattleStruct
.L1435:
	ldrh	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r1, [r0, #0x3]
.L1436:
	ldr	r0, .L1443
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x2]
	cmp	r1, r0
	beq	.L1431	@cond_branch
.L1432:
	add	r5, r5, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	bls	.L1433	@cond_branch
.L1431:
	cmp	r6, #0x4
	bne	.L1439	@cond_branch
	ldr	r1, .L1443
	ldr	r0, [r1]
	add	r0, r0, #0x7
	str	r0, [r1]
	b	.L1440
.L1444:
	.align	2, 0
.L1443:
	.word	gAIScriptPtr
.L1439:
	ldr	r3, .L1445
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L1440:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1446:
	.align	2, 0
.L1445:
	.word	gAIScriptPtr
.Lfe145:
	.size	 Cmd_if_has_move_with_type,.Lfe145-Cmd_if_has_move_with_type
	.align	2, 0
	.type	 Cmd_if_has_move_with_flag,function
	.thumb_func
Cmd_if_has_move_with_flag:
	push	{r4, r5, r6, lr}
	ldr	r4, .L1454
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetMovesArray
	ldr	r2, [r4]
	ldrb	r3, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	mov	r5, #0x0
	ldr	r6, .L1454+0x4
	add	r2, r0, #0
.L1451:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1450	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldr	r0, [r1]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1450	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1447
.L1455:
	.align	2, 0
.L1454:
	.word	gAIScriptPtr
	.word	gBattleMoves+0xc
.L1450:
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	bls	.L1451	@cond_branch
	ldr	r1, .L1456
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L1447:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1457:
	.align	2, 0
.L1456:
	.word	gAIScriptPtr
.Lfe146:
	.size	 Cmd_if_has_move_with_flag,.Lfe146-Cmd_if_has_move_with_flag
	.align	2, 0
	.type	 Cmd_if_no_move_used,function
	.thumb_func
Cmd_if_no_move_used:
	push	{r4, r5, lr}
	ldr	r5, .L1468
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L1459	@cond_branch
	mov	r3, #0x0
	lsl	r1, r4, #0x4
	ldr	r0, .L1468+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	ldr	r4, .L1468+0x8
	add	r0, r1, r0
.L1463:
	ldrh	r2, [r0]
	cmp	r2, #0
	beq	.L1462	@cond_branch
	cmp	r2, r4
	bne	.L1467	@cond_branch
.L1462:
	add	r0, r0, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bls	.L1463	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1458
.L1469:
	.align	2, 0
.L1468:
	.word	gAIScriptPtr
	.word	gBattleResources
	.word	0xffff
.L1467:
.L1459:
	ldr	r0, [r5]
	add	r0, r0, #0x6
	str	r0, [r5]
.L1458:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe147:
	.size	 Cmd_if_no_move_used,.Lfe147-Cmd_if_no_move_used
	.align	2, 0
	.type	 Cmd_if_battler_absent,function
	.thumb_func
Cmd_if_battler_absent:
	push	{r4, lr}
	ldr	r4, .L1473
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L1471	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1472
.L1474:
	.align	2, 0
.L1473:
	.word	gAIScriptPtr
.L1471:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L1472:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe148:
	.size	 Cmd_if_battler_absent,.Lfe148-Cmd_if_battler_absent
	.align	2, 0
	.type	 Cmd_is_grounded,function
	.thumb_func
Cmd_is_grounded:
	push	{r4, lr}
	ldr	r4, .L1478
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerGrounded
	cmp	r0, #0
	beq	.L1476	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1477
.L1479:
	.align	2, 0
.L1478:
	.word	gAIScriptPtr
.L1476:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L1477:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe149:
	.size	 Cmd_is_grounded,.Lfe149-Cmd_is_grounded
	.align	2, 0
	.type	 Cmd_get_best_dmg_hp_percent,function
	.thumb_func
Cmd_get_best_dmg_hp_percent:
	push	{r4, r5, r6, r7, lr}
	mov	r3, #0x0
	ldr	r4, .L1487
	ldr	r5, .L1487+0x4
	ldr	r7, .L1487+0x8
	ldr	r6, .L1487+0xc
	ldr	r0, [r4]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r5]
	ldr	r0, .L1487+0x10
	ldrb	r0, [r0]
	lsl	r1, r1, #0x4
	lsl	r0, r0, #0x6
	add	r0, r0, #0x14
	add	r1, r1, r0
	add	r1, r1, r2
	mov	r2, #0x3
.L1484:
	ldr	r0, [r1]
	cmp	r0, r3
	ble	.L1483	@cond_branch
	add	r3, r0, #0
.L1483:
	add	r1, r1, #0x4
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L1484	@cond_branch
	ldr	r0, [r4]
	ldr	r4, [r0, #0x14]
	mov	r0, #0x64
	mul	r0, r0, r3
	ldrb	r2, [r5]
	mov	r1, #0x5c
	mul	r1, r1, r2
	add	r1, r1, r7
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	str	r0, [r4, #0x8]
	ldr	r0, [r6]
	add	r0, r0, #0x1
	str	r0, [r6]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1488:
	.align	2, 0
.L1487:
	.word	gBattleResources
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gAIScriptPtr
	.word	sBattler_AI
.Lfe150:
	.size	 Cmd_get_best_dmg_hp_percent,.Lfe150-Cmd_get_best_dmg_hp_percent
	.align	2, 0
	.type	 Cmd_get_curr_dmg_hp_percent,function
	.thumb_func
Cmd_get_curr_dmg_hp_percent:
	push	{r4, lr}
	ldr	r0, .L1490
	ldr	r0, [r0]
	ldr	r4, [r0, #0x14]
	ldrb	r1, [r4, #0x1]
	lsl	r1, r1, #0x2
	ldr	r0, .L1490+0x4
	ldrb	r3, [r0]
	lsl	r0, r3, #0x4
	add	r1, r1, r0
	ldr	r0, .L1490+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x14
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r2, .L1490+0xc
	mov	r1, #0x5c
	mul	r1, r1, r3
	add	r1, r1, r2
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	str	r0, [r4, #0x8]
	ldr	r1, .L1490+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1491:
	.align	2, 0
.L1490:
	.word	gBattleResources
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleMons
	.word	gAIScriptPtr
.Lfe151:
	.size	 Cmd_get_curr_dmg_hp_percent,.Lfe151-Cmd_get_curr_dmg_hp_percent
	.align	2, 0
	.type	 Cmd_get_move_split_from_result,function
	.thumb_func
Cmd_get_move_split_from_result:
	push	{r4, lr}
	ldr	r4, .L1493
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	bl	GetBattleMoveSplit
	ldr	r1, [r4]
	ldr	r1, [r1, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1, #0x8]
	ldr	r1, .L1493+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1494:
	.align	2, 0
.L1493:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe152:
	.size	 Cmd_get_move_split_from_result,.Lfe152-Cmd_get_move_split_from_result
	.align	2, 0
	.type	 Cmd_get_considered_move_split,function
	.thumb_func
Cmd_get_considered_move_split:
	push	{r4, lr}
	ldr	r4, .L1496
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	bl	GetBattleMoveSplit
	ldr	r1, [r4]
	ldr	r1, [r1, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1, #0x8]
	ldr	r1, .L1496+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1497:
	.align	2, 0
.L1496:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe153:
	.size	 Cmd_get_considered_move_split,.Lfe153-Cmd_get_considered_move_split
	.align	2, 0
	.type	 Cmd_get_considered_move_target,function
	.thumb_func
Cmd_get_considered_move_target:
	ldr	r0, .L1499
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1499+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x7]
	str	r0, [r3, #0x8]
	ldr	r1, .L1499+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1500:
	.align	2, 0
.L1499:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe154:
	.size	 Cmd_get_considered_move_target,.Lfe154-Cmd_get_considered_move_target
	.align	2, 0
	.type	 Cmd_compare_speeds,function
	.thumb_func
Cmd_compare_speeds:
	push	{r4, r5, lr}
	ldr	r5, .L1502
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x2]
	bl	BattleAI_GetWantedBattler
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	mov	r2, #0x1
	bl	GetWhoStrikesFirst
	ldr	r1, .L1502+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r5]
	add	r0, r0, #0x3
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1503:
	.align	2, 0
.L1502:
	.word	gAIScriptPtr
	.word	gBattleResources
.Lfe155:
	.size	 Cmd_compare_speeds,.Lfe155-Cmd_compare_speeds
	.align	2, 0
	.type	 FindMoveUsedXTurnsAgo,function
	.thumb_func
FindMoveUsedXTurnsAgo:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	ldr	r2, .L1511
	ldr	r0, [r2]
	ldr	r0, [r0, #0x18]
	lsl	r1, r5, #0x4
	add	r0, r0, r1
	ldrb	r1, [r0, #0xe]
	mov	r3, #0x0
	cmp	r3, r4
	bcs	.L1506	@cond_branch
.L1508:
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L1507	@cond_branch
	mov	r1, #0x2
.L1507:
	add	r3, r3, #0x1
	cmp	r3, r4
	bcc	.L1508	@cond_branch
.L1506:
	ldr	r0, [r2]
	ldr	r0, [r0, #0x18]
	lsl	r1, r1, #0x1
	lsl	r2, r5, #0x4
	add	r1, r1, r2
	add	r0, r0, #0x8
	add	r0, r0, r1
	ldrh	r0, [r0]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1512:
	.align	2, 0
.L1511:
	.word	gBattleResources
.Lfe156:
	.size	 FindMoveUsedXTurnsAgo,.Lfe156-FindMoveUsedXTurnsAgo
	.align	2, 0
	.type	 Cmd_is_wakeup_turn,function
	.thumb_func
Cmd_is_wakeup_turn:
	push	{r4, lr}
	ldr	r0, .L1516
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L1516+0x4
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r4, [r0]
	mov	r0, #0x7
	and	r4, r4, r0
	cmp	r4, #0x1
	bne	.L1514	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x2
	bl	FindMoveUsedXTurnsAgo
	cmp	r0, #0x9c
	bne	.L1514	@cond_branch
	ldr	r0, .L1516+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	str	r4, [r0, #0x8]
	b	.L1515
.L1517:
	.align	2, 0
.L1516:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	gBattleResources
.L1514:
	ldr	r0, .L1518
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
	str	r0, [r1, #0x8]
.L1515:
	ldr	r1, .L1518+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1519:
	.align	2, 0
.L1518:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe157:
	.size	 Cmd_is_wakeup_turn,.Lfe157-Cmd_is_wakeup_turn
	.align	2, 0
	.type	 Cmd_if_has_move_with_accuracy_lt,function
	.thumb_func
Cmd_if_has_move_with_accuracy_lt:
	push	{r4, r5, lr}
	ldr	r4, .L1529
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r4]
	ldrb	r4, [r1, #0x2]
	bl	GetMovesArray
	mov	r3, #0x0
	ldr	r5, .L1529+0x4
	add	r2, r0, #0
.L1524:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1523	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r0, [r1]
	cmp	r0, #0x26
	beq	.L1523	@cond_branch
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0x1
	bls	.L1523	@cond_branch
	cmp	r0, r4
	bcc	.L1522	@cond_branch
.L1523:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bls	.L1524	@cond_branch
.L1522:
	cmp	r3, #0x4
	bne	.L1527	@cond_branch
	ldr	r1, .L1529
	ldr	r0, [r1]
	add	r0, r0, #0x7
	str	r0, [r1]
	b	.L1528
.L1530:
	.align	2, 0
.L1529:
	.word	gAIScriptPtr
	.word	gBattleMoves
.L1527:
	ldr	r3, .L1531
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L1528:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1532:
	.align	2, 0
.L1531:
	.word	gAIScriptPtr
.Lfe158:
	.size	 Cmd_if_has_move_with_accuracy_lt,.Lfe158-Cmd_if_has_move_with_accuracy_lt
.text
	.align	2, 0

