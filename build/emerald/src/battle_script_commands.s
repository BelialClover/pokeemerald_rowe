@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sExperienceScalingFactors,object
sExperienceScalingFactors:
	.word	0x0
	.word	0x0
	.word	0x1
	.word	0x3
	.word	0x8
	.word	0xd
	.word	0x16
	.word	0x20
	.word	0x2d
	.word	0x3c
	.word	0x4f
	.word	0x64
	.word	0x7c
	.word	0x98
	.word	0xb7
	.word	0xd9
	.word	0x100
	.word	0x129
	.word	0x157
	.word	0x189
	.word	0x1bf
	.word	0x1f9
	.word	0x237
	.word	0x27a
	.word	0x2c1
	.word	0x30d
	.word	0x35d
	.word	0x3b2
	.word	0x40d
	.word	0x46c
	.word	0x4d0
	.word	0x539
	.word	0x5a8
	.word	0x61b
	.word	0x695
	.word	0x713
	.word	0x798
	.word	0x821
	.word	0x8b1
	.word	0x946
	.word	0x9e1
	.word	0xa82
	.word	0xb2a
	.word	0xbd7
	.word	0xc8a
	.word	0xd44
	.word	0xe03
	.word	0xeca
	.word	0xf96
	.word	0x1069
	.word	0x1143
	.word	0x1223
	.word	0x130a
	.word	0x13f8
	.word	0x14ed
	.word	0x15e8
	.word	0x16ea
	.word	0x17f4
	.word	0x1904
	.word	0x1a1c
	.word	0x1b3b
	.word	0x1c61
	.word	0x1d8e
	.word	0x1ec3
	.word	0x2000
	.word	0x2143
	.word	0x228f
	.word	0x23e2
	.word	0x253c
	.word	0x269e
	.word	0x2809
	.word	0x297b
	.word	0x2af4
	.word	0x2c76
	.word	0x2e00
	.word	0x2f92
	.word	0x312c
	.word	0x32ce
	.word	0x3479
	.word	0x362b
	.word	0x37e6
	.word	0x39aa
	.word	0x3b76
	.word	0x3d4a
	.word	0x3f27
	.word	0x410c
	.word	0x42fa
	.word	0x44f1
	.word	0x46f1
	.word	0x48f9
	.word	0x4b0a
	.word	0x4d24
	.word	0x4f47
	.word	0x5173
	.word	0x53a9
	.word	0x55e7
	.word	0x582e
	.word	0x5a7e
	.word	0x5cd8
	.word	0x5f3b
	.word	0x61a8
	.word	0x641d
	.word	0x669c
	.word	0x6925
	.word	0x6bb7
	.word	0x6e53
	.word	0x70f8
	.word	0x73a7
	.word	0x765f
	.word	0x7922
	.word	0x7bee
	.word	0x7ec4
	.word	0x81a4
	.word	0x848e
	.word	0x8781
	.word	0x8a7f
	.word	0x8d87
	.word	0x9099
	.word	0x93b5
	.word	0x96db
	.word	0x9a0c
	.word	0x9d46
	.word	0xa08b
	.word	0xa3db
	.word	0xa734
	.word	0xaa99
	.word	0xae07
	.word	0xb181
	.word	0xb504
	.word	0xb893
	.word	0xbc2c
	.word	0xbfd0
	.word	0xc37e
	.word	0xc737
	.word	0xcafb
	.word	0xceca
	.word	0xd2a4
	.word	0xd689
	.word	0xda79
	.word	0xde73
	.word	0xe279
	.word	0xe68a
	.word	0xeaa6
	.word	0xeecd
	.word	0xf300
	.word	0xf73d
	.word	0xfb86
	.word	0xffda
	.word	0x1043a
	.word	0x108a5
	.word	0x10d1b
	.word	0x1119d
	.word	0x1162b
	.word	0x11ac4
	.word	0x11f68
	.word	0x12419
	.word	0x128d5
	.word	0x12d9c
	.word	0x13270
	.word	0x1374f
	.word	0x13c3a
	.word	0x14131
	.word	0x14633
	.word	0x14b42
	.word	0x1505d
	.word	0x15583
	.word	0x15ab6
	.word	0x15ff5
	.word	0x16540
	.word	0x16a97
	.word	0x16ffa
	.word	0x17569
	.word	0x17ae5
	.word	0x1806d
	.word	0x18601
	.word	0x18ba2
	.word	0x1914f
	.word	0x19709
	.word	0x19ccf
	.word	0x1a2a1
	.word	0x1a880
	.word	0x1ae6c
	.word	0x1b464
	.word	0x1ba69
	.word	0x1c07b
	.word	0x1c699
	.word	0x1ccc4
	.word	0x1d2fc
	.word	0x1d941
	.word	0x1df92
	.word	0x1e5f1
	.word	0x1ec5c
	.word	0x1f2d4
	.word	0x1f959
	.word	0x1ffec
	.word	0x2068b
	.word	0x20d38
	.word	0x213f1
	.word	0x21ab8
	.word	0x2218c
	.word	0x2286d
	.word	0x22f5b
	.word	0x23657
	.word	0x23d60
	.word	0x24476
	.word	0x24b9a
	.word	0x252cb
	.word	0x25a0a
	.word	0x26156
	.word	0x268b0
	.word	0x27017
	.size	 sExperienceScalingFactors,844
	.align	1, 0
	.type	 sBadgeFlags,object
	.size	 sBadgeFlags,16
sBadgeFlags:
	.short	0x867
	.short	0x868
	.short	0x869
	.short	0x86a
	.short	0x86b
	.short	0x86c
	.short	0x86d
	.short	0x86e
	.globl	sLevelCapFlags
	.align	1, 0
	.type	 sLevelCapFlags,object
	.size	 sLevelCapFlags,18
sLevelCapFlags:
	.short	0xa5
	.short	0xa6
	.short	0xa7
	.short	0xa8
	.short	0xa9
	.short	0xaa
	.short	0xab
	.short	0xac
	.short	0x7e
	.globl	sLevelCaps
	.align	1, 0
	.type	 sLevelCaps,object
	.size	 sLevelCaps,18
sLevelCaps:
	.short	0x10
	.short	0x17
	.short	0x1d
	.short	0x24
	.short	0x2a
	.short	0x31
	.short	0x37
	.short	0x42
	.short	0x4c
	.globl	sLevelCapReduction
	.align	2, 0
	.type	 sLevelCapReduction,object
	.size	 sLevelCapReduction,56
sLevelCapReduction:
	.long 0x3fe00000, 0x0	@ double 5.00000000000000000000e-1
	.long 0x3fd51eb8, 0x51eb851f	@ double 3.30000000000000015543e-1
	.long 0x3fd00000, 0x0	@ double 2.50000000000000000000e-1
	.long 0x3fc99999, 0x9999999a	@ double 2.00000000000000011102e-1
	.long 0x3fc33333, 0x33333333	@ double 1.49999999999999994449e-1
	.long 0x3fb99999, 0x9999999a	@ double 1.00000000000000005551e-1
	.long 0x3fa99999, 0x9999999a	@ double 5.00000000000000027756e-2
	.globl	sRelativePartyScaling
	.align	2, 0
	.type	 sRelativePartyScaling,object
	.size	 sRelativePartyScaling,216
sRelativePartyScaling:
	.long 0x40080000, 0x0	@ double 3.00000000000000000000e0
	.long 0x40060000, 0x0	@ double 2.75000000000000000000e0
	.long 0x40040000, 0x0	@ double 2.50000000000000000000e0
	.long 0x4002a3d7, 0xa3d70a4	@ double 2.33000000000000007105e0
	.long 0x40020000, 0x0	@ double 2.25000000000000000000e0
	.long 0x40000000, 0x0	@ double 2.00000000000000000000e0
	.long 0x3ffccccc, 0xcccccccd	@ double 1.80000000000000004441e0
	.long 0x3ffb3333, 0x33333333	@ double 1.69999999999999995559e0
	.long 0x3ff99999, 0x9999999a	@ double 1.60000000000000008882e0
	.long 0x3ff80000, 0x0	@ double 1.50000000000000000000e0
	.long 0x3ff66666, 0x66666666	@ double 1.39999999999999991118e0
	.long 0x3ff4cccc, 0xcccccccd	@ double 1.30000000000000004441e0
	.long 0x3ff33333, 0x33333333	@ double 1.19999999999999995559e0
	.long 0x3ff19999, 0x9999999a	@ double 1.10000000000000008882e0
	.long 0x3ff00000, 0x0	@ double 1.00000000000000000000e0
	.long 0x3feccccc, 0xcccccccd	@ double 9.00000000000000022204e-1
	.long 0x3fe99999, 0x9999999a	@ double 8.00000000000000044409e-1
	.long 0x3fe80000, 0x0	@ double 7.50000000000000000000e-1
	.long 0x3fe51eb8, 0x51eb851f	@ double 6.60000000000000031086e-1
	.long 0x3fe00000, 0x0	@ double 5.00000000000000000000e-1
	.long 0x3fd99999, 0x9999999a	@ double 4.00000000000000022204e-1
	.long 0x3fd51eb8, 0x51eb851f	@ double 3.30000000000000015543e-1
	.long 0x3fd00000, 0x0	@ double 2.50000000000000000000e-1
	.long 0x3fc99999, 0x9999999a	@ double 2.00000000000000011102e-1
	.long 0x3fc33333, 0x33333333	@ double 1.49999999999999994449e-1
	.long 0x3fb99999, 0x9999999a	@ double 1.00000000000000005551e-1
	.long 0x3fa99999, 0x9999999a	@ double 5.00000000000000027756e-2
	.align	1, 0
	.type	 sWhiteOutBadgeMoney,object
	.size	 sWhiteOutBadgeMoney,18
sWhiteOutBadgeMoney:
	.short	0x8
	.short	0x10
	.short	0x18
	.short	0x24
	.short	0x30
	.short	0x3c
	.short	0x50
	.short	0x64
	.short	0x78
	.globl	gBattleScriptingCommandsTable
	.align	2, 0
	.type	 gBattleScriptingCommandsTable,object
gBattleScriptingCommandsTable:
	.word	Cmd_attackcanceler
	.word	Cmd_accuracycheck
	.word	Cmd_attackstring
	.word	Cmd_ppreduce
	.word	Cmd_critcalc
	.word	Cmd_damagecalc
	.word	Cmd_typecalc
	.word	Cmd_adjustdamage
	.word	Cmd_multihitresultmessage
	.word	Cmd_attackanimation
	.word	Cmd_waitanimation
	.word	Cmd_healthbarupdate
	.word	Cmd_datahpupdate
	.word	Cmd_critmessage
	.word	Cmd_effectivenesssound
	.word	Cmd_resultmessage
	.word	Cmd_printstring
	.word	Cmd_printselectionstring
	.word	Cmd_waitmessage
	.word	Cmd_printfromtable
	.word	Cmd_printselectionstringfromtable
	.word	Cmd_seteffectwithchance
	.word	Cmd_seteffectprimary
	.word	Cmd_seteffectsecondary
	.word	Cmd_clearstatusfromeffect
	.word	Cmd_tryfaintmon
	.word	Cmd_dofaintanimation
	.word	Cmd_cleareffectsonfaint
	.word	Cmd_jumpifstatus
	.word	Cmd_jumpifstatus2
	.word	Cmd_jumpifability
	.word	Cmd_jumpifsideaffecting
	.word	Cmd_jumpifstat
	.word	Cmd_jumpifstatus3condition
	.word	Cmd_jumpbasedontype
	.word	Cmd_getexp
	.word	atk24
	.word	Cmd_movevaluescleanup
	.word	Cmd_setmultihit
	.word	Cmd_decrementmultihit
	.word	Cmd_goto
	.word	Cmd_jumpifbyte
	.word	Cmd_jumpifhalfword
	.word	Cmd_jumpifword
	.word	Cmd_jumpifarrayequal
	.word	Cmd_jumpifarraynotequal
	.word	Cmd_setbyte
	.word	Cmd_addbyte
	.word	Cmd_subbyte
	.word	Cmd_copyarray
	.word	Cmd_copyarraywithindex
	.word	Cmd_orbyte
	.word	Cmd_orhalfword
	.word	Cmd_orword
	.word	Cmd_bicbyte
	.word	Cmd_bichalfword
	.word	Cmd_bicword
	.word	Cmd_pause
	.word	Cmd_waitstate
	.word	Cmd_update
	.word	Cmd_return
	.word	Cmd_end
	.word	Cmd_end2
	.word	Cmd_end3
	.word	Cmd_jumpifaffectedbyprotect
	.word	Cmd_call
	.word	Cmd_setroost
	.word	Cmd_jumpifabilitypresent
	.word	Cmd_endselectionscript
	.word	Cmd_playanimation
	.word	Cmd_playanimation2
	.word	Cmd_setgraphicalstatchangevalues
	.word	Cmd_playstatchangeanimation
	.word	Cmd_moveend
	.word	Cmd_sethealblock
	.word	Cmd_returnatktoball
	.word	Cmd_getswitchedmondata
	.word	Cmd_switchindataupdate
	.word	Cmd_switchinanim
	.word	Cmd_jumpifcantswitch
	.word	Cmd_openpartyscreen
	.word	Cmd_switchhandleorder
	.word	Cmd_switchineffects
	.word	Cmd_trainerslidein
	.word	Cmd_playse
	.word	Cmd_fanfare
	.word	Cmd_playfaintcry
	.word	atk57
	.word	Cmd_returntoball
	.word	Cmd_handlelearnnewmove
	.word	Cmd_yesnoboxlearnmove
	.word	Cmd_yesnoboxstoplearningmove
	.word	Cmd_hitanimation
	.word	Cmd_getmoneyreward
	.word	atk5E
	.word	Cmd_swapattackerwithtarget
	.word	Cmd_incrementgamestat
	.word	Cmd_drawpartystatussummary
	.word	Cmd_hidepartystatussummary
	.word	Cmd_jumptocalledmove
	.word	Cmd_statusanimation
	.word	Cmd_status2animation
	.word	Cmd_chosenstatusanimation
	.word	Cmd_yesnobox
	.word	Cmd_cancelallactions
	.word	Cmd_setgravity
	.word	Cmd_removeitem
	.word	Cmd_atknameinbuff1
	.word	Cmd_drawlvlupbox
	.word	Cmd_resetsentmonsvalue
	.word	Cmd_setatktoplayer0
	.word	Cmd_makevisible
	.word	Cmd_recordability
	.word	Cmd_buffermovetolearn
	.word	Cmd_jumpifplayerran
	.word	Cmd_hpthresholds
	.word	Cmd_hpthresholds2
	.word	Cmd_useitemonopponent
	.word	Cmd_various
	.word	Cmd_setprotectlike
	.word	Cmd_faintifabilitynotdamp
	.word	Cmd_setatkhptozero
	.word	Cmd_jumpifnexttargetvalid
	.word	Cmd_tryhealhalfhealth
	.word	Cmd_trymirrormove
	.word	Cmd_setrain
	.word	Cmd_setreflect
	.word	Cmd_setseeded
	.word	Cmd_manipulatedamage
	.word	Cmd_trysetrest
	.word	Cmd_jumpifnotfirstturn
	.word	Cmd_setmiracleeye
	.word	Cmd_jumpifcantmakeasleep
	.word	Cmd_stockpile
	.word	Cmd_stockpiletobasedamage
	.word	Cmd_stockpiletohpheal
	.word	Cmd_setdrainedhp
	.word	Cmd_statbuffchange
	.word	Cmd_normalisebuffs
	.word	Cmd_setbide
	.word	Cmd_confuseifrepeatingattackends
	.word	Cmd_setmultihitcounter
	.word	Cmd_initmultihitstring
	.word	Cmd_forcerandomswitch
	.word	Cmd_tryconversiontypechange
	.word	Cmd_givepaydaymoney
	.word	Cmd_setlightscreen
	.word	Cmd_tryKO
	.word	Cmd_damagetohalftargethp
	.word	Cmd_setsandstorm
	.word	Cmd_weatherdamage
	.word	Cmd_tryinfatuating
	.word	Cmd_updatestatusicon
	.word	Cmd_setmist
	.word	Cmd_setfocusenergy
	.word	Cmd_transformdataexecution
	.word	Cmd_setsubstitute
	.word	Cmd_mimicattackcopy
	.word	Cmd_metronome
	.word	Cmd_dmgtolevel
	.word	Cmd_psywavedamageeffect
	.word	Cmd_counterdamagecalculator
	.word	Cmd_mirrorcoatdamagecalculator
	.word	Cmd_disablelastusedattack
	.word	Cmd_trysetencore
	.word	Cmd_painsplitdmgcalc
	.word	Cmd_settypetorandomresistance
	.word	Cmd_setalwayshitflag
	.word	Cmd_copymovepermanently
	.word	Cmd_trychoosesleeptalkmove
	.word	Cmd_setdestinybond
	.word	Cmd_trysetdestinybondtohappen
	.word	Cmd_settailwind
	.word	Cmd_tryspiteppreduce
	.word	Cmd_healpartystatus
	.word	Cmd_cursetarget
	.word	Cmd_trysetspikes
	.word	Cmd_setforesight
	.word	Cmd_trysetperishsong
	.word	Cmd_handlerollout
	.word	Cmd_jumpifconfusedandstatmaxed
	.word	Cmd_handlefurycutter
	.word	Cmd_setembargo
	.word	Cmd_presentdamagecalculation
	.word	Cmd_setsafeguard
	.word	Cmd_magnitudedamagecalculation
	.word	Cmd_jumpifnopursuitswitchdmg
	.word	Cmd_setsunny
	.word	Cmd_maxattackhalvehp
	.word	Cmd_copyfoestats
	.word	Cmd_rapidspinfree
	.word	Cmd_setdefensecurlbit
	.word	Cmd_recoverbasedonsunlight
	.word	Cmd_setstickyweb
	.word	Cmd_selectfirstvalidtarget
	.word	Cmd_trysetfutureattack
	.word	Cmd_trydobeatup
	.word	Cmd_setsemiinvulnerablebit
	.word	Cmd_clearsemiinvulnerablebit
	.word	Cmd_setminimize
	.word	Cmd_sethail
	.word	Cmd_jumpifattackandspecialattackcannotfall
	.word	Cmd_setforcedtarget
	.word	Cmd_setcharge
	.word	Cmd_callterrainattack
	.word	Cmd_cureifburnedparalysedorpoisoned
	.word	Cmd_settorment
	.word	Cmd_jumpifnodamage
	.word	Cmd_settaunt
	.word	Cmd_trysethelpinghand
	.word	Cmd_tryswapitems
	.word	Cmd_trycopyability
	.word	Cmd_trywish
	.word	Cmd_settoxicspikes
	.word	Cmd_setgastroacid
	.word	Cmd_setyawn
	.word	Cmd_setdamagetohealthdifference
	.word	Cmd_setroom
	.word	Cmd_tryswapabilities
	.word	Cmd_tryimprison
	.word	Cmd_setstealthrock
	.word	Cmd_setuserstatus3
	.word	Cmd_assistattackselect
	.word	Cmd_trysetmagiccoat
	.word	Cmd_trysetsnatch
	.word	Cmd_trygetintimidatetarget
	.word	Cmd_switchoutabilities
	.word	Cmd_jumpifhasnohp
	.word	Cmd_getsecretpowereffect
	.word	Cmd_pickup
	.word	Cmd_docastformchangeanimation
	.word	Cmd_trycastformdatachange
	.word	Cmd_settypebasedhalvers
	.word	Cmd_jumpifsubstituteblocks
	.word	Cmd_tryrecycleitem
	.word	Cmd_settypetoterrain
	.word	Cmd_pursuitrelated
	.word	Cmd_snatchsetbattlers
	.word	Cmd_removelightscreenreflect
	.word	Cmd_handleballthrow
	.word	Cmd_givecaughtmon
	.word	Cmd_trysetcaughtmondexflags
	.word	Cmd_displaydexinfo
	.word	Cmd_trygivecaughtmonnick
	.word	Cmd_subattackerhpbydmg
	.word	Cmd_removeattackerstatus1
	.word	Cmd_finishaction
	.word	Cmd_finishturn
	.word	Cmd_trainerslideout
	.word	Cmd_settelekinesis
	.word	Cmd_swapstatstages
	.word	Cmd_averagestats
	.word	Cmd_jumpifoppositegenders
	.word	Cmd_trygetbaddreamstarget
	.word	Cmd_tryworryseed
	.word	Cmd_metalburstdamagecalculator
	.size	 gBattleScriptingCommandsTable,1024
	.align	2, 0
	.type	 sAccuracyStageRatios,object
sAccuracyStageRatios:
	.byte	0x21
	.byte	0x64
	.space	2
	.byte	0x24
	.byte	0x64
	.space	2
	.byte	0x2b
	.byte	0x64
	.space	2
	.byte	0x32
	.byte	0x64
	.space	2
	.byte	0x3c
	.byte	0x64
	.space	2
	.byte	0x4b
	.byte	0x64
	.space	2
	.byte	0x1
	.byte	0x1
	.space	2
	.byte	0x85
	.byte	0x64
	.space	2
	.byte	0xa6
	.byte	0x64
	.space	2
	.byte	0x2
	.byte	0x1
	.space	2
	.byte	0xe9
	.byte	0x64
	.space	2
	.byte	0x85
	.byte	0x32
	.space	2
	.byte	0x3
	.byte	0x1
	.space	2
	.size	 sAccuracyStageRatios,52
	.align	2, 0
	.type	 sStatusFlagsForMoveEffects,object
	.size	 sStatusFlagsForMoveEffects,284
sStatusFlagsForMoveEffects:
	.space	4
	.word	0x7
	.word	0x8
	.word	0x10
	.word	0x20
	.word	0x40
	.word	0x80
	.word	0x7
	.word	0x8
	.space	4
	.word	0x70
	.space	4
	.word	0x1000
	.word	0x2000
	.space	60
	.word	0x400000
	.space	8
	.word	0x4000000
	.word	0x8000000
	.space	76
	.word	0xc00
	.space	68
	.align	2, 0
	.type	 sMoveEffectBS_Ptrs,object
sMoveEffectBS_Ptrs:
	.space	4
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectPoison
	.word	BattleScript_MoveEffectBurn
	.word	BattleScript_MoveEffectFreeze
	.word	BattleScript_MoveEffectParalysis
	.word	BattleScript_MoveEffectToxic
	.word	BattleScript_MoveEffectConfusion
	.space	8
	.word	BattleScript_MoveEffectUproar
	.word	BattleScript_MoveEffectPayDay
	.space	4
	.word	BattleScript_MoveEffectWrap
	.word	BattleScript_MoveEffectRecoil
	.space	92
	.word	BattleScript_MoveEffectRecoil
	.size	 sMoveEffectBS_Ptrs,156
	.align	2, 0
	.type	 sUnusedWinTemplate,object
	.size	 sUnusedWinTemplate,8
sUnusedWinTemplate:
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x7
	.byte	0xf
	.byte	0x1f
	.short	0x3f
	.align	1, 0
	.type	 sUnknown_0831C2C8,object
sUnknown_0831C2C8:
	.short	0x7fff
	.short	0x7fff
	.short	0x396d
	.short	0x0
	.short	0x7f9a
	.short	0x7737
	.short	0x7fbd
	.short	0x62ad
	.short	0x5a2b
	.short	0x670f
	.short	0x0
	.short	0x0
	.short	0x7f0f
	.short	0x4400
	.short	0x421f
	.short	0x14
	.size	 sUnknown_0831C2C8,32
	.align	2, 0
	.type	 sUnknown_0831C2E8,object
sUnknown_0831C2E8:
	.word	0x48010
	.word	0x33333000
	.word	-0x6666cccd
	.word	0x79930399
	.word	0x77937777
	.word	0x1e4003f0
	.word	0xa00997f
	.word	0x1ff001f0
	.word	0x1ff01ff0
	.word	0x1ff01ff0
	.word	-0xfe00f01
	.word	-0xfe00fe6
	.word	-0xfe00fff
	.word	-0xfe00fe1
	.word	0x1ff0f51f
	.word	0x1f01ff0
	.word	0x31f30
	.word	0xa00331e
	.word	0x3f03848
	.word	0x6fd13877
	.word	0x7f444463
	.word	-0x2ffc6fbc
	.word	-0x5fedffb1
	.word	-0xfe00fff
	.word	-0xe00fe1
	.word	0x1ff01ff0
	.word	0x1ff01ff0
	.word	0x1ff01ff0
	.word	0x1ff01ff0
	.word	-0xfe00f02
	.word	-0xfe00fe1
	.word	-0x2ee00fe1
	.word	0x3512006f
	.word	-0x2efc6f1f
	.word	0x3303506f
	.word	0x13555555
	.word	0x4fd0ef1b
	.word	0x1e000150
	.word	-0xf04eeab
	.word	-0xfe00fe7
	.word	0x1ff0ff01
	.word	0x1ff01ff0
	.word	0x1ff01ff0
	.word	0x1f01ff0
	.word	-0xf01e010
	.word	-0xfe00fff
	.word	-0xfe00fe1
	.word	0x306fd11f
	.word	0x35405403
	.word	0x31e40
	.size	 sUnknown_0831C2E8,200
	.align	2, 0
	.type	 sOamData_MonIconOnLvlUpBox,object
	.size	 sOamData_MonIconOnLvlUpBox,8
sOamData_MonIconOnLvlUpBox:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sSpriteTemplate_MonIconOnLvlUpBox,object
	.size	 sSpriteTemplate_MonIconOnLvlUpBox,24
sSpriteTemplate_MonIconOnLvlUpBox:
	.short	0xd75a
	.short	0xd75a
	.word	sOamData_MonIconOnLvlUpBox
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_MonIconOnLvlUpBox
	.align	1, 0
	.type	 sProtectSuccessRates,object
sProtectSuccessRates:
	.short	0xffff
	.short	0x7fff
	.short	0x3fff
	.short	0x1fff
	.size	 sProtectSuccessRates,8
	.type	 sForbiddenMoves,object
	.size	 sForbiddenMoves,755
sForbiddenMoves:
	.byte	0xff
	.space	17
	.byte	0xc
	.byte	0x4
	.space	26
	.byte	0xc
	.space	21
	.byte	0xe
	.space	22
	.byte	0x4
	.space	10
	.byte	0x1f
	.space	14
	.byte	0x10
	.byte	0x1e
	.byte	0x1e
	.space	24
	.byte	0xf
	.space	20
	.byte	0xff
	.byte	0x1e
	.space	1
	.byte	0xe
	.space	4
	.byte	0x2
	.space	8
	.byte	0xe
	.space	11
	.byte	0xe
	.space	2
	.byte	0xe
	.space	5
	.byte	0xe
	.space	10
	.byte	0x1e
	.space	28
	.byte	0xe
	.space	9
	.byte	0x10
	.space	10
	.byte	0x1e
	.space	1
	.byte	0xe
	.byte	0x1e
	.space	2
	.byte	0xe
	.byte	0xe
	.space	2
	.byte	0x1e
	.space	14
	.byte	0xe
	.space	1
	.byte	0x4
	.space	51
	.byte	0xe
	.space	20
	.byte	0xe
	.space	17
	.byte	0x1e
	.byte	0x1e
	.space	31
	.byte	0xe
	.space	32
	.byte	0x1f
	.space	20
	.byte	0x2
	.space	6
	.byte	0xe
	.space	18
	.byte	0x2
	.space	5
	.byte	0x2
	.space	7
	.byte	0xc
	.space	1
	.byte	0x2
	.space	4
	.byte	0xe
	.space	8
	.byte	0xc
	.space	20
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.space	4
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.space	1
	.byte	0x2
	.space	3
	.byte	0xe
	.byte	0x1e
	.space	15
	.byte	0xe
	.space	9
	.byte	0xe
	.space	2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.space	2
	.byte	0xe
	.space	9
	.byte	0x1e
	.byte	0x1e
	.space	6
	.byte	0x2
	.byte	0x2
	.space	1
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.space	1
	.byte	0x2
	.space	2
	.byte	0xe
	.space	9
	.byte	0x6
	.space	17
	.byte	0x2
	.byte	0x1e
	.space	4
	.byte	0x1e
	.byte	0x2
	.space	6
	.byte	0x2
	.space	88
	.align	1, 0
	.type	 sMoveEffectsForbiddenToInstruct,object
sMoveEffectsForbiddenToInstruct:
	.short	0xb4
	.short	0x1a
	.short	0xaa
	.short	0x14c
	.short	0x114
	.short	0x53
	.short	0x9
	.short	0xad
	.short	0x50
	.short	0x9b
	.short	0x5f
	.short	0x91
	.short	0x61
	.short	0x97
	.short	0x39
	.short	0x4b
	.short	0xffff
	.size	 sMoveEffectsForbiddenToInstruct,34
	.align	1, 0
	.type	 sNaturePowerMoves,object
sNaturePowerMoves:
	.short	0x4e
	.short	0x4b
	.short	0x59
	.short	0x38
	.short	0x39
	.short	0x3d
	.short	0x9d
	.short	0xf7
	.short	0x81
	.short	0x81
	.size	 sNaturePowerMoves,20
	.align	1, 0
	.type	 sPickupItems,object
sPickupItems:
	.short	0x1c
	.short	0x31
	.short	0x4
	.short	0x33
	.short	0x5a
	.short	0x59
	.short	0x42
	.short	0x43
	.short	0x45
	.short	0x44
	.short	0x102
	.short	0x47
	.short	0x4c
	.short	0x46
	.short	0x22
	.short	0x28
	.short	0x4e
	.short	0x34
	.size	 sPickupItems,36
	.align	1, 0
	.type	 sRarePickupItems,object
sRarePickupItems:
	.short	0x4b
	.short	0x7c
	.short	0x5d
	.short	0x4b
	.short	0x2
	.short	0xd4
	.short	0x11a
	.short	0x4e
	.short	0xe2
	.short	0xe5
	.short	0x2b2
	.size	 sRarePickupItems,22
	.align	1, 0
	.type	 sHarvestItems,object
sHarvestItems:
	.short	0x96
	.short	0x99
	.short	0x95
	.short	0x98
	.short	0xc2
	.short	0xbe
	.short	0xc3
	.short	0xb8
	.short	0xbb
	.short	0xc1
	.short	0xc0
	.short	0xbf
	.short	0xb9
	.short	0xb3
	.short	0xb4
	.short	0xbc
	.short	0xb6
	.short	0xc4
	.short	0xba
	.short	0xbd
	.short	0xb5
	.short	0xb7
	.size	 sHarvestItems,44
	.align	1, 0
	.type	 sGemItems,object
sGemItems:
	.short	0x15f
	.short	0x159
	.short	0x15a
	.short	0x164
	.short	0x162
	.short	0x154
	.short	0x15b
	.short	0x157
	.short	0x15c
	.short	0x15d
	.short	0x158
	.short	0x153
	.short	0x160
	.short	0x163
	.short	0x15e
	.short	0x155
	.short	0x161
	.short	0x156
	.size	 sGemItems,36
	.type	 sPickupProbabilities,object
sPickupProbabilities:
	.byte	0x1e
	.byte	0x28
	.byte	0x32
	.byte	0x3c
	.byte	0x46
	.byte	0x50
	.byte	0x5a
	.byte	0x5e
	.byte	0x62
	.size	 sPickupProbabilities,9
	.type	 sTerrainToType,object
sTerrainToType:
	.byte	0xc
	.byte	0xc
	.byte	0x4
	.byte	0xb
	.byte	0xb
	.byte	0xb
	.byte	0x5
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.size	 sTerrainToType,10
	.type	 sBallCatchBonuses,object
sBallCatchBonuses:
	.byte	0x14
	.byte	0xf
	.byte	0xa
	.byte	0xf
	.size	 sBallCatchBonuses,4
	.globl	gBattlePalaceNatureToMoveGroupLikelihood
	.align	2, 0
	.type	 gBattlePalaceNatureToMoveGroupLikelihood,object
	.size	 gBattlePalaceNatureToMoveGroupLikelihood,100
gBattlePalaceNatureToMoveGroupLikelihood:
	.byte	0x3d
	.byte	0x44
	.byte	0x3d
	.byte	0x44
	.byte	0x14
	.byte	0x2d
	.byte	0x54
	.byte	0x5c
	.byte	0x46
	.byte	0x55
	.byte	0x20
	.byte	0x5c
	.byte	0x26
	.byte	0x45
	.byte	0x46
	.byte	0x55
	.byte	0x14
	.byte	0x5a
	.byte	0x46
	.byte	0x5c
	.byte	0x1e
	.byte	0x32
	.byte	0x20
	.byte	0x5a
	.byte	0x38
	.byte	0x4e
	.byte	0x38
	.byte	0x4e
	.byte	0x19
	.byte	0x28
	.byte	0x4b
	.byte	0x5a
	.byte	0x45
	.byte	0x4b
	.byte	0x1c
	.byte	0x53
	.byte	0x23
	.byte	0x2d
	.byte	0x1d
	.byte	0x23
	.byte	0x3e
	.byte	0x48
	.byte	0x1e
	.byte	0x32
	.byte	0x3a
	.byte	0x5f
	.byte	0x58
	.byte	0x5e
	.byte	0x22
	.byte	0x2d
	.byte	0x1d
	.byte	0x28
	.byte	0x23
	.byte	0x28
	.byte	0x23
	.byte	0x5f
	.byte	0x38
	.byte	0x4e
	.byte	0x38
	.byte	0x4e
	.byte	0x23
	.byte	0x50
	.byte	0x22
	.byte	0x5e
	.byte	0x2c
	.byte	0x5e
	.byte	0x22
	.byte	0x28
	.byte	0x38
	.byte	0x4e
	.byte	0x38
	.byte	0x4e
	.byte	0x1e
	.byte	0x58
	.byte	0x1e
	.byte	0x58
	.byte	0x1e
	.byte	0x2b
	.byte	0x1b
	.byte	0x21
	.byte	0x28
	.byte	0x5a
	.byte	0x19
	.byte	0x57
	.byte	0x12
	.byte	0x58
	.byte	0x5a
	.byte	0x5f
	.byte	0x58
	.byte	0x5e
	.byte	0x16
	.byte	0x2a
	.byte	0x2a
	.byte	0x5c
	.byte	0x2a
	.byte	0x2f
	.byte	0x38
	.byte	0x4e
	.byte	0x38
	.byte	0x4e
	.type	 sBattlePalaceNatureToFlavorTextId,object
	.size	 sBattlePalaceNatureToFlavorTextId,25
sBattlePalaceNatureToFlavorTextId:
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x3
	.byte	0x1
	.byte	0x3
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x2
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x3
.text
	.align	2, 0
	.globl	IsBattlerProtected
	.type	 IsBattlerProtected,function
	.thumb_func
IsBattlerProtected:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	ldr	r3, .L25
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r2, r0, #0x2
	add	r0, r3, #0
	add	r0, r0, #0xc
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L21	@cond_branch
	add	r5, r2, r3
	ldrh	r0, [r5]
	cmp	r0, #0x3e
	beq	.L21	@cond_branch
	ldr	r0, .L25+0x4
	lsl	r1, r6, #0x4
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	add	r7, r1, #0
	cmp	r0, #0
	bne	.L24	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerSide
	ldr	r1, .L25+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L9	@cond_branch
	ldrb	r1, [r5, #0x7]
	mov	r0, #0x28
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L24	@cond_branch
.L9:
	ldr	r0, .L25+0x4
	add	r0, r7, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1c
	cmp	r0, #0
	blt	.L24	@cond_branch
	lsl	r0, r1, #0x1e
	cmp	r0, #0
	blt	.L24	@cond_branch
	lsl	r0, r1, #0x1d
	cmp	r0, #0
	bge	.L15	@cond_branch
	ldr	r0, .L25
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L24	@cond_branch
.L15:
	add	r0, r6, #0
	bl	GetBattlerSide
	ldr	r1, .L25+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L17	@cond_branch
	ldr	r0, .L25+0xc
	ldrb	r0, [r0]
	bl	GetChosenMovePriority
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bgt	.L24	@cond_branch
.L17:
	add	r0, r6, #0
	bl	GetBattlerSide
	ldr	r1, .L25+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L19	@cond_branch
	ldr	r0, .L25
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L24	@cond_branch
.L19:
	add	r0, r6, #0
	bl	GetBattlerSide
	ldr	r1, .L25+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L21	@cond_branch
	ldr	r0, .L25
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L21	@cond_branch
.L24:
	mov	r0, #0x1
	b	.L23
.L26:
	.align	2, 0
.L25:
	.word	gBattleMoves
	.word	gProtectStructs
	.word	gSideStatuses
	.word	gBattlerAttacker
.L21:
	mov	r0, #0x0
.L23:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 IsBattlerProtected,.Lfe1-IsBattlerProtected
	.align	2, 0
	.type	 NoTargetPresent,function
	.thumb_func
NoTargetPresent:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L42
	ldrb	r0, [r5]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L28	@cond_branch
	lsl	r0, r4, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x0
	bl	GetMoveTarget
	strb	r0, [r5]
.L28:
	ldr	r1, .L42+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0x20
	bls	.LCB212
	b	.L29	@long jump
.LCB212:
	lsl	r0, r0, #0x2
	ldr	r1, .L42+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L43:
	.align	2, 0
.L42:
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	.L38
	.align	2, 0
	.align	2, 0
.L38:
	.word	.L32
	.word	.L32
	.word	.L29
	.word	.L29
	.word	.L32
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L34
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L29
	.word	.L36
.L32:
	ldr	r0, .L44
	ldrb	r0, [r0]
	b	.L41
.L45:
	.align	2, 0
.L44:
	.word	gBattlerTarget
.L34:
	ldr	r4, .L46
	ldrb	r0, [r4]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L29	@cond_branch
	ldrb	r1, [r4]
	mov	r0, #0x2
	eor	r0, r0, r1
	b	.L41
.L47:
	.align	2, 0
.L46:
	.word	gBattlerTarget
.L36:
	ldr	r4, .L48
	ldrb	r0, [r4]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L29	@cond_branch
	ldrb	r0, [r4]
	mov	r4, #0x2
	eor	r0, r0, r4
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L29	@cond_branch
	ldr	r0, .L48+0x4
	ldrb	r0, [r0]
	eor	r0, r0, r4
.L41:
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L29	@cond_branch
	mov	r0, #0x1
	b	.L40
.L49:
	.align	2, 0
.L48:
	.word	gBattlerTarget
	.word	gBattlerAttacker
.L29:
	mov	r0, #0x0
.L40:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 NoTargetPresent,.Lfe2-NoTargetPresent
	.align	2, 0
	.type	 TryAegiFormChange,function
	.thumb_func
TryAegiFormChange:
	push	{r4, r5, lr}
	ldr	r4, .L77
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0xb0
	beq	.L53	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	mov	r1, #0x81
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L53	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x3b
	beq	.LCB341
	b	.L72	@long jump
.LCB341:
.L53:
	ldr	r3, .L77+0x4
	ldr	r0, .L77
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mov	r2, r1
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x54
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB356
	b	.L72	@long jump
.LCB356:
	add	r4, r2, r3
	ldrh	r3, [r4]
	lsl	r0, r3, #0x15
	lsr	r1, r0, #0x15
	ldr	r5, .L77+0x8
	cmp	r1, r5
	beq	.L62	@cond_branch
	cmp	r1, r5
	bgt	.L74	@cond_branch
	ldr	r0, .L77+0xc
	cmp	r1, r0
	beq	.L65	@cond_branch
	ldr	r0, .L77+0x10
	cmp	r1, r0
	beq	.L55	@cond_branch
	b	.L72
.L78:
	.align	2, 0
.L77:
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	0x36d
	.word	0x15f
	.word	0x2a9
.L74:
	ldr	r0, .L79
	cmp	r1, r0
	beq	.L57	@cond_branch
	add	r0, r0, #0x46
	cmp	r1, r0
	beq	.L59	@cond_branch
	b	.L72
.L80:
	.align	2, 0
.L79:
	.word	0x469
.L55:
	ldr	r2, .L81
	ldr	r0, .L81+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.LCB416
	b	.L72	@long jump
.LCB416:
	ldr	r0, .L81+0x8
	and	r0, r0, r3
	ldr	r2, .L81+0xc
	b	.L76
.L82:
	.align	2, 0
.L81:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	-0x800
	.word	0x469
.L57:
	ldr	r0, .L83
	ldrh	r1, [r0]
	mov	r0, #0x93
	lsl	r0, r0, #0x2
	cmp	r1, r0
	bne	.L72	@cond_branch
	ldr	r0, .L83+0x4
	and	r0, r0, r3
	ldr	r2, .L83+0x8
	b	.L76
.L84:
	.align	2, 0
.L83:
	.word	gCurrentMove
	.word	-0x800
	.word	0x2a9
.L59:
	ldr	r2, .L85
	ldr	r0, .L85+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	ldrb	r0, [r1, #0x3]
	cmp	r0, #0xd
	bne	.L72	@cond_branch
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L72	@cond_branch
	ldr	r0, .L85+0x8
	and	r0, r0, r3
	orr	r0, r0, r5
	strh	r0, [r4]
	b	.L54
.L86:
	.align	2, 0
.L85:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	-0x800
.L62:
	ldr	r2, .L87
	ldr	r0, .L87+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	ldrb	r0, [r1, #0x3]
	cmp	r0, #0x11
	bne	.L72	@cond_branch
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L72	@cond_branch
	ldr	r0, .L87+0x8
	and	r0, r0, r3
	ldr	r2, .L87+0xc
	b	.L76
.L88:
	.align	2, 0
.L87:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	-0x800
	.word	0x4af
.L65:
	ldr	r2, .L89
	ldr	r0, .L89+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0xa
	bne	.L66	@cond_branch
	ldr	r0, .L89+0x8
	and	r0, r0, r3
	ldr	r2, .L89+0xc
	b	.L76
.L90:
	.align	2, 0
.L89:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	-0x800
	.word	0x404
.L66:
	cmp	r0, #0xf
	bne	.L68	@cond_branch
	ldr	r0, .L91
	and	r0, r0, r3
	ldr	r2, .L91+0x4
	b	.L76
.L92:
	.align	2, 0
.L91:
	.word	-0x800
	.word	0x406
.L68:
	cmp	r0, #0xb
	bne	.L70	@cond_branch
	ldr	r0, .L93
	and	r0, r0, r3
	ldr	r2, .L93+0x4
.L76:
	add	r1, r2, #0
	orr	r0, r0, r1
	strh	r0, [r4]
	b	.L54
.L94:
	.align	2, 0
.L93:
	.word	-0x800
	.word	0x405
.L70:
.L72:
	mov	r0, #0x0
	b	.L75
.L54:
	bl	BattleScriptPushCursor
	ldr	r1, .L95
	ldr	r0, .L95+0x4
	str	r0, [r1]
	mov	r0, #0x1
.L75:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L96:
	.align	2, 0
.L95:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AttackerFormChange
.Lfe3:
	.size	 TryAegiFormChange,.Lfe3-TryAegiFormChange
	.align	2, 0
	.type	 Cmd_attackcanceler,function
	.thumb_func
Cmd_attackcanceler:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L138
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L98	@cond_branch
	ldr	r1, .L138+0x4
	mov	r0, #0xc
	strb	r0, [r1]
	b	.L97
.L139:
	.align	2, 0
.L138:
	.word	gBattleOutcome
	.word	gCurrentActionFuncId
.L98:
	ldr	r2, .L140
	ldr	r0, .L140+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.L99	@cond_branch
	ldr	r2, .L140+0x8
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L99	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	orr	r1, r1, r0
	str	r1, [r2]
	ldr	r1, .L140+0xc
	ldr	r0, .L140+0x10
	b	.L136
.L141:
	.align	2, 0
.L140:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveEnd
.L99:
	bl	AtkCanceller_UnableToUseMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB681
	b	.L97	@long jump
.LCB681:
	ldr	r0, .L142
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L101	@cond_branch
	mov	r4, #0x3f
	and	r4, r4, r0
	b	.L102
.L143:
	.align	2, 0
.L142:
	.word	gBattleStruct
.L101:
	ldr	r2, .L144
	ldr	r0, .L144+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r4, [r0, #0x3]
.L102:
	ldr	r5, .L144+0x8
	ldrb	r0, [r5]
	bl	GetBattlerAbility
	cmp	r0, #0xa8
	bne	.L103	@cond_branch
	ldr	r2, .L144+0xc
	ldrb	r1, [r5]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	add	r3, r2, #0
	cmp	r0, r4
	bne	.L104	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, r4
	bne	.L104	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L103	@cond_branch
	cmp	r0, #0x9
	beq	.L103	@cond_branch
.L104:
	ldr	r0, .L144+0x4
	ldrh	r0, [r0]
	cmp	r0, #0xa5
	beq	.L103	@cond_branch
	ldr	r1, .L144+0x10
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	strb	r4, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r2, .L144+0x8
	ldrb	r0, [r2]
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r3
	add	r0, r0, #0x22
	strb	r4, [r0]
	ldrb	r0, [r2]
	mul	r0, r0, r1
	add	r0, r0, r3
	add	r0, r0, #0x23
	strb	r4, [r0]
	ldrb	r0, [r2]
	mul	r0, r0, r1
	add	r0, r0, r3
	add	r0, r0, #0x24
	mov	r1, #0x9
	strb	r1, [r0]
	ldr	r1, .L144+0x14
	ldrb	r0, [r2]
	strb	r0, [r1]
	bl	BattleScriptPushCursor
	ldr	r1, .L144+0x18
	ldr	r0, .L144+0x1c
	b	.L136
.L145:
	.align	2, 0
.L144:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattleTextBuff1
	.word	gBattlerAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ProteanActivates
.L103:
	bl	AtkCanceller_UnableToUseMove2
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.LCB812
	b	.L97	@long jump
.LCB812:
	ldr	r0, .L146
	ldrb	r1, [r0]
	str	r2, [sp]
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB825
	b	.L97	@long jump
.LCB825:
	ldr	r3, .L146+0x4
	ldr	r0, .L146+0x8
	ldrb	r1, [r0]
	ldr	r0, .L146+0xc
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, r2
	add	r0, r3, #0
	add	r0, r0, #0x25
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L107	@cond_branch
	ldr	r0, .L146+0x10
	ldrh	r0, [r0]
	cmp	r0, #0xa5
	beq	.L107	@cond_branch
	ldr	r0, .L146+0x14
	ldr	r0, [r0]
	ldr	r1, .L146+0x18
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L107	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x54
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L107	@cond_branch
	ldr	r1, .L146+0x1c
	ldr	r0, .L146+0x20
	str	r0, [r1]
	ldr	r2, .L146+0x24
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	b	.L97
.L147:
	.align	2, 0
.L146:
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gCurrMovePos
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gHitMarker
	.word	0x800200
	.word	gBattlescriptCurrInstr
	.word	BattleScript_NoPPForMove
	.word	gMoveResultFlags
.L107:
	bl	TryAegiFormChange
	cmp	r0, #0
	beq	.LCB893
	b	.L97	@long jump
.LCB893:
	ldr	r4, .L148
	ldr	r0, [r4]
	ldr	r1, .L148+0x4
	and	r0, r0, r1
	str	r0, [r4]
	mov	r5, #0x80
	lsl	r5, r5, #0x12
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L109	@cond_branch
	ldr	r1, .L148+0x8
	ldr	r0, .L148+0xc
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L109	@cond_branch
	bl	IsMonDisobedient
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L109	@cond_branch
	cmp	r0, #0x2
	bne	.L113	@cond_branch
	ldr	r0, [r4]
	orr	r0, r0, r5
	str	r0, [r4]
	b	.L97
.L149:
	.align	2, 0
.L148:
	.word	gHitMarker
	.word	-0x800001
	.word	gBattleMons
	.word	gBattlerAttacker
.L113:
	ldr	r0, .L150
	ldrh	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strh	r1, [r0]
	b	.L97
.L151:
	.align	2, 0
.L150:
	.word	gMoveResultFlags
.L109:
	ldr	r2, .L152
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L152+0x4
	ldrh	r0, [r4]
	bl	NoTargetPresent
	cmp	r0, #0
	beq	.L115	@cond_branch
	ldr	r1, .L152+0x8
	ldr	r0, .L152+0xc
	str	r0, [r1]
	ldrh	r0, [r4]
	bl	IsTwoTurnsMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L117	@cond_branch
	ldr	r1, .L152+0x10
	ldr	r0, .L152+0x14
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB994
	b	.L97	@long jump
.LCB994:
.L117:
	ldr	r0, .L152+0x14
	ldrb	r0, [r0]
	bl	CancelMultiTurnMoves
	b	.L97
.L153:
	.align	2, 0
.L152:
	.word	gHitMarker
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ButItFailedAtkStringPpReduce
	.word	gBattleMons
	.word	gBattlerAttacker
.L115:
	ldr	r5, .L154
	ldr	r0, .L154+0x4
	ldrb	r3, [r0]
	lsl	r1, r3, #0x4
	add	r1, r1, r5
	ldrb	r1, [r1]
	lsr	r1, r1, #0x7
	add	r6, r0, #0
	cmp	r1, #0
	beq	.L118	@cond_branch
	ldr	r2, .L154+0x8
	ldrh	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L118	@cond_branch
	ldr	r0, .L154+0xc
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0, #0x2]
	lsr	r4, r0, #0x7
	cmp	r4, #0
	bne	.L118	@cond_branch
	ldr	r2, .L154+0x10
	add	r0, r1, #0
	add	r1, r3, #0
	bl	PressurePPLose
	ldrb	r1, [r6]
	lsl	r1, r1, #0x4
	add	r1, r1, r5
	ldrb	r2, [r1]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r6]
	lsl	r1, r1, #0x4
	add	r1, r1, r5
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x80
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	ldr	r0, .L154+0x14
	strb	r4, [r0, #0x5]
	bl	BattleScriptPushCursor
	ldr	r1, .L154+0x18
	ldr	r0, .L154+0x1c
	b	.L136
.L155:
	.align	2, 0
.L154:
	.word	gProtectStructs
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gBattlerAttacker
	.word	0x115
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MagicCoatBounce
.L118:
	ldrb	r0, [r6]
	bl	GetBattlerAbility
	cmp	r0, #0x9c
	bne	.L119	@cond_branch
	ldr	r2, .L156
	ldr	r0, .L156+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L119	@cond_branch
	ldr	r4, .L156+0x8
	ldr	r0, .L156+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r4
	ldrb	r0, [r0, #0x2]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	bne	.L119	@cond_branch
	ldrb	r0, [r6]
	mov	r1, #0x9c
	bl	RecordAbilityBattle
	ldrb	r1, [r6]
	lsl	r1, r1, #0x4
	add	r1, r1, r4
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x80
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	ldr	r1, .L156+0x10
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	bl	BattleScriptPushCursor
	ldr	r1, .L156+0x14
	ldr	r0, .L156+0x18
	b	.L136
.L157:
	.align	2, 0
.L156:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MagicCoatBounce
.L119:
	mov	r2, #0x0
	ldr	r0, .L158
	ldrb	r0, [r0]
	cmp	r2, r0
	bge	.L122	@cond_branch
	ldr	r6, .L158+0x4
	ldr	r1, .L158+0x8
	mov	ip, r1
	add	r5, r0, #0
	ldr	r7, .L158+0xc
.L124:
	add	r4, r2, r7
	ldrb	r3, [r4]
	lsl	r0, r3, #0x4
	add	r0, r0, r6
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L123	@cond_branch
	ldr	r0, .L158+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldr	r0, [r0]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1183
	b	.L135	@long jump
.LCB1183:
.L123:
	add	r2, r2, #0x1
	cmp	r2, r5
	blt	.L124	@cond_branch
.L122:
	ldr	r0, .L158+0x14
	ldr	r5, .L158+0x18
	ldrb	r2, [r5]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1e
	cmp	r0, #0
	bge	.L127	@cond_branch
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r3
	strb	r0, [r1]
	ldr	r4, .L158+0x1c
	mov	r0, #0x1f
	b	.L137
.L159:
	.align	2, 0
.L158:
	.word	gBattlersCount
	.word	gProtectStructs
	.word	gBattleMoves+0xc
	.word	gBattlerByTurnOrder
	.word	gCurrentMove
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gLastUsedAbility
.L127:
	ldrb	r3, [r1, #0x1]
	lsl	r0, r3, #0x1d
	cmp	r0, #0
	bge	.L129	@cond_branch
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	strb	r0, [r1, #0x1]
	ldr	r4, .L160
	mov	r0, #0x72
.L137:
	strh	r0, [r4]
	bl	BattleScriptPushCursor
	ldr	r1, .L160+0x4
	ldr	r0, .L160+0x8
	str	r0, [r1]
	ldrb	r0, [r5]
	ldrh	r1, [r4]
	bl	RecordAbilityBattle
	b	.L97
.L161:
	.align	2, 0
.L160:
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TookAttack
.L129:
	ldr	r4, .L162
	ldrh	r1, [r4]
	add	r0, r2, #0
	bl	IsBattlerProtected
	cmp	r0, #0
	beq	.L131	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0xae
	bne	.L132	@cond_branch
	ldr	r2, .L162+0x4
	ldr	r0, .L162+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L132	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L132	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bne	.L131	@cond_branch
.L132:
	ldr	r0, .L162
	ldrh	r0, [r0]
	bl	IsTwoTurnsMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L133	@cond_branch
	ldr	r1, .L162+0x4
	ldr	r0, .L162+0x8
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L131	@cond_branch
.L133:
	ldr	r0, .L162+0x8
	ldrb	r0, [r0]
	bl	CancelMultiTurnMoves
	ldr	r1, .L162+0xc
	ldrh	r0, [r1]
	mov	r4, #0x1
	orr	r0, r0, r4
	strh	r0, [r1]
	ldr	r1, .L162+0x10
	ldr	r3, .L162+0x14
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L162+0x18
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	ldr	r0, .L162+0x1c
	strb	r4, [r0, #0x6]
	b	.L131
.L163:
	.align	2, 0
.L162:
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gLastLandedMoves
	.word	gBattlerTarget
	.word	gLastHitByType
	.word	gBattleCommunication
.L135:
	ldr	r0, .L164
	ldrb	r0, [r0]
	ldr	r2, .L164+0x4
	add	r1, r3, #0
	bl	PressurePPLose
	ldrb	r1, [r4]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r1, .L164+0x8
	ldrb	r0, [r4]
	strb	r0, [r1, #0x17]
	bl	BattleScriptPushCursor
	ldr	r1, .L164+0xc
	ldr	r0, .L164+0x10
	b	.L136
.L165:
	.align	2, 0
.L164:
	.word	gBattlerAttacker
	.word	0x121
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SnatchedMove
.L131:
	ldr	r1, .L166
	ldr	r0, [r1]
	add	r0, r0, #0x1
.L136:
	str	r0, [r1]
.L97:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L167:
	.align	2, 0
.L166:
	.word	gBattlescriptCurrInstr
.Lfe4:
	.size	 Cmd_attackcanceler,.Lfe4-Cmd_attackcanceler
	.align	2, 0
	.type	 JumpIfMoveFailed,function
	.thumb_func
JumpIfMoveFailed:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	ldr	r0, .L173
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L169	@cond_branch
	bl	TrySetDestinyBondToHappen
	ldr	r0, .L173+0x4
	ldrb	r1, [r0]
	str	r4, [sp]
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L170	@cond_branch
	ldr	r1, .L173+0x8
	ldr	r0, [r1]
	add	r0, r0, r5
	str	r0, [r1]
	mov	r0, #0x0
	b	.L172
.L174:
	.align	2, 0
.L173:
	.word	gMoveResultFlags
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L169:
	ldr	r1, .L175
	ldr	r3, .L175+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L175+0x8
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	ldr	r3, .L175+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L170:
	mov	r0, #0x1
.L172:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L176:
	.align	2, 0
.L175:
	.word	gLastLandedMoves
	.word	gBattlerTarget
	.word	gLastHitByType
	.word	gBattlescriptCurrInstr
.Lfe5:
	.size	 JumpIfMoveFailed,.Lfe5-JumpIfMoveFailed
	.align	2, 0
	.type	 Cmd_jumpifaffectedbyprotect,function
	.thumb_func
Cmd_jumpifaffectedbyprotect:
	push	{r4, lr}
	ldr	r0, .L180
	ldrb	r0, [r0]
	ldr	r1, .L180+0x4
	ldrh	r1, [r1]
	bl	IsBattlerProtected
	cmp	r0, #0
	beq	.L178	@cond_branch
	ldr	r1, .L180+0x8
	ldrh	r0, [r1]
	mov	r4, #0x1
	orr	r0, r0, r4
	strh	r0, [r1]
	mov	r0, #0x5
	mov	r1, #0x0
	bl	JumpIfMoveFailed
	ldr	r0, .L180+0xc
	strb	r4, [r0, #0x6]
	b	.L179
.L181:
	.align	2, 0
.L180:
	.word	gBattlerTarget
	.word	gCurrentMove
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L178:
	ldr	r1, .L182
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L179:
	pop	{r4}
	pop	{r0}
	bx	r0
.L183:
	.align	2, 0
.L182:
	.word	gBattlescriptCurrInstr
.Lfe6:
	.size	 Cmd_jumpifaffectedbyprotect,.Lfe6-Cmd_jumpifaffectedbyprotect
	.align	2, 0
	.globl	JumpIfMoveAffectedByProtect
	.type	 JumpIfMoveAffectedByProtect,function
	.thumb_func
JumpIfMoveAffectedByProtect:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r4, #0x0
	ldr	r0, .L186
	ldrb	r0, [r0]
	add	r1, r5, #0
	bl	IsBattlerProtected
	cmp	r0, #0
	beq	.L185	@cond_branch
	ldr	r1, .L186+0x4
	ldrh	r0, [r1]
	mov	r4, #0x1
	orr	r0, r0, r4
	strh	r0, [r1]
	mov	r0, #0x7
	add	r1, r5, #0
	bl	JumpIfMoveFailed
	ldr	r0, .L186+0x8
	strb	r4, [r0, #0x6]
	mov	r4, #0x1
.L185:
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L187:
	.align	2, 0
.L186:
	.word	gBattlerTarget
	.word	gMoveResultFlags
	.word	gBattleCommunication
.Lfe7:
	.size	 JumpIfMoveAffectedByProtect,.Lfe7-JumpIfMoveAffectedByProtect
	.align	2, 0
	.type	 AccuracyCalcHelper,function
	.thumb_func
AccuracyCalcHelper:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r1, .L209
	ldr	r0, .L209+0x4
	ldrb	r3, [r0]
	lsl	r2, r3, #0x2
	add	r1, r2, r1
	ldr	r0, [r1]
	mov	r1, #0x18
	and	r0, r0, r1
	ldr	r4, .L209+0x8
	cmp	r0, #0
	beq	.L189	@cond_branch
	ldr	r1, .L209+0xc
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x18]
	ldrb	r0, [r4]
	cmp	r1, r0
	bne	.LCB1659
	b	.L204	@long jump
.LCB1659:
.L189:
	ldr	r2, .L209+0x10
	lsl	r1, r5, #0x2
	add	r0, r1, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	add	r6, r1, #0
	cmp	r0, #0x21
	bne	.L191	@cond_branch
	ldr	r2, .L209+0x14
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bne	.LCB1685
	b	.L204	@long jump
.LCB1685:
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bne	.LCB1692
	b	.L204	@long jump
.LCB1692:
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bne	.LCB1699
	b	.L204	@long jump
.LCB1699:
.L191:
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x63
	bne	.L194	@cond_branch
	mov	r0, #0x7
	add	r1, r5, #0
	bl	JumpIfMoveFailed
	cmp	r0, #0
	beq	.LCB1715
	b	.L208	@long jump
.LCB1715:
	ldrb	r0, [r4]
	mov	r1, #0x63
	bl	RecordAbilityBattle
	b	.L208
.L210:
	.align	2, 0
.L209:
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gDisableStructs
	.word	gBattleMoves
	.word	gBattleMons
.L194:
	ldr	r4, .L211
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x63
	bne	.L190	@cond_branch
	mov	r0, #0x7
	add	r1, r5, #0
	bl	JumpIfMoveFailed
	cmp	r0, #0
	beq	.LCB1748
	b	.L208	@long jump
.LCB1748:
	ldrb	r0, [r4]
	mov	r1, #0x63
	bl	RecordAbilityBattle
	b	.L208
.L212:
	.align	2, 0
.L211:
	.word	gBattlerTarget
.L190:
	ldr	r0, .L213
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L200	@cond_branch
	ldr	r1, .L213+0x4
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L201	@cond_branch
	mov	r0, #0x40
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L200	@cond_branch
.L201:
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L202	@cond_branch
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L200	@cond_branch
.L202:
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L199	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L199	@cond_branch
.L200:
	ldr	r0, .L213+0x8
	ldrh	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strh	r1, [r0]
	b	.L204
.L214:
	.align	2, 0
.L213:
	.word	gStatuses3
	.word	gBattleMoves
	.word	gMoveResultFlags
.L199:
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L205	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L205	@cond_branch
	ldr	r0, .L215
	ldrh	r2, [r0]
	mov	r0, #0x7
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L206	@cond_branch
	ldr	r1, .L215+0x4
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0]
	cmp	r1, #0x98
	beq	.L204	@cond_branch
	mov	r0, #0x89
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L204	@cond_branch
.L206:
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L205	@cond_branch
	cmp	r5, #0x3b
	beq	.L204	@cond_branch
.L205:
	ldr	r3, .L215+0x4
	add	r0, r6, r5
	lsl	r2, r0, #0x2
	add	r1, r2, r3
	ldrh	r0, [r1]
	cmp	r0, #0x4e
	beq	.L204	@cond_branch
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L204	@cond_branch
	ldr	r1, .L215+0x8
	ldr	r0, .L215+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L203	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xc
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L203	@cond_branch
.L204:
	mov	r0, #0x7
	add	r1, r5, #0
	bl	JumpIfMoveFailed
.L208:
	mov	r0, #0x1
	b	.L207
.L216:
	.align	2, 0
.L215:
	.word	gBattleWeather
	.word	gBattleMoves
	.word	gStatuses3
	.word	gBattlerTarget
.L203:
	mov	r0, #0x0
.L207:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 AccuracyCalcHelper,.Lfe8-AccuracyCalcHelper
	.align	2, 0
	.globl	GetTotalAccuracy
	.type	 GetTotalAccuracy,function
	.thumb_func
GetTotalAccuracy:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	str	r0, [sp]
	mov	r9, r1
	mov	sl, r2
	lsl	r4, r0, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetBattlerAbility
	str	r0, [sp, #0x14]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	bl	GetBattlerHoldEffectParam
	str	r0, [sp, #0x8]
	mov	r0, r9
	lsl	r4, r0, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetBattlerAbility
	mov	r8, r0
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	str	r0, [sp, #0xc]
	add	r0, r4, #0
	bl	GetBattlerHoldEffectParam
	str	r0, [sp, #0x10]
	ldr	r0, .L245
	mov	r1, r9
	strb	r1, [r0]
	ldr	r6, .L245+0x4
	mov	r1, #0x5c
	ldr	r2, [sp]
	mov	r0, r2
	mul	r0, r0, r1
	add	r0, r0, r6
	ldrb	r5, [r0, #0x1e]
	mov	r7, r9
	mul	r7, r7, r1
	add	r0, r7, r6
	ldrb	r4, [r0, #0x1f]
	ldr	r3, [sp, #0x14]
	cmp	r3, #0x6d
	bne	.L218	@cond_branch
	mov	r4, #0x6
.L218:
	ldr	r2, .L245+0x8
	mov	r0, sl
	lsl	r3, r0, #0x2
	add	r0, r3, r0
	lsl	r0, r0, #0x2
	add	r1, r2, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	and	r1, r1, r0
	str	r3, [sp, #0x18]
	cmp	r1, #0
	beq	.L219	@cond_branch
	mov	r4, #0x6
.L219:
	mov	r1, r8
	cmp	r1, #0x6d
	bne	.L220	@cond_branch
	mov	r5, #0x6
.L220:
	add	r0, r6, #0
	add	r0, r0, #0x54
	add	r0, r7, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L222	@cond_branch
	ldr	r1, .L245+0xc
	mov	r3, r9
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L221	@cond_branch
.L222:
	add	r4, r5, #0
	b	.L223
.L246:
	.align	2, 0
.L245:
	.word	gPotentialItemEffectBattler
	.word	gBattleMons
	.word	gBattleMoves
	.word	gStatuses3
.L221:
	lsl	r1, r4, #0x18
	asr	r1, r1, #0x18
	sub	r1, r1, #0x6
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	sub	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L223:
	lsl	r0, r4, #0x18
	cmp	r0, #0
	bge	.L224	@cond_branch
	mov	r4, #0x0
.L224:
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0xc
	ble	.L225	@cond_branch
	mov	r4, #0xc
.L225:
	ldr	r0, [sp, #0x18]
	add	r0, r0, sl
	lsl	r0, r0, #0x2
	add	r6, r0, r2
	ldrb	r5, [r6, #0x4]
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L226	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L226	@cond_branch
	ldr	r0, .L247
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L226	@cond_branch
	ldrh	r2, [r6]
	cmp	r2, #0x98
	beq	.L227	@cond_branch
	mov	r0, #0x89
	lsl	r0, r0, #0x1
	cmp	r2, r0
	bne	.L226	@cond_branch
.L227:
	mov	r5, #0x32
.L226:
	mov	r0, r8
	cmp	r0, #0x93
	bne	.L228	@cond_branch
	ldr	r0, .L247+0x4
	ldr	r1, [sp, #0x18]
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L228	@cond_branch
	mov	r5, #0x32
.L228:
	ldr	r1, .L247+0x8
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x16
	add	r0, r0, r1
	ldrb	r1, [r0]
	mul	r5, r5, r1
	ldrb	r1, [r0, #0x1]
	add	r0, r5, #0
	bl	__udivsi3
	add	r5, r0, #0
	ldr	r1, [sp, #0x14]
	cmp	r1, #0xe
	bne	.L229	@cond_branch
	lsl	r0, r5, #0x6
	add	r0, r0, r5
	lsl	r0, r0, #0x1
	b	.L243
.L248:
	.align	2, 0
.L247:
	.word	gBattleWeather
	.word	gBattleMoves
	.word	sAccuracyStageRatios
.L229:
	ldr	r2, [sp, #0x14]
	cmp	r2, #0xa2
	bne	.L230	@cond_branch
	mov	r0, #0x6e
	mul	r0, r0, r5
.L243:
	mov	r1, #0x64
	bl	__udivsi3
	add	r5, r0, #0
.L230:
	mov	r0, #0x2
	ldr	r1, [sp]
	eor	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L232	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, #0xa2
	bne	.L232	@cond_branch
	mov	r0, #0x6e
	mul	r0, r0, r5
	mov	r1, #0x64
	bl	__udivsi3
	add	r5, r0, #0
.L232:
	mov	r3, r8
	cmp	r3, #0x8
	bne	.L233	@cond_branch
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L233	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L233	@cond_branch
	ldr	r0, .L249
	ldrh	r1, [r0]
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L244	@cond_branch
.L233:
	mov	r0, r8
	cmp	r0, #0x51
	bne	.L235	@cond_branch
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L235	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L235	@cond_branch
	ldr	r0, .L249
	ldrh	r1, [r0]
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L235	@cond_branch
.L244:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x4
	mov	r1, #0x64
	bl	__udivsi3
	add	r5, r0, #0
	b	.L234
.L250:
	.align	2, 0
.L249:
	.word	gBattleWeather
.L235:
	mov	r1, r8
	cmp	r1, #0x4d
	bne	.L234	@cond_branch
	ldr	r1, .L251
	mov	r0, #0x5c
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L234	@cond_branch
	lsr	r5, r5, #0x1
.L234:
	ldr	r3, [sp, #0x14]
	cmp	r3, #0x37
	bne	.L238	@cond_branch
	mov	r0, sl
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L238	@cond_branch
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x4
	mov	r1, #0x64
	bl	__udivsi3
	add	r5, r0, #0
.L238:
	ldr	r0, [sp, #0xc]
	cmp	r0, #0x16
	bne	.L239	@cond_branch
	mov	r0, #0x64
	ldr	r1, [sp, #0x10]
	sub	r0, r0, r1
	mul	r0, r0, r5
	mov	r1, #0x64
	bl	__udivsi3
	add	r5, r0, #0
.L239:
	ldr	r2, [sp, #0x4]
	cmp	r2, #0x51
	bne	.L240	@cond_branch
	ldr	r4, [sp, #0x8]
	add	r4, r4, #0x64
	mov	r0, r5
	mul	r0, r0, r4
	mov	r1, #0x64
	bl	__udivsi3
	add	r5, r0, #0
	b	.L241
.L252:
	.align	2, 0
.L251:
	.word	gBattleMons
.L240:
	ldr	r4, [sp, #0x8]
	add	r4, r4, #0x64
	ldr	r3, [sp, #0x4]
	cmp	r3, #0x53
	bne	.L241	@cond_branch
	ldr	r1, [sp]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerTurnOrderNum
	mov	r2, r9
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerTurnOrderNum
.L241:
	mov	r0, r5
	mul	r0, r0, r4
	mov	r1, #0x64
	bl	__udivsi3
	add	r5, r0, #0
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 GetTotalAccuracy,.Lfe9-GetTotalAccuracy
	.align	2, 0
	.type	 Cmd_accuracycheck,function
	.thumb_func
Cmd_accuracycheck:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L272
	ldr	r6, [r1]
	ldrb	r5, [r6, #0x5]
	ldrb	r0, [r6, #0x6]
	lsl	r0, r0, #0x8
	orr	r5, r5, r0
	add	r7, r1, #0
	cmp	r5, #0
	bne	.L254	@cond_branch
	ldr	r0, .L272+0x4
	ldrh	r5, [r0]
.L254:
	ldr	r0, .L272+0x8
	cmp	r5, r0
	bne	.L255	@cond_branch
	ldr	r2, .L272+0xc
	ldr	r3, .L272+0x10
	ldrb	r5, [r3]
	lsl	r4, r5, #0x2
	add	r0, r4, r2
	ldr	r1, [r0]
	mov	r0, #0x18
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L256	@cond_branch
	ldr	r1, .L272+0x14
	add	r0, r4, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L272+0x18
	ldrb	r0, [r0, #0x18]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L256	@cond_branch
	add	r0, r6, #0x7
	str	r0, [r7]
	b	.L253
.L273:
	.align	2, 0
.L272:
	.word	gBattlescriptCurrInstr
	.word	gCurrentMove
	.word	0xffff
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gDisableStructs
	.word	gBattlerAttacker
.L256:
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldr	r1, .L274
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L258	@cond_branch
	ldr	r2, [r7]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r7]
	b	.L253
.L275:
	.align	2, 0
.L274:
	.word	0x10400c0
.L258:
	mov	r0, #0x0
	bl	JumpIfMoveAffectedByProtect
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L253	@cond_branch
	ldr	r1, .L276
	ldr	r0, [r1]
	add	r0, r0, #0x7
	str	r0, [r1]
	b	.L253
.L277:
	.align	2, 0
.L276:
	.word	gBattlescriptCurrInstr
.L255:
	ldr	r0, .L278
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L262	@cond_branch
	mov	r6, #0x3f
	and	r6, r6, r0
	b	.L263
.L279:
	.align	2, 0
.L278:
	.word	gBattleStruct
.L262:
	ldr	r1, .L280
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r6, [r0, #0x3]
.L263:
	add	r0, r5, #0
	bl	JumpIfMoveAffectedByProtect
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L253	@cond_branch
	add	r0, r5, #0
	bl	AccuracyCalcHelper
	cmp	r0, #0
	bne	.L253	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r4, r4, #0x1
	ldr	r0, .L280+0x4
	ldrb	r0, [r0]
	ldr	r1, .L280+0x8
	ldrb	r1, [r1]
	add	r2, r5, #0
	bl	GetTotalAccuracy
	cmp	r4, r0
	bls	.L266	@cond_branch
	ldr	r2, .L280+0xc
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r0, .L280+0x10
	ldr	r1, [r0]
	mov	r0, #0x1
	and	r1, r1, r0
	ldr	r3, .L280
	lsl	r2, r5, #0x2
	cmp	r1, #0
	beq	.L267	@cond_branch
	add	r0, r2, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0x8
	beq	.L268	@cond_branch
	cmp	r0, #0x20
	bne	.L267	@cond_branch
.L268:
	ldr	r1, .L280+0x14
	mov	r0, #0x2
	b	.L271
.L281:
	.align	2, 0
.L280:
	.word	gBattleMoves
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gMoveResultFlags
	.word	gBattleTypeFlags
	.word	gBattleCommunication
.L267:
	ldr	r1, .L282
	mov	r0, #0x0
.L271:
	strb	r0, [r1, #0x6]
	add	r0, r2, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L266	@cond_branch
	add	r1, r6, #0
	ldr	r0, .L282+0x4
	ldrb	r2, [r0]
	ldr	r0, .L282+0x8
	ldrb	r3, [r0]
	mov	r0, #0x1
	str	r0, [sp]
	add	r0, r5, #0
	bl	CalcTypeEffectivenessMultiplier
.L266:
	mov	r0, #0x7
	add	r1, r5, #0
	bl	JumpIfMoveFailed
.L253:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L283:
	.align	2, 0
.L282:
	.word	gBattleCommunication
	.word	gBattlerAttacker
	.word	gBattlerTarget
.Lfe10:
	.size	 Cmd_accuracycheck,.Lfe10-Cmd_accuracycheck
	.align	2, 0
	.type	 Cmd_attackstring,function
	.thumb_func
Cmd_attackstring:
	push	{r4, r5, lr}
	ldr	r0, .L287
	ldr	r5, [r0]
	cmp	r5, #0
	bne	.L284	@cond_branch
	ldr	r4, .L287+0x4
	ldr	r0, [r4]
	mov	r1, #0xc0
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L286	@cond_branch
	ldr	r0, .L287+0x8
	ldrb	r1, [r0]
	mov	r0, #0x4
	bl	PrepareStringBattle
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	orr	r0, r0, r1
	str	r0, [r4]
.L286:
	ldr	r0, .L287+0xc
	ldr	r1, [r0]
	add	r1, r1, #0x1
	str	r1, [r0]
	ldr	r0, .L287+0x10
	strb	r5, [r0, #0x7]
.L284:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L288:
	.align	2, 0
.L287:
	.word	gBattleControllerExecFlags
	.word	gHitMarker
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
.Lfe11:
	.size	 Cmd_attackstring,.Lfe11-Cmd_attackstring
	.align	2, 0
	.type	 Cmd_ppreduce,function
	.thumb_func
Cmd_ppreduce:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	mov	r7, #0x1
	ldr	r0, .L323
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB2684
	b	.L289	@long jump
.LCB2684:
	ldr	r3, .L323+0x4
	ldr	r2, .L323+0x8
	ldrb	r1, [r2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	mov	r8, r2
	cmp	r0, #0
	blt	.L291	@cond_branch
	ldr	r2, .L323+0xc
	ldr	r0, .L323+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0x20
	beq	.L293	@cond_branch
	cmp	r0, #0x20
	bgt	.L315	@cond_branch
	cmp	r0, #0x8
	beq	.L303	@cond_branch
	b	.L312
.L324:
	.align	2, 0
.L323:
	.word	gBattleControllerExecFlags
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
.L315:
	cmp	r0, #0x40
	beq	.L303	@cond_branch
	b	.L312
.L293:
	mov	r6, #0x0
	ldr	r0, .L325
	ldrb	r0, [r0]
	cmp	r6, r0
	bge	.L291	@cond_branch
.L297:
	ldr	r0, .L325+0x4
	ldrb	r0, [r0]
	cmp	r6, r0
	beq	.L296	@cond_branch
	lsl	r0, r6, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L296	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, #0x2e
	bne	.L296	@cond_branch
	add	r7, r7, #0x1
.L296:
	add	r6, r6, #0x1
	ldr	r0, .L325
	ldrb	r0, [r0]
	cmp	r6, r0
	blt	.L297	@cond_branch
	b	.L291
.L326:
	.align	2, 0
.L325:
	.word	gBattlersCount
	.word	gBattlerAttacker
.L303:
	mov	r6, #0x0
	ldr	r0, .L327
	ldrb	r0, [r0]
	cmp	r6, r0
	bge	.L291	@cond_branch
.L307:
	lsl	r0, r6, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	bl	GetBattlerSide
	add	r4, r0, #0
	ldr	r0, .L327+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L306	@cond_branch
	add	r0, r5, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L306	@cond_branch
	add	r0, r5, #0
	bl	GetBattlerAbility
	cmp	r0, #0x2e
	bne	.L306	@cond_branch
	add	r7, r7, #0x1
.L306:
	add	r6, r6, #0x1
	ldr	r0, .L327
	ldrb	r0, [r0]
	cmp	r6, r0
	blt	.L307	@cond_branch
	b	.L291
.L328:
	.align	2, 0
.L327:
	.word	gBattlersCount
	.word	gBattlerAttacker
.L312:
	ldr	r1, .L329
	mov	r2, r8
	ldrb	r0, [r2]
	ldrb	r2, [r1]
	cmp	r0, r2
	beq	.L291	@cond_branch
	ldrb	r0, [r1]
	bl	GetBattlerAbility
	cmp	r0, #0x2e
	bne	.L291	@cond_branch
	add	r7, r7, #0x1
.L291:
	ldr	r0, .L329+0x4
	ldr	r0, [r0]
	mov	r1, #0xa0
	lsl	r1, r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB2864
	b	.L316	@long jump
.LCB2864:
	ldr	r1, .L329+0x8
	ldr	r2, .L329+0xc
	ldr	r4, .L329+0x10
	ldrb	r3, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r3
	ldrb	r2, [r2]
	add	r0, r0, r2
	add	r1, r1, #0x25
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB2880
	b	.L316	@long jump
.LCB2880:
	ldr	r0, .L329+0x14
	lsl	r1, r3, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x20
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	ldr	r2, .L329+0x18
	ldr	r1, .L329+0x1c
	ldrb	r3, [r4]
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r1, [r2]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L317	@cond_branch
	ldr	r0, .L329+0x20
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L317	@cond_branch
	add	r0, r3, #0
	bl	WasUnableToUseMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L317	@cond_branch
	ldr	r0, .L329+0x24
	ldr	r1, [r0]
	ldr	r0, .L329+0x28
	add	r1, r1, r0
	ldrb	r2, [r4]
	add	r1, r1, r2
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r8, r4
	b	.L318
.L330:
	.align	2, 0
.L329:
	.word	gBattlerTarget
	.word	gHitMarker
	.word	gBattleMons
	.word	gCurrMovePos
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gCurrentMove
	.word	gLastResultingMoves
	.word	gMoveResultFlags
	.word	gBattleStruct
	.word	0x33f
.L317:
	ldr	r0, .L331
	ldr	r0, [r0]
	ldr	r2, .L331+0x4
	ldr	r1, .L331+0x8
	add	r0, r0, r1
	ldrb	r1, [r2]
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r8, r2
.L318:
	ldr	r2, .L331+0xc
	ldr	r3, .L331+0x10
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	ldrb	r1, [r3]
	add	r0, r0, r1
	add	r1, r2, #0
	add	r1, r1, #0x25
	add	r1, r0, r1
	ldrb	r0, [r1]
	add	r6, r2, #0
	cmp	r0, r7
	ble	.L319	@cond_branch
	sub	r0, r0, r7
	b	.L322
.L332:
	.align	2, 0
.L331:
	.word	gBattleStruct
	.word	gBattlerAttacker
	.word	0x33f
	.word	gBattleMons
	.word	gCurrMovePos
.L319:
	mov	r0, #0x0
.L322:
	strb	r0, [r1]
	mov	r2, r8
	ldrb	r4, [r2]
	mov	r5, #0x5c
	mov	r0, r4
	mul	r0, r0, r5
	add	r1, r6, #0
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L316	@cond_branch
	ldr	r1, .L333
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1a]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1c
	ldr	r2, .L333+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L316	@cond_branch
	ldr	r0, .L333+0x8
	strb	r4, [r0]
	ldrb	r1, [r3]
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, r8
	ldrb	r0, [r2]
	mul	r0, r0, r5
	add	r2, r6, #0
	add	r2, r2, #0x25
	add	r0, r0, r2
	ldrb	r3, [r3]
	add	r0, r0, r3
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	mov	r1, r8
	ldrb	r0, [r1]
	bl	MarkBattlerForControllerExec
.L316:
	ldr	r2, .L333+0xc
	ldr	r0, [r2]
	ldr	r1, .L333+0x10
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L333+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L289:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L334:
	.align	2, 0
.L333:
	.word	gDisableStructs
	.word	gBitTable
	.word	gActiveBattler
	.word	gHitMarker
	.word	-0x801
	.word	gBattlescriptCurrInstr
.Lfe12:
	.size	 Cmd_ppreduce,.Lfe12-Cmd_ppreduce
	.section .rodata
	.type	 sCriticalHitChance,object
sCriticalHitChance:
	.byte	0x18
	.byte	0x8
	.byte	0x2
	.byte	0x1
	.byte	0x1
	.size	 sCriticalHitChance,5
.text
	.align	2, 0
	.globl	CalcCritChanceStage
	.type	 CalcCritChanceStage,function
	.thumb_func
CalcCritChanceStage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r6, r2, #0
	add	r7, r3, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	ldr	r5, .L355
	ldrb	r0, [r5]
	bl	GetBattlerAbility
	mov	r9, r0
	ldr	r0, .L355+0x4
	ldrb	r0, [r0]
	bl	GetBattlerAbility
	add	r2, r0, #0
	ldr	r1, .L355+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L341	@cond_branch
	ldr	r3, .L355+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L341	@cond_branch
	cmp	r2, #0x4
	beq	.L340	@cond_branch
	cmp	r2, #0x4b
	bne	.L339	@cond_branch
.L340:
	cmp	r7, #0
	beq	.L341	@cond_branch
	lsl	r1, r2, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	RecordAbilityBattle
.L341:
	mov	r0, #0x1
	neg	r0, r0
	b	.L338
.L356:
	.align	2, 0
.L355:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gSideStatuses
	.word	gStatuses3
.L339:
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L344	@cond_branch
	ldr	r0, .L357
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0x67
	beq	.L344	@cond_branch
	mov	r0, r9
	cmp	r0, #0xc4
	bne	.L343	@cond_branch
	ldr	r1, .L357+0x4
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L343	@cond_branch
.L344:
	mov	r0, #0x2
	neg	r0, r0
	b	.L338
.L358:
	.align	2, 0
.L357:
	.word	gBattleMoves
	.word	gBattleMons
.L343:
	mov	r0, r8
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	add	r4, r0, #0
	ldr	r6, .L359
	ldr	r0, .L359+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mov	r5, r1
	mul	r5, r5, r0
	add	r0, r6, #0
	add	r0, r0, #0x54
	add	r0, r5, r0
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	and	r1, r1, r0
	neg	r1, r1
	asr	r1, r1, #0x1f
	mov	r0, #0x2
	and	r1, r1, r0
	ldr	r3, .L359+0x8
	ldr	r0, .L359+0xc
	ldrh	r2, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldr	r0, [r0]
	lsr	r3, r0, #0x6
	mov	r0, #0x1
	and	r3, r3, r0
	add	r3, r3, r1
	mov	r1, #0x0
	cmp	r4, #0x3f
	bne	.L348	@cond_branch
	add	r0, r5, r6
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	cmp	r0, #0x71
	bne	.L348	@cond_branch
	mov	r1, #0x1
.L348:
	lsl	r5, r1, #0x1
	mov	r6, #0x0
	cmp	r4, #0x42
	bne	.L349	@cond_branch
	ldr	r2, .L359
	ldr	r0, .L359+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	cmp	r0, #0x53
	bne	.L349	@cond_branch
	mov	r6, #0x1
.L349:
	lsl	r1, r6, #0x1
	cmp	r4, #0x29
	bne	.L350	@cond_branch
	add	r0, r5, #0x1
	add	r0, r3, r0
	b	.L354
.L360:
	.align	2, 0
.L359:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
.L350:
	add	r0, r3, r5
.L354:
	add	r0, r0, r1
	mov	r1, r9
	cmp	r1, #0x69
	bne	.L352	@cond_branch
	add	r0, r0, #0x1
.L352:
	cmp	r0, #0x4
	bls	.L338	@cond_branch
	mov	r0, #0x4
.L338:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 CalcCritChanceStage,.Lfe13-CalcCritChanceStage
	.align	2, 0
	.type	 Cmd_critcalc,function
	.thumb_func
Cmd_critcalc:
	push	{r4, r5, lr}
	ldr	r4, .L371
	ldrb	r0, [r4]
	ldr	r1, .L371+0x4
	ldrb	r1, [r1]
	ldr	r2, .L371+0x8
	ldrh	r2, [r2]
	mov	r3, #0x1
	bl	CalcCritChanceStage
	add	r5, r0, #0
	ldr	r1, .L371+0xc
	ldrb	r0, [r4]
	strb	r0, [r1]
	ldr	r0, .L371+0x10
	ldr	r4, [r0]
	mov	r0, #0x84
	lsl	r0, r0, #0x2
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L362	@cond_branch
	ldr	r1, .L371+0x14
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L363
.L372:
	.align	2, 0
.L371:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gCurrentMove
	.word	gPotentialItemEffectBattler
	.word	gBattleTypeFlags
	.word	gIsCriticalHit
.L362:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	beq	.L368	@cond_branch
	mov	r0, #0x2
	neg	r0, r0
	cmp	r5, r0
	beq	.L370	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L373
	add	r1, r5, r1
	ldrb	r1, [r1]
	bl	__modsi3
	cmp	r0, #0
	bne	.L368	@cond_branch
.L370:
	ldr	r1, .L373+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L363
.L374:
	.align	2, 0
.L373:
	.word	sCriticalHitChance
	.word	gIsCriticalHit
.L368:
	ldr	r0, .L375
	strb	r4, [r0]
.L363:
	ldr	r1, .L375+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L376:
	.align	2, 0
.L375:
	.word	gIsCriticalHit
	.word	gBattlescriptCurrInstr
.Lfe14:
	.size	 Cmd_critcalc,.Lfe14-Cmd_critcalc
	.align	2, 0
	.type	 Cmd_damagecalc,function
	.thumb_func
Cmd_damagecalc:
	push	{r4, lr}
	add	sp, sp, #-0x10
	ldr	r0, .L380
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L378	@cond_branch
	mov	r4, #0x3f
	and	r4, r4, r0
	ldr	r2, .L380+0x4
	b	.L379
.L381:
	.align	2, 0
.L380:
	.word	gBattleStruct
	.word	gCurrentMove
.L378:
	ldr	r3, .L382
	ldr	r2, .L382+0x4
	ldrh	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r4, [r0, #0x3]
.L379:
	ldrh	r0, [r2]
	ldr	r1, .L382+0x8
	ldrb	r1, [r1]
	ldr	r2, .L382+0xc
	ldrb	r2, [r2]
	mov	r3, #0x0
	str	r3, [sp]
	ldr	r3, .L382+0x10
	ldrb	r3, [r3]
	str	r3, [sp, #0x4]
	mov	r3, #0x1
	str	r3, [sp, #0x8]
	str	r3, [sp, #0xc]
	add	r3, r4, #0
	bl	CalculateMoveDamage
	ldr	r1, .L382+0x14
	str	r0, [r1]
	ldr	r1, .L382+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L383:
	.align	2, 0
.L382:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gIsCriticalHit
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.Lfe15:
	.size	 Cmd_damagecalc,.Lfe15-Cmd_damagecalc
	.align	2, 0
	.type	 Cmd_typecalc,function
	.thumb_func
Cmd_typecalc:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L387
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L385	@cond_branch
	mov	r4, #0x3f
	and	r4, r4, r0
	ldr	r2, .L387+0x4
	b	.L386
.L388:
	.align	2, 0
.L387:
	.word	gBattleStruct
	.word	gCurrentMove
.L385:
	ldr	r3, .L389
	ldr	r2, .L389+0x4
	ldrh	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r4, [r0, #0x3]
.L386:
	ldrh	r0, [r2]
	ldr	r1, .L389+0x8
	ldrb	r2, [r1]
	ldr	r1, .L389+0xc
	ldrb	r3, [r1]
	mov	r1, #0x1
	str	r1, [sp]
	add	r1, r4, #0
	bl	CalcTypeEffectivenessMultiplier
	ldr	r1, .L389+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L390:
	.align	2, 0
.L389:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.Lfe16:
	.size	 Cmd_typecalc,.Lfe16-Cmd_typecalc
	.align	2, 0
	.type	 Cmd_adjustdamage,function
	.thumb_func
Cmd_adjustdamage:
	push	{r4, r5, r6, lr}
	ldr	r6, .L413
	ldrb	r0, [r6]
	ldr	r4, .L413+0x4
	ldrb	r1, [r4]
	ldr	r5, .L413+0x8
	ldrh	r2, [r5]
	bl	DoesSubstituteBlockMove
	cmp	r0, #0
	beq	.LCB3585
	b	.L393	@long jump
.LCB3585:
	ldrb	r0, [r6]
	ldrb	r1, [r4]
	ldrh	r2, [r5]
	bl	DoesDisguiseBlockMove
	cmp	r0, #0
	beq	.LCB3595
	b	.L393	@long jump
.LCB3595:
	ldr	r1, .L413+0xc
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x2a]
	ldr	r0, .L413+0x10
	ldr	r0, [r0]
	cmp	r1, r0
	ble	.LCB3605
	b	.L393	@long jump
.LCB3605:
	add	r0, r2, #0
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	bl	GetBattlerHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L413+0x14
	ldrb	r0, [r4]
	strb	r0, [r1]
	cmp	r6, #0x27
	bne	.L396	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r5
	bcs	.L396	@cond_branch
	ldrb	r0, [r4]
	mov	r1, #0x27
	bl	RecordItemEffectBattle
	ldr	r2, .L413+0x18
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L397
.L414:
	.align	2, 0
.L413:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	gPotentialItemEffectBattler
	.word	gSpecialStatuses
.L396:
	cmp	r6, #0x55
	bne	.L398	@cond_branch
	ldr	r1, .L415
	ldr	r4, .L415+0x4
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x2a]
	ldrh	r0, [r0, #0x2e]
	cmp	r1, r0
	bne	.L398	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x55
	bl	RecordItemEffectBattle
	ldr	r2, .L415+0x8
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x1
	b	.L411
.L416:
	.align	2, 0
.L415:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gSpecialStatuses
.L398:
	ldr	r4, .L417
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x5
	bne	.L397	@cond_branch
	ldr	r1, .L417+0x4
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x2a]
	ldrh	r0, [r0, #0x2e]
	cmp	r1, r0
	bne	.L397	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x5
	bl	RecordAbilityBattle
	ldr	r2, .L417+0x8
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x2
.L411:
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
.L397:
	ldr	r2, .L417+0xc
	ldr	r0, .L417+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	ldr	r4, .L417+0x14
	cmp	r0, #0x65
	beq	.L401	@cond_branch
	ldr	r0, .L417
	ldrb	r2, [r0]
	lsl	r0, r2, #0x4
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	blt	.L401	@cond_branch
	ldr	r0, .L417+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	bne	.L401	@cond_branch
	ldrb	r1, [r1, #0x1]
	lsl	r0, r1, #0x1f
	cmp	r0, #0
	bne	.L401	@cond_branch
	lsl	r0, r1, #0x1e
	cmp	r0, #0
	bge	.L393	@cond_branch
.L401:
	ldr	r1, .L417+0x18
	ldr	r6, .L417+0x4
	ldr	r3, .L417
	ldrb	r0, [r3]
	mov	r5, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2a]
	sub	r0, r0, #0x1
	str	r0, [r1]
	ldrb	r2, [r3]
	lsl	r0, r2, #0x4
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.L402	@cond_branch
	ldr	r0, .L417+0x1c
	ldrh	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strh	r1, [r0]
	b	.L393
.L418:
	.align	2, 0
.L417:
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gSpecialStatuses
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
.L402:
	ldr	r0, .L419
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	bne	.L405	@cond_branch
	ldrb	r1, [r1, #0x1]
	lsl	r0, r1, #0x1f
	cmp	r0, #0
	beq	.L404	@cond_branch
.L405:
	ldr	r2, .L419+0x4
	ldrh	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L419+0x8
	ldrb	r0, [r3]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x30]
	b	.L412
.L420:
	.align	2, 0
.L419:
	.word	gSpecialStatuses
	.word	gMoveResultFlags
	.word	gLastUsedItem
.L404:
	lsl	r0, r1, #0x1e
	cmp	r0, #0
	bge	.L393	@cond_branch
	ldr	r2, .L421
	ldrh	r0, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r1, r3, #0
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L421+0x4
	mov	r0, #0x5
.L412:
	strh	r0, [r1]
.L393:
	ldr	r1, .L421+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r2, .L421
	ldrh	r1, [r2]
	mov	r0, #0x29
	and	r0, r0, r1
	ldr	r6, .L421+0xc
	add	r5, r2, #0
	cmp	r0, #0
	bne	.L408	@cond_branch
	ldr	r0, .L421+0x10
	ldr	r0, [r0]
	cmp	r0, #0
	ble	.L408	@cond_branch
	ldr	r1, .L421+0x14
	ldr	r0, .L421+0x18
	ldrb	r0, [r0]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	add	r2, r2, r1
	ldrb	r4, [r2, #0x4]
	lsl	r3, r4, #0x1c
	lsr	r3, r3, #0x1c
	ldr	r1, .L421+0x1c
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	orr	r1, r1, r3
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r4
	orr	r0, r0, r1
	strb	r0, [r2, #0x4]
.L408:
	ldr	r0, .L421+0x14
	ldrb	r2, [r6]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L409	@cond_branch
	ldrh	r1, [r5]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L409	@cond_branch
	ldr	r5, .L421+0x20
	mov	r4, #0x5c
	mov	r0, r2
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x30]
	cmp	r0, #0
	beq	.L409	@cond_branch
	bl	BattleScriptPushCursor
	ldr	r1, .L421+0x8
	ldr	r0, .L421+0x24
	str	r0, [r1]
	ldr	r1, .L421+0x28
	ldrb	r0, [r6]
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x30]
	strh	r0, [r1]
.L409:
	ldr	r0, .L421+0x14
	ldr	r6, .L421+0x18
	ldrb	r2, [r6]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bge	.L410	@cond_branch
	ldr	r0, .L421
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L410	@cond_branch
	ldr	r5, .L421+0x20
	mov	r4, #0x5c
	mov	r0, r2
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x30]
	cmp	r0, #0
	beq	.L410	@cond_branch
	bl	BattleScriptPushCursor
	ldr	r1, .L421+0x8
	ldr	r0, .L421+0x2c
	str	r0, [r1]
	ldr	r1, .L421+0x28
	ldrb	r0, [r6]
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x30]
	strh	r0, [r1]
.L410:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L422:
	.align	2, 0
.L421:
	.word	gMoveResultFlags
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	gBattlerTarget
	.word	gBattleMoveDamage
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gBitTable
	.word	gBattleMons
	.word	BattleScript_BerryReduceDmg
	.word	gLastUsedItem
	.word	BattleScript_GemActivates
.Lfe17:
	.size	 Cmd_adjustdamage,.Lfe17-Cmd_adjustdamage
	.align	2, 0
	.type	 Cmd_multihitresultmessage,function
	.thumb_func
Cmd_multihitresultmessage:
	push	{r4, r5, r6, lr}
	ldr	r0, .L430
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L423	@cond_branch
	ldr	r6, .L430+0x4
	ldrh	r5, [r6]
	mov	r0, #0x60
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L425	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L426	@cond_branch
	ldr	r0, .L430+0x8
	and	r0, r0, r5
	strh	r0, [r6]
	ldr	r2, .L430+0xc
	ldr	r0, .L430+0x10
	ldrb	r0, [r0]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	bl	BattleScriptPushCursor
	ldr	r1, .L430+0x14
	ldr	r0, .L430+0x18
	b	.L429
.L431:
	.align	2, 0
.L430:
	.word	gBattleControllerExecFlags
	.word	gMoveResultFlags
	.word	0xfe7f
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SturdiedMsg
.L426:
	mov	r0, #0x80
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L425	@cond_branch
	ldr	r4, .L432
	ldr	r2, .L432+0x4
	ldr	r3, .L432+0x8
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x30]
	strh	r0, [r4]
	ldr	r1, .L432+0xc
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r0, .L432+0x10
	and	r0, r0, r5
	strh	r0, [r6]
	ldr	r4, .L432+0x14
	ldrb	r0, [r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r2, [r1]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	bl	BattleScriptPushCursor
	ldr	r1, .L432+0x18
	ldr	r0, .L432+0x1c
	b	.L429
.L433:
	.align	2, 0
.L432:
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gPotentialItemEffectBattler
	.word	0xfe7f
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
	.word	BattleScript_HangedOnMsg
.L425:
	ldr	r1, .L434
	ldr	r0, [r1]
	add	r0, r0, #0x1
.L429:
	str	r0, [r1]
.L423:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L435:
	.align	2, 0
.L434:
	.word	gBattlescriptCurrInstr
.Lfe18:
	.size	 Cmd_multihitresultmessage,.Lfe18-Cmd_multihitresultmessage
	.align	2, 0
	.type	 Cmd_attackanimation,function
	.thumb_func
Cmd_attackanimation:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x10
	ldr	r0, .L453
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB4201
	b	.L436	@long jump
.LCB4201:
	ldr	r0, .L453+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L438	@cond_branch
	ldr	r0, .L453+0x8
	ldrh	r0, [r0]
	cmp	r0, #0x90
	beq	.L438	@cond_branch
	cmp	r0, #0xa4
	beq	.L438	@cond_branch
	cmp	r0, #0x64
	bne	.L439	@cond_branch
	ldr	r0, .L453+0xc
	ldr	r0, [r0]
	mov	r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L439	@cond_branch
	ldr	r4, .L453+0x10
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L439	@cond_branch
	ldrb	r1, [r4]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L438	@cond_branch
.L439:
	ldr	r4, .L453+0x14
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L453+0x18
	str	r0, [r4]
	ldr	r1, .L453+0x1c
	ldrb	r0, [r1, #0x18]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x18]
	ldrb	r0, [r1, #0x19]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x19]
	b	.L436
.L454:
	.align	2, 0
.L453:
	.word	gBattleControllerExecFlags
	.word	gHitMarker
	.word	gCurrentMove
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_Pausex20
	.word	gBattleScripting
.L438:
	ldr	r2, .L455
	ldr	r3, .L455+0x4
	ldrh	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x8
	and	r0, r0, r1
	add	r5, r3, #0
	cmp	r0, #0
	bne	.L442	@cond_branch
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L442	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L441	@cond_branch
.L442:
	ldr	r0, .L455+0x8
	ldrb	r0, [r0, #0x19]
	cmp	r0, #0
	bne	.L451	@cond_branch
.L441:
	ldr	r0, .L455+0xc
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L443	@cond_branch
	ldr	r1, .L455+0x10
	ldr	r3, .L455+0x14
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r2, .L455+0x18
	ldr	r0, .L455+0x1c
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mov	r4, r1
	mul	r4, r4, r0
	add	r0, r2, #0
	add	r0, r0, #0x54
	add	r0, r4, r0
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r1, r1, r0
	add	r7, r3, #0
	mov	ip, r2
	cmp	r1, #0
	beq	.L444	@cond_branch
	ldr	r0, .L455+0x20
	ldrb	r6, [r0]
	b	.L452
.L456:
	.align	2, 0
.L455:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleScripting
	.word	gMoveResultFlags
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gMultiHitCounter
.L444:
	ldr	r3, .L457
	ldrb	r0, [r3]
	cmp	r0, #0x1
	bls	.L446	@cond_branch
	mov	r1, ip
	add	r0, r4, r1
	ldrh	r2, [r0, #0x2a]
	ldr	r0, .L457+0x4
	ldr	r1, [r0]
	mov	r6, #0x1
	add	r4, r0, #0
	cmp	r2, r1
	ble	.L445	@cond_branch
	ldrb	r6, [r3]
	b	.L445
.L458:
	.align	2, 0
.L457:
	.word	gMultiHitCounter
	.word	gBattleMoveDamage
.L446:
	ldrb	r6, [r3]
.L452:
	ldr	r4, .L459
.L445:
	ldrh	r1, [r5]
	ldr	r5, .L459+0x4
	ldrb	r2, [r5, #0x18]
	ldr	r0, .L459+0x8
	ldrh	r3, [r0]
	ldr	r0, [r4]
	str	r0, [sp]
	ldrb	r4, [r7]
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, ip
	add	r0, r0, #0x2d
	ldrb	r0, [r0]
	str	r0, [sp, #0x4]
	ldrb	r4, [r7]
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r4, .L459+0xc
	add	r0, r0, r4
	str	r0, [sp, #0x8]
	str	r6, [sp, #0xc]
	mov	r0, #0x0
	bl	BtlController_EmitMoveAnimation
	ldrb	r0, [r5, #0x18]
	add	r0, r0, #0x1
	strb	r0, [r5, #0x18]
	ldrb	r0, [r5, #0x19]
	add	r0, r0, #0x1
	strb	r0, [r5, #0x19]
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
.L451:
	ldr	r1, .L459+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	b	.L436
.L460:
	.align	2, 0
.L459:
	.word	gBattleMoveDamage
	.word	gBattleScripting
	.word	gBattleMovePower
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
.L443:
	ldr	r4, .L461
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L461+0x4
	str	r0, [r4]
.L436:
	add	sp, sp, #0x10
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L462:
	.align	2, 0
.L461:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_Pausex20
.Lfe19:
	.size	 Cmd_attackanimation,.Lfe19-Cmd_attackanimation
	.align	2, 0
	.type	 Cmd_waitanimation,function
	.thumb_func
Cmd_waitanimation:
	push	{lr}
	ldr	r0, .L465
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L464	@cond_branch
	ldr	r1, .L465+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L464:
	pop	{r0}
	bx	r0
.L466:
	.align	2, 0
.L465:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
.Lfe20:
	.size	 Cmd_waitanimation,.Lfe20-Cmd_waitanimation
	.align	2, 0
	.type	 Cmd_healthbarupdate,function
	.thumb_func
Cmd_healthbarupdate:
	push	{r4, r5, lr}
	ldr	r0, .L475
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L467	@cond_branch
	ldr	r0, .L475+0x4
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L469	@cond_branch
	ldr	r0, .L475+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L475+0xc
	strb	r0, [r4]
	ldr	r0, .L475+0x10
	ldrb	r0, [r0]
	ldrb	r1, [r4]
	ldr	r2, .L475+0x14
	ldrh	r2, [r2]
	bl	DoesSubstituteBlockMove
	cmp	r0, #0
	beq	.L470	@cond_branch
	ldr	r0, .L475+0x18
	ldrb	r2, [r4]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0xe]
	cmp	r0, #0
	beq	.L470	@cond_branch
	ldr	r0, .L475+0x1c
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L470	@cond_branch
	mov	r0, #0x80
	add	r1, r2, #0
	bl	PrepareStringBattle
	b	.L469
.L476:
	.align	2, 0
.L475:
	.word	gBattleControllerExecFlags
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gDisableStructs
	.word	gHitMarker
.L470:
	ldr	r0, .L477
	ldrb	r0, [r0]
	ldr	r4, .L477+0x4
	ldrb	r1, [r4]
	ldr	r2, .L477+0x8
	ldrh	r2, [r2]
	bl	DoesDisguiseBlockMove
	cmp	r0, #0
	bne	.L469	@cond_branch
	ldr	r5, .L477+0xc
	ldr	r1, [r5]
	ldr	r0, .L477+0x10
	cmp	r1, r0
	ble	.L473	@cond_branch
	add	r1, r0, #0
.L473:
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	BtlController_EmitHealthBarUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L469	@cond_branch
	ldr	r0, [r5]
	cmp	r0, #0
	ble	.L469	@cond_branch
	ldr	r0, .L477+0x14
	ldrb	r1, [r0, #0x5]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
.L469:
	ldr	r1, .L477+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L467:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L478:
	.align	2, 0
.L477:
	.word	gBattlerAttacker
	.word	gActiveBattler
	.word	gCurrentMove
	.word	gBattleMoveDamage
	.word	0x2710
	.word	gBattleResults
	.word	gBattlescriptCurrInstr
.Lfe21:
	.size	 Cmd_healthbarupdate,.Lfe21-Cmd_healthbarupdate
	.align	2, 0
	.type	 Cmd_datahpupdate,function
	.thumb_func
Cmd_datahpupdate:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L516
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB4654
	b	.L479	@long jump
.LCB4654:
	ldr	r0, .L516+0x4
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB4667
	b	.L485	@long jump
.LCB4667:
	ldr	r0, .L516+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r7, .L516+0xc
	strb	r0, [r7]
	ldr	r0, .L516+0x10
	ldrb	r0, [r0]
	ldrb	r1, [r7]
	ldr	r2, .L516+0x14
	ldrh	r2, [r2]
	bl	DoesSubstituteBlockMove
	cmp	r0, #0
	beq	.L486	@cond_branch
	ldr	r0, .L516+0x18
	ldrb	r2, [r7]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r4, r1, r0
	ldrb	r1, [r4, #0xe]
	mov	ip, r0
	cmp	r1, #0
	beq	.L486	@cond_branch
	ldr	r0, .L516+0x1c
	ldr	r3, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r3, r3, r0
	cmp	r3, #0
	bne	.L486	@cond_branch
	add	r5, r1, #0
	ldr	r6, .L516+0x20
	ldr	r4, [r6]
	cmp	r5, r4
	blt	.L487	@cond_branch
	ldr	r0, .L516+0x24
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r0, r0, #0x8
	add	r1, r1, r0
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L488	@cond_branch
	str	r4, [r1]
.L488:
	ldrb	r0, [r7]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, ip
	ldr	r2, [r6]
	ldrb	r0, [r1, #0xe]
	sub	r0, r0, r2
	strb	r0, [r1, #0xe]
	ldr	r1, .L516+0x28
	ldr	r0, [r6]
	str	r0, [r1]
	b	.L489
.L517:
	.align	2, 0
.L516:
	.word	gBattleControllerExecFlags
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gDisableStructs
	.word	gHitMarker
	.word	gBattleMoveDamage
	.word	gSpecialStatuses
	.word	gHpDealt
.L487:
	ldr	r0, .L518
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r0, r0, #0x8
	add	r1, r1, r0
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L490	@cond_branch
	str	r5, [r1]
.L490:
	ldr	r2, .L518+0x4
	ldrb	r1, [r7]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	ldrb	r0, [r0, #0xe]
	str	r0, [r2]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	strb	r3, [r0, #0xe]
.L489:
	ldr	r0, .L518+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	ldrb	r0, [r0, #0xe]
	cmp	r0, #0
	beq	.LCB4795
	b	.L512	@long jump
.LCB4795:
	ldr	r4, .L518+0xc
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	bl	BattleScriptPushCursor
	ldr	r0, .L518+0x10
	str	r0, [r4]
	b	.L479
.L519:
	.align	2, 0
.L518:
	.word	gSpecialStatuses
	.word	gHpDealt
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SubstituteFade
.L486:
	ldr	r6, .L520
	ldrb	r0, [r6]
	ldr	r5, .L520+0x4
	ldrb	r1, [r5]
	ldr	r2, .L520+0x8
	ldrh	r2, [r2]
	bl	DoesDisguiseBlockMove
	cmp	r0, #0
	beq	.L493	@cond_branch
	ldr	r3, .L520+0xc
	ldrb	r1, [r5]
	mov	r0, #0x5c
	mov	r2, r1
	mul	r2, r2, r0
	add	r2, r2, r3
	ldrh	r1, [r2]
	ldr	r0, .L520+0x10
	and	r0, r0, r1
	ldr	r3, .L520+0x14
	add	r1, r3, #0
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r4, .L520+0x18
	ldr	r0, [r4]
	add	r0, r0, #0x2
	bl	BattleScriptPush
	ldr	r0, .L520+0x1c
	str	r0, [r4]
	b	.L512
.L521:
	.align	2, 0
.L520:
	.word	gBattlerAttacker
	.word	gActiveBattler
	.word	gCurrentMove
	.word	gBattleMons
	.word	-0x800
	.word	0x49b
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TargetFormChange
.L493:
	ldr	r2, .L522
	ldr	r1, [r2]
	ldr	r0, .L522+0x4
	and	r1, r1, r0
	str	r1, [r2]
	ldr	r0, .L522+0x8
	ldr	r4, [r0]
	add	r7, r0, #0
	cmp	r4, #0
	bge	.L495	@cond_branch
	ldr	r3, .L522+0xc
	ldrb	r0, [r5]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	ldrh	r0, [r1, #0x2a]
	sub	r0, r0, r4
	strh	r0, [r1, #0x2a]
	ldrb	r0, [r5]
	mul	r0, r0, r2
	add	r1, r0, r3
	ldrh	r2, [r1, #0x2e]
	ldrh	r0, [r1, #0x2a]
	cmp	r0, r2
	bhi	.LCB4897
	b	.L497	@long jump
.LCB4897:
	strh	r2, [r1, #0x2a]
	b	.L497
.L523:
	.align	2, 0
.L522:
	.word	gHitMarker
	.word	-0x101
	.word	gBattleMoveDamage
	.word	gBattleMons
.L495:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L498	@cond_branch
	mov	r0, #0x21
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	b	.L499
.L498:
	ldr	r0, .L524
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	add	r0, r0, r4
	str	r0, [r1]
	ldr	r0, .L524+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L500	@cond_branch
	ldr	r0, .L524+0x8
	ldrb	r1, [r5]
	add	r1, r1, r0
	ldrb	r0, [r6]
	strb	r0, [r1]
	b	.L499
.L525:
	.align	2, 0
.L524:
	.word	gTakenDmg
	.word	gBattlescriptCurrInstr
	.word	gTakenDmgByBattler
.L500:
	ldr	r1, .L526
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldr	r1, .L526+0x4
	ldrb	r1, [r1]
	strb	r1, [r0]
.L499:
	ldr	r5, .L526+0x8
	ldr	r4, .L526+0xc
	ldrb	r0, [r4]
	mov	r3, #0x5c
	mul	r0, r0, r3
	add	r2, r0, r5
	ldrh	r0, [r2, #0x2a]
	ldr	r1, [r7]
	cmp	r0, r1
	ble	.L502	@cond_branch
	sub	r0, r0, r1
	strh	r0, [r2, #0x2a]
	ldr	r0, .L526+0x10
	str	r1, [r0]
	add	r3, r0, #0
	b	.L503
.L527:
	.align	2, 0
.L526:
	.word	gTakenDmgByBattler
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gActiveBattler
	.word	gHpDealt
.L502:
	ldr	r2, .L528
	str	r0, [r2]
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r0, r5
	mov	r1, #0x0
	strh	r1, [r0, #0x2a]
	add	r3, r2, #0
.L503:
	ldr	r2, .L528+0x4
	ldr	r0, .L528+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, #0x8
	add	r2, r0, r2
	ldr	r0, [r2]
	cmp	r0, #0
	bne	.L504	@cond_branch
	ldr	r0, .L528+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L504	@cond_branch
	ldr	r0, [r3]
	str	r0, [r2]
.L504:
	ldr	r4, .L528+0x10
	ldrh	r0, [r4]
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L505	@cond_branch
	ldr	r0, .L528+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L505	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0xdc
	beq	.L505	@cond_branch
	ldr	r4, .L528+0x14
	ldr	r3, .L528+0x8
	ldrb	r0, [r3]
	lsl	r0, r0, #0x4
	add	r1, r4, #0x4
	add	r0, r0, r1
	ldr	r1, .L528
	ldr	r2, [r1]
	str	r2, [r0]
	ldr	r5, .L528+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r1, r5, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	str	r2, [r0]
	ldr	r0, .L528+0x18
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L506	@cond_branch
	ldrb	r0, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r4
	ldr	r2, .L528+0x1c
	b	.L514
.L529:
	.align	2, 0
.L528:
	.word	gHpDealt
	.word	gSpecialStatuses
	.word	gActiveBattler
	.word	gHitMarker
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
.L506:
	ldrb	r0, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r4
	ldr	r2, .L530
.L514:
	ldrb	r1, [r2]
	strb	r1, [r0, #0xc]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldrb	r1, [r2]
	strb	r1, [r0, #0x14]
	b	.L497
.L531:
	.align	2, 0
.L530:
	.word	gBattlerTarget
.L505:
	ldr	r0, .L532
	ldrh	r0, [r0]
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L497	@cond_branch
	ldr	r0, .L532+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L497	@cond_branch
	ldr	r4, .L532+0x8
	ldr	r3, .L532+0xc
	ldrb	r0, [r3]
	lsl	r0, r0, #0x4
	add	r1, r4, #0
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldr	r1, .L532+0x10
	ldr	r2, [r1]
	str	r2, [r0]
	ldr	r5, .L532+0x14
	ldrb	r1, [r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r1, r5, #0
	add	r1, r1, #0x10
	add	r0, r0, r1
	str	r2, [r0]
	ldr	r0, .L532+0x18
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L510	@cond_branch
	ldrb	r0, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r4
	ldr	r2, .L532+0x1c
	b	.L515
.L533:
	.align	2, 0
.L532:
	.word	gCurrentMove
	.word	gHitMarker
	.word	gProtectStructs
	.word	gActiveBattler
	.word	gHpDealt
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
.L510:
	ldrb	r0, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r4
	ldr	r2, .L534
.L515:
	ldrb	r1, [r2]
	strb	r1, [r0, #0xd]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldrb	r1, [r2]
	strb	r1, [r0, #0x15]
.L497:
	ldr	r2, .L534+0x4
	ldr	r0, [r2]
	ldr	r1, .L534+0x8
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L534+0xc
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	ldr	r1, .L534+0x10
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2a
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L512
.L535:
	.align	2, 0
.L534:
	.word	gBattlerTarget
	.word	gHitMarker
	.word	-0x100001
	.word	gActiveBattler
	.word	gBattleMons+0x2a
.L485:
	ldr	r0, .L536
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L536+0x4
	strb	r0, [r1]
	ldr	r2, .L536+0x8
	ldrb	r1, [r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, #0x8
	add	r1, r0, r2
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L512	@cond_branch
	ldr	r0, .L536+0xc
	str	r0, [r1]
.L512:
	ldr	r1, .L536
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L479:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L537:
	.align	2, 0
.L536:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gSpecialStatuses
	.word	0xffff
.Lfe22:
	.size	 Cmd_datahpupdate,.Lfe22-Cmd_datahpupdate
	.align	2, 0
	.type	 Cmd_critmessage,function
	.thumb_func
Cmd_critmessage:
	push	{r4, lr}
	ldr	r0, .L541
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L539	@cond_branch
	ldr	r0, .L541+0x4
	ldrb	r4, [r0]
	cmp	r4, #0x1
	bne	.L540	@cond_branch
	ldr	r0, .L541+0x8
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L540	@cond_branch
	ldr	r0, .L541+0xc
	ldrb	r1, [r0]
	mov	r0, #0xd9
	bl	PrepareStringBattle
	ldr	r0, .L541+0x10
	strb	r4, [r0, #0x7]
.L540:
	ldr	r1, .L541+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L539:
	pop	{r4}
	pop	{r0}
	bx	r0
.L542:
	.align	2, 0
.L541:
	.word	gBattleControllerExecFlags
	.word	gIsCriticalHit
	.word	gMoveResultFlags
	.word	gBattlerAttacker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe23:
	.size	 Cmd_critmessage,.Lfe23-Cmd_critmessage
	.align	2, 0
	.type	 Cmd_effectivenesssound,function
	.thumb_func
Cmd_effectivenesssound:
	push	{r4, lr}
	ldr	r0, .L567
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L543	@cond_branch
	ldr	r4, .L567+0x4
	ldr	r0, .L567+0x8
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r2, .L567+0xc
	ldrh	r1, [r2]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L545	@cond_branch
	ldrh	r1, [r2]
	mov	r0, #0x2
	neg	r0, r0
	and	r1, r1, r0
	cmp	r1, #0x10
	beq	.L555	@cond_branch
	cmp	r1, #0x10
	bgt	.L562	@cond_branch
	cmp	r1, #0x4
	beq	.L548	@cond_branch
	cmp	r1, #0x4
	bgt	.L563	@cond_branch
	cmp	r1, #0x2
	beq	.L547	@cond_branch
	b	.L555
.L568:
	.align	2, 0
.L567:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattlerTarget
	.word	gMoveResultFlags
.L563:
	cmp	r1, #0x8
	beq	.L545	@cond_branch
	b	.L555
.L562:
	cmp	r1, #0x40
	beq	.L555	@cond_branch
	cmp	r1, #0x40
	bgt	.L555	@cond_branch
	cmp	r1, #0x20
	beq	.L545	@cond_branch
	b	.L555
.L547:
	mov	r0, #0x0
	mov	r1, #0xe
	b	.L565
.L548:
	mov	r0, #0x0
	mov	r1, #0xc
.L565:
	bl	BtlController_EmitPlaySE
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L545
.L555:
	ldrh	r2, [r2]
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L556	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xe
	b	.L566
.L556:
	mov	r0, #0x4
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L558	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xc
.L566:
	bl	BtlController_EmitPlaySE
	ldr	r0, .L569
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	b	.L545
.L570:
	.align	2, 0
.L569:
	.word	gActiveBattler
.L558:
	mov	r0, #0x28
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L545	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xd
	bl	BtlController_EmitPlaySE
	ldr	r0, .L571
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
.L545:
	ldr	r1, .L571+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L543:
	pop	{r4}
	pop	{r0}
	bx	r0
.L572:
	.align	2, 0
.L571:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.Lfe24:
	.size	 Cmd_effectivenesssound,.Lfe24-Cmd_effectivenesssound
	.align	2, 0
	.type	 Cmd_resultmessage,function
	.thumb_func
Cmd_resultmessage:
	push	{r4, r5, r6, r7, lr}
	mov	r3, #0x0
	ldr	r0, .L610
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB5486
	b	.L573	@long jump
.LCB5486:
	ldr	r1, .L610+0x4
	ldrh	r2, [r1]
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r2
	add	r6, r1, #0
	ldr	r7, .L610+0x8
	cmp	r0, #0
	beq	.L575	@cond_branch
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L576	@cond_branch
	ldrb	r0, [r7, #0x6]
	cmp	r0, #0x2
	bls	.L575	@cond_branch
.L576:
	ldrb	r0, [r7, #0x6]
	cmp	r0, #0x2
	bls	.L577	@cond_branch
	ldr	r0, .L610+0xc
	ldrb	r0, [r0]
	ldr	r2, .L610+0x10
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r1, [r1, #0x20]
	ldr	r2, .L610+0x14
	ldr	r2, [r2]
	and	r2, r2, r4
	bl	CreateAbilityPopUp
.L577:
	ldr	r0, .L610+0x18
	ldrb	r1, [r7, #0x6]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r3, [r1]
	mov	r0, #0x1
	b	.L598
.L611:
	.align	2, 0
.L610:
	.word	gBattleControllerExecFlags
	.word	gMoveResultFlags
	.word	gBattleCommunication
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	gMissStringIds
.L575:
	mov	r0, #0x1
	strb	r0, [r7, #0x7]
	ldrh	r1, [r6]
	sub	r0, r0, #0x3
	and	r1, r1, r0
	cmp	r1, #0x10
	beq	.L582	@cond_branch
	cmp	r1, #0x10
	bgt	.L601	@cond_branch
	cmp	r1, #0x4
	beq	.L581	@cond_branch
	cmp	r1, #0x4
	bgt	.L602	@cond_branch
	cmp	r1, #0x2
	beq	.L580	@cond_branch
	b	.L587
.L602:
	cmp	r1, #0x8
	beq	.L608	@cond_branch
	b	.L587
.L601:
	cmp	r1, #0x40
	beq	.L583	@cond_branch
	cmp	r1, #0x40
	bgt	.L603	@cond_branch
	cmp	r1, #0x20
	bne	.LCB5590
	b	.L607	@long jump
.LCB5590:
	b	.L587
.L603:
	cmp	r1, #0x80
	beq	.L586	@cond_branch
	b	.L587
.L580:
	mov	r3, #0xde
	b	.L606
.L581:
	mov	r3, #0xdd
	b	.L606
.L582:
	mov	r3, #0xda
	b	.L606
.L583:
	mov	r3, #0x99
	b	.L606
.L586:
	ldr	r4, .L612
	ldr	r2, .L612+0x4
	ldr	r3, .L612+0x8
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x30]
	strh	r0, [r4]
	ldr	r1, .L612+0xc
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldrh	r1, [r6]
	ldr	r0, .L612+0x10
	and	r0, r0, r1
	b	.L609
.L613:
	.align	2, 0
.L612:
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gPotentialItemEffectBattler
	.word	0xff3f
.L587:
	add	r2, r6, #0
	ldrh	r5, [r2]
	mov	r0, #0x8
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L588	@cond_branch
.L608:
	mov	r3, #0x1b
	b	.L606
.L588:
	mov	r0, #0x10
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L590	@cond_branch
	ldr	r0, .L614
	and	r0, r0, r5
	ldr	r1, .L614+0x4
	and	r0, r0, r1
	sub	r1, r1, #0x2
	and	r0, r0, r1
	strh	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L614+0x8
	ldr	r0, .L614+0xc
	str	r0, [r1]
	b	.L573
.L615:
	.align	2, 0
.L614:
	.word	0xffef
	.word	0xfffd
	.word	gBattlescriptCurrInstr
	.word	BattleScript_OneHitKOMsg
.L590:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L592	@cond_branch
	ldr	r0, .L616
	and	r0, r0, r5
	strh	r0, [r2]
	ldr	r2, .L616+0x4
	ldr	r0, .L616+0x8
	ldrb	r0, [r0]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	bl	BattleScriptPushCursor
	ldr	r1, .L616+0xc
	ldr	r0, .L616+0x10
	str	r0, [r1]
	b	.L573
.L617:
	.align	2, 0
.L616:
	.word	0xfe3f
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SturdiedMsg
.L592:
	mov	r0, #0x40
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L594	@cond_branch
	ldr	r0, .L618
	and	r0, r0, r5
	strh	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L618+0x4
	ldr	r0, .L618+0x8
	str	r0, [r1]
	b	.L573
.L619:
	.align	2, 0
.L618:
	.word	0xff3f
	.word	gBattlescriptCurrInstr
	.word	BattleScript_EnduredMsg
.L594:
	mov	r0, #0x80
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L596	@cond_branch
	ldr	r4, .L620
	ldr	r2, .L620+0x4
	ldr	r3, .L620+0x8
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x30]
	strh	r0, [r4]
	ldr	r1, .L620+0xc
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r0, .L620+0x10
	and	r0, r0, r5
.L609:
	strh	r0, [r6]
	bl	BattleScriptPushCursor
	ldr	r1, .L620+0x14
	ldr	r0, .L620+0x18
	str	r0, [r1]
	b	.L573
.L621:
	.align	2, 0
.L620:
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gPotentialItemEffectBattler
	.word	0xff3f
	.word	gBattlescriptCurrInstr
	.word	BattleScript_HangedOnMsg
.L596:
	mov	r0, #0x20
	and	r0, r0, r5
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L598	@cond_branch
.L607:
	mov	r3, #0xe5
	b	.L606
.L598:
	strb	r0, [r7, #0x7]
	cmp	r3, #0
	beq	.L604	@cond_branch
.L606:
	add	r0, r3, #0
	ldr	r1, .L622
	ldrb	r1, [r1]
	bl	PrepareStringBattle
.L604:
	ldr	r4, .L622+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	str	r0, [r4]
	ldr	r2, .L622+0x8
	ldr	r0, .L622+0xc
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrb	r2, [r3, #0x2]
	lsl	r0, r2, #0x1f
	cmp	r0, #0
	beq	.L573	@cond_branch
	ldr	r0, .L622+0x10
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L573	@cond_branch
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r3, #0x2]
	bl	BattleScriptPushCursor
	ldr	r0, .L622+0x14
	str	r0, [r4]
.L573:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L623:
	.align	2, 0
.L622:
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gMoveResultFlags
	.word	BattleScript_PrintBerryReduceString
.Lfe25:
	.size	 Cmd_resultmessage,.Lfe25-Cmd_resultmessage
	.align	2, 0
	.type	 Cmd_printstring,function
	.thumb_func
Cmd_printstring:
	push	{lr}
	ldr	r0, .L626
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L625	@cond_branch
	ldr	r3, .L626+0x4
	ldr	r2, [r3]
	ldrb	r0, [r2, #0x1]
	ldrb	r1, [r2, #0x2]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	add	r2, r2, #0x3
	str	r2, [r3]
	ldr	r1, .L626+0x8
	ldrb	r1, [r1]
	bl	PrepareStringBattle
	ldr	r1, .L626+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x7]
.L625:
	pop	{r0}
	bx	r0
.L627:
	.align	2, 0
.L626:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
	.word	gBattleCommunication
.Lfe26:
	.size	 Cmd_printstring,.Lfe26-Cmd_printstring
	.align	2, 0
	.type	 Cmd_printselectionstring,function
	.thumb_func
Cmd_printselectionstring:
	push	{r4, r5, lr}
	ldr	r5, .L629
	ldr	r0, .L629+0x4
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r4, .L629+0x8
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r0, #0x0
	bl	BtlController_EmitPrintSelectionString
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	ldr	r1, .L629+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x7]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L630:
	.align	2, 0
.L629:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
.Lfe27:
	.size	 Cmd_printselectionstring,.Lfe27-Cmd_printselectionstring
	.align	2, 0
	.type	 Cmd_waitmessage,function
	.thumb_func
Cmd_waitmessage:
	push	{r4, r5, r6, lr}
	ldr	r0, .L637
	ldr	r5, [r0]
	cmp	r5, #0
	bne	.L632	@cond_branch
	ldr	r6, .L637+0x4
	ldrb	r0, [r6, #0x7]
	cmp	r0, #0
	bne	.L633	@cond_branch
	ldr	r1, .L637+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
	b	.L632
.L638:
	.align	2, 0
.L637:
	.word	gBattleControllerExecFlags
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L633:
	ldr	r0, .L639
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	ldr	r4, .L639+0x4
	ldr	r3, .L639+0x8
	cmp	r0, #0
	bne	.L636	@cond_branch
	ldrh	r1, [r3]
	add	r1, r1, #0x1
	strh	r1, [r3]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [r4]
	ldrb	r2, [r0, #0x1]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	cmp	r1, r2
	blt	.L632	@cond_branch
.L636:
	mov	r1, #0x0
	strh	r5, [r3]
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	strb	r1, [r6, #0x7]
.L632:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L640:
	.align	2, 0
.L639:
	.word	gMain
	.word	gBattlescriptCurrInstr
	.word	gPauseCounterBattle
.Lfe28:
	.size	 Cmd_waitmessage,.Lfe28-Cmd_waitmessage
	.align	2, 0
	.type	 Cmd_printfromtable,function
	.thumb_func
Cmd_printfromtable:
	push	{r4, lr}
	ldr	r0, .L643
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L642	@cond_branch
	ldr	r3, .L643+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r4, .L643+0x8
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	add	r2, r2, #0x5
	str	r2, [r3]
	ldrh	r0, [r1]
	ldr	r1, .L643+0xc
	ldrb	r1, [r1]
	bl	PrepareStringBattle
	mov	r0, #0x1
	strb	r0, [r4, #0x7]
.L642:
	pop	{r4}
	pop	{r0}
	bx	r0
.L644:
	.align	2, 0
.L643:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
	.word	gBattlerAttacker
.Lfe29:
	.size	 Cmd_printfromtable,.Lfe29-Cmd_printfromtable
	.align	2, 0
	.type	 Cmd_printselectionstringfromtable,function
	.thumb_func
Cmd_printselectionstringfromtable:
	push	{r4, r5, r6, lr}
	ldr	r0, .L647
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L646	@cond_branch
	ldr	r5, .L647+0x4
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r6, .L647+0x8
	ldrb	r0, [r6, #0x5]
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r4, .L647+0xc
	ldr	r0, .L647+0x10
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldrh	r1, [r1]
	mov	r0, #0x0
	bl	BtlController_EmitPrintSelectionString
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x5
	str	r0, [r5]
	mov	r0, #0x1
	strb	r0, [r6, #0x7]
.L646:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L648:
	.align	2, 0
.L647:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
	.word	gActiveBattler
	.word	gBattlerAttacker
.Lfe30:
	.size	 Cmd_printselectionstringfromtable,.Lfe30-Cmd_printselectionstringfromtable
	.align	2, 0
	.globl	GetBattlerTurnOrderNum
	.type	 GetBattlerTurnOrderNum,function
	.thumb_func
GetBattlerTurnOrderNum:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x0
	ldr	r0, .L656
	ldrb	r3, [r0]
	cmp	r1, r3
	bge	.L651	@cond_branch
	ldr	r4, .L656+0x4
	ldrb	r0, [r4]
	cmp	r0, r2
	beq	.L651	@cond_branch
.L652:
	add	r1, r1, #0x1
	cmp	r1, r3
	bge	.L651	@cond_branch
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L652	@cond_branch
.L651:
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.L657:
	.align	2, 0
.L656:
	.word	gBattlersCount
	.word	gBattlerByTurnOrder
.Lfe31:
	.size	 GetBattlerTurnOrderNum,.Lfe31-GetBattlerTurnOrderNum
	.align	2, 0
	.type	 CheckSetUnburden,function
	.thumb_func
CheckSetUnburden:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, #0x54
	bne	.L659	@cond_branch
	ldr	r0, .L660
	ldr	r0, [r0]
	ldr	r2, [r0, #0x4]
	lsl	r0, r4, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	str	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x54
	bl	RecordAbilityBattle
.L659:
	pop	{r4}
	pop	{r0}
	bx	r0
.L661:
	.align	2, 0
.L660:
	.word	gBattleResources
.Lfe32:
	.size	 CheckSetUnburden,.Lfe32-CheckSetUnburden
	.align	2, 0
	.globl	SetMoveEffect
	.type	 SetMoveEffect,function
	.thumb_func
SetMoveEffect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	add	r6, r0, #0
	add	r7, r1, #0
	mov	r0, #0x0
	mov	r8, r0
	mov	r9, r0
	mov	r1, #0x1
	mov	sl, r1
	ldr	r0, .L930
	ldrh	r1, [r0, #0x2e]
	cmp	r1, #0x36
	bne	.L663	@cond_branch
	ldr	r0, .L930+0x4
	ldr	r0, [r0]
	mov	r2, #0xd1
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	strh	r1, [r0]
	bl	.L923	@ far jump
.L931:
	.align	2, 0
.L930:
	.word	gBattleScripting
	.word	gBattleStruct
.L663:
	mov	r3, #0x80
	lsl	r3, r3, #0x7
	and	r1, r1, r3
	cmp	r1, #0
	beq	.L667	@cond_branch
	ldr	r2, .L932
	ldr	r0, .L932+0x4
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r4, .L932+0x8
	ldrh	r1, [r4, #0x2e]
	ldr	r0, .L932+0xc
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	mov	r8, r3
	ldr	r0, .L932+0x10
	ldrb	r0, [r0]
	strb	r0, [r4, #0x17]
	b	.L668
.L933:
	.align	2, 0
.L932:
	.word	gEffectBattler
	.word	gBattlerAttacker
	.word	gBattleScripting
	.word	0xbfff
	.word	gBattlerTarget
.L667:
	ldr	r1, .L934
	ldr	r0, .L934+0x4
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L934+0x8
	ldrb	r0, [r0]
	ldr	r2, .L934+0xc
	strb	r0, [r2, #0x17]
.L668:
	ldr	r3, .L934+0xc
	ldrh	r1, [r3, #0x2e]
	ldr	r0, .L934+0x10
	and	r0, r0, r1
	strh	r0, [r3, #0x2e]
	ldr	r4, .L934
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x13
	bne	.L669	@cond_branch
	ldr	r0, .L934+0x14
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L669	@cond_branch
	cmp	r6, #0
	bne	.L669	@cond_branch
	ldr	r1, .L934+0xc
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0x9
	bhi	.L669	@cond_branch
	ldr	r1, .L934+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r2, .L934+0xc
	strh	r6, [r2, #0x2e]
	bl	.L662	@ far jump
.L935:
	.align	2, 0
.L934:
	.word	gEffectBattler
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleScripting
	.word	0x7fff
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
.L669:
	ldr	r0, .L936
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	ldr	r2, .L936+0x4
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L670	@cond_branch
	ldr	r0, .L936+0x8
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L670	@cond_branch
	cmp	r6, #0
	bne	.L670	@cond_branch
	ldr	r2, .L936+0xc
	ldrh	r0, [r2, #0x2e]
	cmp	r0, #0x7
	bhi	.L670	@cond_branch
	ldr	r1, .L936+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	strh	r6, [r2, #0x2e]
	bl	.L662	@ far jump
.L937:
	.align	2, 0
.L936:
	.word	gEffectBattler
	.word	gSideStatuses
	.word	gHitMarker
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.L670:
	ldr	r0, .L938
	ldrb	r0, [r0]
	bl	GetBattlerAbility
	cmp	r0, #0x7d
	bne	.L671	@cond_branch
	ldr	r2, .L938+0x4
	ldr	r0, .L938+0x8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L671	@cond_branch
	mov	r3, r8
	cmp	r3, #0
	bne	.LCB6472
	bl	.L924	@far jump
.LCB6472:
.L671:
	ldr	r3, .L938+0xc
	ldr	r2, .L938+0x10
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r3, [r0, #0x2a]
	cmp	r3, #0
	bne	.L672	@cond_branch
	ldr	r2, .L938+0x14
	ldrh	r0, [r2, #0x2e]
	cmp	r0, #0xb
	beq	.L672	@cond_branch
	cmp	r0, #0x1f
	beq	.L672	@cond_branch
	ldr	r1, .L938+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	strh	r3, [r2, #0x2e]
	bl	.L662	@ far jump
.L939:
	.align	2, 0
.L938:
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gEffectBattler
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.L672:
	ldr	r0, .L940
	ldrb	r0, [r0]
	ldr	r4, .L940+0x4
	ldrb	r1, [r4]
	ldr	r2, .L940+0x8
	ldrh	r2, [r2]
	bl	DoesSubstituteBlockMove
	cmp	r0, #0
	beq	.L673	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	bne	.LCB6533
	bl	.L924	@far jump
.LCB6533:
.L673:
	ldr	r0, .L940+0xc
	ldrh	r1, [r0, #0x2e]
	cmp	r1, #0x6
	bls	.LCB6542
	b	.L674	@long jump
.LCB6542:
	ldr	r1, .L940+0x10
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0x10
	bne	.LCB6551
	b	.L700	@long jump
.LCB6551:
	cmp	r0, #0x10
	bhi	.L748	@cond_branch
	cmp	r0, #0x7
	beq	.L676	@cond_branch
	cmp	r0, #0x8
	bne	.LCB6557
	b	.L689	@long jump
.LCB6557:
	b	.L675
.L941:
	.align	2, 0
.L940:
	.word	gBattlerAttacker
	.word	gEffectBattler
	.word	gCurrentMove
	.word	gBattleScripting
	.word	sStatusFlagsForMoveEffects
.L748:
	cmp	r0, #0x40
	bne	.LCB6572
	b	.L721	@long jump
.LCB6572:
	cmp	r0, #0x40
	bhi	.L749	@cond_branch
	cmp	r0, #0x20
	bne	.LCB6576
	b	.L713	@long jump
.LCB6576:
	b	.L675
.L749:
	cmp	r0, #0x80
	bne	.LCB6581
	b	.L734	@long jump
.LCB6581:
	b	.L675
.L676:
	ldr	r4, .L942
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x2b
	beq	.L677	@cond_branch
	ldr	r0, .L942+0x4
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, .L942+0x8
	ldrb	r3, [r1]
	add	r7, r0, #0
	add	r2, r1, #0
	cmp	r3, #0
	beq	.L684	@cond_branch
	ldr	r4, .L942+0xc
	ldr	r1, [r4, #0x54]
	mov	r0, #0x70
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L684	@cond_branch
	add	r1, r7, #0
	add	r6, r4, #0
	add	r6, r6, #0x54
	mov	r5, #0x5c
	mov	r4, #0x70
.L680:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r3
	bcs	.L684	@cond_branch
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L680	@cond_branch
	b	.L684
.L943:
	.align	2, 0
.L942:
	.word	gEffectBattler
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gBattleMons
.L677:
	ldr	r0, .L944
	ldr	r2, .L944+0x4
	ldrb	r1, [r2]
	strb	r1, [r0]
	add	r7, r0, #0
.L684:
	ldr	r0, .L944+0x8
	ldrb	r3, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r3
	ldr	r1, .L944+0xc
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB6679
	b	.L675	@long jump
.LCB6679:
	ldrb	r0, [r7]
	ldrb	r2, [r2]
	cmp	r0, r2
	beq	.LCB6690
	b	.L675	@long jump
.LCB6690:
	add	r0, r3, #0
	bl	GetBattlerAbility
	cmp	r0, #0x48
	bne	.LCB6695
	b	.L675	@long jump
.LCB6695:
	ldr	r1, .L944+0x8
	ldrb	r0, [r1]
	bl	GetBattlerAbility
	cmp	r0, #0xf
	bne	.LCB6702
	b	.L675	@long jump
.LCB6702:
	ldr	r2, .L944+0x8
	ldrb	r0, [r2]
	bl	GetBattlerAbility
	cmp	r0, #0xd5
	bne	.LCB6709
	b	.L675	@long jump
.LCB6709:
	ldr	r3, .L944+0x8
	ldrb	r0, [r3]
	mov	r1, #0xaf
	bl	IsAbilityOnSide
	cmp	r0, #0
	beq	.LCB6717
	b	.L675	@long jump
.LCB6717:
	ldr	r4, .L944+0x8
	ldrb	r0, [r4]
	bl	IsAbilityStatusProtected
	cmp	r0, #0
	beq	.LCB6724
	b	.L675	@long jump
.LCB6724:
	ldrb	r0, [r4]
	bl	CancelMultiTurnMoves
	b	.L925
.L945:
	.align	2, 0
.L944:
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gEffectBattler
	.word	gBattleMons
.L689:
	ldr	r4, .L946
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	add	r1, r0, #0
	cmp	r1, #0x11
	bne	.L690	@cond_branch
	cmp	r6, #0x1
	beq	.L691	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	cmp	r7, r0
	bne	.L690	@cond_branch
.L691:
	ldr	r0, .L946+0x4
	strh	r1, [r0]
	ldrb	r0, [r4]
	mov	r1, #0x11
	bl	RecordAbilityBattle
	ldr	r4, .L946+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L946+0xc
	str	r0, [r4]
	ldr	r3, .L946+0x10
	ldr	r2, [r3]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r1, r1, r2
	cmp	r1, #0
	bne	.LCB6774
	b	.L737	@long jump
.LCB6774:
.L928:
	ldr	r0, .L946+0x14
	mov	r1, #0x1
	strb	r1, [r0, #0x5]
	ldr	r0, .L946+0x18
	and	r2, r2, r0
	str	r2, [r3]
	bl	.L759	@ far jump
.L947:
	.align	2, 0
.L946:
	.word	gEffectBattler
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PSNPrevention
	.word	gHitMarker
	.word	gBattleCommunication
	.word	-0x2001
.L690:
	ldr	r1, .L948
	mov	r8, r1
	ldrb	r0, [r1, #0x17]
	ldr	r1, .L948+0x4
	ldrb	r1, [r1]
	bl	CanPoisonType
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L694	@cond_branch
	ldr	r0, .L948+0x8
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L694	@cond_branch
	cmp	r6, #0x1
	bne	.LCB6819
	b	.L740	@long jump
.LCB6819:
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	cmp	r7, r0
	bne	.LCB6823
	b	.L740	@long jump
.LCB6823:
.L694:
	ldr	r0, .L948
	ldrb	r0, [r0, #0x17]
	ldr	r4, .L948+0x4
	ldrb	r1, [r4]
	bl	CanPoisonType
	cmp	r0, #0
	bne	.LCB6837
	b	.L675	@long jump
.LCB6837:
	ldr	r1, .L948+0xc
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB6846
	b	.L675	@long jump
.LCB6846:
	add	r0, r2, #0
	bl	GetBattlerAbility
	cmp	r0, #0x11
	bne	.LCB6851
	b	.L675	@long jump
.LCB6851:
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0xd5
	bne	.LCB6857
	b	.L675	@long jump
.LCB6857:
	ldrb	r0, [r4]
	bl	IsAbilityStatusProtected
	cmp	r0, #0
	beq	.LCB6863
	b	.L675	@long jump
.LCB6863:
	b	.L926
.L949:
	.align	2, 0
.L948:
	.word	gBattleScripting
	.word	gEffectBattler
	.word	gHitMarker
	.word	gBattleMons
.L700:
	ldr	r4, .L950
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	add	r1, r0, #0
	cmp	r1, #0x29
	bne	.L701	@cond_branch
	cmp	r6, #0x1
	beq	.L702	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	cmp	r7, r0
	bne	.L701	@cond_branch
.L702:
	ldr	r0, .L950+0x4
	strh	r1, [r0]
	ldrb	r0, [r4]
	mov	r1, #0x29
	bl	RecordAbilityBattle
	ldr	r4, .L950+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L950+0xc
.L929:
	str	r0, [r4]
	ldr	r3, .L950+0x10
	ldr	r2, [r3]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r1, r1, r2
	cmp	r1, #0
	beq	.LCB6911
	b	.L928	@long jump
.LCB6911:
	b	.L737
.L951:
	.align	2, 0
.L950:
	.word	gEffectBattler
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BRNPrevention
	.word	gHitMarker
.L701:
	ldr	r3, .L952
	ldr	r2, .L952+0x4
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xa
	beq	.L706	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0xa
	beq	.L706	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0xa
	bne	.L705	@cond_branch
.L706:
	ldr	r0, .L952+0x8
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L705	@cond_branch
	cmp	r6, #0x1
	beq	.L707	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	cmp	r7, r0
	bne	.L705	@cond_branch
.L707:
	ldr	r4, .L952+0xc
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L952+0x10
	str	r0, [r4]
	ldr	r1, .L952+0x14
	mov	r2, #0x0
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	ldr	r0, .L952+0x18
	strh	r2, [r0, #0x2e]
	bl	.L662	@ far jump
.L953:
	.align	2, 0
.L952:
	.word	gBattleMons
	.word	gEffectBattler
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BRNPrevention
	.word	gBattleCommunication
	.word	gBattleScripting
.L705:
	ldr	r4, .L954
	ldrb	r2, [r4]
	mov	r4, #0x5c
	mov	r0, r2
	mul	r0, r0, r4
	ldr	r3, .L954+0x4
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xa
	bne	.LCB7016
	b	.L675	@long jump
.LCB7016:
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0xa
	bne	.LCB7023
	b	.L675	@long jump
.LCB7023:
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0xa
	bne	.LCB7030
	b	.L675	@long jump
.LCB7030:
	add	r0, r2, #0
	bl	GetBattlerAbility
	cmp	r0, #0x29
	bne	.LCB7035
	b	.L675	@long jump
.LCB7035:
	ldr	r1, .L954
	ldrb	r0, [r1]
	bl	GetBattlerAbility
	cmp	r0, #0xd5
	bne	.LCB7042
	b	.L675	@long jump
.LCB7042:
	ldr	r2, .L954
	ldrb	r0, [r2]
	bl	IsAbilityStatusProtected
	cmp	r0, #0
	beq	.LCB7049
	b	.L675	@long jump
.LCB7049:
	ldr	r3, .L954
	ldrb	r0, [r3]
	mul	r0, r0, r4
	ldr	r1, .L954+0x4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB7058
	b	.L675	@long jump
.LCB7058:
	mov	r4, #0x1
	mov	r9, r4
	b	.L675
.L955:
	.align	2, 0
.L954:
	.word	gEffectBattler
	.word	gBattleMons
.L713:
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L714	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L714	@cond_branch
	ldr	r0, .L956
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L714	@cond_branch
	mov	r0, #0x0
	mov	sl, r0
.L714:
	ldr	r5, .L956+0x4
	ldr	r4, .L956+0x8
	ldrb	r3, [r4]
	mov	r0, #0x5c
	mov	r2, r3
	mul	r2, r2, r0
	add	r1, r2, r5
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xf
	bne	.LCB7104
	b	.L675	@long jump
.LCB7104:
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0xf
	bne	.LCB7111
	b	.L675	@long jump
.LCB7111:
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0xf
	bne	.LCB7118
	b	.L675	@long jump
.LCB7118:
	add	r0, r5, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB7124
	b	.L675	@long jump
.LCB7124:
	mov	r1, sl
	cmp	r1, #0
	bne	.LCB7127
	b	.L675	@long jump
.LCB7127:
	add	r0, r3, #0
	bl	GetBattlerAbility
	cmp	r0, #0x28
	bne	.LCB7132
	b	.L675	@long jump
.LCB7132:
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0xd5
	bne	.LCB7138
	b	.L675	@long jump
.LCB7138:
	ldrb	r0, [r4]
	bl	IsAbilityStatusProtected
	cmp	r0, #0
	beq	.LCB7144
	b	.L675	@long jump
.LCB7144:
	ldrb	r0, [r4]
	bl	CancelMultiTurnMoves
	mov	r2, #0x1
	mov	r9, r2
	b	.L675
.L957:
	.align	2, 0
.L956:
	.word	gBattleWeather
	.word	gBattleMons
	.word	gEffectBattler
.L721:
	ldr	r4, .L958
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	add	r1, r0, #0
	cmp	r1, #0x7
	bne	.L722	@cond_branch
	cmp	r6, #0x1
	beq	.L724	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	cmp	r7, r0
	beq	.LCB7174
	b	.L675	@long jump
.LCB7174:
.L724:
	ldr	r0, .L958+0x4
	strh	r1, [r0]
	ldrb	r0, [r4]
	mov	r1, #0x7
	bl	RecordAbilityBattle
	ldr	r4, .L958+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L958+0xc
	b	.L929
.L959:
	.align	2, 0
.L958:
	.word	gEffectBattler
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PRLZPrevention
.L722:
	ldr	r3, .L960
	ldrb	r0, [r3, #0x17]
	ldrb	r1, [r4]
	bl	CanParalyzeType
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L728	@cond_branch
	ldr	r0, .L960+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L728	@cond_branch
	cmp	r6, #0x1
	beq	.L729	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	cmp	r7, r0
	bne	.L728	@cond_branch
.L729:
	ldr	r4, .L960+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L960+0xc
	str	r0, [r4]
	ldr	r1, .L960+0x10
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	ldr	r4, .L960
	strh	r5, [r4, #0x2e]
	bl	.L662	@ far jump
.L961:
	.align	2, 0
.L960:
	.word	gBattleScripting
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PRLZPrevention
	.word	gBattleCommunication
.L728:
	ldr	r0, .L962
	ldrb	r0, [r0, #0x17]
	ldr	r4, .L962+0x4
	ldrb	r1, [r4]
	bl	CanParalyzeType
	cmp	r0, #0
	bne	.LCB7263
	b	.L675	@long jump
.LCB7263:
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x7
	bne	.LCB7269
	b	.L675	@long jump
.LCB7269:
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0xd5
	bne	.LCB7275
	b	.L675	@long jump
.LCB7275:
	ldrb	r0, [r4]
	bl	IsAbilityStatusProtected
	cmp	r0, #0
	beq	.LCB7281
	b	.L675	@long jump
.LCB7281:
	ldr	r1, .L962+0x8
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB7290
	b	.L675	@long jump
.LCB7290:
.L925:
	mov	r0, #0x1
	mov	r9, r0
	b	.L675
.L963:
	.align	2, 0
.L962:
	.word	gBattleScripting
	.word	gEffectBattler
	.word	gBattleMons
.L734:
	ldr	r4, .L964
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	add	r1, r0, #0
	cmp	r1, #0x11
	bne	.L735	@cond_branch
	cmp	r6, #0x1
	bne	.LCB7313
	b	.L691	@long jump
.LCB7313:
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	cmp	r7, r0
	bne	.L735	@cond_branch
	b	.L691
.L965:
	.align	2, 0
.L964:
	.word	gEffectBattler
.L737:
	ldr	r0, .L966
	strb	r1, [r0, #0x5]
	bl	.L759	@ far jump
.L967:
	.align	2, 0
.L966:
	.word	gBattleCommunication
.L735:
	ldr	r1, .L968
	mov	r8, r1
	ldrb	r0, [r1, #0x17]
	ldr	r1, .L968+0x4
	ldrb	r1, [r1]
	bl	CanPoisonType
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L739	@cond_branch
	ldr	r0, .L968+0x8
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L739	@cond_branch
	cmp	r6, #0x1
	beq	.L740	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	cmp	r7, r0
	bne	.L739	@cond_branch
.L740:
	ldr	r4, .L968+0xc
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L968+0x10
	str	r0, [r4]
	ldr	r1, .L968+0x14
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	mov	r2, r8
	strh	r5, [r2, #0x2e]
	bl	.L662	@ far jump
.L969:
	.align	2, 0
.L968:
	.word	gBattleScripting
	.word	gEffectBattler
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PSNPrevention
	.word	gBattleCommunication
.L739:
	ldr	r0, .L970
	ldr	r4, .L970+0x4
	ldrb	r2, [r4]
	mov	r6, #0x5c
	mov	r1, r2
	mul	r1, r1, r6
	add	r5, r0, #0
	add	r5, r5, #0x50
	add	r1, r1, r5
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L675	@cond_branch
	ldr	r0, .L970+0x8
	ldrb	r0, [r0, #0x17]
	add	r1, r2, #0
	bl	CanPoisonType
	cmp	r0, #0
	beq	.L742	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x11
	beq	.L675	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0xd5
	beq	.L675	@cond_branch
	ldrb	r0, [r4]
	bl	IsAbilityStatusProtected
	cmp	r0, #0
	bne	.L675	@cond_branch
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r5
	ldr	r0, [r1]
	mov	r2, #0x81
	neg	r2, r2
	and	r0, r0, r2
	str	r0, [r1]
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r5
	ldr	r0, [r1]
	add	r2, r2, #0x78
	and	r0, r0, r2
	str	r0, [r1]
.L926:
	mov	r3, #0x1
	mov	r9, r3
	b	.L675
.L971:
	.align	2, 0
.L970:
	.word	gBattleMons
	.word	gEffectBattler
	.word	gBattleScripting
.L742:
	ldr	r0, .L972
	ldrh	r1, [r0]
	mov	r2, #0x8
	orr	r1, r1, r2
	strh	r1, [r0]
.L675:
	mov	r4, r9
	cmp	r4, #0x1
	beq	.LCB7473
	b	.L750	@long jump
.LCB7473:
	ldr	r0, .L972+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L972+0x8
	ldr	r0, .L972+0xc
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r3, [r0]
	cmp	r3, #0x7
	bne	.L751	@cond_branch
	bl	Random
	ldr	r2, .L972+0x10
	ldr	r1, .L972+0x14
	ldrb	r3, [r1]
	mov	r1, #0x5c
	mov	r4, r3
	mul	r4, r4, r1
	add	r2, r2, #0x50
	add	r4, r4, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r0, r0, #0x2
	ldr	r1, [r4]
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L752
.L973:
	.align	2, 0
.L972:
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
	.word	sStatusFlagsForMoveEffects
	.word	gBattleScripting
	.word	gBattleMons
	.word	gEffectBattler
.L751:
	ldr	r2, .L974
	ldr	r0, .L974+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r1, r1, r0
	add	r2, r2, #0x50
	add	r1, r1, r2
	ldr	r0, [r1]
	orr	r0, r0, r3
	str	r0, [r1]
.L752:
	ldr	r2, .L974+0x8
	ldr	r1, .L974+0xc
	ldr	r0, .L974+0x10
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r4, .L974+0x14
	ldr	r1, .L974+0x4
	ldrb	r0, [r1]
	strb	r0, [r4]
	ldrb	r1, [r1]
	mov	r0, #0x5c
	mul	r0, r0, r1
	ldr	r1, .L974+0x18
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r3, .L974+0x1c
	ldr	r2, [r3]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r1, r1, r2
	cmp	r1, #0
	beq	.L753	@cond_branch
	ldr	r0, .L974+0x20
	mov	r1, #0x1
	strb	r1, [r0, #0x5]
	ldr	r0, .L974+0x24
	and	r2, r2, r0
	str	r2, [r3]
	b	.L754
.L975:
	.align	2, 0
.L974:
	.word	gBattleMons
	.word	gEffectBattler
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleScripting
	.word	gActiveBattler
	.word	gBattleMons+0x50
	.word	gHitMarker
	.word	gBattleCommunication
	.word	-0x2001
.L753:
	ldr	r0, .L976
	strb	r1, [r0, #0x5]
.L754:
	ldr	r0, .L976+0x4
	ldrh	r1, [r0, #0x2e]
	cmp	r1, #0x2
	beq	.L756	@cond_branch
	cmp	r1, #0x6
	beq	.L756	@cond_branch
	cmp	r1, #0x5
	beq	.L756	@cond_branch
	cmp	r1, #0x3
	beq	.LCB7608
	bl	.L662	@far jump
.LCB7608:
.L756:
	ldr	r0, .L976+0x8
	ldr	r0, [r0]
	ldr	r2, .L976+0x4
	ldrh	r1, [r2, #0x2e]
	add	r0, r0, #0xa8
	strh	r1, [r0]
	ldr	r2, .L976+0xc
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L662	@ far jump
.L977:
	.align	2, 0
.L976:
	.word	gBattleCommunication
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gHitMarker
.L750:
	mov	r3, r9
	cmp	r3, #0
	beq	.LCB7638
	bl	.L662	@far jump
.LCB7638:
	ldr	r0, .L978
	strh	r3, [r0, #0x2e]
.L923:
	ldr	r1, .L978+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bl	.L662	@ far jump
.L979:
	.align	2, 0
.L978:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.L674:
	ldr	r4, .L980
	ldr	r3, .L980+0x4
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mul	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x54
	add	r1, r1, r0
	ldr	r2, .L980+0x8
	ldr	r0, .L980+0xc
	ldrh	r5, [r0, #0x2e]
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r1, [r1]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB7677
	bl	.L924	@far jump
.LCB7677:
	sub	r0, r5, #0x7
	cmp	r0, #0x3e
	bls	.LCB7682
	bl	.L759	@far jump
.LCB7682:
	lsl	r0, r0, #0x2
	ldr	r1, .L980+0x10
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L981:
	.align	2, 0
.L980:
	.word	gBattleMons
	.word	gEffectBattler
	.word	sStatusFlagsForMoveEffects
	.word	gBattleScripting
	.word	.L919
	.align	2, 0
	.align	2, 0
.L919:
	.word	.L763
	.word	.L767
	.word	.L782
	.word	.L774
	.word	.L777
	.word	.L785
	.word	.L786
	.word	.L855
	.word	.L803
	.word	.L803
	.word	.L803
	.word	.L803
	.word	.L803
	.word	.L803
	.word	.L803
	.word	.L812
	.word	.L812
	.word	.L812
	.word	.L812
	.word	.L812
	.word	.L812
	.word	.L812
	.word	.L833
	.word	.L834
	.word	.L835
	.word	.L846
	.word	.L847
	.word	.L848
	.word	.L849
	.word	.L850
	.word	.L853
	.word	.L858
	.word	.L821
	.word	.L821
	.word	.L821
	.word	.L821
	.word	.L821
	.word	.L821
	.word	.L821
	.word	.L830
	.word	.L830
	.word	.L830
	.word	.L830
	.word	.L830
	.word	.L830
	.word	.L830
	.word	.L864
	.word	.L759
	.word	.L854
	.word	.L862
	.word	.L860
	.word	.L868
	.word	.L867
	.word	.L882
	.word	.L884
	.word	.L887
	.word	.L891
	.word	.L910
	.word	.L780
	.word	.L911
	.word	.L913
	.word	.L914
	.word	.L917
.L763:
	ldr	r1, .L982
	ldrb	r0, [r1]
	bl	GetBattlerAbility
	cmp	r0, #0x14
	bne	.LCB7712
	bl	.L924	@far jump
.LCB7712:
	ldr	r1, .L982+0x4
	ldr	r2, .L982
	ldrb	r0, [r2]
	mov	r5, #0x5c
	mul	r0, r0, r5
	add	r4, r1, #0
	add	r4, r4, #0x54
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB7725
	bl	.L924	@far jump
.LCB7725:
	bl	Random
	ldr	r3, .L982
	ldrb	r1, [r3]
	mov	r2, r1
	mul	r2, r2, r5
	add	r2, r2, r4
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r1, r1, #0x2
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L982+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L982+0xc
	ldr	r0, .L982+0x10
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	.L927	@ far jump
.L983:
	.align	2, 0
.L982:
	.word	gEffectBattler
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleScripting
.L767:
	ldr	r4, .L984
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	add	r1, r0, #0
	cmp	r1, #0x27
	bne	.L768	@cond_branch
	cmp	r6, #0x1
	beq	.L770	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	cmp	r7, r0
	beq	.LCB7783
	bl	.L924	@far jump
.LCB7783:
.L770:
	ldr	r0, .L984+0x4
	strh	r1, [r0]
	ldr	r1, .L984
	ldrb	r0, [r1]
	mov	r1, #0x27
	bl	RecordAbilityBattle
	ldr	r1, .L984+0x8
	ldr	r0, .L984+0xc
	str	r0, [r1]
	bl	.L759	@ far jump
.L985:
	.align	2, 0
.L984:
	.word	gEffectBattler
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlinchPrevention
.L768:
	ldr	r2, .L986
	ldrb	r0, [r2]
	bl	GetBattlerTurnOrderNum
	ldr	r1, .L986+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bhi	.LCB7823
	bl	.L924	@far jump
.LCB7823:
	ldr	r1, .L986+0x8
	ldr	r3, .L986
	ldrb	r2, [r3]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, #0x54
	add	r2, r2, r1
	ldr	r1, .L986+0xc
	ldr	r0, .L986+0x10
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	orr	r1, r1, r0
	str	r1, [r2]
	bl	.L924	@ far jump
.L987:
	.align	2, 0
.L986:
	.word	gEffectBattler
	.word	gCurrentTurnActionNumber
	.word	gBattleMons
	.word	sStatusFlagsForMoveEffects
	.word	gBattleScripting
.L774:
	ldr	r4, .L988
	ldrb	r0, [r4]
	mov	r3, #0x5c
	mul	r0, r0, r3
	ldr	r2, .L988+0x4
	add	r2, r2, #0x54
	add	r5, r0, r2
	ldr	r1, [r5]
	mov	r0, #0x70
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB7866
	bl	.L924	@far jump
.LCB7866:
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	orr	r1, r1, r0
	str	r1, [r5]
	ldr	r1, .L988+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L988+0xc
	ldrh	r1, [r1]
	strh	r1, [r0]
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r3
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x30
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r4, .L988+0x10
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L988+0x14
	ldr	r0, .L988+0x18
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	.L927	@ far jump
.L989:
	.align	2, 0
.L988:
	.word	gEffectBattler
	.word	gBattleMons
	.word	gLockedMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleScripting
.L777:
	ldr	r5, .L990
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L778	@cond_branch
	ldr	r4, .L990+0x4
	ldrh	r3, [r4]
	ldr	r2, .L990+0x8
	ldrb	r1, [r5]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	add	r0, r3, r0
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r3, r0
	bls	.L778	@cond_branch
	ldr	r1, .L990+0xc
	add	r0, r1, #0
	strh	r0, [r4]
.L778:
	ldr	r4, .L990+0x10
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L990+0x14
	ldr	r0, .L990+0x18
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	.L927	@ far jump
.L991:
	.align	2, 0
.L990:
	.word	gBattlerAttacker
	.word	gPaydayMoney
	.word	gBattleMons
	.word	0xffff
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleScripting
.L780:
	ldr	r0, .L992
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB7984
	bl	.L924	@far jump
.LCB7984:
	ldr	r0, .L992+0x4
	ldr	r1, [r0]
	add	r1, r1, #0x4a
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	strb	r0, [r1]
	bl	.L924	@ far jump
.L993:
	.align	2, 0
.L992:
	.word	gBattlerAttacker
	.word	gBattleStruct
.L782:
	ldr	r2, .L994
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	ldr	r1, .L994+0x4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB8013
	bl	.L924	@far jump
.LCB8013:
	bl	Random
	ldr	r4, .L994+0x8
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	add	r0, r0, #0x3
	strh	r0, [r4, #0x2e]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetMoveEffect
	bl	.L759	@ far jump
.L995:
	.align	2, 0
.L994:
	.word	gEffectBattler
	.word	gBattleMons
	.word	gBattleScripting
.L785:
	ldr	r3, .L996
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mov	r2, r1
	mul	r2, r2, r0
	ldr	r0, .L996+0x4
	add	r0, r0, #0x54
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L996+0x8
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L996+0xc
	ldrh	r1, [r1]
	strh	r1, [r0]
	ldr	r0, .L996+0x10
	ldrb	r1, [r3]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	mov	r2, #0x10
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
	bl	.L924	@ far jump
.L997:
	.align	2, 0
.L996:
	.word	gEffectBattler
	.word	gBattleMons
	.word	gLockedMoves
	.word	gCurrentMove
	.word	gProtectStructs
.L786:
	ldr	r4, .L998
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r1, r1, r0
	ldr	r0, .L998+0x4
	add	r0, r0, #0x54
	add	r1, r1, r0
	ldr	r5, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	add	r0, r5, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.LCB8098
	bl	.L924	@far jump
.LCB8098:
	orr	r5, r5, r2
	str	r5, [r1]
	ldr	r0, .L998+0x8
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x46
	bne	.L789	@cond_branch
	ldr	r2, .L998+0xc
	ldr	r0, .L998
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	add	r0, r0, #0x25
	mov	r1, #0x7
	strb	r1, [r0]
	b	.L790
.L999:
	.align	2, 0
.L998:
	.word	gEffectBattler
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gDisableStructs
.L789:
	bl	Random
	ldr	r3, .L1000
	ldr	r1, .L1000+0x4
	ldrb	r2, [r1]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r2, #0x1
	and	r0, r0, r2
	add	r0, r0, #0x4
	add	r1, r1, #0x25
	strb	r0, [r1]
.L790:
	ldr	r0, .L1000+0x8
	ldr	r2, [r0]
	ldr	r3, .L1000+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r1, r2, #0x4
	add	r1, r1, r0
	ldr	r6, .L1000+0xc
	ldrh	r0, [r6]
	mov	r5, #0x0
	strh	r0, [r1]
	add	r2, r2, #0x13
	ldrb	r3, [r3]
	add	r2, r2, r3
	ldr	r0, .L1000+0x10
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r4, .L1000+0x14
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L1000+0x18
	ldr	r0, .L1000+0x1c
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [r4]
	ldr	r1, .L1000+0x20
	strb	r5, [r1, #0x5]
	ldr	r2, .L1000+0x24
	ldrh	r0, [r2]
	ldrh	r3, [r6]
	cmp	r0, r3
	bne	.LCB8199
	bl	.L759	@far jump
.LCB8199:
	add	r3, r2, #0
	add	r2, r6, #0
.L793:
	ldrb	r0, [r1, #0x5]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x5
	bls	.LCB8215
	bl	.L759	@far jump
.LCB8215:
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	ldrh	r4, [r2]
	cmp	r0, r4
	bne	.L793	@cond_branch
	bl	.L759	@ far jump
.L1001:
	.align	2, 0
.L1000:
	.word	gDisableStructs
	.word	gEffectBattler
	.word	gBattleStruct
	.word	gCurrentMove
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleScripting
	.word	gBattleCommunication
	.word	gTrappingMoves
.L803:
	ldr	r4, .L1002
	ldrh	r1, [r4, #0x2e]
	sub	r1, r1, #0xe
	mov	r0, #0x8
	mov	r2, r8
	mov	r3, #0x0
	bl	ChangeStatBuffs
	add	r1, r0, #0
	cmp	r1, #0
	beq	.LCB8257
	bl	.L924	@far jump
.LCB8257:
	ldrh	r0, [r4, #0x2e]
	strb	r0, [r4, #0x10]
	strb	r1, [r4, #0x11]
	ldr	r4, .L1002+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1002+0x8
	bl	.L927	@ far jump
.L1003:
	.align	2, 0
.L1002:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StatUp
.L812:
	mov	r0, #0x78
	neg	r0, r0
	ldr	r4, .L1004
	ldrh	r1, [r4, #0x2e]
	sub	r1, r1, #0x15
	mov	r2, r8
	mov	r3, #0x0
	bl	ChangeStatBuffs
	add	r1, r0, #0
	cmp	r1, #0
	beq	.LCB8292
	bl	.L924	@far jump
.LCB8292:
	ldrh	r0, [r4, #0x2e]
	strb	r0, [r4, #0x10]
	strb	r1, [r4, #0x11]
	ldr	r4, .L1004+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1004+0x8
	bl	.L927	@ far jump
.L1005:
	.align	2, 0
.L1004:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StatDown
.L821:
	ldr	r4, .L1006
	ldrh	r1, [r4, #0x2e]
	sub	r1, r1, #0x26
	mov	r0, #0x10
	mov	r2, r8
	mov	r3, #0x0
	bl	ChangeStatBuffs
	add	r1, r0, #0
	cmp	r1, #0
	beq	.LCB8325
	bl	.L924	@far jump
.LCB8325:
	ldrh	r0, [r4, #0x2e]
	strb	r0, [r4, #0x10]
	strb	r1, [r4, #0x11]
	ldr	r4, .L1006+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1006+0x8
	bl	.L927	@ far jump
.L1007:
	.align	2, 0
.L1006:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StatUp
.L830:
	mov	r0, #0x70
	neg	r0, r0
	ldr	r4, .L1008
	ldrh	r1, [r4, #0x2e]
	sub	r1, r1, #0x2d
	mov	r2, r8
	mov	r3, #0x0
	bl	ChangeStatBuffs
	add	r1, r0, #0
	cmp	r1, #0
	beq	.LCB8360
	bl	.L924	@far jump
.LCB8360:
	ldrh	r0, [r4, #0x2e]
	strb	r0, [r4, #0x10]
	strb	r1, [r4, #0x11]
	ldr	r4, .L1008+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1008+0x8
	bl	.L927	@ far jump
.L1009:
	.align	2, 0
.L1008:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StatDown
.L833:
	ldr	r0, .L1010
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mov	r2, r1
	mul	r2, r2, r0
	ldr	r0, .L1010+0x4
	add	r0, r0, #0x54
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L1010+0x8
	ldr	r3, .L1010
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0, #0x1b]
	ldr	r1, .L1010+0xc
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L1010+0x10
	ldrh	r1, [r1]
	strh	r1, [r0]
	bl	.L924	@ far jump
.L1011:
	.align	2, 0
.L1010:
	.word	gEffectBattler
	.word	gBattleMons
	.word	gDisableStructs
	.word	gLockedMoves
	.word	gCurrentMove
.L834:
	ldr	r0, .L1012
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mov	r2, r1
	mul	r2, r2, r0
	ldr	r0, .L1012+0x4
	add	r0, r0, #0x54
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L924	@ far jump
.L1013:
	.align	2, 0
.L1012:
	.word	gBattlerAttacker
	.word	gBattleMons
.L835:
	ldr	r4, .L1014
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8456
	bl	.L924	@far jump
.LCB8456:
	ldr	r5, .L1014+0x4
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L837	@cond_branch
	ldr	r0, [r4]
	ldr	r1, .L1014+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L839	@cond_branch
	bl	.L924	@ far jump
.L1015:
	.align	2, 0
.L1014:
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	0xa3f0902
.L837:
	ldr	r0, [r4]
	ldr	r1, .L1016
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L839	@cond_branch
	ldr	r0, .L1016+0x4
	add	r0, r0, #0x19
	add	r0, r6, r0
	ldrb	r1, [r0]
	ldr	r3, .L1016+0x8
	ldr	r2, .L1016+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB8510
	bl	.L924	@far jump
.LCB8510:
.L839:
	ldr	r2, .L1016+0x10
	ldr	r1, .L1016+0x14
	ldrb	r0, [r1]
	mov	r4, #0x5c
	mul	r0, r0, r4
	add	r5, r0, r2
	ldrh	r0, [r5, #0x30]
	add	r7, r1, #0
	cmp	r0, #0
	beq	.L841	@cond_branch
	ldrh	r0, [r5, #0x20]
	cmp	r0, #0x3c
	bne	.L841	@cond_branch
	bl	BattleScriptPushCursor
	ldr	r1, .L1016+0x18
	ldr	r0, .L1016+0x1c
	str	r0, [r1]
	ldr	r1, .L1016+0x20
	ldrb	r0, [r7]
	mul	r0, r0, r4
	ldr	r4, .L1016+0x10
	add	r0, r0, r4
	ldrh	r0, [r0, #0x20]
	strh	r0, [r1]
	ldrb	r0, [r7]
	ldrh	r1, [r1]
	bl	RecordAbilityBattle
	bl	.L759	@ far jump
.L1017:
	.align	2, 0
.L1016:
	.word	0xa3f0902
	.word	gWishFutureKnock
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_NoItemSteal
	.word	gLastUsedAbility
.L841:
	ldr	r0, .L1018
	mov	r9, r0
	ldrb	r1, [r0]
	mov	r2, #0x5c
	mov	sl, r2
	mov	r0, sl
	mul	r0, r0, r1
	ldr	r3, .L1018+0x4
	add	r0, r0, r3
	ldrh	r0, [r0, #0x30]
	mov	r8, r0
	cmp	r0, #0
	beq	.LCB8579
	bl	.L924	@far jump
.LCB8579:
	ldrb	r0, [r7]
	mov	r4, sl
	mul	r4, r4, r0
	add	r0, r4, #0
	add	r4, r0, r3
	ldrh	r2, [r4, #0x30]
	add	r3, r2, #0
	cmp	r3, #0xcd
	bne	.LCB8589
	bl	.L924	@far jump
.LCB8589:
	add	r0, r2, #0
	sub	r0, r0, #0x84
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xb
	bhi	.LCB8595
	bl	.L924	@far jump
.LCB8595:
	cmp	r3, #0
	bne	.LCB8597
	bl	.L924	@far jump
.LCB8597:
	ldr	r5, .L1018+0x8
	ldr	r6, .L1018+0xc
	ldr	r0, [r6]
	lsl	r1, r1, #0x1
	add	r0, r0, #0xcc
	add	r0, r0, r1
	strh	r2, [r0]
	ldrh	r0, [r4, #0x30]
	strh	r0, [r5]
	ldrb	r0, [r7]
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r2, .L1018+0x4
	add	r0, r0, r2
	mov	r3, r8
	strh	r3, [r0, #0x30]
	ldrb	r0, [r7]
	bl	CheckSetUnburden
	ldr	r0, .L1018+0x10
	ldr	r0, [r0]
	ldr	r2, [r0, #0x4]
	mov	r4, r9
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x5
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L1018+0x14
	mov	r1, r9
	ldrb	r0, [r1]
	strb	r0, [r4]
	str	r5, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	mov	r2, r9
	ldrb	r0, [r2]
	bl	MarkBattlerForControllerExec
	ldrb	r0, [r7]
	strb	r0, [r4]
	ldrb	r0, [r7]
	mov	r3, sl
	mul	r3, r3, r0
	add	r0, r3, #0
	ldr	r1, .L1018+0x4
	add	r1, r1, #0x30
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
	ldr	r4, .L1018+0x18
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1018+0x1c
	str	r0, [r4]
	ldr	r1, [r6]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r1, r1, #0xc4
	add	r1, r1, r0
	mov	r4, r8
	strh	r4, [r1]
	bl	.L759	@ far jump
.L1019:
	.align	2, 0
.L1018:
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gLastUsedItem
	.word	gBattleStruct
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ItemSteal
.L846:
	ldr	r3, .L1020
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mov	r2, r1
	mul	r2, r2, r0
	ldr	r0, .L1020+0x4
	add	r0, r0, #0x54
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L1020+0x8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L1020+0xc
	ldrb	r1, [r1]
	strb	r1, [r0, #0x17]
	b	.L924
.L1021:
	.align	2, 0
.L1020:
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gDisableStructs
	.word	gBattlerAttacker
.L847:
	ldr	r0, .L1022
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mov	r2, r1
	mul	r2, r2, r0
	ldr	r0, .L1022+0x4
	add	r0, r0, #0x54
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L924
.L1023:
	.align	2, 0
.L1022:
	.word	gBattlerTarget
	.word	gBattleMons
.L848:
	ldr	r4, .L1024
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1024+0x4
	bl	.L927	@ far jump
.L1025:
	.align	2, 0
.L1024:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AllStatsUp
.L849:
	ldr	r4, .L1026
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1026+0x4
	bl	.L927	@ far jump
.L1027:
	.align	2, 0
.L1026:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_RapidSpinAway
.L850:
	ldr	r5, .L1028
	ldrb	r0, [r5]
	mov	r6, #0x5c
	mul	r0, r0, r6
	ldr	r3, .L1028+0x4
	add	r3, r3, #0x50
	add	r4, r0, r3
	ldr	r2, .L1028+0x8
	ldr	r0, .L1028+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r4]
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB8804
	b	.L924	@long jump
.LCB8804:
	bic	r1, r1, r2
	str	r1, [r4]
	ldr	r4, .L1028+0x10
	ldrb	r0, [r5]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r3
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r4, .L1028+0x14
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1028+0x18
	b	.L927
.L1029:
	.align	2, 0
.L1028:
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TargetPRLZHeal
.L853:
	ldr	r4, .L1030
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1030+0x4
	b	.L927
.L1031:
	.align	2, 0
.L1030:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AtkDefDown
.L854:
	ldr	r4, .L1032
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1032+0x4
	b	.L927
.L1033:
	.align	2, 0
.L1032:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_DefSpDefDown
.L855:
	ldr	r1, .L1034
	ldr	r0, .L1034+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	bge	.L856	@cond_branch
	add	r0, r0, #0x3
.L856:
	asr	r0, r0, #0x2
	str	r0, [r1]
	cmp	r0, #0
	bne	.L857	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L857:
	ldr	r4, .L1034+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L1034+0xc
	ldr	r0, .L1034+0x10
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	b	.L927
.L1035:
	.align	2, 0
.L1034:
	.word	gBattleMoveDamage
	.word	gHpDealt
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleScripting
.L858:
	ldr	r4, .L1036
	ldr	r0, .L1036+0x4
	ldr	r0, [r0]
	mov	r1, #0x3
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L859	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L859:
	ldr	r4, .L1036+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L1036+0xc
	ldr	r0, .L1036+0x10
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	b	.L927
.L1037:
	.align	2, 0
.L1036:
	.word	gBattleMoveDamage
	.word	gHpDealt
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleScripting
.L860:
	ldr	r2, .L1038
	ldr	r0, .L1038+0x4
	ldr	r0, [r0]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	str	r0, [r2]
	cmp	r0, #0
	bne	.L861	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L861:
	ldr	r4, .L1038+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1038+0xc
	b	.L927
.L1039:
	.align	2, 0
.L1038:
	.word	gBattleMoveDamage
	.word	gHpDealt
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveEffectRecoil
.L862:
	ldr	r4, .L1040
	ldr	r0, .L1040+0x4
	ldr	r0, [r0]
	mov	r1, #0x3
	bl	__divsi3
	str	r0, [r4, #0x28]
	cmp	r0, #0
	bne	.L863	@cond_branch
	mov	r0, #0x1
	str	r0, [r4, #0x28]
.L863:
	ldr	r4, .L1040+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1040+0xc
	b	.L927
.L1041:
	.align	2, 0
.L1040:
	.word	gBattleScripting
	.word	gHpDealt
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveEffectRecoilWithStatus
.L864:
	ldr	r1, .L1042
	ldrb	r0, [r1]
	mov	r5, #0x5c
	mul	r0, r0, r5
	ldr	r4, .L1042+0x4
	add	r4, r4, #0x54
	add	r2, r0, r4
	ldr	r1, [r2]
	mov	r0, #0xc0
	lsl	r0, r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB9030
	b	.L924	@long jump
.LCB9030:
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	orr	r1, r1, r0
	str	r1, [r2]
	ldr	r1, .L1042+0x8
	ldr	r2, .L1042
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L1042+0xc
	ldrh	r1, [r1]
	strh	r1, [r0]
	bl	Random
	ldr	r3, .L1042
	ldrb	r1, [r3]
	mov	r2, r1
	mul	r2, r2, r5
	add	r2, r2, r4
	mov	r1, #0x1
	and	r1, r1, r0
	add	r1, r1, #0x2
	lsl	r1, r1, #0xa
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L759
.L1043:
	.align	2, 0
.L1042:
	.word	gEffectBattler
	.word	gBattleMons
	.word	gLockedMoves
	.word	gCurrentMove
.L867:
	ldr	r4, .L1044
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1044+0x4
	b	.L927
.L1045:
	.align	2, 0
.L1044:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SAtkDown2
.L868:
	mov	r5, #0x0
	ldr	r4, .L1046
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	ldr	r1, .L1046+0x4
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldr	r4, .L1046+0x8
	cmp	r0, #0x6
	bne	.L870	@cond_branch
	ldr	r3, .L1046
	mov	r2, #0x5c
.L871:
	add	r5, r5, #0x1
	cmp	r5, #0x7
	bgt	.L870	@cond_branch
	ldrb	r0, [r3]
	mul	r0, r0, r2
	add	r0, r5, r0
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x6
	beq	.L871	@cond_branch
.L870:
	ldr	r0, .L1046
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r4, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L876	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB9146
	b	.L759	@long jump
.LCB9146:
.L876:
	cmp	r5, #0x8
	bne	.LCB9149
	b	.L759	@long jump
.LCB9149:
	mov	r5, #0x0
	ldr	r1, .L1046+0xc
	mov	r8, r1
	ldr	r1, .L1046
	mov	r7, #0x5c
	ldr	r6, .L1046+0x10
	mov	r4, #0x6
.L880:
	ldrb	r0, [r1]
	mul	r0, r0, r7
	add	r0, r5, r0
	add	r0, r0, r6
	strb	r4, [r0]
	add	r5, r5, #0x1
	cmp	r5, #0x7
	ble	.L880	@cond_branch
	mov	r2, r8
	ldr	r0, [r2]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1046+0x14
	mov	r3, r8
	str	r0, [r3]
	b	.L759
.L1047:
	.align	2, 0
.L1046:
	.word	gEffectBattler
	.word	gBattleMons
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
	.word	gBattleMons+0x18
	.word	BattleScript_MoveEffectClearSmog
.L882:
	ldr	r4, .L1048
	ldrb	r0, [r4]
	bl	IsBattlerGrounded
	cmp	r0, #0
	beq	.LCB9202
	b	.L759	@long jump
.LCB9202:
	ldr	r3, .L1048+0x4
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0xe
	orr	r0, r0, r2
	str	r0, [r1]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r0, [r1]
	ldr	r2, .L1048+0x8
	and	r0, r0, r2
	str	r0, [r1]
	ldr	r4, .L1048+0xc
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1048+0x10
	b	.L927
.L1049:
	.align	2, 0
.L1048:
	.word	gBattlerTarget
	.word	gStatuses3
	.word	-0x4800041
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveEffectSmackDown
.L884:
	ldr	r5, .L1050
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB9249
	b	.L759	@long jump
.LCB9249:
	ldrb	r0, [r5]
	eor	r0, r0, r4
	bl	GetBattlerAbility
	cmp	r0, #0x62
	bne	.LCB9258
	b	.L759	@long jump
.LCB9258:
	ldr	r0, .L1050+0x4
	ldrb	r1, [r5]
	eor	r1, r1, r4
	strb	r1, [r0, #0x17]
	ldr	r3, .L1050+0x8
	ldr	r2, .L1050+0xc
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2a]
	lsr	r0, r0, #0x4
	str	r0, [r3]
	cmp	r0, #0
	bne	.L886	@cond_branch
	mov	r0, #0x1
	str	r0, [r3]
.L886:
	ldr	r1, .L1050+0x10
	ldr	r0, .L1050+0x14
	str	r0, [r1]
	b	.L759
.L1051:
	.align	2, 0
.L1050:
	.word	gBattlerTarget
	.word	gBattleScripting
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveEffectFlameBurst
.L887:
	ldr	r6, .L1052
	ldr	r5, .L1052+0x4
	ldrb	r1, [r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L889	@cond_branch
	add	r0, r1, #0
	bl	GetBattlerSide
	ldr	r4, .L1052+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L889	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L889	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L889	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L889	@cond_branch
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1e
	cmp	r0, #0
	blt	.L889	@cond_branch
	lsl	r0, r1, #0x1d
	cmp	r0, #0
	blt	.L889	@cond_branch
	lsl	r0, r1, #0x1c
	cmp	r0, #0
	blt	.LCB9379
	b	.L759	@long jump
.LCB9379:
.L889:
	ldr	r6, .L1052
	ldr	r4, .L1052+0x4
	ldrb	r1, [r4]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	ldr	r5, .L1052+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r5
	ldr	r1, [r0]
	ldr	r2, .L1052+0xc
	and	r1, r1, r2
	str	r1, [r0]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r5
	ldr	r1, [r0]
	ldr	r2, .L1052+0x10
	and	r1, r1, r2
	str	r1, [r0]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r5
	ldr	r1, [r0]
	ldr	r2, .L1052+0x14
	and	r1, r1, r2
	str	r1, [r0]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r5
	ldr	r1, [r0]
	ldr	r2, .L1052+0x18
	and	r1, r1, r2
	str	r1, [r0]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, .L1052+0x1c
	ldrh	r1, [r0]
	mov	r0, #0xb6
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.LCB9478
	b	.L759	@long jump
.LCB9478:
	ldr	r4, .L1052+0x20
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1052+0x24
	b	.L927
.L1053:
	.align	2, 0
.L1052:
	.word	gProtectStructs
	.word	gBattlerTarget
	.word	gSideStatuses
	.word	-0x80001
	.word	-0x40001
	.word	-0x100001
	.word	-0x200001
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveEffectFeint
.L891:
	ldr	r2, .L1054
	ldr	r0, [r2]
	mov	r3, #0xae
	lsl	r3, r3, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r4, .L1054+0x4
	strb	r1, [r4, #0x10]
	mov	r5, #0x1
	mov	r7, #0x5c
	ldr	r0, .L1054+0x8
	mov	ip, r0
	add	r1, r2, #0
	mov	r9, r1
	mov	r8, r3
.L895:
	ldr	r2, .L1054+0xc
	ldrb	r0, [r2]
	mul	r0, r0, r7
	add	r0, r5, r0
	add	r0, r0, ip
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	add	r3, r5, #0x1
	mov	sl, r3
	cmp	r0, #0x6
	ble	.L894	@cond_branch
	ldr	r6, .L1054+0x10
	ldrb	r0, [r6]
	mul	r0, r0, r7
	add	r0, r5, r0
	add	r0, r0, ip
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	beq	.L894	@cond_branch
	mov	r4, r9
	ldr	r2, [r4]
	add	r2, r2, r8
	ldr	r1, .L1054+0x14
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, [r4]
	add	r1, r1, r8
	add	r1, r1, r5
	ldr	r2, .L1054+0xc
	ldrb	r0, [r2]
	mul	r0, r0, r7
	add	r0, r5, r0
	add	r0, r0, ip
	ldrb	r0, [r0]
	sub	r0, r0, #0x6
	strb	r0, [r1]
	ldrb	r0, [r6]
	mul	r0, r0, r7
	add	r0, r5, r0
	add	r0, r0, ip
	ldr	r1, [r4]
	add	r1, r1, r8
	add	r1, r1, r5
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r1]
	add	r0, r0, r1
	cmp	r0, #0xc
	ble	.L898	@cond_branch
	ldr	r4, .L1054
	mov	r2, #0xae
	lsl	r2, r2, #0x2
	ldr	r3, .L1054+0x8
.L899:
	ldr	r1, [r4]
	add	r1, r1, r2
	add	r1, r1, r5
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r7
	add	r1, r5, r1
	add	r1, r1, r3
	ldr	r0, [r4]
	add	r0, r0, r2
	add	r0, r0, r5
	ldrb	r1, [r1, #0]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	ldrb	r0, [r0]
	add	r1, r1, r0
	cmp	r1, #0xc
	bgt	.L899	@cond_branch
.L898:
	ldr	r3, .L1054+0xc
	ldrb	r0, [r3]
	mul	r0, r0, r7
	add	r0, r5, r0
	add	r0, r0, ip
	mov	r1, #0x6
	strb	r1, [r0]
	mov	r4, r9
	ldr	r0, [r4]
	add	r0, r0, r8
	add	r0, r0, r5
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L901	@cond_branch
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0x1
	str	r0, [sp, #0x4]
.L901:
	ldr	r1, .L1054+0x4
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0
	bne	.L902	@cond_branch
	ldr	r2, [sp, #0x4]
	cmp	r2, #0
	beq	.L903	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x26
	strb	r0, [r1, #0x10]
	b	.L894
.L1055:
	.align	2, 0
.L1054:
	.word	gBattleStruct
	.word	gBattleScripting
	.word	gBattleMons+0x18
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBitTable
.L903:
	add	r0, r5, #0
	add	r0, r0, #0xe
	strb	r0, [r1, #0x10]
	b	.L894
.L902:
	ldr	r3, [sp, #0x4]
	cmp	r3, #0
	beq	.L906	@cond_branch
	mov	r0, #0x38
	strb	r0, [r1, #0x10]
	b	.L894
.L906:
	mov	r0, #0x37
	ldr	r4, .L1056
	strb	r0, [r4, #0x10]
.L894:
	mov	r5, sl
	cmp	r5, #0x7
	bgt	.LCB9688
	b	.L895	@long jump
.LCB9688:
	ldr	r1, .L1056+0x4
	ldr	r0, [r1]
	mov	r2, #0xae
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB9701
	b	.L759	@long jump
.LCB9701:
	ldr	r4, .L1056+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1056+0xc
	b	.L927
.L1057:
	.align	2, 0
.L1056:
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SpectralThiefSteal
.L910:
	ldr	r4, .L1058
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1058+0x4
	b	.L927
.L1059:
	.align	2, 0
.L1058:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_VCreateStatLoss
.L911:
	ldr	r0, .L1060
	ldrb	r0, [r0]
	bl	GetBattlerTurnOrderNum
	add	r4, r0, #0
	ldr	r0, .L1060+0x4
	ldrb	r0, [r0]
	bl	GetBattlerTurnOrderNum
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bhi	.LCB9752
	b	.L759	@long jump
.LCB9752:
	ldr	r4, .L1060+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1060+0xc
	b	.L927
.L1061:
	.align	2, 0
.L1060:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveEffectCoreEnforcer
.L913:
	ldr	r2, .L1062
	ldr	r3, .L1062+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	add	r0, r0, #0x23
	mov	r1, #0x2
	strb	r1, [r0]
.L924:
	ldr	r1, .L1062+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	b	.L759
.L1063:
	.align	2, 0
.L1062:
	.word	gDisableStructs
	.word	gEffectBattler
	.word	gBattlescriptCurrInstr
.L914:
	ldr	r4, .L1064
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerHoldEffect
	cmp	r0, #0x77
	beq	.L916	@cond_branch
	ldr	r2, .L1064+0x4
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x30]
	sub	r0, r0, #0x90
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x42
	bhi	.L759	@cond_branch
.L916:
	ldr	r1, .L1064+0x8
	ldr	r4, .L1064+0x4
	ldr	r2, .L1064
	ldrb	r0, [r2]
	mov	r5, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r4
	ldrh	r0, [r0, #0x30]
	strh	r0, [r1]
	ldrb	r0, [r2]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r2]
	bl	CheckSetUnburden
	ldr	r6, .L1064+0xc
	ldr	r3, .L1064
	ldrb	r0, [r3]
	strb	r0, [r6]
	ldrb	r0, [r3]
	mul	r0, r0, r5
	add	r4, r4, #0x30
	add	r0, r0, r4
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r6]
	bl	MarkBattlerForControllerExec
	ldr	r4, .L1064+0x10
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1064+0x14
	b	.L927
.L1065:
	.align	2, 0
.L1064:
	.word	gEffectBattler
	.word	gBattleMons
	.word	gLastUsedItem
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveEffectIncinerate
.L917:
	ldr	r4, .L1066
	ldrb	r1, [r4]
	mov	r5, #0x5c
	mov	r0, r1
	mul	r0, r0, r5
	ldr	r2, .L1066+0x4
	add	r0, r0, r2
	ldrh	r0, [r0, #0x30]
	sub	r0, r0, #0x90
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x42
	bhi	.L759	@cond_branch
	add	r0, r1, #0
	bl	GetBattlerAbility
	cmp	r0, #0x3c
	beq	.L759	@cond_branch
	ldr	r1, .L1066+0x8
	ldrb	r0, [r4]
	mul	r0, r0, r5
	ldr	r3, .L1066+0x4
	add	r0, r0, r3
	ldrh	r0, [r0, #0x30]
	strh	r0, [r1]
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	CheckSetUnburden
	ldr	r4, .L1066+0xc
	ldr	r1, .L1066
	ldrb	r0, [r1]
	strb	r0, [r4]
	ldrb	r0, [r1]
	mul	r0, r0, r5
	ldr	r1, .L1066+0x4
	add	r1, r1, #0x30
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r4, .L1066+0x10
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L1066+0x14
.L927:
	str	r0, [r4]
.L759:
	ldr	r1, .L1066+0x18
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
.L662:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1067:
	.align	2, 0
.L1066:
	.word	gEffectBattler
	.word	gBattleMons
	.word	gLastUsedItem
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveEffectBugBite
	.word	gBattleScripting
.Lfe33:
	.size	 SetMoveEffect,.Lfe33-SetMoveEffect
	.align	2, 0
	.type	 Cmd_seteffectwithchance,function
	.thumb_func
Cmd_seteffectwithchance:
	push	{r4, r5, lr}
	ldr	r0, .L1077
	ldrb	r0, [r0]
	bl	GetBattlerAbility
	cmp	r0, #0x20
	bne	.L1069	@cond_branch
	ldr	r2, .L1077+0x4
	ldr	r0, .L1077+0x8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x6]
	lsl	r4, r0, #0x1
	b	.L1070
.L1078:
	.align	2, 0
.L1077:
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
.L1069:
	ldr	r2, .L1079
	ldr	r0, .L1079+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r4, [r0, #0x6]
.L1070:
	ldr	r3, .L1079+0x8
	ldrh	r2, [r3, #0x2e]
	mov	r5, #0x80
	lsl	r5, r5, #0x8
	add	r0, r5, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1071	@cond_branch
	ldr	r0, .L1079+0xc
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1071	@cond_branch
	ldr	r0, .L1079+0x10
	and	r0, r0, r2
	strh	r0, [r3, #0x2e]
	mov	r0, #0x0
	add	r1, r5, #0
	bl	SetMoveEffect
	b	.L1072
.L1080:
	.align	2, 0
.L1079:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleScripting
	.word	gMoveResultFlags
	.word	0x7fff
.L1071:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r4
	bcs	.L1073	@cond_branch
	ldr	r0, .L1081
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0
	beq	.L1073	@cond_branch
	ldr	r0, .L1081+0x4
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1073	@cond_branch
	cmp	r4, #0x63
	bls	.L1074	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetMoveEffect
	b	.L1072
.L1082:
	.align	2, 0
.L1081:
	.word	gBattleScripting
	.word	gMoveResultFlags
.L1074:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetMoveEffect
	b	.L1072
.L1073:
	ldr	r1, .L1083
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L1072:
	ldr	r1, .L1083+0x4
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	strh	r0, [r1, #0x30]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1084:
	.align	2, 0
.L1083:
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
.Lfe34:
	.size	 Cmd_seteffectwithchance,.Lfe34-Cmd_seteffectwithchance
	.align	2, 0
	.type	 Cmd_seteffectprimary,function
	.thumb_func
Cmd_seteffectprimary:
	push	{lr}
	mov	r0, #0x1
	mov	r1, #0x0
	bl	SetMoveEffect
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 Cmd_seteffectprimary,.Lfe35-Cmd_seteffectprimary
	.align	2, 0
	.type	 Cmd_seteffectsecondary,function
	.thumb_func
Cmd_seteffectsecondary:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetMoveEffect
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 Cmd_seteffectsecondary,.Lfe36-Cmd_seteffectsecondary
	.align	2, 0
	.type	 Cmd_clearstatusfromeffect,function
	.thumb_func
Cmd_clearstatusfromeffect:
	push	{lr}
	ldr	r0, .L1091
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r2, .L1091+0x4
	strb	r0, [r2]
	ldr	r3, .L1091+0x8
	ldrh	r0, [r3, #0x2e]
	cmp	r0, #0x6
	bhi	.L1088	@cond_branch
	ldr	r1, .L1091+0xc
	ldrb	r2, [r2]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, #0x50
	b	.L1090
.L1092:
	.align	2, 0
.L1091:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleScripting
	.word	gBattleMons
.L1088:
	ldr	r1, .L1093
	ldrb	r2, [r2]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, #0x54
.L1090:
	add	r2, r2, r1
	ldr	r1, .L1093+0x4
	ldrh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	ldr	r3, .L1093+0x8
	mov	r2, #0x0
	strh	r2, [r3, #0x2e]
	ldr	r1, .L1093+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	strh	r2, [r3, #0x30]
	pop	{r0}
	bx	r0
.L1094:
	.align	2, 0
.L1093:
	.word	gBattleMons
	.word	sStatusFlagsForMoveEffects
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe37:
	.size	 Cmd_clearstatusfromeffect,.Lfe37-Cmd_clearstatusfromeffect
	.align	2, 0
	.type	 Cmd_tryfaintmon,function
	.thumb_func
Cmd_tryfaintmon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L1111
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x2]
	add	r6, r0, #0
	cmp	r1, #0
	beq	.L1096	@cond_branch
	ldrb	r0, [r2, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r5, .L1111+0x4
	strb	r0, [r5]
	ldr	r2, .L1111+0x8
	ldr	r1, .L1111+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB10243
	b	.L1102	@long jump
.LCB10243:
	ldr	r1, [r6]
	ldrb	r4, [r1, #0x3]
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	bl	BattleScriptPop
	str	r4, [r6]
	ldrb	r0, [r5]
	bl	GetBattlerSide
	ldr	r1, .L1111+0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r2, .L1111+0x14
	and	r1, r1, r2
	str	r1, [r0]
	b	.L1099
.L1112:
	.align	2, 0
.L1111:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gHitMarker
	.word	gBitTable
	.word	gSideStatuses
	.word	-0x38201
.L1096:
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x1
	bne	.L1100	@cond_branch
	ldr	r1, .L1113
	ldr	r0, .L1113+0x4
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L1113+0x8
	ldrb	r0, [r0]
	mov	r9, r0
	ldr	r4, .L1113+0xc
	b	.L1110
.L1114:
	.align	2, 0
.L1113:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	BattleScript_FaintAttacker
.L1100:
	ldr	r1, .L1115
	ldr	r0, .L1115+0x4
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L1115+0x8
	ldrb	r0, [r0]
	mov	r9, r0
	ldr	r4, .L1115+0xc
.L1110:
	mov	r8, r1
	ldr	r0, .L1115+0x10
	ldrb	r1, [r0]
	ldr	r2, .L1115+0x14
	mov	r7, r8
	ldrb	r3, [r7]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r2, [r0]
	and	r1, r1, r2
	cmp	r1, #0
	beq	.LCB10334
	b	.L1102	@long jump
.LCB10334:
	ldr	r1, .L1115+0x18
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.LCB10343
	b	.L1102	@long jump
.LCB10343:
	ldr	r5, .L1115+0x1c
	lsl	r1, r2, #0x1c
	ldr	r0, [r5]
	orr	r0, r0, r1
	str	r0, [r5]
	ldr	r0, [r6]
	add	r0, r0, #0x7
	bl	BattleScriptPush
	str	r4, [r6]
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1103	@cond_branch
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	orr	r0, r0, r1
	str	r0, [r5]
	ldr	r1, .L1115+0x20
	ldrb	r0, [r1]
	cmp	r0, #0xfe
	bhi	.L1104	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
.L1104:
	ldrb	r0, [r7]
	bl	AdjustFriendshipOnBattleFaint
	b	.L1105
.L1116:
	.align	2, 0
.L1115:
	.word	gActiveBattler
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	BattleScript_FaintTarget
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons
	.word	gHitMarker
	.word	gBattleResults
.L1103:
	ldr	r4, .L1117
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0xfe
	bhi	.L1106	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r4, #0x1]
.L1106:
	ldr	r1, .L1117+0x4
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1117+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	strh	r0, [r4, #0x20]
.L1105:
	ldr	r2, .L1117+0xc
	ldr	r1, [r2]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1107	@cond_branch
	ldr	r6, .L1117+0x10
	ldr	r0, .L1117+0x14
	ldrb	r0, [r0]
	mov	r5, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L1107	@cond_branch
	mov	r0, #0x41
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	ldr	r4, .L1117+0x18
	ldr	r0, [r4]
	bl	BattleScriptPush
	ldr	r1, .L1117+0x1c
	mov	r0, r9
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2a]
	str	r0, [r1]
	ldr	r0, .L1117+0x20
	str	r0, [r4]
.L1107:
	ldr	r1, .L1117+0x24
	ldr	r6, .L1117+0x28
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB10470
	b	.L1099	@long jump
.LCB10470:
	ldr	r0, .L1117+0xc
	ldr	r5, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r5, r5, r0
	cmp	r5, #0
	beq	.LCB10477
	b	.L1099	@long jump
.LCB10477:
	ldr	r3, .L1117+0x14
	mov	r8, r3
	ldrb	r0, [r3]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L1099	@cond_branch
	ldr	r0, .L1117+0x10
	mov	r9, r0
	mov	r2, r8
	ldrb	r1, [r2]
	mov	r7, #0x5c
	mov	r2, r1
	mul	r2, r2, r7
	add	r0, r2, r0
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L1099	@cond_branch
	ldr	r0, .L1117+0x2c
	ldrh	r0, [r0]
	cmp	r0, #0xa5
	beq	.L1099	@cond_branch
	ldr	r0, .L1117+0x30
	ldr	r0, [r0]
	add	r0, r1, r0
	add	r0, r0, #0x7f
	ldrb	r4, [r0]
	add	r0, r4, r2
	mov	r6, r9
	add	r6, r6, #0x25
	add	r0, r0, r6
	strb	r5, [r0]
	ldr	r5, .L1117+0x18
	ldr	r0, [r5]
	bl	BattleScriptPush
	ldr	r0, .L1117+0x34
	str	r0, [r5]
	ldr	r5, .L1117+0x38
	mov	r3, r8
	ldrb	r0, [r3]
	strb	r0, [r5]
	add	r1, r4, #0
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r5]
	mul	r0, r0, r7
	add	r0, r0, r6
	add	r0, r0, r4
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L1117+0x3c
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	lsl	r4, r4, #0x1
	mov	r2, r8
	ldrb	r0, [r2]
	mul	r0, r0, r7
	add	r0, r4, r0
	mov	r2, r9
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	mov	r3, r8
	ldrb	r0, [r3]
	mul	r0, r0, r7
	add	r4, r4, r0
	add	r4, r4, r2
	ldrh	r0, [r4]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	b	.L1099
.L1118:
	.align	2, 0
.L1117:
	.word	gBattleResults
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gHitMarker
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattleMoveDamage
	.word	BattleScript_DestinyBondTakesLife
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gCurrentMove
	.word	gBattleStruct
	.word	BattleScript_GrudgeTakesPp
	.word	gActiveBattler
	.word	gBattleTextBuff1
.L1102:
	ldr	r0, [r6]
	add	r0, r0, #0x7
	str	r0, [r6]
.L1099:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 Cmd_tryfaintmon,.Lfe38-Cmd_tryfaintmon
	.align	2, 0
	.type	 Cmd_dofaintanimation,function
	.thumb_func
Cmd_dofaintanimation:
	push	{r4, r5, lr}
	ldr	r0, .L1121
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1120	@cond_branch
	ldr	r5, .L1121+0x4
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L1121+0x8
	strb	r0, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitFaintAnimation
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L1120:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1122:
	.align	2, 0
.L1121:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe39:
	.size	 Cmd_dofaintanimation,.Lfe39-Cmd_dofaintanimation
	.align	2, 0
	.type	 Cmd_cleareffectsonfaint,function
	.thumb_func
Cmd_cleareffectsonfaint:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L1127
	ldr	r5, [r0]
	cmp	r5, #0
	bne	.L1124	@cond_branch
	ldr	r0, .L1127+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L1127+0x8
	strb	r0, [r4]
	ldr	r0, .L1127+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1126	@cond_branch
	ldr	r2, .L1127+0x10
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.L1125	@cond_branch
.L1126:
	ldr	r1, .L1127+0x10
	ldrb	r0, [r4]
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	str	r5, [r0]
	ldrb	r0, [r4]
	mul	r0, r0, r2
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1125:
	bl	FaintClearSetData
	ldr	r1, .L1127+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L1124:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1128:
	.align	2, 0
.L1127:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gBattleMons
.Lfe40:
	.size	 Cmd_cleareffectsonfaint,.Lfe40-Cmd_cleareffectsonfaint
	.align	2, 0
	.type	 Cmd_jumpifstatus,function
	.thumb_func
Cmd_jumpifstatus:
	push	{r4, r5, lr}
	ldr	r5, .L1132
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [r5]
	ldrb	r4, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	add	r4, r4, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	add	r4, r4, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	add	r4, r4, r1
	ldrb	r3, [r2, #0x6]
	ldrb	r1, [r2, #0x7]
	lsl	r1, r1, #0x8
	add	r3, r3, r1
	ldrb	r1, [r2, #0x8]
	lsl	r1, r1, #0x10
	add	r3, r3, r1
	ldrb	r1, [r2, #0x9]
	lsl	r1, r1, #0x18
	add	r3, r3, r1
	ldr	r2, .L1132+0x4
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r0, r2, #0
	add	r0, r0, #0x50
	add	r0, r1, r0
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1130	@cond_branch
	add	r0, r1, r2
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L1130	@cond_branch
	str	r3, [r5]
	b	.L1131
.L1133:
	.align	2, 0
.L1132:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.L1130:
	ldr	r1, .L1134
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L1131:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1135:
	.align	2, 0
.L1134:
	.word	gBattlescriptCurrInstr
.Lfe41:
	.size	 Cmd_jumpifstatus,.Lfe41-Cmd_jumpifstatus
	.align	2, 0
	.type	 Cmd_jumpifstatus2,function
	.thumb_func
Cmd_jumpifstatus2:
	push	{r4, r5, lr}
	ldr	r5, .L1139
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [r5]
	ldrb	r4, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	add	r4, r4, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	add	r4, r4, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	add	r4, r4, r1
	ldrb	r3, [r2, #0x6]
	ldrb	r1, [r2, #0x7]
	lsl	r1, r1, #0x8
	add	r3, r3, r1
	ldrb	r1, [r2, #0x8]
	lsl	r1, r1, #0x10
	add	r3, r3, r1
	ldrb	r1, [r2, #0x9]
	lsl	r1, r1, #0x18
	add	r3, r3, r1
	ldr	r2, .L1139+0x4
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r0, r2, #0
	add	r0, r0, #0x54
	add	r0, r1, r0
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1137	@cond_branch
	add	r0, r1, r2
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L1137	@cond_branch
	str	r3, [r5]
	b	.L1138
.L1140:
	.align	2, 0
.L1139:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.L1137:
	ldr	r1, .L1141
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L1138:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1142:
	.align	2, 0
.L1141:
	.word	gBattlescriptCurrInstr
.Lfe42:
	.size	 Cmd_jumpifstatus2,.Lfe42-Cmd_jumpifstatus2
	.align	2, 0
	.type	 Cmd_jumpifability,function
	.thumb_func
Cmd_jumpifability:
	push	{r4, r5, r6, lr}
	mov	r4, #0x0
	ldr	r0, .L1155
	ldr	r1, [r0]
	ldrb	r2, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	add	r6, r2, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x8
	beq	.L1147	@cond_branch
	cmp	r0, #0x9
	beq	.L1149	@cond_branch
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	bl	GetBattlerAbility
	cmp	r0, r6
	bne	.L1144	@cond_branch
	b	.L1154
.L1156:
	.align	2, 0
.L1155:
	.word	gBattlescriptCurrInstr
.L1147:
	ldr	r0, .L1157
	ldrb	r0, [r0]
	add	r1, r6, #0
	bl	IsAbilityOnSide
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L1144	@cond_branch
	sub	r5, r5, #0x1
	b	.L1154
.L1158:
	.align	2, 0
.L1157:
	.word	gBattlerAttacker
.L1149:
	ldr	r0, .L1159
	ldrb	r0, [r0]
	add	r1, r6, #0
	bl	IsAbilityOnOpposingSide
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L1144	@cond_branch
	sub	r5, r5, #0x1
	mov	r4, #0x1
.L1144:
	cmp	r4, #0
	beq	.L1152	@cond_branch
.L1154:
	ldr	r4, .L1159+0x4
	strh	r6, [r4]
	ldr	r3, .L1159+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r3]
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	bl	RecordAbilityBattle
	ldr	r0, .L1159+0xc
	strb	r5, [r0]
	b	.L1153
.L1160:
	.align	2, 0
.L1159:
	.word	gBattlerAttacker
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	gBattlerAbility
.L1152:
	ldr	r1, .L1161
	ldr	r0, [r1]
	add	r0, r0, #0x8
	str	r0, [r1]
.L1153:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1162:
	.align	2, 0
.L1161:
	.word	gBattlescriptCurrInstr
.Lfe43:
	.size	 Cmd_jumpifability,.Lfe43-Cmd_jumpifability
	.align	2, 0
	.type	 Cmd_jumpifsideaffecting,function
	.thumb_func
Cmd_jumpifsideaffecting:
	push	{r4, r5, r6, lr}
	ldr	r0, .L1169
	ldr	r0, [r0]
	ldrb	r4, [r0, #0x1]
	cmp	r4, #0x1
	bne	.L1164	@cond_branch
	ldr	r0, .L1169+0x4
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	b	.L1168
.L1170:
	.align	2, 0
.L1169:
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
.L1164:
	ldr	r0, .L1171
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r4, #0x1
.L1168:
	and	r4, r4, r0
	ldr	r6, .L1171+0x4
	ldr	r3, [r6]
	ldrb	r2, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	add	r5, r1, r0
	ldr	r1, .L1171+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1166	@cond_branch
	str	r5, [r6]
	b	.L1167
.L1172:
	.align	2, 0
.L1171:
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	gSideStatuses
.L1166:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r6]
.L1167:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 Cmd_jumpifsideaffecting,.Lfe44-Cmd_jumpifsideaffecting
	.align	2, 0
	.type	 Cmd_jumpifstat,function
	.thumb_func
Cmd_jumpifstat:
	push	{r4, r5, r6, r7, lr}
	mov	r7, #0x0
	ldr	r4, .L1199
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1199+0x4
	ldr	r3, [r4]
	mov	r1, #0x5c
	mul	r1, r1, r0
	ldrb	r4, [r3, #0x3]
	add	r1, r1, r4
	add	r2, r2, #0x18
	add	r1, r1, r2
	ldrb	r5, [r1]
	ldrb	r4, [r3, #0x4]
	ldrb	r6, [r3, #0x2]
	bl	GetBattlerAbility
	cmp	r0, #0x7e
	bne	.L1174	@cond_branch
	cmp	r6, #0x2
	bne	.L1175	@cond_branch
	mov	r6, #0x3
	b	.L1176
.L1200:
	.align	2, 0
.L1199:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.L1175:
	cmp	r6, #0x3
	bne	.L1176	@cond_branch
	mov	r6, #0x2
.L1176:
	cmp	r4, #0
	bne	.L1178	@cond_branch
	mov	r4, #0xc
	b	.L1174
.L1178:
	cmp	r4, #0xc
	bne	.L1174	@cond_branch
	mov	r4, #0x0
.L1174:
	cmp	r6, #0x5
	bhi	.L1181	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, .L1201
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1202:
	.align	2, 0
.L1201:
	.word	.L1194
	.align	2, 0
	.align	2, 0
.L1194:
	.word	.L1182
	.word	.L1184
	.word	.L1186
	.word	.L1188
	.word	.L1190
	.word	.L1192
.L1182:
	cmp	r5, r4
	bne	.L1181	@cond_branch
	b	.L1198
.L1184:
	cmp	r5, r4
	beq	.L1181	@cond_branch
	b	.L1198
.L1186:
	cmp	r5, r4
	bls	.L1181	@cond_branch
	b	.L1198
.L1188:
	cmp	r5, r4
	bcs	.L1181	@cond_branch
	b	.L1198
.L1190:
	and	r5, r5, r4
	cmp	r5, #0
	beq	.L1181	@cond_branch
	b	.L1198
.L1192:
	and	r5, r5, r4
	cmp	r5, #0
	bne	.L1181	@cond_branch
.L1198:
	add	r7, r7, #0x1
.L1181:
	cmp	r7, #0
	beq	.L1196	@cond_branch
	ldr	r3, .L1203
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r3]
	b	.L1197
.L1204:
	.align	2, 0
.L1203:
	.word	gBattlescriptCurrInstr
.L1196:
	ldr	r1, .L1205
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
.L1197:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1206:
	.align	2, 0
.L1205:
	.word	gBattlescriptCurrInstr
.Lfe45:
	.size	 Cmd_jumpifstat,.Lfe45-Cmd_jumpifstat
	.align	2, 0
	.type	 Cmd_jumpifstatus3condition,function
	.thumb_func
Cmd_jumpifstatus3condition:
	push	{r4, r5, r6, lr}
	ldr	r4, .L1215
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r5, .L1215+0x4
	strb	r0, [r5]
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	add	r6, r1, r0
	ldrb	r1, [r2, #0x7]
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0xa]
	lsl	r0, r0, #0x18
	add	r3, r1, r0
	ldrb	r0, [r2, #0x6]
	cmp	r0, #0
	beq	.L1208	@cond_branch
	ldr	r0, .L1215+0x8
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L1212	@cond_branch
	b	.L1214
.L1216:
	.align	2, 0
.L1215:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gStatuses3
.L1208:
	ldr	r0, .L1217
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L1212	@cond_branch
.L1214:
	str	r3, [r4]
	b	.L1211
.L1218:
	.align	2, 0
.L1217:
	.word	gStatuses3
.L1212:
	add	r0, r2, #0
	add	r0, r0, #0xb
	str	r0, [r4]
.L1211:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 Cmd_jumpifstatus3condition,.Lfe46-Cmd_jumpifstatus3condition
	.align	2, 0
	.type	 Cmd_jumpbasedontype,function
	.thumb_func
Cmd_jumpbasedontype:
	push	{r4, r5, r6, r7, lr}
	ldr	r6, .L1227
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, [r6]
	ldrb	r3, [r2, #0x2]
	add	r4, r3, #0
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	add	r7, r1, r0
	ldrb	r0, [r2, #0x3]
	cmp	r0, #0
	beq	.L1220	@cond_branch
	ldr	r1, .L1227+0x4
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r1, r0, r1
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r3
	beq	.L1222	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, r3
	beq	.L1222	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, r3
	bne	.L1221	@cond_branch
.L1222:
	ldr	r0, .L1227
	str	r7, [r0]
	b	.L1224
.L1228:
	.align	2, 0
.L1227:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.L1221:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r6]
	b	.L1224
.L1220:
	ldr	r1, .L1229
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r1, r0, r1
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L1225	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L1225	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L1225	@cond_branch
	str	r7, [r6]
	b	.L1224
.L1230:
	.align	2, 0
.L1229:
	.word	gBattleMons
.L1225:
	ldr	r1, .L1231
	ldr	r0, [r1]
	add	r0, r0, #0x8
	str	r0, [r1]
.L1224:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1232:
	.align	2, 0
.L1231:
	.word	gBattlescriptCurrInstr
.Lfe47:
	.size	 Cmd_jumpbasedontype,.Lfe47-Cmd_jumpbasedontype
	.align	2, 0
	.globl	GetTeamLevel
	.type	 GetTeamLevel,function
	.thumb_func
GetTeamLevel:
	push	{r4, r5, r6, r7, lr}
	mov	r6, #0x0
	mov	r5, #0x0
.L1234:
	cmp	r5, #0x5
	bhi	.L1235	@cond_branch
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L1249
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1235	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x54
	ldrb	r0, [r0]
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L1234
.L1250:
	.align	2, 0
.L1249:
	.word	gPlayerParty
.L1235:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r6, #0
	bl	__floatsidf
	ldr	r3, .L1251+0x4		@ created by thumb_load_double_from_address
	ldr	r2, .L1251		@ created by thumb_load_double_from_address
	bl	__muldf3
	bl	__fixunsdfsi
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	mov	r6, #0x0
	mov	r5, #0x0
.L1244:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L1251+0x8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1242	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x54
	ldrb	r0, [r0]
	cmp	r0, r7
	bcc	.L1243	@cond_branch
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
.L1243:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L1244	@cond_branch
.L1242:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1252:
	.align	2, 0
.L1251:
	.long 0x3fe99999, 0x9999999a	@ double 8.00000000000000044409e-1
	.word	gPlayerParty
.Lfe48:
	.size	 GetTeamLevel,.Lfe48-GetTeamLevel
	.align	2, 0
	.globl	GetPkmnExpMultiplier
	.type	 GetPkmnExpMultiplier,function
	.thumb_func
GetPkmnExpMultiplier:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	mov	r5, #0x0
	lsr	r6, r0, #0x18
.L1257:
	ldr	r0, .L1261
	lsl	r4, r5, #0x1
	add	r0, r4, r0
	ldrh	r0, [r0]
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1256	@cond_branch
	ldr	r0, .L1261+0x4
	add	r0, r4, r0
	ldrh	r0, [r0]
	cmp	r6, r0
	bcc	.L1256	@cond_branch
	ldr	r0, .L1261+0x8
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1256	@cond_branch
	ldr	r0, .L1261+0xc		@ created by thumb_load_double_from_address
	ldr	r1, .L1261+0x10		@ created by thumb_load_double_from_address
	b	.L1260
.L1262:
	.align	2, 0
.L1261:
	.word	sLevelCapFlags
	.word	sLevelCaps
	.word	gSaveBlock2Ptr
	.long 0x0, 0x0	@ double 0.00000000000000000000e0
.L1256:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x8
	bls	.L1257	@cond_branch
	ldr	r1, .L1263+0x4		@ created by thumb_load_double_from_address
	ldr	r0, .L1263		@ created by thumb_load_double_from_address
.L1260:
	pop	{r4, r5, r6}
	pop	{r2}
	bx	r2
.L1264:
	.align	2, 0
.L1263:
	.long 0x3ff00000, 0x0	@ double 1.00000000000000000000e0
.Lfe49:
	.size	 GetPkmnExpMultiplier,.Lfe49-GetPkmnExpMultiplier
	.align	2, 0
	.type	 Cmd_getexp,function
	.thumb_func
Cmd_getexp:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L1340
	ldr	r0, [r0]
	add	r0, r0, #0x50
	mov	r8, r0
	ldr	r0, .L1340+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L1340+0x8
	strb	r0, [r1]
	ldr	r2, .L1340+0xc
	mov	r1, #0x2
	and	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	add	r1, r1, r2
	ldrb	r6, [r1]
	ldr	r0, .L1340+0x10
	ldrb	r0, [r0, #0x1c]
	cmp	r0, #0x6
	bls	.LCB11724
	bl	.L1266	@far jump
.LCB11724:
	lsl	r0, r0, #0x2
	ldr	r1, .L1340+0x14
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1341:
	.align	2, 0
.L1340:
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
	.word	gBattlerFainted
	.word	gSentPokesToOpponent
	.word	gBattleScripting
	.word	.L1335
	.align	2, 0
	.align	2, 0
.L1335:
	.word	.L1267
	.word	.L1271
	.word	.L1288
	.word	.L1315
	.word	.L1318
	.word	.L1328
	.word	.L1333
.L1267:
	ldr	r4, .L1342
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB11756
	bl	.L1331	@far jump
.LCB11756:
	ldr	r0, .L1342+0x4
	ldr	r0, [r0]
	ldr	r1, .L1342+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB11762
	bl	.L1331	@far jump
.LCB11762:
	ldr	r1, .L1342+0xc
	ldrb	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1c]
	ldr	r0, .L1342+0x10
	ldr	r2, [r0]
	add	r2, r2, #0xd8
	ldr	r3, .L1342+0x14
	ldr	r1, .L1342+0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	bl	.L1266	@ far jump
.L1343:
	.align	2, 0
.L1342:
	.word	gBattlerFainted
	.word	gBattleTypeFlags
	.word	0x63f0982
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gBitTable
	.word	gBattlerPartyIndexes
.L1271:
	mov	r7, #0x0
.L1275:
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L1344
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1274	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1274	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xcd
	beq	.L1274	@cond_branch
	bl	ItemId_GetHoldEffect
.L1274:
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L1275	@cond_branch
	ldr	r4, .L1344+0x4
	ldr	r3, .L1344+0x8
	ldr	r0, .L1344+0xc
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mov	r2, r1
	mul	r2, r2, r0
	add	r2, r2, r3
	ldrh	r1, [r2]
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x15
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0xa]
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mul	r0, r0, r1
	mov	r1, #0x5
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r4, r0, #0
	ldr	r0, .L1344+0x10
	mov	r1, r8
	strh	r4, [r1]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1284	@cond_branch
	ldr	r0, .L1344+0x14
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1284	@cond_branch
	bl	GetPlayerUsableMons
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bhi	.L1283	@cond_branch
.L1284:
	ldr	r1, .L1344+0x18
	lsr	r0, r4, #0x1
	strh	r0, [r1]
	cmp	r0, #0
	bne	.L1286	@cond_branch
	mov	r0, #0x1
	strh	r0, [r1]
	b	.L1286
.L1345:
	.align	2, 0
.L1344:
	.word	gPlayerParty
	.word	gBaseStats
	.word	gBattleMons
	.word	gBattlerFainted
	.word	gSaveBlock2Ptr
	.word	0x864
	.word	gExpShareExp
.L1283:
	ldr	r5, .L1346
	add	r0, r4, #0
	mov	r1, #0x3
	bl	__udivsi3
	strh	r0, [r5]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1286	@cond_branch
	mov	r0, #0x1
	strh	r0, [r5]
.L1286:
	ldr	r1, .L1346+0x4
	ldrb	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strb	r0, [r1, #0x1c]
	ldr	r1, .L1346+0x8
	ldr	r0, [r1]
	strb	r2, [r0, #0x10]
	ldr	r0, [r1]
	add	r0, r0, #0x53
	strb	r6, [r0]
.L1288:
	ldr	r0, .L1346+0xc
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB11954
	b	.L1266	@long jump
.LCB11954:
	ldr	r0, .L1346+0x8
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1346+0x10
	add	r0, r0, r1
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xcd
	bne	.L1290	@cond_branch
	mov	r7, #0x0
	b	.L1291
.L1347:
	.align	2, 0
.L1346:
	.word	gExpShareExp
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gBattleControllerExecFlags
	.word	gPlayerParty
.L1290:
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L1291:
	ldr	r0, .L1348
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x16]
	mov	r0, #0x4
	and	r0, r0, r1
	ldr	r5, .L1348+0x4
	cmp	r0, #0
	bne	.L1292	@cond_branch
	ldr	r0, [r5]
	add	r1, r0, #0
	add	r1, r1, #0x53
	ldrb	r0, [r1]
	mov	r2, #0x1
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L1292	@cond_branch
	lsr	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L1348+0x8
	b	.L1337
.L1349:
	.align	2, 0
.L1348:
	.word	gSaveBlock2Ptr
	.word	gBattleStruct
	.word	gBattleScripting
.L1292:
	ldr	r0, [r5]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1350
	add	r0, r0, r1
	mov	r1, #0x38
	bl	GetMonData
	cmp	r0, #0x64
	bne	.L1294	@cond_branch
	ldr	r1, [r5]
	add	r1, r1, #0x53
	ldrb	r0, [r1]
	lsr	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L1350+0x4
	mov	r2, #0x0
.L1337:
	mov	r0, #0x5
	strb	r0, [r1, #0x1c]
	ldr	r0, .L1350+0x8
	str	r2, [r0]
	b	.L1266
.L1351:
	.align	2, 0
.L1350:
	.word	gPlayerParty
	.word	gBattleScripting
	.word	gBattleMoveDamage
.L1294:
	ldr	r0, .L1352
	ldr	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1296	@cond_branch
	ldr	r2, .L1352+0x4
	ldrh	r0, [r2, #0x2a]
	cmp	r0, #0
	bne	.L1297	@cond_branch
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1296	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xe2
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L1296	@cond_branch
.L1297:
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L1296	@cond_branch
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L1296	@cond_branch
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x11]
	cmp	r0, #0
	bne	.L1296	@cond_branch
	bl	BattleStopLowHpSound
	mov	r0, #0xa2
	lsl	r0, r0, #0x1
	bl	PlayBGM
	ldr	r1, [r5]
	ldrb	r0, [r1, #0x11]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x11]
.L1296:
	ldr	r4, .L1352+0x8
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x10]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L1352+0xc
	add	r0, r0, r5
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.LCB12141
	b	.L1298	@long jump
.LCB12141:
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	add	r0, r0, #0x54
	ldrb	r0, [r0]
	bl	GetPkmnExpMultiplier
	add	r6, r1, #0
	add	r5, r0, #0
	ldr	r0, [r4]
	add	r0, r0, #0x53
	ldrb	r0, [r0]
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1299	@cond_branch
	ldr	r4, .L1352+0x10
	mov	r2, r8
	ldrh	r0, [r2]
	bl	__floatsidf
	add	r3, r6, #0
	add	r2, r5, #0
	bl	__muldf3
	bl	__fixdfsi
	str	r0, [r4]
	mov	r9, r4
	b	.L1300
.L1353:
	.align	2, 0
.L1352:
	.word	gBattleTypeFlags
	.word	gBattleMons
	.word	gBattleStruct
	.word	gPlayerParty
	.word	gBattleMoveDamage
.L1299:
	ldr	r0, .L1354
	str	r1, [r0]
	mov	r9, r0
.L1300:
	ldr	r0, .L1354+0x4
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x16]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1302	@cond_branch
	cmp	r7, #0x19
	bne	.L1301	@cond_branch
	mov	r3, r9
	ldr	r0, [r3]
	cmp	r0, #0
	bne	.L1301	@cond_branch
.L1302:
	ldr	r0, .L1354+0x8
	ldrh	r1, [r0]
	mov	r4, r9
	ldr	r0, [r4]
	add	r0, r0, r1
	str	r0, [r4]
.L1301:
	cmp	r7, #0x28
	bne	.L1304	@cond_branch
	ldr	r4, .L1354
	ldr	r1, [r4]
	mov	r0, #0x96
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
.L1304:
	ldr	r4, .L1354+0xc
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1354+0x10
	add	r0, r0, r1
	bl	IsTradedMon
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1305	@cond_branch
	ldr	r0, .L1354+0x14
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0xf
	and	r1, r1, r2
	add	r5, r0, #0
	cmp	r1, #0
	beq	.L1306	@cond_branch
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0x2
	bls	.L1306	@cond_branch
	ldr	r7, .L1354+0x18
	ldr	r0, .L1354
	mov	r9, r0
	b	.L1308
.L1355:
	.align	2, 0
.L1354:
	.word	gBattleMoveDamage
	.word	gSaveBlock2Ptr
	.word	gExpShareExp
	.word	gBattleStruct
	.word	gPlayerParty
	.word	gBattleTypeFlags
	.word	0x149
.L1306:
	ldr	r4, .L1356
	ldr	r1, [r4]
	mov	r0, #0x96
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	mov	r7, #0xa5
	lsl	r7, r7, #0x1
	mov	r9, r4
	b	.L1308
.L1357:
	.align	2, 0
.L1356:
	.word	gBattleMoveDamage
.L1305:
	ldr	r7, .L1358
	ldr	r5, .L1358+0x4
	ldr	r1, .L1358+0x8
	mov	r9, r1
.L1308:
	ldr	r1, [r5]
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1309	@cond_branch
	ldr	r0, .L1358+0xc
	ldr	r1, .L1358+0x10
	ldr	r4, [r1]
	ldrh	r0, [r0, #0x4]
	add	r5, r1, #0
	ldr	r3, .L1358+0x14
	ldr	r2, .L1358+0x18
	ldrb	r1, [r4, #0x10]
	cmp	r0, r1
	bne	.L1310	@cond_branch
	ldrb	r1, [r2]
	ldr	r0, [r3, #0x8]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1310	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x89
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L1314
.L1359:
	.align	2, 0
.L1358:
	.word	0x149
	.word	gBattleTypeFlags
	.word	gBattleMoveDamage
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBitTable
	.word	gAbsentBattlerFlags
.L1310:
	ldrb	r2, [r2]
	ldr	r0, [r3]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L1312	@cond_branch
	ldr	r0, [r5]
	add	r0, r0, #0x89
	strb	r2, [r0]
	b	.L1314
.L1312:
	ldr	r0, [r5]
	add	r0, r0, #0x89
	mov	r1, #0x2
	b	.L1338
.L1309:
	ldr	r0, .L1360
	ldr	r0, [r0]
	add	r0, r0, #0x89
.L1338:
	strb	r1, [r0]
.L1314:
	ldr	r1, .L1360+0x4
	mov	r2, #0x0
	mov	sl, r2
	mov	r3, #0xfd
	strb	r3, [r1]
	mov	r5, #0x4
	strb	r5, [r1, #0x1]
	ldr	r6, .L1360
	ldr	r2, [r6]
	mov	r4, #0x89
	add	r4, r4, r2
	mov	r8, r4
	ldrb	r0, [r4]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r2, #0x10]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L1360+0x8
	strb	r3, [r1]
	mov	r0, sl
	strb	r0, [r1, #0x1]
	strb	r7, [r1, #0x2]
	mov	r4, #0xff
	lsl	r4, r4, #0x8
	and	r7, r7, r4
	asr	r0, r7, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r1, #0x4]
	ldr	r1, .L1360+0xc
	strb	r3, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	strb	r5, [r1, #0x2]
	mov	r0, #0x5
	strb	r0, [r1, #0x3]
	mov	r3, r9
	ldr	r2, [r3]
	strb	r2, [r1, #0x4]
	add	r0, r2, #0
	and	r0, r0, r4
	asr	r0, r0, #0x8
	strb	r0, [r1, #0x5]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r2
	asr	r0, r0, #0x10
	strb	r0, [r1, #0x6]
	lsr	r2, r2, #0x18
	strb	r2, [r1, #0x7]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r1, #0x8]
	mov	r4, r8
	ldrb	r1, [r4]
	mov	r0, #0xd
	bl	PrepareStringBattle
	ldr	r0, [r6]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1360+0x10
	add	r0, r0, r1
	ldr	r3, .L1360+0x14
	ldr	r1, .L1360+0x18
	ldrb	r2, [r1]
	mov	r1, #0x5c
	mul	r2, r2, r1
	add	r2, r2, r3
	ldrh	r1, [r2]
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x15
	ldrb	r2, [r2, #0x1]
	lsr	r2, r2, #0x3
	bl	MonGainEVs
.L1298:
	ldr	r0, .L1360
	ldr	r1, [r0]
	add	r1, r1, #0x53
	ldrb	r0, [r1]
	lsr	r0, r0, #0x1
	strb	r0, [r1]
	b	.L1317
.L1361:
	.align	2, 0
.L1360:
	.word	gBattleStruct
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gBattleTextBuff3
	.word	gPlayerParty
	.word	gBattleMons
	.word	gBattlerFainted
.L1315:
	ldr	r0, .L1362
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.LCB12512
	b	.L1266	@long jump
.LCB12512:
	ldr	r7, .L1362+0x4
	ldr	r1, [r7]
	ldr	r6, .L1362+0x8
	ldr	r0, [r6]
	add	r0, r0, #0x89
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	mov	r5, #0x82
	lsl	r5, r5, #0x4
	add	r1, r1, r5
	add	r1, r1, r0
	strb	r2, [r1]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L1362+0xc
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1317	@cond_branch
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x38
	bl	GetMonData
	cmp	r0, #0x64
	beq	.L1317	@cond_branch
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	ldr	r1, [r7]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3b
	bl	GetMonData
	ldr	r1, [r7]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1, #0x2]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3c
	bl	GetMonData
	ldr	r1, [r7]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1, #0x4]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3d
	bl	GetMonData
	ldr	r1, [r7]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1, #0x6]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3e
	bl	GetMonData
	ldr	r1, [r7]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1, #0x8]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3f
	bl	GetMonData
	ldr	r1, [r7]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1, #0xa]
	ldr	r4, .L1362+0x10
	ldr	r1, [r6]
	add	r0, r1, #0
	add	r0, r0, #0x89
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldrb	r1, [r1, #0x10]
	ldr	r0, .L1362+0x14
	ldrh	r2, [r0]
	mov	r0, #0x0
	bl	BtlController_EmitExpUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1317:
	ldr	r1, .L1362+0x18
	ldrb	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1c]
	b	.L1266
.L1363:
	.align	2, 0
.L1362:
	.word	gBattleControllerExecFlags
	.word	gBattleResources
	.word	gBattleStruct
	.word	gPlayerParty
	.word	gActiveBattler
	.word	gBattleMoveDamage
	.word	gBattleScripting
.L1318:
	ldr	r0, .L1364
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB12659
	b	.L1266	@long jump
.LCB12659:
	ldr	r1, .L1364+0x4
	ldr	r0, .L1364+0x8
	ldr	r4, [r0]
	add	r0, r4, #0
	add	r0, r0, #0x89
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L1364+0xc
	ldr	r2, [r0]
	ldrb	r3, [r1]
	lsl	r1, r3, #0x9
	mov	r5, #0x82
	lsl	r5, r5, #0x4
	add	r0, r2, r5
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x21
	beq	.LCB12681
	b	.L1320	@long jump
.LCB12681:
	add	r5, r5, #0x1
	add	r0, r2, r5
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0xb
	beq	.LCB12690
	b	.L1320	@long jump
.LCB12690:
	mov	r0, #0xff
	str	r0, [sp]
	ldr	r0, .L1364+0x10
	ldr	r0, [r0]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1321	@cond_branch
	ldr	r0, .L1364+0x14
	lsl	r1, r3, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrb	r4, [r4, #0x10]
	cmp	r0, r4
	bne	.L1321	@cond_branch
	add	r1, r0, #0
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1364+0x18
	add	r0, r0, r1
	add	r1, r3, #0
	bl	HandleLowHpMusicChange
.L1321:
	ldr	r1, .L1364+0x1c
	mov	r3, #0xfd
	strb	r3, [r1]
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
	ldr	r2, .L1364+0x4
	mov	sl, r2
	ldrb	r0, [r2]
	strb	r0, [r1, #0x2]
	ldr	r5, .L1364+0x8
	ldr	r2, [r5]
	ldrb	r0, [r2, #0x10]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r4, .L1364+0x20
	strb	r3, [r4]
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	strb	r0, [r4, #0x2]
	mov	r0, #0x3
	strb	r0, [r4, #0x3]
	ldrb	r0, [r2, #0x10]
	mov	r3, #0x64
	mov	r9, r3
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r2, .L1364+0x18
	mov	r8, r2
	add	r0, r0, r8
	mov	r1, #0x38
	bl	GetMonData
	strb	r0, [r4, #0x4]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r4, #0x5]
	bl	BattleScriptPushCursor
	ldr	r2, .L1364+0x24
	ldr	r1, .L1364+0x28
	ldr	r6, [r5]
	ldrb	r0, [r6, #0x10]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1364+0x2c
	ldr	r0, .L1364+0x30
	str	r0, [r1]
	ldr	r4, .L1364+0x34
	ldr	r0, .L1364+0xc
	ldr	r1, [r0]
	mov	r3, sl
	ldrb	r2, [r3]
	lsl	r2, r2, #0x9
	ldr	r3, .L1364+0x38
	add	r0, r1, r3
	add	r0, r0, r2
	ldrb	r3, [r0]
	ldr	r0, .L1364+0x3c
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	str	r3, [r4]
	ldrb	r0, [r6, #0x10]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	mov	r1, #0x0
	bl	AdjustFriendship
	ldr	r0, .L1364+0x14
	ldr	r1, [r5]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x10]
	cmp	r0, r1
	bne	.L1322	@cond_branch
	ldr	r0, .L1364+0x40
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L1322	@cond_branch
	mov	r2, #0x0
	str	r2, [sp]
	b	.L1323
.L1365:
	.align	2, 0
.L1364:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleResources
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gLeveledUpInBattle
	.word	gBitTable
	.word	gBattlescriptCurrInstr
	.word	BattleScript_LevelUp
	.word	gBattleMoveDamage
	.word	0x822
	.word	0x823
	.word	gBattleMons
.L1322:
	ldr	r2, .L1366
	ldr	r0, .L1366+0x4
	ldr	r1, [r0]
	ldrh	r0, [r2, #0x4]
	ldrb	r1, [r1, #0x10]
	cmp	r0, r1
	bne	.L1323	@cond_branch
	ldr	r0, .L1366+0x8
	add	r0, r0, #0xe2
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L1323	@cond_branch
	ldr	r0, .L1366+0xc
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1323	@cond_branch
	mov	r3, #0x2
	str	r3, [sp]
.L1323:
	ldr	r4, [sp]
	cmp	r4, #0xff
	beq	.L1339	@cond_branch
	ldr	r6, .L1366+0x4
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L1366+0x10
	add	r0, r0, r4
	mov	r1, #0x38
	bl	GetMonData
	ldr	r2, .L1366+0x8
	mov	r1, #0x5c
	ldr	r3, [sp]
	mul	r1, r1, r3
	add	r7, r1, r2
	add	r1, r7, #0
	add	r1, r1, #0x2c
	strb	r0, [r1]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r7, #0x2a]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	strh	r0, [r7, #0x2e]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3b
	bl	GetMonData
	strh	r0, [r7, #0x2]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3c
	bl	GetMonData
	strh	r0, [r7, #0x4]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3d
	bl	GetMonData
	strh	r0, [r7, #0x6]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3e
	bl	GetMonData
	strh	r0, [r7, #0x8]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3f
	bl	GetMonData
	strh	r0, [r7, #0xa]
	ldr	r1, .L1366+0x14
	ldr	r4, [sp]
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	bge	.L1339	@cond_branch
	ldrh	r1, [r7, #0x2]
	ldrh	r0, [r7, #0x4]
	strh	r0, [r7, #0x2]
	strh	r1, [r7, #0x4]
	b	.L1339
.L1367:
	.align	2, 0
.L1366:
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	gPlayerParty
	.word	gStatuses3
.L1320:
	ldr	r1, .L1368
	mov	r0, #0x0
	str	r0, [r1]
.L1339:
	ldr	r1, .L1368+0x4
	mov	r0, #0x5
	strb	r0, [r1, #0x1c]
	b	.L1266
.L1369:
	.align	2, 0
.L1368:
	.word	gBattleMoveDamage
	.word	gBattleScripting
.L1328:
	ldr	r0, .L1370
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L1329	@cond_branch
	ldr	r1, .L1370+0x4
	mov	r0, #0x3
	strb	r0, [r1, #0x1c]
	b	.L1266
.L1371:
	.align	2, 0
.L1370:
	.word	gBattleMoveDamage
	.word	gBattleScripting
.L1329:
	ldr	r2, .L1372
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x10]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x10]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0x5
	bhi	.L1331	@cond_branch
	ldr	r1, .L1372+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0x1c]
	b	.L1266
.L1373:
	.align	2, 0
.L1372:
	.word	gBattleStruct
	.word	gBattleScripting
.L1331:
	ldr	r1, .L1374
	mov	r0, #0x6
	strb	r0, [r1, #0x1c]
	b	.L1266
.L1375:
	.align	2, 0
.L1374:
	.word	gBattleScripting
.L1333:
	ldr	r0, .L1376
	ldr	r4, [r0]
	cmp	r4, #0
	bne	.L1266	@cond_branch
	ldr	r3, .L1376+0x4
	ldr	r2, .L1376+0x8
	ldrb	r0, [r2]
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r0, [r2]
	mul	r0, r0, r1
	add	r0, r0, r3
	strh	r4, [r0, #0x20]
	ldr	r1, .L1376+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L1266:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1377:
	.align	2, 0
.L1376:
	.word	gBattleControllerExecFlags
	.word	gBattleMons
	.word	gBattlerFainted
	.word	gBattlescriptCurrInstr
.Lfe50:
	.size	 Cmd_getexp,.Lfe50-Cmd_getexp
	.align	2, 0
	.type	 NoAliveMonsForPlayer,function
	.thumb_func
NoAliveMonsForPlayer:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	ldr	r0, .L1395
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1379	@cond_branch
	ldr	r0, .L1395+0x4
	ldrh	r1, [r0]
	ldr	r0, .L1395+0x8
	cmp	r1, r0
	bls	.L1379	@cond_branch
	mov	r5, #0x0
.L1383:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L1395+0xc
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1382	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1382	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r6, r6, r0
.L1382:
	add	r5, r5, #0x1
	cmp	r5, #0x2
	bls	.L1383	@cond_branch
	b	.L1386
.L1396:
	.align	2, 0
.L1395:
	.word	gBattleTypeFlags
	.word	gPartnerTrainerId
	.word	0xc02
	.word	gPlayerParty
.L1379:
	mov	r5, #0x0
.L1390:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L1397
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1389	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1389	@cond_branch
	ldr	r0, .L1397+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1392	@cond_branch
	ldr	r0, .L1397+0x8
	ldr	r0, [r0]
	mov	r1, #0x9d
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L1397+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1389	@cond_branch
.L1392:
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r6, r6, r0
.L1389:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	bls	.L1390	@cond_branch
.L1386:
	mov	r0, #0x0
	cmp	r6, #0
	bne	.L1394	@cond_branch
	mov	r0, #0x1
.L1394:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1398:
	.align	2, 0
.L1397:
	.word	gPlayerParty
	.word	gBattleTypeFlags
	.word	gBattleStruct
	.word	gBitTable
.Lfe51:
	.size	 NoAliveMonsForPlayer,.Lfe51-NoAliveMonsForPlayer
	.align	2, 0
	.type	 NoAliveMonsForOpponent,function
	.thumb_func
NoAliveMonsForOpponent:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	mov	r5, #0x0
.L1403:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L1408
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1402	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1402	@cond_branch
	ldr	r0, .L1408+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1405	@cond_branch
	ldr	r0, .L1408+0x8
	ldr	r0, [r0]
	ldr	r1, .L1408+0xc
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L1408+0x10
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1402	@cond_branch
.L1405:
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r6, r6, r0
.L1402:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	bls	.L1403	@cond_branch
	mov	r0, #0x0
	cmp	r6, #0
	bne	.L1407	@cond_branch
	mov	r0, #0x1
.L1407:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1409:
	.align	2, 0
.L1408:
	.word	gEnemyParty
	.word	gBattleTypeFlags
	.word	gBattleStruct
	.word	0x275
	.word	gBitTable
.Lfe52:
	.size	 NoAliveMonsForOpponent,.Lfe52-NoAliveMonsForOpponent
	.align	2, 0
	.globl	NoAliveMonsForEitherParty
	.type	 NoAliveMonsForEitherParty,function
	.thumb_func
NoAliveMonsForEitherParty:
	push	{r4, lr}
	mov	r4, #0x0
	bl	NoAliveMonsForPlayer
	cmp	r0, #0
	bne	.L1412	@cond_branch
	bl	NoAliveMonsForOpponent
	cmp	r0, #0
	beq	.L1411	@cond_branch
.L1412:
	mov	r4, #0x1
.L1411:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe53:
	.size	 NoAliveMonsForEitherParty,.Lfe53-NoAliveMonsForEitherParty
	.align	2, 0
	.type	 atk24,function
	.thumb_func
atk24:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L1438
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB13373
	b	.L1413	@long jump
.LCB13373:
	bl	NoAliveMonsForPlayer
	cmp	r0, #0
	beq	.L1415	@cond_branch
	ldr	r0, .L1438+0x4
	ldrb	r1, [r0]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
.L1415:
	bl	NoAliveMonsForOpponent
	cmp	r0, #0
	beq	.L1416	@cond_branch
	ldr	r0, .L1438+0x4
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
.L1416:
	ldr	r0, .L1438+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1417	@cond_branch
	ldr	r0, .L1438+0x8
	ldr	r1, [r0]
	ldr	r2, .L1438+0xc
	and	r1, r1, r2
	mov	r8, r0
	cmp	r1, #0
	beq	.L1417	@cond_branch
	mov	r4, #0x0
	mov	r1, #0x0
	ldr	r0, .L1438+0x10
	ldrb	r2, [r0]
	mov	ip, r0
	ldr	r6, .L1438+0x14
	cmp	r4, r2
	bge	.L1419	@cond_branch
	ldr	r0, .L1438+0x18
	ldr	r5, [r0]
	add	r3, r2, #0
	ldr	r2, .L1438+0x1c
	mov	r7, #0x80
	lsl	r7, r7, #0x15
.L1421:
	add	r0, r7, #0
	lsl	r0, r0, r1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1420	@cond_branch
	ldrb	r0, [r2]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1420	@cond_branch
	add	r4, r4, #0x1
.L1420:
	add	r2, r2, #0x30
	add	r1, r1, #0x2
	cmp	r1, r3
	blt	.L1421	@cond_branch
.L1419:
	mov	r3, #0x0
	mov	r1, #0x1
	mov	r0, ip
	ldrb	r2, [r0]
	cmp	r1, r2
	bge	.L1425	@cond_branch
	ldr	r0, .L1438+0x18
	ldr	r7, [r0]
	ldr	r0, .L1438+0x1c
	add	r5, r2, #0
	add	r2, r0, #0
	add	r2, r2, #0x18
	mov	r0, #0x80
	lsl	r0, r0, #0x15
	mov	ip, r0
.L1427:
	mov	r0, ip
	lsl	r0, r0, r1
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L1426	@cond_branch
	ldrb	r0, [r2]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1426	@cond_branch
	add	r3, r3, #0x1
.L1426:
	add	r2, r2, #0x30
	add	r1, r1, #0x2
	cmp	r1, r5
	blt	.L1427	@cond_branch
.L1425:
	mov	r1, r8
	ldr	r0, [r1]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1430	@cond_branch
	add	r0, r3, r4
	cmp	r0, #0x1
	bgt	.L1437	@cond_branch
	b	.L1434
.L1439:
	.align	2, 0
.L1438:
	.word	gBattleControllerExecFlags
	.word	gBattleOutcome
	.word	gBattleTypeFlags
	.word	0x2000002
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	gHitMarker
	.word	gSpecialStatuses
.L1430:
	cmp	r3, #0
	beq	.L1434	@cond_branch
	cmp	r4, #0
	beq	.L1434	@cond_branch
.L1437:
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r6]
	b	.L1413
.L1434:
	ldr	r0, [r6]
	add	r0, r0, #0x5
	str	r0, [r6]
	b	.L1413
.L1417:
	ldr	r1, .L1440
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1413:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1441:
	.align	2, 0
.L1440:
	.word	gBattlescriptCurrInstr
.Lfe54:
	.size	 atk24,.Lfe54-atk24
	.align	2, 0
	.type	 MoveValuesCleanUp,function
	.thumb_func
MoveValuesCleanUp:
	ldr	r0, .L1443
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L1443+0x4
	strb	r1, [r0]
	ldr	r2, .L1443+0x8
	mov	r0, #0x0
	strh	r0, [r2, #0x2e]
	ldr	r0, .L1443+0xc
	strb	r1, [r0, #0x6]
	ldr	r2, .L1443+0x10
	ldr	r0, [r2]
	mov	r1, #0x41
	neg	r1, r1
	and	r0, r0, r1
	ldr	r1, .L1443+0x14
	and	r0, r0, r1
	str	r0, [r2]
	bx	lr
.L1444:
	.align	2, 0
.L1443:
	.word	gMoveResultFlags
	.word	gIsCriticalHit
	.word	gBattleScripting
	.word	gBattleCommunication
	.word	gHitMarker
	.word	-0x4001
.Lfe55:
	.size	 MoveValuesCleanUp,.Lfe55-MoveValuesCleanUp
	.align	2, 0
	.type	 Cmd_movevaluescleanup,function
	.thumb_func
Cmd_movevaluescleanup:
	push	{lr}
	bl	MoveValuesCleanUp
	ldr	r1, .L1446
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1447:
	.align	2, 0
.L1446:
	.word	gBattlescriptCurrInstr
.Lfe56:
	.size	 Cmd_movevaluescleanup,.Lfe56-Cmd_movevaluescleanup
	.align	2, 0
	.type	 Cmd_setmultihit,function
	.thumb_func
Cmd_setmultihit:
	ldr	r3, .L1449
	ldr	r2, .L1449+0x4
	ldr	r0, [r2]
	ldrb	r1, [r0, #0x1]
	strb	r1, [r3]
	add	r0, r0, #0x2
	str	r0, [r2]
	bx	lr
.L1450:
	.align	2, 0
.L1449:
	.word	gMultiHitCounter
	.word	gBattlescriptCurrInstr
.Lfe57:
	.size	 Cmd_setmultihit,.Lfe57-Cmd_setmultihit
	.align	2, 0
	.type	 Cmd_decrementmultihit,function
	.thumb_func
Cmd_decrementmultihit:
	push	{lr}
	ldr	r1, .L1454
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1452	@cond_branch
	ldr	r1, .L1454+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L1453
.L1455:
	.align	2, 0
.L1454:
	.word	gMultiHitCounter
	.word	gBattlescriptCurrInstr
.L1452:
	ldr	r3, .L1456
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r3]
.L1453:
	pop	{r0}
	bx	r0
.L1457:
	.align	2, 0
.L1456:
	.word	gBattlescriptCurrInstr
.Lfe58:
	.size	 Cmd_decrementmultihit,.Lfe58-Cmd_decrementmultihit
	.align	2, 0
	.type	 Cmd_goto,function
	.thumb_func
Cmd_goto:
	ldr	r3, .L1459
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r3]
	bx	lr
.L1460:
	.align	2, 0
.L1459:
	.word	gBattlescriptCurrInstr
.Lfe59:
	.size	 Cmd_goto,.Lfe59-Cmd_goto
	.align	2, 0
	.type	 Cmd_jumpifbyte,function
	.thumb_func
Cmd_jumpifbyte:
	push	{r4, r5, r6, lr}
	ldr	r3, .L1478
	ldr	r1, [r3]
	ldrb	r6, [r1, #0x1]
	ldrb	r2, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0x6]
	ldrb	r2, [r1, #0x7]
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x9]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xa]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	add	r1, r1, #0xb
	str	r1, [r3]
	cmp	r6, #0x5
	bhi	.L1462	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, .L1478+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1479:
	.align	2, 0
.L1478:
	.word	gBattlescriptCurrInstr
	.word	.L1475
	.align	2, 0
	.align	2, 0
.L1475:
	.word	.L1463
	.word	.L1465
	.word	.L1467
	.word	.L1469
	.word	.L1471
	.word	.L1473
.L1463:
	ldrb	r0, [r5]
	cmp	r0, r4
	bne	.L1462	@cond_branch
	b	.L1477
.L1465:
	ldrb	r0, [r5]
	cmp	r0, r4
	beq	.L1462	@cond_branch
	b	.L1477
.L1467:
	ldrb	r0, [r5]
	cmp	r0, r4
	bls	.L1462	@cond_branch
	b	.L1477
.L1469:
	ldrb	r0, [r5]
	cmp	r0, r4
	bcs	.L1462	@cond_branch
	b	.L1477
.L1471:
	ldrb	r0, [r5]
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L1462	@cond_branch
	b	.L1477
.L1473:
	ldrb	r0, [r5]
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L1462	@cond_branch
.L1477:
	str	r2, [r3]
.L1462:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 Cmd_jumpifbyte,.Lfe60-Cmd_jumpifbyte
	.align	2, 0
	.type	 Cmd_jumpifhalfword,function
	.thumb_func
Cmd_jumpifhalfword:
	push	{r4, r5, r6, lr}
	ldr	r3, .L1497
	ldr	r1, [r3]
	ldrb	r6, [r1, #0x1]
	ldrb	r2, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0x6]
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r2, [r1, #0x8]
	ldrb	r0, [r1, #0x9]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	add	r1, r1, #0xc
	str	r1, [r3]
	cmp	r6, #0x5
	bhi	.L1481	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, .L1497+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1498:
	.align	2, 0
.L1497:
	.word	gBattlescriptCurrInstr
	.word	.L1494
	.align	2, 0
	.align	2, 0
.L1494:
	.word	.L1482
	.word	.L1484
	.word	.L1486
	.word	.L1488
	.word	.L1490
	.word	.L1492
.L1482:
	ldrh	r0, [r5]
	cmp	r0, r4
	bne	.L1481	@cond_branch
	b	.L1496
.L1484:
	ldrh	r0, [r5]
	cmp	r0, r4
	beq	.L1481	@cond_branch
	b	.L1496
.L1486:
	ldrh	r0, [r5]
	cmp	r0, r4
	bls	.L1481	@cond_branch
	b	.L1496
.L1488:
	ldrh	r0, [r5]
	cmp	r0, r4
	bcs	.L1481	@cond_branch
	b	.L1496
.L1490:
	ldrh	r0, [r5]
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L1481	@cond_branch
	b	.L1496
.L1492:
	ldrh	r0, [r5]
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L1481	@cond_branch
.L1496:
	str	r2, [r3]
.L1481:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 Cmd_jumpifhalfword,.Lfe61-Cmd_jumpifhalfword
	.align	2, 0
	.type	 Cmd_jumpifword,function
	.thumb_func
Cmd_jumpifword:
	push	{r4, r5, r6, lr}
	ldr	r3, .L1516
	ldr	r1, [r3]
	ldrb	r6, [r1, #0x1]
	ldrb	r2, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0x6]
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	ldrb	r2, [r1, #0xa]
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xd]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	add	r1, r1, #0xe
	str	r1, [r3]
	cmp	r6, #0x5
	bhi	.L1500	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, .L1516+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1517:
	.align	2, 0
.L1516:
	.word	gBattlescriptCurrInstr
	.word	.L1513
	.align	2, 0
	.align	2, 0
.L1513:
	.word	.L1501
	.word	.L1503
	.word	.L1505
	.word	.L1507
	.word	.L1509
	.word	.L1511
.L1501:
	ldr	r0, [r5]
	cmp	r0, r4
	bne	.L1500	@cond_branch
	b	.L1515
.L1503:
	ldr	r0, [r5]
	cmp	r0, r4
	beq	.L1500	@cond_branch
	b	.L1515
.L1505:
	ldr	r0, [r5]
	cmp	r0, r4
	bls	.L1500	@cond_branch
	b	.L1515
.L1507:
	ldr	r0, [r5]
	cmp	r0, r4
	bcs	.L1500	@cond_branch
	b	.L1515
.L1509:
	ldr	r0, [r5]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1500	@cond_branch
	b	.L1515
.L1511:
	ldr	r0, [r5]
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L1500	@cond_branch
.L1515:
	str	r2, [r3]
.L1500:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 Cmd_jumpifword,.Lfe62-Cmd_jumpifword
	.align	2, 0
	.type	 Cmd_jumpifarrayequal,function
	.thumb_func
Cmd_jumpifarrayequal:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L1527
	ldr	r3, [r2]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x18
	add	r5, r1, r0
	ldrb	r1, [r3, #0x5]
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x18
	add	r4, r1, r0
	ldrb	r6, [r3, #0x9]
	ldrb	r1, [r3, #0xa]
	ldrb	r0, [r3, #0xb]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0xc]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0xd]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	mov	ip, r1
	mov	r1, #0x0
	cmp	r1, r6
	bcs	.L1520	@cond_branch
	ldrb	r0, [r5]
	ldrb	r7, [r4]
	cmp	r0, r7
	beq	.L1523	@cond_branch
	add	r0, r3, #0
	b	.L1526
.L1528:
	.align	2, 0
.L1527:
	.word	gBattlescriptCurrInstr
.L1523:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r6
	bcs	.L1520	@cond_branch
	ldrb	r0, [r5]
	ldrb	r3, [r4]
	cmp	r0, r3
	beq	.L1523	@cond_branch
	ldr	r0, [r2]
.L1526:
	add	r0, r0, #0xe
	str	r0, [r2]
.L1520:
	cmp	r1, r6
	bne	.L1525	@cond_branch
	mov	r7, ip
	str	r7, [r2]
.L1525:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 Cmd_jumpifarrayequal,.Lfe63-Cmd_jumpifarrayequal
	.align	2, 0
	.type	 Cmd_jumpifarraynotequal,function
	.thumb_func
Cmd_jumpifarraynotequal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, #0x0
	ldr	r3, .L1539
	ldr	r1, [r3]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r2, [r1, #0x5]
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x18
	add	r4, r2, r0
	ldrb	r6, [r1, #0x9]
	ldrb	r2, [r1, #0xa]
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xd]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	mov	ip, r2
	mov	r1, #0x0
	cmp	r7, r6
	bcs	.L1531	@cond_branch
.L1533:
	ldrb	r0, [r5]
	ldrb	r2, [r4]
	cmp	r0, r2
	bne	.L1534	@cond_branch
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L1534:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r6
	bcc	.L1533	@cond_branch
.L1531:
	cmp	r7, r6
	beq	.L1536	@cond_branch
	mov	r0, ip
	b	.L1538
.L1540:
	.align	2, 0
.L1539:
	.word	gBattlescriptCurrInstr
.L1536:
	ldr	r0, [r3]
	add	r0, r0, #0xe
.L1538:
	str	r0, [r3]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 Cmd_jumpifarraynotequal,.Lfe64-Cmd_jumpifarraynotequal
	.align	2, 0
	.type	 Cmd_setbyte,function
	.thumb_func
Cmd_setbyte:
	ldr	r3, .L1542
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L1543:
	.align	2, 0
.L1542:
	.word	gBattlescriptCurrInstr
.Lfe65:
	.size	 Cmd_setbyte,.Lfe65-Cmd_setbyte
	.align	2, 0
	.type	 Cmd_addbyte,function
	.thumb_func
Cmd_addbyte:
	ldr	r3, .L1545
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	ldrb	r2, [r1]
	add	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L1546:
	.align	2, 0
.L1545:
	.word	gBattlescriptCurrInstr
.Lfe66:
	.size	 Cmd_addbyte,.Lfe66-Cmd_addbyte
	.align	2, 0
	.type	 Cmd_subbyte,function
	.thumb_func
Cmd_subbyte:
	ldr	r3, .L1548
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r1]
	ldrb	r2, [r2, #0x5]
	sub	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L1549:
	.align	2, 0
.L1548:
	.word	gBattlescriptCurrInstr
.Lfe67:
	.size	 Cmd_subbyte,.Lfe67-Cmd_subbyte
	.align	2, 0
	.type	 Cmd_copyarray,function
	.thumb_func
Cmd_copyarray:
	push	{r4, r5, r6, lr}
	ldr	r3, .L1556
	ldr	r1, [r3]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	add	r6, r2, r0
	ldrb	r2, [r1, #0x5]
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0x9]
	mov	r2, #0x0
	cmp	r2, r4
	bge	.L1552	@cond_branch
.L1554:
	add	r0, r6, r2
	add	r1, r5, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, r4
	blt	.L1554	@cond_branch
.L1552:
	ldr	r0, [r3]
	add	r0, r0, #0xa
	str	r0, [r3]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1557:
	.align	2, 0
.L1556:
	.word	gBattlescriptCurrInstr
.Lfe68:
	.size	 Cmd_copyarray,.Lfe68-Cmd_copyarray
	.align	2, 0
	.type	 Cmd_copyarraywithindex,function
	.thumb_func
Cmd_copyarraywithindex:
	push	{r4, r5, r6, r7, lr}
	ldr	r3, .L1564
	ldr	r1, [r3]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	add	r7, r2, r0
	ldrb	r2, [r1, #0x5]
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x18
	add	r6, r2, r0
	ldrb	r2, [r1, #0x9]
	ldrb	r0, [r1, #0xa]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xc]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0xd]
	mov	r2, #0x0
	cmp	r2, r4
	bge	.L1560	@cond_branch
.L1562:
	add	r0, r7, r2
	ldrb	r1, [r5]
	add	r1, r2, r1
	add	r1, r6, r1
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, r4
	blt	.L1562	@cond_branch
.L1560:
	ldr	r0, [r3]
	add	r0, r0, #0xe
	str	r0, [r3]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1565:
	.align	2, 0
.L1564:
	.word	gBattlescriptCurrInstr
.Lfe69:
	.size	 Cmd_copyarraywithindex,.Lfe69-Cmd_copyarraywithindex
	.align	2, 0
	.type	 Cmd_orbyte,function
	.thumb_func
Cmd_orbyte:
	ldr	r3, .L1567
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r1]
	ldrb	r2, [r2, #0x5]
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L1568:
	.align	2, 0
.L1567:
	.word	gBattlescriptCurrInstr
.Lfe70:
	.size	 Cmd_orbyte,.Lfe70-Cmd_orbyte
	.align	2, 0
	.type	 Cmd_orhalfword,function
	.thumb_func
Cmd_orhalfword:
	push	{r4, lr}
	ldr	r4, .L1570
	ldr	r3, [r4]
	ldrb	r2, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	ldrb	r1, [r3, #0x5]
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrh	r0, [r2]
	orr	r1, r1, r0
	strh	r1, [r2]
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1571:
	.align	2, 0
.L1570:
	.word	gBattlescriptCurrInstr
.Lfe71:
	.size	 Cmd_orhalfword,.Lfe71-Cmd_orhalfword
	.align	2, 0
	.type	 Cmd_orword,function
	.thumb_func
Cmd_orword:
	push	{r4, lr}
	ldr	r4, .L1573
	ldr	r2, [r4]
	ldrb	r3, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r3, r3, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r3, r3, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r3, r3, r0
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldr	r0, [r3]
	orr	r0, r0, r1
	str	r0, [r3]
	ldr	r0, [r4]
	add	r0, r0, #0x9
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1574:
	.align	2, 0
.L1573:
	.word	gBattlescriptCurrInstr
.Lfe72:
	.size	 Cmd_orword,.Lfe72-Cmd_orword
	.align	2, 0
	.type	 Cmd_bicbyte,function
	.thumb_func
Cmd_bicbyte:
	ldr	r3, .L1576
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r2, [r2, #0x5]
	ldrb	r0, [r1]
	bic	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L1577:
	.align	2, 0
.L1576:
	.word	gBattlescriptCurrInstr
.Lfe73:
	.size	 Cmd_bicbyte,.Lfe73-Cmd_bicbyte
	.align	2, 0
	.type	 Cmd_bichalfword,function
	.thumb_func
Cmd_bichalfword:
	push	{r4, lr}
	ldr	r4, .L1579
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r2, [r3, #0x5]
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrh	r0, [r1]
	bic	r0, r0, r2
	strh	r0, [r1]
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1580:
	.align	2, 0
.L1579:
	.word	gBattlescriptCurrInstr
.Lfe74:
	.size	 Cmd_bichalfword,.Lfe74-Cmd_bichalfword
	.align	2, 0
	.type	 Cmd_bicword,function
	.thumb_func
Cmd_bicword:
	push	{r4, lr}
	ldr	r4, .L1582
	ldr	r2, [r4]
	ldrb	r3, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r3, r3, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r3, r3, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r3, r3, r0
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldr	r0, [r3]
	bic	r0, r0, r1
	str	r0, [r3]
	ldr	r0, [r4]
	add	r0, r0, #0x9
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1583:
	.align	2, 0
.L1582:
	.word	gBattlescriptCurrInstr
.Lfe75:
	.size	 Cmd_bicword,.Lfe75-Cmd_bicword
	.align	2, 0
	.type	 Cmd_pause,function
	.thumb_func
Cmd_pause:
	push	{r4, r5, lr}
	ldr	r0, .L1587
	ldr	r4, [r0]
	cmp	r4, #0
	bne	.L1585	@cond_branch
	ldr	r5, .L1587+0x4
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r3, .L1587+0x8
	ldrh	r0, [r3]
	add	r0, r0, #0x1
	strh	r0, [r3]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r1
	bcc	.L1585	@cond_branch
	strh	r4, [r3]
	add	r0, r2, #0x3
	str	r0, [r5]
.L1585:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1588:
	.align	2, 0
.L1587:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gPauseCounterBattle
.Lfe76:
	.size	 Cmd_pause,.Lfe76-Cmd_pause
	.align	2, 0
	.type	 Cmd_waitstate,function
	.thumb_func
Cmd_waitstate:
	push	{lr}
	ldr	r0, .L1591
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1590	@cond_branch
	ldr	r1, .L1591+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L1590:
	pop	{r0}
	bx	r0
.L1592:
	.align	2, 0
.L1591:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
.Lfe77:
	.size	 Cmd_waitstate,.Lfe77-Cmd_waitstate
	.align	2, 0
	.type	 Cmd_update,function
	.thumb_func
Cmd_update:
	push	{lr}
	ldr	r0, .L1597
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L1594	@cond_branch
	ldr	r0, .L1597+0x4
	ldr	r1, .L1597+0x8
	b	.L1596
.L1598:
	.align	2, 0
.L1597:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattlerTarget
.L1594:
	ldr	r0, .L1599
	ldr	r1, .L1599+0x4
.L1596:
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldr	r0, .L1599+0x8
	ldrh	r1, [r0]
	mov	r0, #0x0
	bl	BtlController_EmitHealthBarUpdate
	ldr	r0, .L1599
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L1599+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1600:
	.align	2, 0
.L1599:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.Lfe78:
	.size	 Cmd_update,.Lfe78-Cmd_update
	.align	2, 0
	.type	 Cmd_return,function
	.thumb_func
Cmd_return:
	push	{lr}
	bl	BattleScriptPop
	pop	{r0}
	bx	r0
.Lfe79:
	.size	 Cmd_return,.Lfe79-Cmd_return
	.align	2, 0
	.type	 Cmd_end,function
	.thumb_func
Cmd_end:
	push	{lr}
	ldr	r0, .L1604
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1603	@cond_branch
	ldr	r0, .L1604+0x4
	ldrb	r0, [r0]
	bl	BattleArena_AddSkillPoints
.L1603:
	ldr	r0, .L1604+0x8
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L1604+0xc
	strb	r1, [r0]
	ldr	r1, .L1604+0x10
	mov	r0, #0xb
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L1605:
	.align	2, 0
.L1604:
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gActiveBattler
	.word	gCurrentActionFuncId
.Lfe80:
	.size	 Cmd_end,.Lfe80-Cmd_end
	.align	2, 0
	.type	 Cmd_end2,function
	.thumb_func
Cmd_end2:
	ldr	r1, .L1607
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L1607+0x4
	mov	r0, #0xb
	strb	r0, [r1]
	bx	lr
.L1608:
	.align	2, 0
.L1607:
	.word	gActiveBattler
	.word	gCurrentActionFuncId
.Lfe81:
	.size	 Cmd_end2,.Lfe81-Cmd_end2
	.align	2, 0
	.type	 Cmd_end3,function
	.thumb_func
Cmd_end3:
	push	{lr}
	bl	BattleScriptPop
	ldr	r3, .L1611
	ldr	r0, [r3]
	ldr	r0, [r0, #0xc]
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1610	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L1610:
	ldr	r2, .L1611+0x4
	ldr	r0, [r3]
	ldr	r1, [r0, #0xc]
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r2]
	pop	{r0}
	bx	r0
.L1612:
	.align	2, 0
.L1611:
	.word	gBattleResources
	.word	gBattleMainFunc
.Lfe82:
	.size	 Cmd_end3,.Lfe82-Cmd_end3
	.align	2, 0
	.type	 Cmd_call,function
	.thumb_func
Cmd_call:
	push	{r4, lr}
	ldr	r4, .L1614
	ldr	r0, [r4]
	add	r0, r0, #0x5
	bl	BattleScriptPush
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1615:
	.align	2, 0
.L1614:
	.word	gBattlescriptCurrInstr
.Lfe83:
	.size	 Cmd_call,.Lfe83-Cmd_call
	.align	2, 0
	.type	 Cmd_setroost,function
	.thumb_func
Cmd_setroost:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L1626
	ldr	r0, [r0]
	ldr	r2, [r0, #0x4]
	ldr	r6, .L1626+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r7, .L1626+0x8
	ldrb	r4, [r6]
	mov	r0, #0x5c
	mov	ip, r0
	mov	r0, ip
	mul	r0, r0, r4
	add	r1, r0, r7
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r3, [r0]
	mov	r8, r6
	mov	r9, r7
	cmp	r3, #0x2
	bne	.L1621	@cond_branch
	add	r0, r0, #0x1
	ldrb	r5, [r0]
	cmp	r5, #0x2
	bne	.L1620	@cond_branch
	ldr	r3, .L1626+0xc
	ldr	r1, [r3]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	ldr	r2, .L1626+0x10
	add	r1, r1, r2
	add	r1, r1, r0
	mov	r4, #0x0
	strb	r5, [r1]
	ldr	r1, [r3]
	ldrb	r2, [r6]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	ldr	r2, .L1626+0x14
	add	r1, r1, r2
	add	r1, r1, r0
	strb	r5, [r1]
	ldr	r1, [r3]
	ldrb	r2, [r6]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	mov	r3, #0x9f
	lsl	r3, r3, #0x2
	add	r1, r1, r3
	add	r1, r1, r0
	strb	r5, [r1]
	ldrb	r0, [r6]
	mov	r5, ip
	mul	r5, r5, r0
	add	r0, r5, #0
	add	r0, r0, r7
	add	r0, r0, #0x22
	strb	r4, [r0]
	ldrb	r0, [r6]
	mov	r1, ip
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	add	r0, r0, #0x23
	strb	r4, [r0]
	ldrb	r0, [r6]
	mov	r2, ip
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	add	r0, r0, #0x24
	mov	r1, #0x9
	strb	r1, [r0]
	b	.L1618
.L1627:
	.align	2, 0
.L1626:
	.word	gBattleResources
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattleStruct
	.word	0x27a
	.word	0x27b
.L1621:
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L1619	@cond_branch
.L1620:
	ldr	r5, .L1628
	ldr	r2, [r5]
	mov	r4, r8
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	ldr	r3, .L1628+0x4
	add	r2, r2, r3
	add	r2, r2, r0
	mov	r3, r9
	mov	r6, #0x5c
	mov	r0, r1
	mul	r0, r0, r6
	add	r0, r0, r3
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r2, [r5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	ldr	r5, .L1628+0x8
	add	r2, r2, r5
	add	r2, r2, r0
	mov	r0, r1
	mul	r0, r0, r6
	add	r0, r0, r3
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldrb	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r3
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r0, [r1]
	cmp	r0, #0x2
	bne	.L1622	@cond_branch
	mov	r0, #0x9
	strb	r0, [r1]
.L1622:
	mov	r1, r8
	ldrb	r0, [r1]
	mul	r0, r0, r6
	add	r0, r0, r9
	add	r3, r0, #0
	add	r3, r3, #0x23
	ldrb	r0, [r3]
	cmp	r0, #0x2
	bne	.L1618	@cond_branch
	mov	r0, #0x9
	strb	r0, [r3]
	b	.L1618
.L1629:
	.align	2, 0
.L1628:
	.word	gBattleStruct
	.word	0x27a
	.word	0x27b
.L1619:
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L1618	@cond_branch
	ldr	r2, .L1630
	ldr	r1, [r2]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	ldr	r4, .L1630+0x4
	add	r1, r1, r4
	add	r1, r1, r0
	strb	r3, [r1]
	ldr	r2, [r2]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	ldr	r5, .L1630+0x8
	add	r2, r2, r5
	add	r2, r2, r0
	mov	r0, ip
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	strb	r0, [r2]
.L1618:
	ldr	r1, .L1630+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1631:
	.align	2, 0
.L1630:
	.word	gBattleStruct
	.word	0x27a
	.word	0x27b
	.word	gBattlescriptCurrInstr
.Lfe84:
	.size	 Cmd_setroost,.Lfe84-Cmd_setroost
	.align	2, 0
	.type	 Cmd_jumpifabilitypresent,function
	.thumb_func
Cmd_jumpifabilitypresent:
	push	{r4, lr}
	ldr	r4, .L1635
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x1]
	ldrb	r1, [r1, #0x2]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.L1633	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1634
.L1636:
	.align	2, 0
.L1635:
	.word	gBattlescriptCurrInstr
.L1633:
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
.L1634:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe85:
	.size	 Cmd_jumpifabilitypresent,.Lfe85-Cmd_jumpifabilitypresent
	.align	2, 0
	.type	 Cmd_endselectionscript,function
	.thumb_func
Cmd_endselectionscript:
	ldr	r0, .L1638
	ldrb	r0, [r0]
	ldr	r1, .L1638+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x54
	mov	r1, #0x1
	strb	r1, [r0]
	bx	lr
.L1639:
	.align	2, 0
.L1638:
	.word	gBattlerAttacker
	.word	gBattleStruct
.Lfe86:
	.size	 Cmd_endselectionscript,.Lfe86-Cmd_endselectionscript
	.align	2, 0
	.type	 Cmd_playanimation,function
	.thumb_func
Cmd_playanimation:
	push	{r4, r5, r6, lr}
	ldr	r4, .L1652
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r6, .L1652+0x4
	strb	r0, [r6]
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	add	r3, r1, r0
	ldrb	r5, [r2, #0x2]
	add	r0, r5, #0
	cmp	r0, #0x1
	beq	.L1642	@cond_branch
	cmp	r0, #0x11
	beq	.L1642	@cond_branch
	cmp	r0, #0x17
	beq	.L1642	@cond_branch
	cmp	r0, #0x1c
	beq	.L1642	@cond_branch
	cmp	r0, #0x1d
	beq	.L1642	@cond_branch
	cmp	r0, #0x2
	bne	.L1641	@cond_branch
.L1642:
	ldr	r4, .L1652
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x2]
	ldrh	r2, [r3]
	mov	r0, #0x0
	bl	BtlController_EmitBattleAnimation
	ldr	r0, .L1652+0x4
	ldrb	r0, [r0]
	b	.L1650
.L1653:
	.align	2, 0
.L1652:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.L1641:
	ldr	r0, .L1654
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1644	@cond_branch
	add	r0, r2, #0x7
	bl	BattleScriptPush
	ldr	r0, .L1654+0x4
	b	.L1651
.L1655:
	.align	2, 0
.L1654:
	.word	gHitMarker
	.word	BattleScript_Pausex20
.L1644:
	add	r0, r5, #0
	sub	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bls	.L1648	@cond_branch
	ldr	r1, .L1656
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1656+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1648	@cond_branch
	add	r0, r2, #0x7
	b	.L1651
.L1657:
	.align	2, 0
.L1656:
	.word	gStatuses3
	.word	0x10400c0
.L1648:
	ldrb	r1, [r2, #0x2]
	ldrh	r2, [r3]
	mov	r0, #0x0
	bl	BtlController_EmitBattleAnimation
	ldrb	r0, [r6]
.L1650:
	bl	MarkBattlerForControllerExec
	ldr	r0, [r4]
	add	r0, r0, #0x7
.L1651:
	str	r0, [r4]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe87:
	.size	 Cmd_playanimation,.Lfe87-Cmd_playanimation
	.align	2, 0
	.type	 Cmd_playanimation2,function
	.thumb_func
Cmd_playanimation2:
	push	{r4, r5, r6, r7, lr}
	ldr	r5, .L1669
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r7, .L1669+0x4
	strb	r0, [r7]
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	add	r3, r1, r0
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	add	r4, r1, r0
	ldrb	r6, [r3]
	add	r0, r6, #0
	cmp	r0, #0x1
	beq	.L1660	@cond_branch
	cmp	r0, #0x11
	beq	.L1660	@cond_branch
	cmp	r0, #0x17
	beq	.L1660	@cond_branch
	cmp	r0, #0x1c
	beq	.L1660	@cond_branch
	cmp	r0, #0x1d
	beq	.L1660	@cond_branch
	cmp	r0, #0x2
	bne	.L1659	@cond_branch
.L1660:
	ldrb	r1, [r3]
	ldrh	r2, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitBattleAnimation
	ldr	r0, .L1669+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L1669
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
	b	.L1661
.L1670:
	.align	2, 0
.L1669:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.L1659:
	ldr	r0, .L1671
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1662	@cond_branch
	add	r0, r2, #0
	b	.L1668
.L1672:
	.align	2, 0
.L1671:
	.word	gHitMarker
.L1662:
	add	r0, r6, #0
	sub	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bls	.L1666	@cond_branch
	ldr	r1, .L1673
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1673+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1666	@cond_branch
	add	r0, r2, #0
	b	.L1668
.L1674:
	.align	2, 0
.L1673:
	.word	gStatuses3
	.word	0x10400c0
.L1666:
	ldrb	r1, [r3]
	ldrh	r2, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitBattleAnimation
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
.L1668:
	add	r0, r0, #0xa
	str	r0, [r5]
.L1661:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe88:
	.size	 Cmd_playanimation2,.Lfe88-Cmd_playanimation2
	.align	2, 0
	.type	 Cmd_setgraphicalstatchangevalues,function
	.thumb_func
Cmd_setgraphicalstatchangevalues:
	push	{lr}
	ldr	r1, .L1690
	ldrb	r0, [r1, #0x1a]
	mov	r2, #0xf8
	and	r2, r2, r0
	add	r3, r1, #0
	cmp	r2, #0x18
	beq	.L1679	@cond_branch
	cmp	r2, #0x18
	bgt	.L1687	@cond_branch
	cmp	r2, #0x8
	beq	.L1677	@cond_branch
	cmp	r2, #0x10
	beq	.L1678	@cond_branch
	b	.L1683
.L1691:
	.align	2, 0
.L1690:
	.word	gBattleScripting
.L1687:
	cmp	r2, #0x90
	beq	.L1689	@cond_branch
	cmp	r2, #0x90
	bgt	.L1688	@cond_branch
	cmp	r2, #0x88
	beq	.L1680	@cond_branch
	b	.L1683
.L1688:
	cmp	r2, #0x98
	beq	.L1689	@cond_branch
	b	.L1683
.L1677:
	mov	r2, #0xf
	b	.L1676
.L1678:
.L1679:
	mov	r2, #0x27
	b	.L1676
.L1680:
	mov	r2, #0x16
	b	.L1676
.L1683:
	mov	r0, #0x80
	and	r0, r0, r2
	mov	r2, #0x27
	cmp	r0, #0
	beq	.L1676	@cond_branch
.L1689:
	mov	r2, #0x2e
.L1676:
	ldrb	r1, [r3, #0x1a]
	mov	r0, #0x7
	and	r0, r0, r1
	add	r0, r2, r0
	sub	r0, r0, #0x1
	mov	r1, #0x0
	strb	r0, [r3, #0x10]
	strb	r1, [r3, #0x11]
	ldr	r1, .L1692
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1693:
	.align	2, 0
.L1692:
	.word	gBattlescriptCurrInstr
.Lfe89:
	.size	 Cmd_setgraphicalstatchangevalues,.Lfe89-Cmd_setgraphicalstatchangevalues
	.align	2, 0
	.type	 Cmd_playstatchangeanimation,function
	.thumb_func
Cmd_playstatchangeanimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r6, #0x0
	mov	r9, r6
	mov	r8, r6
	ldr	r4, .L1737
	ldr	r0, [r4]
	ldrb	r7, [r0, #0x3]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L1737+0x4
	strb	r0, [r1]
	ldrb	r0, [r1]
	bl	GetBattlerAbility
	add	r5, r0, #0
	ldr	r0, [r4]
	ldrb	r4, [r0, #0x2]
	cmp	r5, #0x7e
	bne	.L1695	@cond_branch
	mov	r0, #0x1
	eor	r7, r7, r0
	b	.L1696
.L1738:
	.align	2, 0
.L1737:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.L1695:
	cmp	r5, #0x56
	bne	.L1696	@cond_branch
	mov	r0, #0x2
	orr	r7, r7, r0
.L1696:
	mov	r0, #0x1
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L1698	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r7
	mov	r3, #0x15
	cmp	r0, #0
	beq	.L1699	@cond_branch
	mov	r3, #0x2d
.L1699:
	cmp	r4, #0
	beq	.L1733	@cond_branch
	ldr	r0, .L1739
	mov	sl, r0
.L1703:
	add	r0, r4, #0
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1704	@cond_branch
	mov	r0, #0x8
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L1705	@cond_branch
	ldr	r0, .L1739+0x4
	ldrb	r1, [r0]
	b	.L1735
.L1740:
	.align	2, 0
.L1739:
	.word	gBattleMons+0x18
	.word	gActiveBattler
.L1705:
	ldr	r2, .L1741
	ldrb	r0, [r2]
	str	r2, [sp]
	str	r3, [sp, #0x4]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1741+0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x4]
	ldr	r2, [sp]
	ldr	r3, [sp, #0x4]
	cmp	r0, #0
	bne	.L1704	@cond_branch
	cmp	r5, #0x1d
	beq	.L1704	@cond_branch
	cmp	r5, #0xe6
	beq	.L1704	@cond_branch
	cmp	r5, #0x49
	beq	.L1704	@cond_branch
	cmp	r5, #0x33
	bne	.L1709	@cond_branch
	cmp	r6, #0x6
	beq	.L1704	@cond_branch
.L1709:
	cmp	r5, #0x34
	bne	.L1710	@cond_branch
	cmp	r6, #0x1
	beq	.L1704	@cond_branch
.L1710:
	cmp	r5, #0x91
	bne	.L1711	@cond_branch
	cmp	r6, #0x2
	beq	.L1704	@cond_branch
.L1711:
	ldrb	r1, [r2]
.L1735:
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r6, r0
	add	r0, r0, sl
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	ble	.L1704	@cond_branch
	add	r0, r3, r6
	mov	r9, r0
	mov	r1, #0x1
	add	r8, r8, r1
.L1704:
	lsr	r4, r4, #0x1
	add	r6, r6, #0x1
	cmp	r4, #0
	bne	.L1703	@cond_branch
.L1733:
	mov	r5, r8
	cmp	r5, #0x1
	bls	.L1717	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r7
	mov	r1, #0x39
	mov	r9, r1
	cmp	r0, #0
	beq	.L1717	@cond_branch
	mov	r5, #0x3a
	b	.L1736
.L1742:
	.align	2, 0
.L1741:
	.word	gActiveBattler
	.word	gSideTimers
.L1698:
	mov	r0, #0x2
	and	r0, r0, r7
	mov	r3, #0xe
	cmp	r0, #0
	beq	.L1718	@cond_branch
	mov	r3, #0x26
.L1718:
	cmp	r4, #0
	beq	.L1734	@cond_branch
	mov	r0, #0x1
	mov	ip, r0
	ldr	r1, .L1743
	mov	sl, r1
	ldr	r2, .L1743+0x4
	mov	r1, #0x5c
.L1722:
	add	r0, r4, #0
	mov	r5, ip
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1723	@cond_branch
	ldrb	r0, [r2]
	mul	r0, r0, r1
	add	r0, r6, r0
	add	r0, r0, sl
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xb
	bgt	.L1723	@cond_branch
	add	r0, r3, r6
	mov	r9, r0
	mov	r5, #0x1
	add	r8, r8, r5
.L1723:
	lsr	r4, r4, #0x1
	add	r6, r6, #0x1
	cmp	r4, #0
	bne	.L1722	@cond_branch
.L1734:
	mov	r0, r8
	cmp	r0, #0x1
	bls	.L1717	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r7
	mov	r1, #0x37
	mov	r9, r1
	cmp	r0, #0
	beq	.L1717	@cond_branch
	mov	r5, #0x38
.L1736:
	mov	r9, r5
.L1717:
	mov	r0, #0x4
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L1728	@cond_branch
	mov	r0, r8
	cmp	r0, #0x1
	bls	.L1730	@cond_branch
.L1728:
	mov	r1, r8
	cmp	r1, #0
	beq	.L1730	@cond_branch
	ldr	r4, .L1743+0x8
	ldrb	r0, [r4, #0x1b]
	cmp	r0, #0
	bne	.L1730	@cond_branch
	mov	r5, r9
	lsl	r2, r5, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x0
	mov	r1, #0x1
	bl	BtlController_EmitBattleAnimation
	ldr	r0, .L1743+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	mov	r0, #0x4
	and	r7, r7, r0
	cmp	r7, #0
	beq	.L1731	@cond_branch
	mov	r0, r8
	cmp	r0, #0x1
	bls	.L1731	@cond_branch
	mov	r0, #0x1
	strb	r0, [r4, #0x1b]
.L1731:
.L1730:
	ldr	r1, .L1743+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1744:
	.align	2, 0
.L1743:
	.word	gBattleMons+0x18
	.word	gActiveBattler
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe90:
	.size	 Cmd_playstatchangeanimation,.Lfe90-Cmd_playstatchangeanimation
	.align	2, 0
	.type	 TryKnockOffBattleScript,function
	.thumb_func
TryKnockOffBattleScript:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r1, .L1751
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r1, r0, r1
	ldrh	r0, [r1, #0x30]
	cmp	r0, #0
	beq	.L1746	@cond_branch
	lsl	r4, r6, #0x18
	lsr	r5, r4, #0x18
	add	r1, r0, #0
	add	r0, r5, #0
	bl	CanBattlerGetOrLoseItem
	cmp	r0, #0
	beq	.L1746	@cond_branch
	bl	NoAliveMonsForEitherParty
	cmp	r0, #0
	bne	.L1746	@cond_branch
	add	r0, r5, #0
	bl	GetBattlerAbility
	cmp	r0, #0x3c
	bne	.L1747	@cond_branch
	add	r0, r5, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L1747	@cond_branch
	ldr	r0, .L1751+0x4
	strb	r6, [r0]
	bl	BattleScriptPushCursor
	ldr	r1, .L1751+0x8
	ldr	r0, .L1751+0xc
	b	.L1750
.L1752:
	.align	2, 0
.L1751:
	.word	gBattleMons
	.word	gBattlerAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StickyHoldActivates
.L1747:
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L1753
	ldr	r2, .L1753+0x4
	mov	r1, #0x5c
	mul	r1, r1, r6
	add	r1, r1, r2
	ldrh	r2, [r1, #0x30]
	strh	r2, [r3]
	mov	r3, #0x0
	strh	r3, [r1, #0x30]
	ldr	r1, .L1753+0x8
	ldr	r1, [r1]
	lsl	r2, r6, #0x1
	add	r1, r1, #0xc4
	add	r1, r1, r2
	strh	r3, [r1]
	ldr	r1, .L1753+0xc
	add	r1, r1, #0x19
	add	r0, r0, r1
	ldr	r3, .L1753+0x10
	ldr	r1, .L1753+0x14
	add	r2, r2, r1
	ldrh	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r1, [r1]
	ldrb	r2, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r4, #0
	bl	CheckSetUnburden
	bl	BattleScriptPushCursor
	ldr	r1, .L1753+0x18
	ldr	r0, .L1753+0x1c
.L1750:
	str	r0, [r1]
	mov	r0, #0x1
	b	.L1749
.L1754:
	.align	2, 0
.L1753:
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gBattleStruct
	.word	gWishFutureKnock
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	gBattlescriptCurrInstr
	.word	BattleScript_KnockedOff
.L1746:
	mov	r0, #0x0
.L1749:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe91:
	.size	 TryKnockOffBattleScript,.Lfe91-TryKnockOffBattleScript
	.align	2, 0
	.type	 Cmd_moveend,function
	.thumb_func
Cmd_moveend:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	mov	r0, #0x0
	mov	r8, r0
	ldr	r2, .L1921
	ldrh	r1, [r2]
	ldr	r0, .L1921+0x4
	mov	r3, #0x0
	str	r3, [sp, #0x14]
	cmp	r1, r0
	beq	.L1757	@cond_branch
	ldrh	r2, [r2]
	str	r2, [sp, #0x14]
.L1757:
	ldr	r0, .L1921+0x8
	ldr	r0, [r0]
	ldrb	r4, [r0, #0x1]
	str	r4, [sp, #0xc]
	ldrb	r0, [r0, #0x2]
	str	r0, [sp, #0x10]
	ldr	r4, .L1921+0xc
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	str	r0, [sp, #0x8]
	ldr	r1, .L1921+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, #0xc4
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	sl, r0
	ldrb	r0, [r1, #0x12]
	cmp	r0, #0
	beq	.L1758	@cond_branch
	mov	r1, #0x3f
	and	r1, r1, r0
	str	r1, [sp, #0x4]
	b	.L1759
.L1922:
	.align	2, 0
.L1921:
	.word	gChosenMove
	.word	0xffff
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
	.word	gBattleStruct
.L1912:
	ldr	r4, .L1923
	strb	r2, [r4]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	BtlController_EmitSpriteInvisibility
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L1915
.L1924:
	.align	2, 0
.L1923:
	.word	gActiveBattler
.L1913:
	ldr	r4, .L1925
	strb	r2, [r4]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitSpriteInvisibility
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r0, [r1]
	ldr	r2, .L1925+0x4
	and	r0, r0, r2
	str	r0, [r1]
	b	.L1915
.L1926:
	.align	2, 0
.L1925:
	.word	gActiveBattler
	.word	-0x10400c1
.L1914:
	ldr	r0, .L1927
	strb	r4, [r0]
	ldr	r4, .L1927+0x4
	mov	r0, #0x0
	strb	r0, [r4, #0x14]
	bl	MoveValuesCleanUp
	ldrh	r0, [r4, #0x2c]
	strh	r0, [r4, #0x2e]
	ldr	r3, .L1927+0x8
	ldr	r2, .L1927+0xc
	ldr	r0, .L1927+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	bl	BattleScriptPush
	ldr	r1, .L1927+0x14
	ldr	r0, .L1927+0x18
	bl	.L1916	@ far jump
.L1928:
	.align	2, 0
.L1927:
	.word	gBattlerTarget
	.word	gBattleScripting
	.word	gBattleScriptsForMoveEffects
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlushMessageBox
.L1758:
	ldr	r2, .L1929
	ldr	r0, .L1929+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x3]
	str	r0, [sp, #0x4]
.L1759:
	ldr	r4, .L1929+0x8
	b	.L1760
.L1930:
	.align	2, 0
.L1929:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleScripting
.L1910:
	mov	r2, r8
	cmp	r2, #0
	beq	.LCB16321
	bl	.L1761	@far jump
.LCB16321:
.L1760:
	ldrb	r0, [r4, #0x14]
	cmp	r0, #0x19
	bls	.LCB16327
	bl	.L1763	@far jump
.LCB16327:
	lsl	r0, r0, #0x2
	ldr	r1, .L1931
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1932:
	.align	2, 0
.L1931:
	.word	.L1904
	.align	2, 0
	.align	2, 0
.L1904:
	.word	.L1764
	.word	.L1772
	.word	.L1775
	.word	.L1778
	.word	.L1780
	.word	.L1782
	.word	.L1784
	.word	.L1787
	.word	.L1789
	.word	.L1802
	.word	.L1821
	.word	.L1823
	.word	.L1826
	.word	.L1809
	.word	.L1811
	.word	.L1816
	.word	.L1819
	.word	.L1828
	.word	.L1835
	.word	.L1852
	.word	.L1854
	.word	.L1868
	.word	.L1872
	.word	.L1886
	.word	.L1900
	.word	.L1763
.L1764:
	ldr	r2, .L1933
	ldr	r0, .L1933+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r5, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	bne	.LCB16359
	b	.L1765	@long jump
.LCB16359:
	ldr	r1, .L1933+0x8
	ldr	r0, .L1933+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bge	.L1766	@cond_branch
	ldr	r4, .L1933+0x10
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x62
	beq	.L1766	@cond_branch
	ldr	r3, .L1933+0x14
	ldr	r2, .L1933+0x18
	ldr	r4, .L1933+0x10
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x3
	str	r0, [r3]
	cmp	r0, #0
	bne	.L1767	@cond_branch
	str	r5, [r3]
.L1767:
	ldr	r1, .L1933+0x1c
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r2, #0x2
	strb	r2, [r1, #0x1]
	mov	r0, #0x54
	strb	r0, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	bl	BattleScriptPushCursor
	ldr	r1, .L1933+0x20
	ldr	r0, .L1933+0x24
	str	r0, [r1]
	mov	r0, #0x1
	mov	r8, r0
	b	.L1765
.L1934:
	.align	2, 0
.L1933:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SpikyShieldEffect
.L1766:
	ldr	r0, .L1935
	ldr	r3, .L1935+0x4
	ldrb	r2, [r3]
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r1, [r1]
	lsl	r0, r1, #0x1d
	cmp	r0, #0
	bge	.L1769	@cond_branch
	ldr	r0, .L1935+0x8
	ldrb	r5, [r0]
	strb	r2, [r0]
	strb	r5, [r3]
	ldr	r1, .L1935+0xc
	mov	r0, #0x16
	strh	r0, [r1, #0x2e]
	bl	BattleScriptPushCursor
	ldr	r1, .L1935+0x10
	ldr	r0, .L1935+0x14
	str	r0, [r1]
	mov	r1, #0x1
	mov	r8, r1
	b	.L1765
.L1936:
	.align	2, 0
.L1935:
	.word	gProtectStructs
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_KingsShieldEffect
.L1769:
	lsl	r0, r1, #0x1c
	cmp	r0, #0
	bge	.L1765	@cond_branch
	ldr	r1, .L1937
	ldr	r0, .L1937+0x4
	strh	r0, [r1, #0x2e]
	ldr	r1, .L1937+0x8
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r2, #0x2
	strb	r2, [r1, #0x1]
	mov	r0, #0x70
	strb	r0, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	bl	BattleScriptPushCursor
	ldr	r1, .L1937+0xc
	ldr	r0, .L1937+0x10
	str	r0, [r1]
	mov	r2, #0x1
	mov	r8, r2
.L1765:
	ldr	r1, .L1937
	bl	.L1917	@ far jump
.L1938:
	.align	2, 0
.L1937:
	.word	gBattleScripting
	.word	0x4002
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BanefulBunkerEffect
.L1772:
	ldr	r6, .L1939
	ldr	r5, .L1939+0x4
	ldrb	r3, [r5]
	mov	r7, #0x5c
	mov	r2, r3
	mul	r2, r2, r7
	add	r0, r6, #0
	add	r0, r0, #0x54
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1773	@cond_branch
	add	r0, r2, r6
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L1773	@cond_branch
	ldr	r0, .L1939+0x8
	ldrb	r1, [r0]
	cmp	r1, r3
	beq	.L1773	@cond_branch
	add	r3, r0, #0
	ldrb	r0, [r3]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L1773	@cond_branch
	ldr	r0, .L1939+0xc
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1773	@cond_branch
	ldr	r2, .L1939+0x10
	ldrb	r3, [r5]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1774	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L1773	@cond_branch
.L1774:
	ldr	r2, .L1939+0x14
	ldr	r0, .L1939+0x18
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L1773	@cond_branch
	mov	r0, r3
	mul	r0, r0, r7
	add	r1, r0, r6
	ldrb	r2, [r1, #0x19]
	mov	r0, #0x19
	ldrsb	r0, [r1, r0]
	cmp	r0, #0xb
	bgt	.L1773	@cond_branch
	add	r0, r2, #0x1
	strb	r0, [r1, #0x19]
	bl	BattleScriptPushCursor
	ldr	r1, .L1939+0x1c
	ldr	r0, .L1939+0x20
	str	r0, [r1]
	mov	r4, #0x1
	mov	r8, r4
.L1773:
	ldr	r1, .L1939+0x24
	bl	.L1917	@ far jump
.L1940:
	.align	2, 0
.L1939:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gSpecialStatuses
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_RageIsBuilding
	.word	gBattleScripting
.L1775:
	ldr	r4, .L1941
	ldr	r6, .L1941+0x4
	ldrb	r2, [r6]
	mov	r0, #0x5c
	mov	ip, r0
	mov	r1, ip
	mul	r1, r1, r2
	add	r7, r4, #0
	add	r7, r7, #0x50
	add	r5, r1, r7
	ldr	r3, [r5]
	mov	r0, #0x20
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1776	@cond_branch
	add	r0, r1, r4
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L1776	@cond_branch
	ldr	r0, .L1941+0x8
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L1776	@cond_branch
	ldr	r0, .L1941+0xc
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r0, r0, #0x10
	add	r1, r1, r0
	ldr	r0, [r1]
	cmp	r0, #0
	beq	.L1776	@cond_branch
	ldr	r0, .L1941+0x10
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1776	@cond_branch
	ldr	r1, [sp, #0x4]
	cmp	r1, #0xa
	beq	.L1777	@cond_branch
	ldr	r2, .L1941+0x14
	ldr	r0, .L1941+0x18
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0]
	ldr	r0, .L1941+0x1c
	cmp	r1, r0
	bne	.L1776	@cond_branch
.L1777:
	mov	r0, #0x21
	neg	r0, r0
	and	r3, r3, r0
	str	r3, [r5]
	ldr	r4, .L1941+0x20
	ldrb	r0, [r6]
	strb	r0, [r4]
	ldrb	r0, [r6]
	mov	r2, ip
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	bl	BattleScriptPushCursor
	ldr	r1, .L1941+0x24
	ldr	r0, .L1941+0x28
	str	r0, [r1]
	mov	r3, #0x1
	mov	r8, r3
.L1776:
	ldr	r1, .L1941+0x2c
	bl	.L1917	@ far jump
.L1942:
	.align	2, 0
.L1941:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gSpecialStatuses
	.word	gMoveResultFlags
	.word	gBattleMoves
	.word	gCurrentMove
	.word	0x119
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_DefrostedViaFireMove
	.word	gBattleScripting
.L1778:
	ldr	r0, .L1943
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x8
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1779	@cond_branch
	mov	r4, #0x1
	mov	r8, r4
.L1779:
	ldr	r1, .L1943+0x4
	bl	.L1917	@ far jump
.L1944:
	.align	2, 0
.L1943:
	.word	gBattlerTarget
	.word	gBattleScripting
.L1780:
	ldr	r0, .L1945
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x5
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1781	@cond_branch
	mov	r0, #0x1
	mov	r8, r0
.L1781:
	ldr	r1, .L1945+0x4
	bl	.L1917	@ far jump
.L1946:
	.align	2, 0
.L1945:
	.word	gBattlerTarget
	.word	gBattleScripting
.L1782:
	ldr	r0, .L1947
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x4
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1783	@cond_branch
	mov	r1, #0x1
	mov	r8, r1
.L1783:
	ldr	r1, .L1947+0x4
	bl	.L1917	@ far jump
.L1948:
	.align	2, 0
.L1947:
	.word	gBattlerAttacker
	.word	gBattleScripting
.L1784:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x6
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1785	@cond_branch
	mov	r2, #0x1
	mov	r8, r2
	bl	.L1763	@ far jump
.L1785:
	ldr	r1, .L1949
	bl	.L1917	@ far jump
.L1950:
	.align	2, 0
.L1949:
	.word	gBattleScripting
.L1787:
	ldr	r0, .L1951
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x9
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1788	@cond_branch
	mov	r3, #0x1
	mov	r8, r3
.L1788:
	ldr	r1, .L1951+0x4
	bl	.L1917	@ far jump
.L1952:
	.align	2, 0
.L1951:
	.word	gBattlerAttacker
	.word	gBattleScripting
.L1789:
	ldr	r0, .L1953
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1790	@cond_branch
	ldr	r4, [sp, #0x8]
	cmp	r4, #0x1d
	beq	.L1791	@cond_branch
	cmp	r4, #0x43
	beq	.L1791	@cond_branch
	cmp	r4, #0x44
	bne	.L1790	@cond_branch
.L1791:
	ldr	r0, .L1953+0x4
	ldrh	r1, [r0]
	add	r3, r0, #0
	cmp	r1, #0xa5
	beq	.L1790	@cond_branch
	mov	r0, sl
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L1792	@cond_branch
	ldr	r0, .L1953+0x8
	cmp	r1, r0
	bne	.L1790	@cond_branch
.L1792:
	ldr	r2, .L1953+0xc
	ldrh	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, #0x7f
	beq	.L1794	@cond_branch
	cmp	r0, #0x6e
	beq	.L1794	@cond_branch
	cmp	r0, #0xc8
	bne	.L1793	@cond_branch
.L1794:
	ldr	r0, .L1953+0x10
	ldrh	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1793	@cond_branch
	ldr	r1, .L1953+0x14
	bl	.L1917	@ far jump
.L1954:
	.align	2, 0
.L1953:
	.word	gHitMarker
	.word	gChosenMove
	.word	0xffff
	.word	gBattleMoves
	.word	gMoveResultFlags
	.word	gBattleScripting
.L1793:
	ldrh	r0, [r3]
	mov	r1, sl
	strh	r0, [r1]
.L1790:
	mov	r5, #0x0
	ldr	r2, .L1955
	ldr	r3, .L1955+0x4
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	mov	r4, sl
	ldrh	r1, [r4]
	cmp	r0, r1
	beq	.L1796	@cond_branch
	add	r4, r3, #0
	mov	r3, #0x5c
	add	r6, r2, #0
	add	r2, r1, #0
.L1797:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	bgt	.L1796	@cond_branch
	lsl	r0, r5, #0x1
	ldrb	r1, [r4]
	mul	r1, r1, r3
	add	r0, r0, r1
	add	r0, r0, r6
	ldrh	r0, [r0]
	cmp	r0, r2
	bne	.L1797	@cond_branch
.L1796:
	cmp	r5, #0x4
	bne	.L1801	@cond_branch
	mov	r0, #0x0
	mov	r1, sl
	strh	r0, [r1]
.L1801:
	ldr	r1, .L1955+0x8
	bl	.L1917	@ far jump
.L1956:
	.align	2, 0
.L1955:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleScripting
.L1802:
	mov	r5, #0x0
	ldr	r0, .L1957
	add	r3, r0, #0
	ldrb	r2, [r3]
	cmp	r5, r2
	bge	.L1804	@cond_branch
	ldr	r6, .L1957+0x4
	mov	r4, #0x0
	ldr	r2, .L1957+0x8
.L1806:
	ldr	r0, [r6]
	lsl	r1, r5, #0x1
	add	r0, r0, #0xcc
	add	r0, r0, r1
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L1805	@cond_branch
	strh	r1, [r2, #0x30]
	strh	r4, [r0]
.L1805:
	add	r2, r2, #0x5c
	add	r5, r5, #0x1
	ldrb	r0, [r3]
	cmp	r5, r0
	blt	.L1806	@cond_branch
.L1804:
	ldr	r1, .L1957+0xc
	bl	.L1917	@ far jump
.L1958:
	.align	2, 0
.L1957:
	.word	gBattlersCount
	.word	gBattleStruct
	.word	gBattleMons
	.word	gBattleScripting
.L1809:
	ldr	r0, .L1959
	ldrb	r1, [r0]
	mov	r0, #0x5
	mov	r2, #0x0
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1810	@cond_branch
	mov	r1, #0x1
	mov	r8, r1
.L1810:
	ldr	r1, .L1959+0x4
	bl	.L1917	@ far jump
.L1960:
	.align	2, 0
.L1959:
	.word	gBattlerTarget
	.word	gBattleScripting
.L1811:
	ldr	r0, .L1961
	ldr	r1, [r0]
	mov	r5, #0xd1
	lsl	r5, r5, #0x2
	add	r1, r1, r5
	ldrh	r1, [r1]
	cmp	r1, #0x36
	bne	.L1812	@cond_branch
	ldr	r0, .L1961+0x4
	ldrb	r0, [r0]
	bl	TryKnockOffBattleScript
	mov	r8, r0
.L1812:
	ldr	r2, .L1961
	ldr	r0, [r2]
	add	r0, r0, r5
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r1, .L1961+0x8
	bl	.L1917	@ far jump
.L1962:
	.align	2, 0
.L1961:
	.word	gBattleStruct
	.word	gBattlerTarget
	.word	gBattleScripting
.L1816:
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1817	@cond_branch
	mov	r3, #0x1
	mov	r8, r3
	bl	.L1763	@ far jump
.L1817:
	ldr	r1, .L1963
	bl	.L1917	@ far jump
.L1964:
	.align	2, 0
.L1963:
	.word	gBattleScripting
.L1819:
	mov	r0, #0x4
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1820	@cond_branch
	mov	r4, #0x1
	mov	r8, r4
.L1820:
	ldr	r1, .L1965
	bl	.L1917	@ far jump
.L1966:
	.align	2, 0
.L1965:
	.word	gBattleScripting
.L1821:
	ldr	r1, .L1967
	ldr	r0, .L1967+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1967+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1822	@cond_branch
	ldr	r0, .L1967+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB17217
	b	.L1912	@long jump
.LCB17217:
.L1822:
	ldr	r1, .L1967+0x10
	bl	.L1917	@ far jump
.L1968:
	.align	2, 0
.L1967:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	0x10400c0
	.word	gHitMarker
	.word	gBattleScripting
.L1823:
	ldr	r0, .L1969
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1825	@cond_branch
	ldr	r1, .L1969+0x4
	ldr	r0, .L1969+0x8
	ldrb	r2, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1969+0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1825	@cond_branch
	add	r0, r2, #0
	bl	WasUnableToUseMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1824	@cond_branch
.L1825:
	ldr	r4, .L1969+0x10
	ldr	r5, .L1969+0x8
	ldrb	r0, [r5]
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitSpriteInvisibility
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, .L1969+0x4
	ldrb	r2, [r5]
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L1969+0x14
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L1969+0x18
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1915:
	ldr	r1, .L1969+0x1c
	ldrb	r0, [r1, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x14]
	bl	.L1755	@ far jump
.L1970:
	.align	2, 0
.L1969:
	.word	gMoveResultFlags
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	0x10400c0
	.word	gActiveBattler
	.word	-0x10400c1
	.word	gSpecialStatuses
	.word	gBattleScripting
.L1824:
	ldr	r1, .L1971
	bl	.L1917	@ far jump
.L1972:
	.align	2, 0
.L1971:
	.word	gBattleScripting
.L1826:
	ldr	r0, .L1973
	ldr	r6, .L1973+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L1827	@cond_branch
	ldr	r0, .L1973+0x8
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L1827	@cond_branch
	ldr	r5, .L1973+0xc
	lsl	r0, r2, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	ldr	r1, .L1973+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB17350
	b	.L1913	@long jump
.LCB17350:
.L1827:
	ldr	r1, .L1973+0x14
	bl	.L1917	@ far jump
.L1974:
	.align	2, 0
.L1973:
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gStatuses3
	.word	0x10400c0
	.word	gBattleScripting
.L1828:
	mov	r5, #0x0
	ldr	r0, .L1975
	add	r3, r0, #0
	ldrb	r0, [r3]
	cmp	r5, r0
	bge	.L1830	@cond_branch
	ldr	r2, .L1975+0x4
	ldr	r4, .L1975+0x8
	ldr	r1, .L1975+0xc
.L1832:
	ldrb	r0, [r2, #0xe]
	cmp	r0, #0
	bne	.L1831	@cond_branch
	ldr	r0, [r1]
	and	r0, r0, r4
	str	r0, [r1]
.L1831:
	add	r2, r2, #0x28
	add	r1, r1, #0x5c
	add	r5, r5, #0x1
	ldrb	r0, [r3]
	cmp	r5, r0
	blt	.L1832	@cond_branch
.L1830:
	ldr	r1, .L1975+0x10
	bl	.L1917	@ far jump
.L1976:
	.align	2, 0
.L1975:
	.word	gBattlersCount
	.word	gDisableStructs
	.word	-0x1000001
	.word	gBattleMons+0x54
	.word	gBattleScripting
.L1835:
	ldr	r2, .L1977
	ldrh	r1, [r2]
	mov	r0, #0x28
	and	r0, r0, r1
	mov	r9, r2
	cmp	r0, #0
	beq	.L1836	@cond_branch
	ldr	r5, .L1977+0x4
	ldr	r2, [r5]
	mov	r1, #0xb0
	lsl	r1, r1, #0x2
	add	r2, r2, r1
	ldr	r4, .L1977+0x8
	ldr	r3, .L1977+0xc
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	b	.L1918
.L1978:
	.align	2, 0
.L1977:
	.word	gMoveResultFlags
	.word	gBattleStruct
	.word	gBitTable
	.word	gBattlerAttacker
.L1836:
	ldr	r5, .L1979
	ldr	r2, [r5]
	mov	r3, #0xb0
	lsl	r3, r3, #0x2
	add	r2, r2, r3
	ldr	r4, .L1979+0x4
	ldr	r3, .L1979+0x8
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, [r0]
	ldrb	r0, [r2]
	bic	r0, r0, r1
.L1918:
	strb	r0, [r2]
	add	r7, r4, #0
	ldr	r1, .L1979+0xc
	ldr	r3, [r1]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	and	r0, r0, r3
	add	r6, r1, #0
	cmp	r0, #0
	beq	.L1838	@cond_branch
	ldr	r0, .L1979+0x10
	ldr	r4, .L1979+0x8
	ldrb	r2, [r4]
	strb	r2, [r0]
	ldr	r1, .L1979+0x14
	ldrb	r0, [r1]
	strb	r0, [r4]
	strb	r2, [r1]
	ldr	r0, .L1979+0x18
	and	r3, r3, r0
	str	r3, [r6]
.L1838:
	ldr	r0, .L1979+0x1c
	ldr	r1, .L1979+0x8
	ldrb	r3, [r1]
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r1, [r1, #0x4]
	lsl	r1, r1, #0x1b
	add	r5, r0, #0
	cmp	r1, #0
	blt	.L1839	@cond_branch
	ldr	r0, .L1979+0x20
	lsl	r2, r3, #0x2
	add	r2, r2, r3
	lsl	r2, r2, #0x3
	add	r2, r2, r0
	add	r2, r2, #0x24
	ldrb	r4, [r2]
	lsl	r3, r4, #0x1c
	lsr	r3, r3, #0x1c
	ldr	r0, .L1979+0x24
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, [r0]
	orr	r1, r1, r3
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L1979
	ldr	r1, [r2]
	ldr	r3, .L1979+0x28
	add	r1, r1, r3
	ldr	r4, .L1979+0x8
	ldrb	r4, [r4]
	add	r1, r1, r4
	ldr	r0, .L1979+0x14
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, [r6]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1839	@cond_branch
	ldr	r0, .L1979+0x2c
	ldr	r2, .L1979+0x8
	ldrb	r1, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r0, .L1979+0x30
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L1979+0x34
	ldr	r0, .L1979+0x38
	ldrh	r0, [r0]
	strh	r0, [r1]
.L1839:
	ldr	r0, .L1979+0x3c
	ldrb	r1, [r0]
	ldr	r4, .L1979+0x8
	ldrb	r3, [r4]
	lsl	r0, r3, #0x2
	add	r0, r0, r7
	ldr	r2, [r0]
	and	r1, r1, r2
	cmp	r1, #0
	beq	.LCB17587
	b	.L1841	@long jump
.LCB17587:
	ldr	r1, .L1979
	ldr	r0, [r1]
	add	r0, r0, #0x8a
	ldrb	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.LCB17595
	b	.L1841	@long jump
.LCB17595:
	ldr	r1, .L1979+0x40
	ldr	r2, [sp, #0x14]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	ip, r1
	cmp	r0, #0x7f
	bne	.LCB17607
	b	.L1841	@long jump
.LCB17607:
	cmp	r0, #0x6e
	bne	.LCB17609
	b	.L1841	@long jump
.LCB17609:
	ldr	r0, [r6]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1842	@cond_branch
	lsl	r2, r3, #0x1
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldrb	r0, [r0, #0x4]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	blt	.L1844	@cond_branch
	ldr	r1, .L1979+0x44
	add	r1, r2, r1
	ldr	r0, .L1979+0x30
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r0, .L1979+0x48
	ldrb	r1, [r4]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r0, .L1979+0x38
	ldrh	r0, [r0]
	strh	r0, [r1]
	b	.L1844
.L1980:
	.align	2, 0
.L1979:
	.word	gBattleStruct
	.word	gBitTable
	.word	gBattlerAttacker
	.word	gHitMarker
	.word	gActiveBattler
	.word	gBattlerTarget
	.word	-0x1001
	.word	gSpecialStatuses
	.word	gDisableStructs
	.word	gCurrMovePos
	.word	0x2c1
	.word	gLastPrintedMoves
	.word	gChosenMove
	.word	gLastUsedMove
	.word	gCurrentMove
	.word	gAbsentBattlerFlags
	.word	gBattleMoves
	.word	gLastMoves
	.word	gLastResultingMoves
.L1842:
	ldr	r1, .L1981
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldr	r1, .L1981+0x4
	strh	r1, [r0]
	ldr	r1, .L1981+0x8
	ldr	r3, .L1981+0xc
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x1
	neg	r1, r1
	strh	r1, [r0]
.L1844:
	ldr	r2, .L1981+0x10
	ldrb	r3, [r2]
	lsl	r0, r3, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	lsl	r0, r0, #0x1c
	ldr	r1, [r6]
	and	r1, r1, r0
	add	r4, r2, #0
	cmp	r1, #0
	bne	.L1845	@cond_branch
	ldr	r0, .L1981+0x14
	add	r0, r3, r0
	ldr	r2, .L1981+0xc
	ldrb	r1, [r2]
	strb	r1, [r0]
.L1845:
	ldr	r0, [r6]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1846	@cond_branch
	mov	r3, r9
	ldrh	r1, [r3]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1846	@cond_branch
	ldr	r0, .L1981+0x18
	ldrh	r2, [r0]
	ldr	r0, .L1981+0x4
	cmp	r2, r0
	bne	.L1847	@cond_branch
	ldr	r1, .L1981+0x1c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	b	.L1841
.L1982:
	.align	2, 0
.L1981:
	.word	gLastMoves
	.word	0xffff
	.word	gLastResultingMoves
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gLastHitBy
	.word	gChosenMove
	.word	gLastLandedMoves
.L1847:
	ldr	r0, .L1983
	ldrb	r1, [r4]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r2, .L1983+0x4
	ldrh	r0, [r2]
	strh	r0, [r1]
	ldr	r1, .L1983+0x8
	ldr	r0, [r1]
	ldrb	r5, [r0, #0x12]
	add	r7, r2, #0
	cmp	r5, #0
	beq	.L1849	@cond_branch
	ldr	r0, .L1983+0xc
	ldrb	r1, [r4]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	mov	r0, #0x3f
	and	r0, r0, r5
	b	.L1919
.L1984:
	.align	2, 0
.L1983:
	.word	gLastLandedMoves
	.word	gCurrentMove
	.word	gBattleStruct
	.word	gLastHitByType
.L1849:
	ldr	r0, .L1985
	ldrb	r2, [r4]
	lsl	r2, r2, #0x1
	add	r2, r2, r0
	ldrh	r1, [r7]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r0, [r0, #0x3]
	strh	r0, [r2]
	b	.L1841
.L1986:
	.align	2, 0
.L1985:
	.word	gLastHitByType
.L1846:
	ldr	r0, .L1987
	ldrb	r1, [r4]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r0, .L1987+0x4
.L1919:
	strh	r0, [r1]
.L1841:
	ldr	r1, .L1987+0x8
	b	.L1917
.L1988:
	.align	2, 0
.L1987:
	.word	gLastLandedMoves
	.word	0xffff
	.word	gBattleScripting
.L1852:
	ldr	r0, .L1989
	ldrb	r1, [r0]
	ldr	r7, .L1989+0x4
	ldr	r2, .L1989+0x8
	ldrb	r6, [r2]
	lsl	r0, r6, #0x2
	add	r0, r0, r7
	ldr	r5, [r0]
	and	r1, r1, r5
	cmp	r1, #0
	bne	.L1853	@cond_branch
	ldr	r0, .L1989+0xc
	ldr	r3, [r0]
	add	r0, r3, #0
	add	r0, r0, #0x8a
	ldrb	r0, [r0]
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L1853	@cond_branch
	ldr	r1, .L1989+0x10
	ldr	r2, [sp, #0x14]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1853	@cond_branch
	ldr	r0, .L1989+0x14
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1853	@cond_branch
	ldr	r4, .L1989+0x18
	ldrb	r0, [r4]
	cmp	r6, r0
	beq	.L1853	@cond_branch
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	lsl	r0, r0, #0x1c
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1853	@cond_branch
	ldr	r0, .L1989+0x1c
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1853	@cond_branch
	lsl	r0, r2, #0x1
	add	r1, r3, #0
	add	r1, r1, #0x92
	add	r1, r1, r0
	ldr	r0, .L1989+0x20
	ldrh	r2, [r0]
	strh	r2, [r1]
	ldr	r0, .L1989+0x8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1
	ldrb	r0, [r4]
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r0, r3, #0
	add	r0, r0, #0xda
	add	r0, r0, r1
	strh	r2, [r0]
.L1853:
	ldr	r1, .L1989+0x24
	b	.L1917
.L1990:
	.align	2, 0
.L1989:
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	gBattleMoves
	.word	gHitMarker
	.word	gBattlerTarget
	.word	gMoveResultFlags
	.word	gChosenMove
	.word	gBattleScripting
.L1854:
	ldr	r6, .L1991
	ldr	r3, [r6]
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	and	r0, r0, r3
	ldr	r7, .L1991+0x4
	cmp	r0, #0
	bne	.L1855	@cond_branch
	ldr	r0, .L1991+0x8
	ldr	r1, [r0]
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1855	@cond_branch
	ldr	r0, .L1991+0xc
	ldr	r2, .L1991+0x10
	ldrb	r1, [r2]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	blt	.L1855	@cond_branch
	ldr	r2, .L1991+0x14
	ldrh	r1, [r7]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x7]
	cmp	r1, #0x8
	beq	.L1856	@cond_branch
	cmp	r1, #0x20
	bne	.L1855	@cond_branch
.L1856:
	mov	r5, #0x80
	lsl	r5, r5, #0x2
	add	r0, r3, #0
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L1855	@cond_branch
	cmp	r1, #0x20
	bne	.L1857	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	orr	r3, r3, r0
	str	r3, [r6]
	ldr	r0, .L1991+0x18
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	b	.L1920
.L1992:
	.align	2, 0
.L1991:
	.word	gHitMarker
	.word	gCurrentMove
	.word	gBattleTypeFlags
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gBattlerTarget
.L1860:
	add	r0, r4, #0x1
.L1920:
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1993
	ldrb	r0, [r0]
	cmp	r4, r0
	bcs	.L1865	@cond_branch
	ldr	r0, .L1993+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L1860	@cond_branch
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L1860	@cond_branch
	b	.L1865
.L1994:
	.align	2, 0
.L1993:
	.word	gBattlersCount
	.word	gBattlerAttacker
.L1857:
	ldr	r0, .L1995
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, [r6]
	orr	r0, r0, r5
	str	r0, [r6]
.L1865:
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.LCB18083
	bl	.L1914	@far jump
.LCB18083:
	ldr	r2, .L1995+0x4
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	orr	r1, r1, r0
	ldr	r0, .L1995+0x8
	and	r1, r1, r0
	str	r1, [r2]
	ldr	r7, .L1995+0xc
.L1855:
	ldr	r3, .L1995+0x10
	ldrb	r0, [r3]
	ldrh	r1, [r7]
	bl	RecordLastUsedMoveBy
	ldr	r1, .L1995+0x14
	b	.L1917
.L1996:
	.align	2, 0
.L1995:
	.word	gBattlerTarget
	.word	gHitMarker
	.word	-0x801
	.word	gCurrentMove
	.word	gBattlerAttacker
	.word	gBattleScripting
.L1868:
	ldr	r4, .L1997
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x4e
	bne	.L1869	@cond_branch
	ldr	r4, .L1997
	ldrb	r0, [r4]
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L1869	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x7d
	bne	.L1870	@cond_branch
	ldr	r2, .L1997+0x4
	ldr	r0, .L1997+0x8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1869	@cond_branch
.L1870:
	ldr	r1, .L1997
	ldrb	r0, [r1]
	bl	GetBattlerAbility
	cmp	r0, #0x62
	beq	.L1869	@cond_branch
	ldr	r0, .L1997+0xc
	ldr	r3, .L1997
	ldrb	r2, [r3]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	beq	.L1869	@cond_branch
	ldr	r5, .L1997+0x10
	ldr	r6, .L1997+0x14
	mov	r4, #0x5c
	mov	r0, r2
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2e]
	mov	r1, #0xa
	bl	__udivsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [r5]
	cmp	r0, #0
	bne	.L1871	@cond_branch
	mov	r0, #0x1
	str	r0, [r5]
.L1871:
	mov	r0, #0x1
	mov	r8, r0
	bl	BattleScriptPushCursor
	ldr	r1, .L1997+0x18
	ldr	r0, .L1997+0x1c
	str	r0, [r1]
	ldr	r1, .L1997+0x20
	ldr	r2, .L1997
	ldrb	r0, [r2]
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x30]
	strh	r0, [r1]
.L1869:
	ldr	r1, .L1997+0x24
	b	.L1917
.L1998:
	.align	2, 0
.L1997:
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gSpecialStatuses
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ItemHurtRet
	.word	gLastUsedItem
	.word	gBattleScripting
.L1872:
	ldr	r2, .L1999
	ldr	r0, .L1999+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1873	@cond_branch
	mov	r6, #0x0
	ldr	r0, .L1999+0x8
	ldr	r0, [r0]
	mov	r3, #0xb0
	lsl	r3, r3, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0]
	ldr	r2, .L1999+0xc
	ldr	r3, .L1999+0x10
	ldrb	r5, [r3]
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1873	@cond_branch
	ldr	r3, .L1999+0x14
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrb	r0, [r0, #0x4]
	lsl	r2, r0, #0x1b
	cmp	r2, #0
	blt	.L1875	@cond_branch
	ldr	r0, .L1999+0x18
	lsl	r1, r5, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	bne	.L1873	@cond_branch
.L1875:
	cmp	r2, #0
	blt	.L1876	@cond_branch
	ldr	r0, .L1999+0x1c
	ldrb	r0, [r0]
	mov	r1, #0x4
	add	r2, r4, #0
	add	r2, r2, #0x20
	orr	r1, r1, r0
	strb	r1, [r2]
	ldr	r4, .L1999+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r2]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrb	r1, [r0, #0x4]
	mov	r2, #0x10
	orr	r1, r1, r2
	strb	r1, [r0, #0x4]
.L1876:
	mov	r4, #0x0
	add	r2, r3, #0
	ldr	r7, .L1999+0x20
	mov	r5, #0x5c
.L1880:
	add	r0, r4, #0
	str	r2, [sp, #0x18]
	bl	GetBattlerAbility
	ldr	r2, [sp, #0x18]
	cmp	r0, #0xd8
	bne	.L1879	@cond_branch
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	blt	.L1879	@cond_branch
	cmp	r6, #0
	beq	.L1883	@cond_branch
	mov	r1, r4
	mul	r1, r1, r5
	add	r1, r1, r7
	mov	r0, #0x3
	and	r0, r0, r6
	mul	r0, r0, r5
	add	r0, r0, r7
	ldrh	r1, [r1, #0x6]
	ldrh	r0, [r0, #0x6]
	cmp	r1, r0
	bcs	.L1879	@cond_branch
.L1883:
	mov	r0, #0x4
	add	r6, r4, #0
	orr	r6, r6, r0
.L1879:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L1880	@cond_branch
	cmp	r6, #0
	beq	.L1873	@cond_branch
	mov	r0, #0x3
	and	r6, r6, r0
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xe
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1873	@cond_branch
	mov	r0, #0x1
	mov	r8, r0
.L1873:
	ldr	r1, .L1999+0x24
	b	.L1917
.L2000:
	.align	2, 0
.L1999:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleStruct
	.word	gBitTable
	.word	gBattlerAttacker
	.word	gSpecialStatuses
	.word	gProtectStructs
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattleScripting
.L1886:
	mov	r5, #0x0
	ldr	r0, .L2001
	add	r3, r0, #0
	ldrb	r1, [r3]
	cmp	r5, r1
	bge	.L1888	@cond_branch
	ldr	r4, .L2001+0x4
.L1890:
	ldr	r0, .L2001+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r5, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x20
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1889	@cond_branch
	mov	r0, #0x21
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r1, .L2001+0xc
	ldr	r0, .L2001+0x10
	strb	r5, [r0]
	strb	r5, [r1]
	bl	BattleScriptPushCursor
	ldr	r0, .L2001+0x14
	ldr	r0, [r0]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1893	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1892	@cond_branch
.L1893:
	ldr	r0, .L2001+0x18
	str	r0, [r4]
	b	.L1755
.L2002:
	.align	2, 0
.L2001:
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	gBattleResources
	.word	gBattlerTarget
	.word	gBattlerAbility
	.word	gBattleTypeFlags
	.word	BattleScript_EmergencyExit
.L1892:
	ldr	r0, .L2003
	str	r0, [r4]
	b	.L1755
.L2004:
	.align	2, 0
.L2003:
	.word	BattleScript_EmergencyExitWild
.L1889:
	add	r5, r5, #0x1
	ldrb	r2, [r3]
	cmp	r5, r2
	blt	.L1890	@cond_branch
.L1888:
	ldr	r1, .L2005
	b	.L1917
.L2006:
	.align	2, 0
.L2005:
	.word	gBattleScripting
.L1900:
	ldr	r6, .L2007
	ldr	r4, .L2007+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r0, [r0, #0x1]
	lsl	r2, r0, #0x18
	lsr	r0, r2, #0x1d
	cmp	r0, #0
	beq	.L1901	@cond_branch
	ldr	r3, .L2007+0x8
	ldr	r0, [r3]
	add	r0, r1, r0
	lsr	r2, r2, #0x1d
	mov	r1, #0x3
	and	r1, r1, r2
	strb	r1, [r0, #0xc]
.L1901:
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r0, [r0, #0x4]
	lsl	r2, r0, #0x18
	lsr	r0, r2, #0x1d
	cmp	r0, #0
	beq	.L1902	@cond_branch
	ldr	r3, .L2007+0x8
	ldr	r0, [r3]
	add	r0, r1, r0
	lsr	r2, r2, #0x1d
	mov	r1, #0x3
	and	r1, r1, r2
	strb	r1, [r0, #0xc]
.L1902:
	ldr	r0, .L2007+0xc
	ldrb	r1, [r4]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0x2]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1, #0x2]
	ldr	r1, .L2007+0x8
	ldr	r0, [r1]
	ldr	r2, .L2007+0x10
	add	r0, r0, r2
	ldrb	r3, [r4]
	add	r0, r0, r3
	mov	r3, #0x0
	strb	r3, [r0]
	ldr	r0, .L2007+0x14
	ldrb	r2, [r4]
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L2007+0x18
	and	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrb	r2, [r1, #0x2]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x2]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrb	r2, [r1, #0x4]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x4]
	ldr	r0, .L2007+0x1c
	ldrb	r0, [r0]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrb	r2, [r1, #0x2]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x2]
	ldr	r1, .L2007+0x20
	strh	r3, [r1, #0x2e]
.L1917:
	ldrb	r0, [r1, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x14]
.L1763:
	ldr	r4, .L2007+0x20
	ldr	r0, [sp, #0xc]
	cmp	r0, #0x1
	bne	.L1906	@cond_branch
	mov	r1, r8
	cmp	r1, #0
	bne	.L1906	@cond_branch
	mov	r0, #0x19
	strb	r0, [r4, #0x14]
.L1906:
	ldr	r2, [sp, #0xc]
	cmp	r2, #0x2
	bne	.L1762	@cond_branch
	ldr	r3, [sp, #0x10]
	ldrb	r0, [r4, #0x14]
	cmp	r3, r0
	bne	.L1762	@cond_branch
	mov	r0, #0x19
	strb	r0, [r4, #0x14]
.L1762:
	ldrb	r0, [r4, #0x14]
	cmp	r0, #0x19
	beq	.LCB18663
	bl	.L1910	@far jump
.LCB18663:
.L1761:
	ldrb	r0, [r4, #0x14]
	cmp	r0, #0x19
	bne	.L1755	@cond_branch
	mov	r1, r8
	cmp	r1, #0
	bne	.L1755	@cond_branch
	ldr	r1, .L2007+0x24
	ldr	r0, [r1]
	add	r0, r0, #0x3
.L1916:
	str	r0, [r1]
.L1755:
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2008:
	.align	2, 0
.L2007:
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	gProtectStructs
	.word	0x287
	.word	gStatuses3
	.word	-0x400001
	.word	gBattlerTarget
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe92:
	.size	 Cmd_moveend,.Lfe92-Cmd_moveend
	.align	2, 0
	.type	 Cmd_sethealblock,function
	.thumb_func
Cmd_sethealblock:
	push	{r4, lr}
	ldr	r0, .L2012
	ldr	r4, .L2012+0x4
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r3, #0x80
	lsl	r3, r3, #0x14
	add	r0, r2, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L2010	@cond_branch
	ldr	r3, .L2012+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2011
.L2013:
	.align	2, 0
.L2012:
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L2010:
	orr	r2, r2, r3
	str	r2, [r1]
	ldr	r2, .L2014
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	add	r0, r0, #0x21
	mov	r1, #0x5
	strb	r1, [r0]
	ldr	r1, .L2014+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2011:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2015:
	.align	2, 0
.L2014:
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
.Lfe93:
	.size	 Cmd_sethealblock,.Lfe93-Cmd_sethealblock
	.align	2, 0
	.type	 Cmd_returnatktoball,function
	.thumb_func
Cmd_returnatktoball:
	push	{r4, lr}
	ldr	r4, .L2018
	ldr	r0, .L2018+0x4
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r2, .L2018+0x8
	ldr	r1, .L2018+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2017	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitReturnMonToBall
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L2017:
	ldr	r1, .L2018+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2019:
	.align	2, 0
.L2018:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gHitMarker
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.Lfe94:
	.size	 Cmd_returnatktoball,.Lfe94-Cmd_returnatktoball
	.align	2, 0
	.type	 Cmd_getswitchedmondata,function
	.thumb_func
Cmd_getswitchedmondata:
	push	{r4, r5, lr}
	ldr	r0, .L2022
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2020	@cond_branch
	ldr	r5, .L2022+0x4
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L2022+0x8
	strb	r0, [r4]
	ldr	r3, .L2022+0xc
	ldrb	r0, [r4]
	lsl	r2, r0, #0x1
	add	r2, r2, r3
	ldr	r1, .L2022+0x10
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	strh	r0, [r2]
	ldr	r1, .L2022+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitGetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L2020:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2023:
	.align	2, 0
.L2022:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBitTable
.Lfe95:
	.size	 Cmd_getswitchedmondata,.Lfe95-Cmd_getswitchedmondata
	.align	2, 0
	.type	 Cmd_switchindataupdate,function
	.thumb_func
Cmd_switchindataupdate:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x5c
	ldr	r0, .L2039
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB18893
	b	.L2024	@long jump
.LCB18893:
	ldr	r0, .L2039+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L2039+0x8
	strb	r0, [r4]
	ldr	r6, .L2039+0xc
	ldrb	r0, [r4]
	mov	r5, #0x5c
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r6
	mov	r0, sp
	mov	r2, #0x5c
	bl	memcpy
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r5, r0, r6
	mov	r3, #0x0
	ldr	r7, .L2039+0x10
	mov	r6, #0x82
	lsl	r6, r6, #0x4
.L2029:
	add	r2, r5, r3
	ldr	r1, [r7]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x4
	add	r0, r3, r0
	add	r1, r1, r6
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x5b
	bls	.L2029	@cond_branch
	ldr	r4, .L2039+0xc
	ldr	r6, .L2039+0x8
	ldrb	r0, [r6]
	mov	r7, #0x5c
	mov	r1, r0
	mul	r1, r1, r7
	add	r1, r1, r4
	ldrh	r0, [r1]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	ldrb	r1, [r1, #0x1]
	lsr	r1, r1, #0x3
	bl	GetFormSpeciesId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r6]
	mov	r2, r1
	mul	r2, r2, r7
	add	r2, r2, r4
	ldr	r3, .L2039+0x14
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrb	r0, [r1, #0x6]
	add	r2, r2, #0x22
	strb	r0, [r2]
	ldrb	r0, [r6]
	mul	r0, r0, r7
	add	r0, r0, r4
	ldrb	r1, [r1, #0x7]
	add	r0, r0, #0x23
	strb	r1, [r0]
	ldrb	r0, [r6]
	mul	r0, r0, r7
	add	r0, r0, r4
	add	r0, r0, #0x24
	mov	r1, #0x9
	strb	r1, [r0]
	ldrb	r0, [r6]
	mov	r2, r0
	mul	r2, r2, r7
	add	r2, r2, r4
	ldrh	r0, [r2]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	ldrb	r1, [r2, #0x17]
	lsr	r1, r1, #0x6
	ldrb	r2, [r2, #0x1]
	lsr	r2, r2, #0x3
	bl	GetAbilityBySpecies
	ldrb	r1, [r6]
	mul	r1, r1, r7
	add	r1, r1, r4
	strh	r0, [r1, #0x20]
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L2039+0x18
	add	r0, r0, #0x19
	add	r0, r3, r0
	ldrb	r1, [r0]
	ldr	r3, .L2039+0x1c
	ldr	r2, .L2039+0x20
	ldrb	r5, [r6]
	lsl	r0, r5, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L2031	@cond_branch
	mov	r0, r5
	mul	r0, r0, r7
	add	r0, r0, r4
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
.L2031:
	ldr	r2, .L2039+0x24
	ldr	r0, .L2039+0x28
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, #0x7f
	bne	.L2032	@cond_branch
	mov	r3, #0x0
	add	r7, r6, #0
	mov	r6, #0x5c
	add	r5, r4, #0
	add	r5, r5, #0x18
	add	r2, sp, #0x18
.L2036:
	ldrb	r0, [r7]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r3, r1
	add	r1, r1, r5
	add	r0, r2, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r3, r3, #0x1
	cmp	r3, #0x7
	ble	.L2036	@cond_branch
	ldr	r0, .L2039+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r4, #0
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r1, [sp, #0x54]
	str	r1, [r0]
.L2032:
	bl	SwitchInClearSetData
	ldr	r0, .L2039+0x2c
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2038	@cond_branch
	ldr	r4, .L2039+0xc
	ldr	r0, .L2039+0x8
	ldrb	r3, [r0]
	mov	r0, #0x5c
	mov	r2, r3
	mul	r2, r2, r0
	add	r1, r2, r4
	ldrh	r0, [r1, #0x2e]
	lsr	r0, r0, #0x1
	ldrh	r1, [r1, #0x2a]
	cmp	r0, r1
	bcc	.L2038	@cond_branch
	cmp	r1, #0
	beq	.L2038	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2038	@cond_branch
	ldr	r0, .L2039+0x30
	ldr	r2, [r0]
	add	r2, r2, #0x8b
	ldr	r1, .L2039+0x1c
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
.L2038:
	ldr	r0, .L2039+0x34
	ldr	r3, .L2039+0x8
	ldrb	r2, [r3]
	strb	r2, [r0, #0x17]
	ldr	r1, .L2039+0x38
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x7
	strb	r0, [r1, #0x1]
	strb	r2, [r1, #0x2]
	ldr	r2, .L2039+0x20
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L2039+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L2024:
	add	sp, sp, #0x5c
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2040:
	.align	2, 0
.L2039:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattleResources
	.word	gBaseStats
	.word	gWishFutureKnock
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleTypeFlags
	.word	gBattleStruct
	.word	gBattleScripting
	.word	gBattleTextBuff1
.Lfe96:
	.size	 Cmd_switchindataupdate,.Lfe96-Cmd_switchindataupdate
	.align	2, 0
	.type	 Cmd_switchinanim,function
	.thumb_func
Cmd_switchinanim:
	push	{r4, r5, r6, lr}
	ldr	r0, .L2045
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2041	@cond_branch
	ldr	r0, .L2045+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r6, .L2045+0x8
	strb	r0, [r6]
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L2043	@cond_branch
	ldr	r0, .L2045+0xc
	ldr	r0, [r0]
	ldr	r1, .L2045+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2043	@cond_branch
	ldr	r4, .L2045+0x14
	ldrb	r0, [r6]
	mov	r5, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r6]
	mul	r1, r1, r5
	add	r4, r4, #0x4c
	add	r1, r1, r4
	ldr	r2, [r1]
	mov	r1, #0x2
	bl	HandleSetPokedexFlag
.L2043:
	ldr	r2, .L2045+0x18
	ldr	r1, .L2045+0x1c
	ldr	r5, .L2045+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2045+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r4, .L2045+0x4
	ldr	r0, [r4]
	ldrb	r2, [r0, #0x2]
	mov	r0, #0x0
	bl	BtlController_EmitSwitchInAnim
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	ldr	r0, .L2045+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2041	@cond_branch
	bl	BattleArena_InitPoints
.L2041:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2046:
	.align	2, 0
.L2045:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	0x63f0902
	.word	gBattleMons
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlerPartyIndexes
.Lfe97:
	.size	 Cmd_switchinanim,.Lfe97-Cmd_switchinanim
	.align	2, 0
	.globl	CanBattlerSwitch
	.type	 CanBattlerSwitch,function
	.thumb_func
CanBattlerSwitch:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	ldr	r0, .L2113
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0xf
	and	r1, r1, r2
	cmp	r1, #0
	bne	.LCB19324
	b	.L2057	@long jump
.LCB19324:
	ldr	r0, .L2113+0x4
	ldrh	r1, [r0]
	ldr	r0, .L2113+0x8
	lsl	r4, r7, #0x18
	cmp	r1, r0
	bne	.L2048	@cond_branch
	lsr	r0, r4, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L2048	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L2113+0xc
	mov	r8, r0
	mov	r5, #0x0
.L2052:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L2051	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L2051	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L2051	@cond_branch
	ldr	r1, .L2113+0x10
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L2051	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.LCB19398
	b	.L2105	@long jump
.LCB19398:
.L2051:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L2052	@cond_branch
	b	.L2105
.L2114:
	.align	2, 0
.L2113:
	.word	gBattleTypeFlags
	.word	gTrainerBattleOpponent_B
	.word	0xffff
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
.L2048:
	ldr	r0, .L2115
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0xf
	and	r1, r1, r2
	cmp	r1, #0
	beq	.L2057	@cond_branch
	lsr	r0, r4, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L2115+0x4
	mov	r8, r1
	cmp	r0, #0x1
	bne	.L2058	@cond_branch
	ldr	r0, .L2115+0x8
	mov	r8, r0
.L2058:
	mov	r5, #0x0
	mov	r0, #0x2
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L2060	@cond_branch
	mov	r5, #0x3
.L2060:
	add	r6, r5, #0x3
	cmp	r5, r6
	bge	.L2062	@cond_branch
	ldr	r1, .L2115+0xc
	lsl	r0, r7, #0x1
	add	r7, r0, r1
.L2064:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L2063	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L2063	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L2063	@cond_branch
	ldrh	r0, [r7]
	cmp	r0, r5
	bne	.L2062	@cond_branch
.L2063:
	add	r5, r5, #0x1
	cmp	r5, r6
	blt	.L2064	@cond_branch
.L2062:
	add	r1, r5, #0
	eor	r1, r1, r6
	b	.L2111
.L2116:
	.align	2, 0
.L2115:
	.word	gBattleTypeFlags
	.word	gPlayerParty
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
.L2057:
	ldr	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2069	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x10
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L2070	@cond_branch
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2071	@cond_branch
	ldr	r0, .L2117
	b	.L2112
.L2118:
	.align	2, 0
.L2117:
	.word	gPlayerParty
.L2071:
	ldr	r1, .L2119
	mov	r8, r1
	mov	r5, #0x3
	cmp	r7, #0x1
	bne	.L2076	@cond_branch
	mov	r5, #0x0
	b	.L2076
.L2120:
	.align	2, 0
.L2119:
	.word	gEnemyParty
.L2070:
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L2121
	mov	r8, r1
	cmp	r0, #0x1
	bne	.L2077	@cond_branch
	ldr	r0, .L2121+0x4
.L2112:
	mov	r8, r0
.L2077:
	mov	r5, #0x0
	lsl	r0, r7, #0x10
	lsr	r0, r0, #0x10
	bl	GetBattlerMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetLinkTrainerFlankId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L2076	@cond_branch
	mov	r5, #0x3
.L2076:
	add	r6, r5, #0x3
	cmp	r5, r6
	bge	.L2081	@cond_branch
	ldr	r1, .L2121+0x8
	lsl	r0, r7, #0x1
	add	r7, r0, r1
.L2083:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L2082	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L2082	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L2082	@cond_branch
	ldrh	r0, [r7]
	cmp	r0, r5
	bne	.L2081	@cond_branch
.L2082:
	add	r5, r5, #0x1
	cmp	r5, r6
	blt	.L2083	@cond_branch
.L2081:
	add	r1, r5, #0
	eor	r1, r1, r6
	b	.L2111
.L2122:
	.align	2, 0
.L2121:
	.word	gPlayerParty
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
.L2069:
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r1, r1, r0
	lsl	r4, r7, #0x18
	cmp	r1, #0
	beq	.L2088	@cond_branch
	lsr	r0, r4, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L2088	@cond_branch
	ldr	r0, .L2123
	mov	r8, r0
	mov	r5, #0x0
	cmp	r7, #0x3
	bne	.L2089	@cond_branch
	mov	r5, #0x3
.L2089:
	add	r6, r5, #0x3
	cmp	r5, r6
	bge	.L2091	@cond_branch
	ldr	r1, .L2123+0x4
	lsl	r0, r7, #0x1
	add	r7, r0, r1
.L2093:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L2092	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L2092	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L2092	@cond_branch
	ldrh	r0, [r7]
	cmp	r0, r5
	bne	.L2091	@cond_branch
.L2092:
	add	r5, r5, #0x1
	cmp	r5, r6
	blt	.L2093	@cond_branch
.L2091:
	add	r1, r5, #0
	eor	r1, r1, r6
	b	.L2111
.L2124:
	.align	2, 0
.L2123:
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
.L2088:
	lsr	r0, r4, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bne	.L2098	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L2125
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L2099	@cond_branch
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L2100
.L2126:
	.align	2, 0
.L2125:
	.word	gBattleTypeFlags
.L2099:
	add	r6, r7, #0
.L2100:
	ldr	r0, .L2127
	mov	r8, r0
	b	.L2101
.L2128:
	.align	2, 0
.L2127:
	.word	gEnemyParty
.L2098:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L2129
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2102	@cond_branch
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L2103
.L2130:
	.align	2, 0
.L2129:
	.word	gBattleTypeFlags
.L2102:
	add	r6, r7, #0
.L2103:
	ldr	r1, .L2131
	mov	r8, r1
.L2101:
	mov	r5, #0x0
.L2107:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L2106	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L2106	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L2106	@cond_branch
	ldr	r1, .L2131+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L2106	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	bne	.L2105	@cond_branch
.L2106:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L2107	@cond_branch
.L2105:
	mov	r1, #0x6
	eor	r1, r1, r5
.L2111:
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2132:
	.align	2, 0
.L2131:
	.word	gPlayerParty
	.word	gBattlerPartyIndexes
.Lfe98:
	.size	 CanBattlerSwitch,.Lfe98-CanBattlerSwitch
	.align	2, 0
	.type	 Cmd_jumpifcantswitch,function
	.thumb_func
Cmd_jumpifcantswitch:
	push	{r4, lr}
	ldr	r4, .L2138
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x7f
	and	r0, r0, r1
	bl	GetBattlerForBattleScript
	ldr	r2, .L2138+0x4
	strb	r0, [r2]
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2134	@cond_branch
	ldrb	r0, [r2]
	bl	CanBattlerEscape
	cmp	r0, #0
	bne	.L2134	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L2135
.L2139:
	.align	2, 0
.L2138:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.L2134:
	ldr	r0, .L2140
	ldrb	r0, [r0]
	bl	CanBattlerSwitch
	cmp	r0, #0
	beq	.L2136	@cond_branch
	ldr	r1, .L2140+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
	b	.L2135
.L2141:
	.align	2, 0
.L2140:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L2136:
	ldr	r3, .L2142
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2135:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2143:
	.align	2, 0
.L2142:
	.word	gBattlescriptCurrInstr
.Lfe99:
	.size	 Cmd_jumpifcantswitch,.Lfe99-Cmd_jumpifcantswitch
	.align	2, 0
	.type	 sub_804CF10,function
	.thumb_func
sub_804CF10:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r5, .L2145
	ldrb	r0, [r5]
	ldr	r4, .L2145+0x4
	ldr	r1, [r4]
	add	r1, r0, r1
	add	r1, r1, #0x58
	ldr	r3, .L2145+0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r5]
	ldr	r1, [r4]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	mov	r1, #0x6
	strb	r1, [r0]
	ldr	r1, [r4]
	add	r1, r1, #0x8c
	ldr	r3, .L2145+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r3, [r0]
	ldrb	r0, [r1]
	bic	r0, r0, r3
	strb	r0, [r1]
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, #0x60
	ldr	r0, [r4]
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r3, #0x0
	bl	BtlController_EmitChoosePokemon
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2146:
	.align	2, 0
.L2145:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
	.word	gBitTable
.Lfe100:
	.size	 sub_804CF10,.Lfe100-sub_804CF10
	.align	2, 0
	.type	 Cmd_openpartyscreen,function
	.thumb_func
Cmd_openpartyscreen:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r7, #0x0
	mov	r0, #0x0
	mov	r9, r0
	ldr	r6, .L2231
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	mov	r8, r1
	ldrb	r1, [r2, #0x1]
	add	r0, r1, #0
	mov	ip, r6
	cmp	r0, #0x5
	beq	.LCB20080
	b	.L2148	@long jump
.LCB20080:
	ldr	r0, .L2231+0x4
	ldr	r0, [r0]
	mov	r1, #0x41
	and	r1, r1, r0
	cmp	r1, #0x1
	beq	.L2149	@cond_branch
	ldr	r1, .L2231+0x8
	strb	r7, [r1]
	ldr	r0, .L2231+0xc
	ldrb	r0, [r0]
	cmp	r7, r0
	bcc	.LCB20097
	b	.L2160	@long jump
.LCB20097:
	ldr	r7, .L2231+0x10
	ldr	r6, .L2231+0x14
	add	r4, r1, #0
	ldr	r2, .L2231+0x18
	mov	r8, r2
.L2153:
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r7]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2154	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2155	@cond_branch
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r2, r8
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r7]
	bic	r0, r0, r1
	str	r0, [r7]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L2152
.L2232:
	.align	2, 0
.L2231:
	.word	gBattlescriptCurrInstr
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gHitMarker
	.word	gBitTable
	.word	gAbsentBattlerFlags
.L2155:
	ldr	r5, .L2233
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L2152	@cond_branch
	mov	r0, #0x6
	bl	sub_804CF10
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L2152
.L2234:
	.align	2, 0
.L2233:
	.word	gSpecialStatuses
.L2154:
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L2152:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L2235
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L2153	@cond_branch
	b	.L2160
.L2236:
	.align	2, 0
.L2235:
	.word	gBattlersCount
.L2149:
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB20236
	b	.L2160	@long jump
.LCB20236:
	ldr	r0, .L2237
	mov	r8, r0
	ldr	r0, [r0]
	lsr	r5, r0, #0x1c
	ldr	r6, .L2237+0x4
	ldr	r0, [r6]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L2162	@cond_branch
	ldr	r4, .L2237+0x8
	strb	r7, [r4]
	mov	r0, #0x0
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2163	@cond_branch
	ldr	r2, .L2237+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	mov	r2, r8
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitCmd42
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L2162
.L2238:
	.align	2, 0
.L2237:
	.word	gHitMarker
	.word	gBitTable
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
.L2163:
	ldr	r6, .L2239
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L2165	@cond_branch
	ldr	r0, .L2239+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5e
	ldrb	r0, [r0]
	bl	sub_804CF10
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L2162
.L2240:
	.align	2, 0
.L2239:
	.word	gSpecialStatuses
	.word	gBattleStruct
.L2165:
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	mov	r0, #0x1
	mov	r9, r0
.L2162:
	ldr	r6, .L2241
	ldr	r0, [r6, #0x8]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L2167	@cond_branch
	ldr	r0, [r6]
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L2167	@cond_branch
	ldr	r4, .L2241+0x4
	mov	r0, #0x2
	strb	r0, [r4]
	mov	r0, #0x2
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2168	@cond_branch
	ldr	r2, .L2241+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L2241+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitCmd42
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L2167
.L2242:
	.align	2, 0
.L2241:
	.word	gBitTable
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gHitMarker
.L2168:
	ldr	r6, .L2243
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L2170	@cond_branch
	ldr	r0, .L2243+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	bl	sub_804CF10
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L2167
.L2244:
	.align	2, 0
.L2243:
	.word	gSpecialStatuses
	.word	gBattleStruct
.L2170:
	mov	r0, #0x1
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2167	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L2167:
	ldr	r6, .L2245
	ldr	r0, [r6, #0x4]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L2173	@cond_branch
	ldr	r4, .L2245+0x4
	mov	r0, #0x1
	strb	r0, [r4]
	mov	r0, #0x1
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2174	@cond_branch
	ldr	r2, .L2245+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L2245+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitCmd42
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L2173
.L2246:
	.align	2, 0
.L2245:
	.word	gBitTable
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gHitMarker
.L2174:
	ldr	r6, .L2247
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L2176	@cond_branch
	ldr	r0, .L2247+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5f
	ldrb	r0, [r0]
	bl	sub_804CF10
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L2173
.L2248:
	.align	2, 0
.L2247:
	.word	gSpecialStatuses
	.word	gBattleStruct
.L2176:
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	mov	r0, #0x2
	mov	r2, r9
	orr	r2, r2, r0
	mov	r9, r2
.L2173:
	ldr	r6, .L2249
	ldr	r0, [r6, #0xc]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L2178	@cond_branch
	ldr	r0, [r6, #0x4]
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L2178	@cond_branch
	ldr	r4, .L2249+0x4
	mov	r0, #0x3
	strb	r0, [r4]
	mov	r0, #0x3
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2179	@cond_branch
	ldr	r2, .L2249+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L2249+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitCmd42
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L2178
.L2250:
	.align	2, 0
.L2249:
	.word	gBitTable
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gHitMarker
.L2179:
	ldr	r6, .L2251
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L2181	@cond_branch
	ldr	r0, .L2251+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5d
	ldrb	r0, [r0]
	bl	sub_804CF10
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L2178
.L2252:
	.align	2, 0
.L2251:
	.word	gSpecialStatuses
	.word	gBattleStruct
.L2181:
	mov	r0, #0x2
	mov	r1, r9
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L2178	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L2178:
	ldr	r1, .L2253
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L2184	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x30
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L2184	@cond_branch
	cmp	r5, #0
	beq	.L2184	@cond_branch
	ldr	r0, .L2253+0x4
	ldrb	r1, [r0]
	ldr	r0, .L2253+0x8
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L2186	@cond_branch
	ldr	r1, .L2253+0xc
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L2187
.L2254:
	.align	2, 0
.L2253:
	.word	gSpecialStatuses
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gActiveBattler
.L2186:
	ldr	r0, .L2255
	strb	r1, [r0]
.L2187:
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldr	r0, .L2255
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
.L2184:
	ldr	r1, .L2255+0x4
	ldrb	r0, [r1, #0x18]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L2160	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x48
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L2160	@cond_branch
	cmp	r5, #0
	beq	.L2160	@cond_branch
	ldr	r0, .L2255+0x8
	ldrb	r0, [r0]
	ldr	r1, .L2255+0xc
	ldr	r1, [r1, #0x4]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2190	@cond_branch
	ldr	r1, .L2255
	mov	r0, #0x3
	b	.L2230
.L2256:
	.align	2, 0
.L2255:
	.word	gActiveBattler
	.word	gSpecialStatuses
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L2190:
	ldr	r1, .L2257
	mov	r0, #0x1
.L2230:
	strb	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldr	r0, .L2257
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
.L2160:
	ldr	r1, .L2257+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
	b	.L2192
.L2258:
	.align	2, 0
.L2257:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L2148:
	cmp	r0, #0x6
	beq	.LCB20806
	b	.L2193	@long jump
.LCB20806:
	ldr	r0, .L2259
	ldr	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB20813
	b	.L2194	@long jump
.LCB20813:
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.LCB20818
	b	.L2195	@long jump
.LCB20818:
	ldr	r7, .L2259+0x4
	ldr	r0, [r7]
	lsr	r5, r0, #0x1c
	ldr	r4, .L2259+0x8
	ldr	r0, [r4, #0x8]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L2196	@cond_branch
	ldr	r0, [r4]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L2196	@cond_branch
	ldr	r6, .L2259+0xc
	mov	r0, #0x2
	strb	r0, [r6]
	ldr	r0, .L2259+0x10
	ldr	r0, [r0]
	ldr	r2, .L2259+0x14
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x2
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2197	@cond_branch
	ldr	r2, .L2259+0x18
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r7]
	bic	r0, r0, r1
	str	r0, [r7]
	mov	r0, #0x0
	bl	BtlController_EmitCmd42
	ldrb	r0, [r6]
	bl	MarkBattlerForControllerExec
	b	.L2196
.L2260:
	.align	2, 0
.L2259:
	.word	gBattleTypeFlags
	.word	gHitMarker
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleResources
	.word	0x821
	.word	gAbsentBattlerFlags
.L2197:
	ldr	r4, .L2261
	ldrb	r0, [r6]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L2196	@cond_branch
	ldr	r0, .L2261+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	bl	sub_804CF10
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
.L2196:
	ldr	r4, .L2261+0x8
	ldr	r0, [r4, #0xc]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L2200	@cond_branch
	ldr	r0, [r4, #0x4]
	and	r5, r5, r0
	cmp	r5, #0
	beq	.L2200	@cond_branch
	ldr	r5, .L2261+0xc
	mov	r0, #0x3
	strb	r0, [r5]
	ldr	r0, .L2261+0x10
	ldr	r0, [r0]
	ldr	r1, .L2261+0x14
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x3
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2201	@cond_branch
	ldr	r2, .L2261+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L2261+0x1c
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitCmd42
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	b	.L2200
.L2262:
	.align	2, 0
.L2261:
	.word	gSpecialStatuses
	.word	gBattleStruct
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleResources
	.word	0xa21
	.word	gAbsentBattlerFlags
	.word	gHitMarker
.L2201:
	ldr	r4, .L2263
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L2200	@cond_branch
	ldr	r0, .L2263+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5d
	ldrb	r0, [r0]
	bl	sub_804CF10
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
.L2200:
	ldr	r1, .L2263+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
	mov	ip, r1
	b	.L2205
.L2264:
	.align	2, 0
.L2263:
	.word	gSpecialStatuses
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
.L2195:
.L2194:
	add	r0, r2, #0x6
	str	r0, [r6]
.L2205:
	ldr	r0, .L2265
	ldr	r0, [r0]
	lsr	r5, r0, #0x1c
	ldr	r1, .L2265+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r4, .L2265+0x8
	ldr	r2, [r4]
	and	r2, r2, r5
	ldr	r6, .L2265+0xc
	cmp	r2, #0
	bne	.L2207	@cond_branch
	add	r7, r6, #0
	ldrb	r0, [r6]
	cmp	r2, r0
	bcs	.L2207	@cond_branch
	add	r3, r1, #0
.L2210:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	ldrb	r2, [r3]
	lsl	r0, r2, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L2207	@cond_branch
	ldrb	r0, [r7]
	cmp	r2, r0
	bcc	.L2210	@cond_branch
.L2207:
	ldrb	r0, [r1]
	ldrb	r6, [r6]
	cmp	r0, r6
	beq	.LCB21102
	b	.L2192	@long jump
.LCB21102:
	mov	r1, r8
	mov	r2, ip
	str	r1, [r2]
	b	.L2192
.L2266:
	.align	2, 0
.L2265:
	.word	gHitMarker
	.word	gBattlerFainted
	.word	gBitTable
	.word	gBattlersCount
.L2193:
	mov	r0, #0x80
	and	r0, r0, r1
	mov	r5, #0x1
	cmp	r0, #0
	beq	.L2214	@cond_branch
	mov	r5, #0x0
.L2214:
	mov	r0, #0x7f
	and	r0, r0, r1
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L2267
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	bge	.L2216	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, #0x6
	str	r0, [r6]
	b	.L2192
.L2268:
	.align	2, 0
.L2267:
	.word	gSpecialStatuses
.L2216:
	add	r0, r7, #0
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2218	@cond_branch
	ldr	r2, .L2269
	strb	r7, [r2]
	ldr	r3, .L2269+0x4
	ldr	r4, .L2269+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	ldrb	r1, [r3]
	orr	r0, r0, r1
	strb	r0, [r3]
	ldr	r3, .L2269+0xc
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r3]
	bic	r0, r0, r1
	str	r0, [r3]
	mov	r0, r8
	str	r0, [r6]
	b	.L2192
.L2270:
	.align	2, 0
.L2269:
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gHitMarker
.L2218:
	ldr	r4, .L2271
	strb	r7, [r4]
	ldrb	r0, [r4]
	ldr	r3, .L2271+0x4
	ldr	r1, [r3]
	add	r1, r0, r1
	add	r1, r1, #0x58
	ldr	r2, .L2271+0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r4]
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	mov	r1, #0x6
	strb	r1, [r0]
	ldr	r1, [r3]
	add	r1, r1, #0x8c
	ldr	r2, .L2271+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r2, [r0]
	ldrb	r0, [r1]
	bic	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r4]
	mov	r0, #0x2
	eor	r0, r0, r1
	ldr	r3, [r3]
	add	r0, r0, r3
	add	r0, r0, #0x5c
	ldrb	r2, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, #0x60
	add	r3, r3, r0
	str	r3, [sp]
	mov	r0, #0x0
	add	r1, r5, #0
	mov	r3, #0x0
	bl	BtlController_EmitChoosePokemon
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r6]
	add	r0, r0, #0x6
	str	r0, [r6]
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2220	@cond_branch
	ldr	r1, .L2271+0x10
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0xfe
	bhi	.L2220	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x2]
.L2220:
	ldr	r0, .L2271+0x14
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2221	@cond_branch
	ldr	r1, .L2271
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L2271+0x18
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L2192	@cond_branch
	add	r4, r1, #0
.L2225:
	ldrb	r0, [r4]
	cmp	r0, r7
	beq	.L2224	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L2224:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L2271+0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L2225	@cond_branch
	b	.L2192
.L2272:
	.align	2, 0
.L2271:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
	.word	gBitTable
	.word	gBattleResults
	.word	gBattleTypeFlags
	.word	gBattlersCount
.L2221:
	add	r0, r7, #0
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r4, .L2273
	strb	r0, [r4]
	ldr	r0, .L2273+0x4
	ldrb	r1, [r0]
	ldr	r2, .L2273+0x8
	ldrb	r3, [r4]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L2229	@cond_branch
	mov	r0, #0x2
	eor	r3, r3, r0
	strb	r3, [r4]
.L2229:
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L2192:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2274:
	.align	2, 0
.L2273:
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
.Lfe101:
	.size	 Cmd_openpartyscreen,.Lfe101-Cmd_openpartyscreen
	.align	2, 0
	.type	 Cmd_switchhandleorder,function
	.thumb_func
Cmd_switchhandleorder:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L2298
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB21407
	b	.L2275	@long jump
.LCB21407:
	ldr	r4, .L2298+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r5, .L2298+0x8
	strb	r0, [r5]
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0x1
	beq	.L2286	@cond_branch
	cmp	r0, #0x1
	bgt	.L2297	@cond_branch
	cmp	r0, #0
	beq	.L2278	@cond_branch
	b	.L2277
.L2299:
	.align	2, 0
.L2298:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.L2297:
	cmp	r0, #0x2
	beq	.L2288	@cond_branch
	cmp	r0, #0x3
	beq	.L2290	@cond_branch
	b	.L2277
.L2278:
	mov	r5, #0x0
	ldr	r0, .L2300
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.LCB21450
	b	.L2277	@long jump
.LCB21450:
	ldr	r7, .L2300+0x4
.L2282:
	ldr	r2, [r7]
	lsl	r3, r5, #0x9
	mov	r1, #0x82
	lsl	r1, r1, #0x4
	add	r0, r2, r1
	add	r0, r0, r3
	ldrb	r0, [r0]
	cmp	r0, #0x22
	bne	.L2281	@cond_branch
	ldr	r6, .L2300+0x8
	ldr	r1, [r6]
	add	r1, r5, r1
	add	r1, r1, #0x5c
	ldr	r4, .L2300+0xc
	add	r0, r2, r4
	add	r0, r0, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, [r6]
	add	r0, r0, #0x8c
	ldrb	r1, [r0]
	ldr	r2, .L2300+0x10
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r4, [r0]
	and	r1, r1, r4
	cmp	r1, #0
	bne	.L2281	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r7]
	ldr	r2, .L2300+0xc
	add	r1, r1, r2
	add	r1, r1, r3
	ldrb	r1, [r1]
	bl	RecordedBattle_SetBattlerAction
	ldr	r1, [r6]
	add	r1, r1, #0x8c
	ldrb	r0, [r1]
	orr	r4, r4, r0
	strb	r4, [r1]
.L2281:
	add	r5, r5, #0x1
	ldr	r0, .L2300
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L2282	@cond_branch
	b	.L2277
.L2301:
	.align	2, 0
.L2300:
	.word	gBattlersCount
	.word	gBattleResources
	.word	gBattleStruct
	.word	0x821
	.word	gBitTable
.L2286:
	ldr	r0, .L2302
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB21532
	b	.L2277	@long jump
.LCB21532:
	ldrb	r0, [r5]
	bl	SwitchPartyOrder
	b	.L2277
.L2303:
	.align	2, 0
.L2302:
	.word	gBattleTypeFlags
.L2288:
	ldr	r4, .L2304
	ldr	r0, [r4]
	add	r0, r0, #0x8c
	ldrb	r1, [r0]
	ldr	r6, .L2304+0x4
	ldrb	r2, [r5]
	lsl	r0, r2, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L2290	@cond_branch
	ldr	r0, .L2304+0x8
	ldr	r0, [r0]
	lsl	r1, r2, #0x9
	ldr	r3, .L2304+0xc
	add	r0, r0, r3
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r2, #0
	bl	RecordedBattle_SetBattlerAction
	ldr	r2, [r4]
	add	r2, r2, #0x8c
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
.L2290:
	ldr	r1, .L2304+0x10
	ldr	r4, .L2304+0x8
	mov	r8, r4
	ldr	r2, [r4]
	ldr	r7, .L2304+0x14
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	ldr	r3, .L2304+0xc
	add	r2, r2, r3
	add	r0, r2, r0
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r1, [r7]
	ldr	r4, .L2304
	mov	ip, r4
	ldr	r0, [r4]
	add	r0, r1, r0
	add	r0, r0, #0x5c
	lsl	r1, r1, #0x9
	add	r2, r2, r1
	ldrb	r1, [r2]
	strb	r1, [r0]
	ldr	r0, .L2304+0x18
	ldr	r1, [r0]
	mov	r0, #0x42
	and	r0, r0, r1
	cmp	r0, #0x42
	bne	.L2291	@cond_branch
	ldrb	r0, [r7]
	ldr	r2, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	add	r1, r1, #0x60
	ldrb	r2, [r1]
	mov	r0, #0xf
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	ldr	r0, [r4]
	lsl	r2, r1, #0x1
	add	r2, r2, r1
	add	r2, r2, r0
	add	r2, r2, #0x60
	mov	r3, r8
	ldr	r0, [r3]
	lsl	r1, r1, #0x9
	ldr	r5, .L2304+0x1c
	add	r0, r0, r5
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r3, #0xf0
	add	r0, r3, #0
	and	r0, r0, r1
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r2, [r7]
	ldr	r1, [r4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	add	r0, r0, r1
	add	r0, r0, #0x61
	mov	r4, r8
	ldr	r1, [r4]
	lsl	r2, r2, #0x9
	ldr	r6, .L2304+0x20
	add	r1, r1, r6
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldrb	r0, [r7]
	mov	r4, #0x2
	eor	r0, r0, r4
	mov	r1, ip
	ldr	r2, [r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	add	r1, r1, #0x60
	ldrb	r2, [r1]
	add	r0, r3, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r7]
	eor	r0, r0, r4
	mov	r2, ip
	ldr	r1, [r2]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	add	r2, r2, r1
	add	r2, r2, #0x60
	mov	r0, r8
	ldr	r1, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	add	r1, r1, r5
	add	r1, r1, r0
	ldrb	r0, [r1]
	and	r3, r3, r0
	lsr	r3, r3, #0x4
	ldrb	r0, [r2]
	orr	r3, r3, r0
	strb	r3, [r2]
	ldrb	r0, [r7]
	eor	r4, r4, r0
	mov	r1, ip
	ldr	r0, [r1]
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	add	r1, r1, r0
	add	r1, r1, #0x62
	mov	r3, r8
	ldr	r2, [r3]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	add	r2, r2, r6
	add	r2, r2, r0
	ldrb	r0, [r2]
	strb	r0, [r1]
	b	.L2292
.L2305:
	.align	2, 0
.L2304:
	.word	gBattleStruct
	.word	gBitTable
	.word	gBattleResources
	.word	0x821
	.word	gBattleCommunication
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	0x822
	.word	0x823
.L2291:
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L2293	@cond_branch
	ldrb	r0, [r7]
	mov	r4, ip
	ldr	r1, [r4]
	add	r1, r0, r1
	add	r1, r1, #0x5c
	ldrb	r1, [r1]
	bl	SwitchPartyOrderInGameMulti
	b	.L2292
.L2293:
	ldrb	r0, [r7]
	bl	SwitchPartyOrder
.L2292:
	ldr	r1, .L2306
	mov	r5, #0xfd
	strb	r5, [r1]
	mov	r0, #0x6
	strb	r0, [r1, #0x1]
	ldr	r4, .L2306+0x4
	ldr	r3, .L2306+0x8
	ldrb	r0, [r3]
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r3]
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x1d
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r2, .L2306+0xc
	strb	r5, [r2]
	mov	r0, #0x7
	strb	r0, [r2, #0x1]
	ldr	r3, .L2306+0x10
	ldrb	r0, [r3]
	strb	r0, [r2, #0x2]
	ldr	r0, .L2306+0x14
	ldr	r1, [r0]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	ldr	r3, .L2306+0x18
	add	r1, r1, r3
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r2, #0x3]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r2, #0x4]
.L2277:
	ldr	r1, .L2306+0x1c
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
.L2275:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2307:
	.align	2, 0
.L2306:
	.word	gBattleTextBuff1
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleTextBuff2
	.word	gActiveBattler
	.word	gBattleResources
	.word	0x821
	.word	gBattlescriptCurrInstr
.Lfe102:
	.size	 Cmd_switchhandleorder,.Lfe102-Cmd_switchhandleorder
	.align	2, 0
	.type	 SetDmgHazardsBattlescript,function
	.thumb_func
SetDmgHazardsBattlescript:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2314
	mov	r3, #0x5c
	mov	r4, r0
	mul	r4, r4, r3
	add	r2, r2, #0x54
	add	r4, r4, r2
	ldr	r2, [r4]
	ldr	r3, .L2314+0x4
	and	r2, r2, r3
	str	r2, [r4]
	ldr	r4, .L2314+0x8
	ldr	r2, [r4]
	mov	r3, #0x41
	neg	r3, r3
	and	r2, r2, r3
	str	r2, [r4]
	ldr	r2, .L2314+0xc
	strb	r0, [r2, #0x17]
	ldr	r0, .L2314+0x10
	strb	r1, [r0, #0x5]
	bl	BattleScriptPushCursor
	ldr	r1, .L2314+0x14
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L2309	@cond_branch
	ldr	r0, .L2314+0x18
	b	.L2313
.L2315:
	.align	2, 0
.L2314:
	.word	gBattleMons
	.word	-0x2000001
	.word	gHitMarker
	.word	gBattleScripting
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_DmgHazardsOnTarget
.L2309:
	cmp	r0, #0x1
	bne	.L2311	@cond_branch
	ldr	r0, .L2316
	b	.L2313
.L2317:
	.align	2, 0
.L2316:
	.word	BattleScript_DmgHazardsOnAttacker
.L2311:
	ldr	r0, .L2318
.L2313:
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2319:
	.align	2, 0
.L2318:
	.word	BattleScript_DmgHazardsOnFaintedBattler
.Lfe103:
	.size	 SetDmgHazardsBattlescript,.Lfe103-SetDmgHazardsBattlescript
	.align	2, 0
	.type	 Cmd_switchineffects,function
	.thumb_func
Cmd_switchineffects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L2355
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L2355+0x4
	strb	r0, [r4]
	ldrb	r0, [r4]
	bl	UpdateSentPokesToOpponentValue
	ldr	r2, .L2355+0x8
	ldr	r1, .L2355+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L2355+0x10
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrb	r2, [r1]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	ldr	r6, .L2355+0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r7, #0x80
	lsl	r7, r7, #0x2
	and	r0, r0, r7
	cmp	r0, #0
	bne	.L2321	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2321	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x62
	beq	.L2321	@cond_branch
	ldrb	r0, [r4]
	bl	IsBattlerGrounded
	cmp	r0, #0
	beq	.L2321	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerSide
	ldr	r2, .L2355+0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0xa]
	mov	r1, #0x5
	sub	r1, r1, r0
	lsl	r1, r1, #0x19
	lsr	r1, r1, #0x18
	ldr	r5, .L2355+0x1c
	ldr	r3, .L2355+0x20
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r3
	ldrh	r0, [r0, #0x2e]
	bl	__divsi3
	str	r0, [r5]
	cmp	r0, #0
	bne	.L2322	@cond_branch
	mov	r0, #0x1
	str	r0, [r5]
.L2322:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r6
	ldr	r1, [r0]
	orr	r1, r1, r7
	str	r1, [r0]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	SetDmgHazardsBattlescript
	b	.L2320
.L2356:
	.align	2, 0
.L2355:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gHitMarker
	.word	gBitTable
	.word	gSpecialStatuses
	.word	gSideStatuses
	.word	gSideTimers
	.word	gBattleMoveDamage
	.word	gBattleMons
.L2321:
	ldr	r4, .L2357
	ldrb	r0, [r4]
	bl	GetBattlerSide
	ldr	r5, .L2357+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r6, #0x80
	lsl	r6, r6, #0x8
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L2324	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2324	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x62
	beq	.L2324	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r5
	ldr	r1, [r0]
	orr	r1, r1, r6
	str	r1, [r0]
	ldr	r0, .L2357+0x8
	ldr	r1, .L2357+0xc
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldrb	r1, [r4]
	bl	GetStealthHazardDamage
	ldr	r1, .L2357+0x10
	str	r0, [r1]
	cmp	r0, #0
	bne	.LCB22117
	b	.L2320	@long jump
.LCB22117:
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	SetDmgHazardsBattlescript
	b	.L2320
.L2358:
	.align	2, 0
.L2357:
	.word	gActiveBattler
	.word	gSideStatuses
	.word	gBattleMoves
	.word	0x22db
	.word	gBattleMoveDamage
.L2324:
	ldr	r5, .L2359
	ldrb	r0, [r5]
	bl	GetBattlerSide
	ldr	r1, .L2359+0x4
	mov	r8, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r8
	ldr	r0, [r0]
	mov	r4, #0x80
	lsl	r4, r4, #0x9
	and	r0, r0, r4
	cmp	r0, #0
	beq	.LCB22151
	b	.L2327	@long jump
.LCB22151:
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r8
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB22165
	b	.L2327	@long jump
.LCB22165:
	ldrb	r0, [r5]
	bl	IsBattlerGrounded
	cmp	r0, #0
	bne	.LCB22171
	b	.L2327	@long jump
.LCB22171:
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r8
	ldr	r1, [r0]
	orr	r1, r1, r4
	str	r1, [r0]
	ldr	r7, .L2359+0x8
	ldrb	r6, [r5]
	mov	r0, #0x5c
	mov	r9, r0
	mov	r3, r9
	mul	r3, r3, r6
	add	r1, r3, r7
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r4, [r0]
	cmp	r4, #0x3
	beq	.L2329	@cond_branch
	add	r0, r0, #0x1
	ldrb	r2, [r0]
	cmp	r2, #0x3
	beq	.L2329	@cond_branch
	add	r0, r0, #0x1
	ldrb	r1, [r0]
	cmp	r1, #0x3
	bne	.L2328	@cond_branch
.L2329:
	ldr	r4, .L2359
	ldrb	r0, [r4]
	bl	GetBattlerSide
	ldr	r1, .L2359+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r2, .L2359+0xc
	and	r1, r1, r2
	str	r1, [r0]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	ldr	r2, .L2359+0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x0
	strb	r0, [r1, #0xb]
	ldr	r1, .L2359+0x14
	ldrb	r0, [r4]
	strb	r0, [r1, #0x17]
	bl	BattleScriptPushCursor
	ldr	r1, .L2359+0x18
	ldr	r0, .L2359+0x1c
	str	r0, [r1]
	b	.L2320
.L2360:
	.align	2, 0
.L2359:
	.word	gActiveBattler
	.word	gSideStatuses
	.word	gBattleMons
	.word	-0x2001
	.word	gSideTimers
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ToxicSpikesAbsorbed
.L2328:
	add	r7, r7, #0x50
	add	r0, r3, r7
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB22270
	b	.L2320	@long jump
.LCB22270:
	cmp	r4, #0x8
	bne	.LCB22272
	b	.L2320	@long jump
.LCB22272:
	cmp	r2, #0x8
	bne	.LCB22274
	b	.L2320	@long jump
.LCB22274:
	cmp	r1, #0x8
	bne	.LCB22276
	b	.L2320	@long jump
.LCB22276:
	add	r0, r6, #0
	bl	GetBattlerAbility
	cmp	r0, #0x11
	bne	.LCB22281
	b	.L2320	@long jump
.LCB22281:
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r8
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB22294
	b	.L2320	@long jump
.LCB22294:
	ldr	r4, .L2361
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1, #0xb]
	cmp	r0, #0x1
	bls	.L2332	@cond_branch
	ldrb	r0, [r5]
	mov	r1, r9
	mul	r1, r1, r0
	add	r1, r1, r7
	ldr	r0, [r1]
	mov	r2, #0x80
	b	.L2353
.L2362:
	.align	2, 0
.L2361:
	.word	gSideTimers
.L2332:
	ldrb	r0, [r5]
	mov	r1, r9
	mul	r1, r1, r0
	add	r1, r1, r7
	ldr	r0, [r1]
	mov	r2, #0x8
.L2353:
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r4, .L2363
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	ldr	r1, .L2363+0x4
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L2363+0x8
	ldrb	r0, [r4]
	strb	r0, [r1, #0x17]
	bl	BattleScriptPushCursor
	ldr	r1, .L2363+0xc
	ldr	r0, .L2363+0x10
	str	r0, [r1]
	b	.L2320
.L2364:
	.align	2, 0
.L2363:
	.word	gActiveBattler
	.word	gBattleMons+0x50
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ToxicSpikesPoisoned
.L2327:
	ldr	r4, .L2365
	ldrb	r0, [r4]
	bl	GetBattlerSide
	ldr	r5, .L2365+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r6, #0x80
	lsl	r6, r6, #0xa
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L2335	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2335	@cond_branch
	ldrb	r0, [r4]
	bl	IsBattlerGrounded
	cmp	r0, #0
	beq	.L2335	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r5
	ldr	r1, [r0]
	orr	r1, r1, r6
	str	r1, [r0]
	ldr	r1, .L2365+0x8
	ldrb	r0, [r4]
	strb	r0, [r1, #0x17]
	mov	r0, #0x8b
	strb	r0, [r1, #0x1a]
	bl	BattleScriptPushCursor
	ldr	r1, .L2365+0xc
	ldr	r0, .L2365+0x10
	str	r0, [r1]
	b	.L2320
.L2366:
	.align	2, 0
.L2365:
	.word	gActiveBattler
	.word	gSideStatuses
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StickyWebOnSwitchIn
.L2335:
	ldr	r2, .L2367
	ldr	r1, .L2367+0x4
	ldrb	r3, [r1]
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r2
	ldrh	r0, [r0, #0x20]
	add	r5, r1, #0
	ldr	r4, .L2367+0x8
	cmp	r0, #0x36
	bne	.L2337	@cond_branch
	ldr	r0, .L2367+0xc
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L2337	@cond_branch
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r2, r0, r4
	ldrb	r1, [r2, #0x1a]
	lsl	r0, r1, #0x1e
	cmp	r0, #0
	blt	.L2337	@cond_branch
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x1a]
.L2337:
	ldrb	r0, [r5]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r2, [r1, #0x1a]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1a]
	ldrb	r1, [r5]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB22501
	b	.L2320	@long jump
.LCB22501:
	ldrb	r1, [r5]
	mov	r0, #0x0
	mov	r2, #0x0
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB22511
	b	.L2320	@long jump
.LCB22511:
	str	r0, [sp]
	mov	r0, #0xb
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB22522
	b	.L2320	@long jump
.LCB22522:
	str	r0, [sp]
	mov	r0, #0xd
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2320	@cond_branch
	str	r0, [sp]
	mov	r0, #0x7
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2320	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerSide
	ldr	r1, .L2367+0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r2, .L2367+0x14
	and	r1, r1, r2
	str	r1, [r0]
	mov	r4, #0x0
	ldr	r0, .L2367+0x18
	ldrb	r0, [r0]
	cmp	r4, r0
	bge	.L2341	@cond_branch
	ldr	r5, .L2367
.L2343:
	ldr	r0, .L2367+0x1c
	add	r0, r4, r0
	ldr	r1, .L2367+0x4
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L2344	@cond_branch
	ldr	r0, .L2367+0x20
	add	r0, r4, r0
	mov	r1, #0xc
	strb	r1, [r0]
.L2344:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	ldr	r1, .L2367+0x24
	ldr	r1, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r1, r1, #0x9a
	add	r1, r1, r0
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2a]
	strh	r0, [r1]
	add	r4, r4, #0x1
	ldr	r0, .L2367+0x18
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L2343	@cond_branch
.L2341:
	ldr	r0, .L2367+0x28
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x5
	bne	.L2346	@cond_branch
	ldr	r0, .L2367+0x2c
	ldr	r0, [r0]
	lsr	r4, r0, #0x1c
	ldr	r1, .L2367+0x30
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r2, .L2367+0x34
	b	.L2354
.L2368:
	.align	2, 0
.L2367:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gDisableStructs
	.word	gCurrentActionFuncId
	.word	gSideStatuses
	.word	-0x38201
	.word	gBattlersCount
	.word	gBattlerByTurnOrder
	.word	gActionsByTurnOrder
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
	.word	gHitMarker
	.word	gBattlerFainted
	.word	gBitTable
.L2350:
	ldr	r0, .L2369
	ldrb	r3, [r1]
	ldrb	r0, [r0]
	cmp	r3, r0
	bcs	.L2346	@cond_branch
	add	r0, r3, #0x1
	strb	r0, [r1]
.L2354:
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r3, [r0]
	add	r0, r4, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L2350	@cond_branch
	ldr	r0, .L2369+0x4
	ldrb	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L2350	@cond_branch
.L2346:
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L2320:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2370:
	.align	2, 0
.L2369:
	.word	gBattlersCount
	.word	gAbsentBattlerFlags
.Lfe104:
	.size	 Cmd_switchineffects,.Lfe104-Cmd_switchineffects
	.align	2, 0
	.type	 Cmd_trainerslidein,function
	.thumb_func
Cmd_trainerslidein:
	push	{r4, r5, lr}
	ldr	r5, .L2372
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerAtPosition
	ldr	r4, .L2372+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitTrainerSlide
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2373:
	.align	2, 0
.L2372:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe105:
	.size	 Cmd_trainerslidein,.Lfe105-Cmd_trainerslidein
	.align	2, 0
	.type	 Cmd_playse,function
	.thumb_func
Cmd_playse:
	push	{r4, r5, lr}
	ldr	r5, .L2375
	ldr	r0, .L2375+0x4
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r4, .L2375+0x8
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r0, #0x0
	bl	BtlController_EmitPlaySE
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2376:
	.align	2, 0
.L2375:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe106:
	.size	 Cmd_playse,.Lfe106-Cmd_playse
	.align	2, 0
	.type	 Cmd_fanfare,function
	.thumb_func
Cmd_fanfare:
	push	{r4, r5, lr}
	ldr	r5, .L2378
	ldr	r0, .L2378+0x4
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r4, .L2378+0x8
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r0, #0x0
	mov	r2, #0x0
	bl	BtlController_EmitPlayFanfareOrBGM
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2379:
	.align	2, 0
.L2378:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe107:
	.size	 Cmd_fanfare,.Lfe107-Cmd_fanfare
	.align	2, 0
	.type	 Cmd_playfaintcry,function
	.thumb_func
Cmd_playfaintcry:
	push	{r4, r5, lr}
	ldr	r5, .L2381
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L2381+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitFaintingCry
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2382:
	.align	2, 0
.L2381:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe108:
	.size	 Cmd_playfaintcry,.Lfe108-Cmd_playfaintcry
	.align	2, 0
	.type	 atk57,function
	.thumb_func
atk57:
	push	{r4, lr}
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r4, .L2384
	strb	r0, [r4]
	ldr	r0, .L2384+0x4
	ldrb	r1, [r0]
	mov	r0, #0x0
	bl	BtlController_EmitCmd55
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L2384+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2385:
	.align	2, 0
.L2384:
	.word	gActiveBattler
	.word	gBattleOutcome
	.word	gBattlescriptCurrInstr
.Lfe109:
	.size	 atk57,.Lfe109-atk57
	.align	2, 0
	.type	 Cmd_returntoball,function
	.thumb_func
Cmd_returntoball:
	push	{r4, r5, lr}
	ldr	r5, .L2387
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L2387+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	BtlController_EmitReturnMonToBall
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2388:
	.align	2, 0
.L2387:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe110:
	.size	 Cmd_returntoball,.Lfe110-Cmd_returntoball
	.align	2, 0
	.type	 Cmd_handlelearnnewmove,function
	.thumb_func
Cmd_handlelearnnewmove:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L2401
	ldr	r2, [r0]
	ldrb	r6, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r6, r6, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r6, r6, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r6, r6, r0
	ldrb	r4, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	ldr	r0, .L2401+0x4
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2401+0x8
	add	r0, r0, r1
	ldrb	r1, [r2, #0x9]
	bl	MonTryLearningNewMove
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L2401+0xc
	cmp	r5, r0
	bne	.L2391	@cond_branch
	add	r7, r5, #0
.L2392:
	ldr	r0, .L2401+0x4
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2401+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	bl	MonTryLearningNewMove
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, r7
	beq	.L2392	@cond_branch
.L2391:
	cmp	r5, #0
	bne	.L2394	@cond_branch
	ldr	r0, .L2401
	str	r4, [r0]
	b	.L2395
.L2402:
	.align	2, 0
.L2401:
	.word	gBattlescriptCurrInstr
	.word	gBattleStruct
	.word	gPlayerParty
	.word	0xfffe
.L2394:
	ldr	r0, .L2403
	cmp	r5, r0
	bne	.L2396	@cond_branch
	ldr	r1, .L2403+0x4
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
	b	.L2395
.L2404:
	.align	2, 0
.L2403:
	.word	0xffff
	.word	gBattlescriptCurrInstr
.L2396:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L2405
	strb	r0, [r1]
	ldr	r2, .L2405+0x4
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1
	add	r0, r0, r2
	ldr	r1, .L2405+0x8
	ldr	r1, [r1]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x10]
	cmp	r0, r1
	bne	.L2398	@cond_branch
	ldr	r4, .L2405+0xc
	mov	r0, #0x5c
	mov	r2, r3
	mul	r2, r2, r0
	add	r0, r4, #0
	add	r0, r0, #0x54
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2398	@cond_branch
	add	r0, r2, r4
	add	r1, r5, #0
	bl	GiveMoveToBattleMon
.L2398:
	ldr	r0, .L2405+0x10
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2399	@cond_branch
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	ldr	r1, .L2405
	strb	r0, [r1]
	ldr	r2, .L2405+0x4
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1
	add	r0, r0, r2
	ldr	r1, .L2405+0x8
	ldr	r1, [r1]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x10]
	cmp	r0, r1
	bne	.L2399	@cond_branch
	ldr	r4, .L2405+0xc
	mov	r0, #0x5c
	mov	r2, r3
	mul	r2, r2, r0
	add	r0, r4, #0
	add	r0, r0, #0x54
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2399	@cond_branch
	add	r0, r2, r4
	add	r1, r5, #0
	bl	GiveMoveToBattleMon
.L2399:
	ldr	r0, .L2405+0x14
	str	r6, [r0]
.L2395:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2406:
	.align	2, 0
.L2405:
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
.Lfe111:
	.size	 Cmd_handlelearnnewmove,.Lfe111-Cmd_handlelearnnewmove
	.align	2, 0
	.type	 Cmd_yesnoboxlearnmove,function
	.thumb_func
Cmd_yesnoboxlearnmove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	ldr	r0, .L2438
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L2438+0x4
	ldrb	r1, [r0, #0x1f]
	add	r2, r0, #0
	cmp	r1, #0x6
	bls	.LCB23141
	b	.L2408	@long jump
.LCB23141:
	lsl	r0, r1, #0x2
	ldr	r1, .L2438+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2439:
	.align	2, 0
.L2438:
	.word	gActiveBattler
	.word	gBattleScripting
	.word	.L2433
	.align	2, 0
	.align	2, 0
.L2433:
	.word	.L2409
	.word	.L2410
	.word	.L2418
	.word	.L2420
	.word	.L2422
	.word	.L2430
	.word	.L2431
.L2409:
	mov	r4, #0x0
	str	r4, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r0, .L2440
	mov	r1, #0xc
	bl	BattlePutTextOnWindow
	ldr	r1, .L2440+0x4
	ldrb	r0, [r1, #0x1f]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1f]
	ldr	r0, .L2440+0x8
	strb	r4, [r0, #0x1]
	mov	r0, #0x0
	bl	BattleCreateYesNoCursorAt
	b	.L2408
.L2441:
	.align	2, 0
.L2440:
	.word	gText_BattleYesNoChoice
	.word	gBattleScripting
	.word	gBattleCommunication
.L2410:
	ldr	r0, .L2442
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2411	@cond_branch
	ldr	r4, .L2442+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L2411	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x1]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L2411:
	ldr	r0, .L2442
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2412	@cond_branch
	ldr	r4, .L2442+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L2412	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x1]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L2412:
	ldr	r0, .L2442
	ldrh	r1, [r0, #0x2e]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2413	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L2442+0x4
	ldrb	r4, [r0, #0x1]
	cmp	r4, #0
	bne	.L2436	@cond_branch
	str	r5, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	mov	r0, #0x1
	neg	r0, r0
	str	r4, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L2435
.L2443:
	.align	2, 0
.L2442:
	.word	gMain
	.word	gBattleCommunication
.L2413:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB23305
	b	.L2408	@long jump
.LCB23305:
	mov	r0, #0x5
	bl	PlaySE
	b	.L2436
.L2418:
	ldr	r0, .L2444
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB23319
	b	.L2408	@long jump
.LCB23319:
	bl	FreeAllWindowBuffers
	ldr	r0, .L2444+0x4
	ldr	r1, .L2444+0x8
	ldr	r1, [r1]
	ldrb	r1, [r1, #0x10]
	ldr	r2, .L2444+0xc
	ldrb	r2, [r2]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L2444+0x10
	ldr	r4, .L2444+0x14
	ldrh	r4, [r4]
	str	r4, [sp]
	bl	ShowSelectMovePokemonSummaryScreen
.L2435:
	ldr	r1, .L2444+0x18
	ldrb	r0, [r1, #0x1f]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1f]
	b	.L2408
.L2445:
	.align	2, 0
.L2444:
	.word	gPaletteFade
	.word	gPlayerParty
	.word	gBattleStruct
	.word	gPlayerPartyCount
	.word	ReshowBattleScreenAfterMenu
	.word	gMoveToLearn
	.word	gBattleScripting
.L2420:
	ldr	r0, .L2446
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB23367
	b	.L2408	@long jump
.LCB23367:
	ldr	r0, .L2446+0x4
	ldr	r1, [r0, #0x4]
	ldr	r0, .L2446+0x8
	cmp	r1, r0
	beq	.LCB23372
	b	.L2408	@long jump
.LCB23372:
	ldrb	r0, [r2, #0x1f]
	add	r0, r0, #0x1
	b	.L2437
.L2447:
	.align	2, 0
.L2446:
	.word	gPaletteFade
	.word	gMain
	.word	BattleMainCB2
.L2422:
	ldr	r0, .L2448
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB23395
	b	.L2408	@long jump
.LCB23395:
	ldr	r0, .L2448+0x4
	ldr	r1, [r0, #0x4]
	ldr	r0, .L2448+0x8
	cmp	r1, r0
	beq	.LCB23400
	b	.L2408	@long jump
.LCB23400:
	bl	GetMoveSlotToReplace
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bne	.L2424	@cond_branch
.L2436:
	ldr	r1, .L2448+0xc
	mov	r0, #0x5
	strb	r0, [r1, #0x1f]
	b	.L2408
.L2449:
	.align	2, 0
.L2448:
	.word	gPaletteFade
	.word	gMain
	.word	BattleMainCB2
	.word	gBattleScripting
.L2424:
	ldr	r6, .L2450
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mov	r1, #0x64
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r7, .L2450+0x4
	add	r0, r0, r7
	add	r1, r5, #0
	add	r1, r1, #0xd
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	bl	IsHMMove2
	cmp	r0, #0
	beq	.L2426	@cond_branch
	ldr	r0, .L2450+0x8
	ldr	r1, .L2450+0xc
	ldrb	r1, [r1]
	bl	PrepareStringBattle
	ldr	r1, .L2450+0x10
	mov	r0, #0x6
	strb	r0, [r1, #0x1f]
	b	.L2408
.L2451:
	.align	2, 0
.L2450:
	.word	gBattleStruct
	.word	gPlayerParty
	.word	0x13f
	.word	gActiveBattler
	.word	gBattleScripting
.L2426:
	ldr	r3, .L2452
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	ldr	r1, .L2452+0x4
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	strb	r4, [r1, #0x2]
	lsr	r0, r4, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	add	r1, r5, #0
	bl	RemoveMonPPBonus
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	ldr	r7, .L2452+0x8
	ldrh	r1, [r7]
	add	r2, r5, #0
	bl	SetMonMoveSlot
	ldr	r0, .L2452+0xc
	ldr	r1, [r6]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x10]
	cmp	r0, r1
	bne	.L2428	@cond_branch
	ldr	r4, .L2452+0x10
	ldr	r0, [r4, #0x54]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2428	@cond_branch
	ldr	r0, .L2452+0x14
	ldrb	r1, [r0, #0x1a]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1c
	ldr	r2, .L2452+0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L2428	@cond_branch
	add	r0, r4, #0
	add	r1, r5, #0
	bl	RemoveBattleMonPPBonus
	ldrh	r1, [r7]
	add	r0, r4, #0
	add	r2, r5, #0
	bl	SetBattleMonMoveSlot
.L2428:
	ldr	r0, .L2452+0x1c
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2408	@cond_branch
	ldr	r2, .L2452+0xc
	ldr	r0, .L2452+0x20
	ldr	r1, [r0]
	ldrh	r0, [r2, #0x4]
	ldrb	r1, [r1, #0x10]
	cmp	r0, r1
	bne	.L2408	@cond_branch
	ldr	r4, .L2452+0x10
	mov	r1, #0x86
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2408	@cond_branch
	ldr	r0, .L2452+0x14
	add	r0, r0, #0x6a
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1c
	ldr	r2, .L2452+0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L2408	@cond_branch
	add	r4, r4, #0xb8
	add	r0, r4, #0
	add	r1, r5, #0
	bl	RemoveBattleMonPPBonus
	ldr	r0, .L2452+0x8
	ldrh	r1, [r0]
	add	r0, r4, #0
	add	r2, r5, #0
	bl	SetBattleMonMoveSlot
	b	.L2408
.L2453:
	.align	2, 0
.L2452:
	.word	gBattlescriptCurrInstr
	.word	gBattleTextBuff2
	.word	gMoveToLearn
	.word	gBattlerPartyIndexes
	.word	gBattleMons
	.word	gDisableStructs
	.word	gBitTable
	.word	gBattleTypeFlags
	.word	gBattleStruct
.L2430:
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r1, .L2454
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2408
.L2455:
	.align	2, 0
.L2454:
	.word	gBattlescriptCurrInstr
.L2431:
	ldr	r0, .L2456
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2408	@cond_branch
	mov	r0, #0x2
.L2437:
	strb	r0, [r2, #0x1f]
.L2408:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2457:
	.align	2, 0
.L2456:
	.word	gBattleControllerExecFlags
.Lfe112:
	.size	 Cmd_yesnoboxlearnmove,.Lfe112-Cmd_yesnoboxlearnmove
	.align	2, 0
	.type	 Cmd_yesnoboxstoplearningmove,function
	.thumb_func
Cmd_yesnoboxstoplearningmove:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L2471
	ldrb	r4, [r5, #0x1f]
	cmp	r4, #0
	beq	.L2460	@cond_branch
	cmp	r4, #0x1
	beq	.L2461	@cond_branch
	b	.L2459
.L2472:
	.align	2, 0
.L2471:
	.word	gBattleScripting
.L2460:
	str	r4, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r0, .L2473
	mov	r1, #0xc
	bl	BattlePutTextOnWindow
	ldrb	r0, [r5, #0x1f]
	add	r0, r0, #0x1
	strb	r0, [r5, #0x1f]
	ldr	r0, .L2473+0x4
	strb	r4, [r0, #0x1]
	mov	r0, #0x0
	bl	BattleCreateYesNoCursorAt
	b	.L2459
.L2474:
	.align	2, 0
.L2473:
	.word	gText_BattleYesNoChoice
	.word	gBattleCommunication
.L2461:
	ldr	r0, .L2475
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2462	@cond_branch
	ldr	r4, .L2475+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L2462	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x1]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L2462:
	ldr	r0, .L2475
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2463	@cond_branch
	ldr	r4, .L2475+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L2463	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x1]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L2463:
	ldr	r0, .L2475
	ldrh	r1, [r0, #0x2e]
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2464	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L2475+0x4
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L2465	@cond_branch
	ldr	r3, .L2475+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2466
.L2476:
	.align	2, 0
.L2475:
	.word	gMain
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L2465:
	ldr	r1, .L2477
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2466:
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	b	.L2459
.L2478:
	.align	2, 0
.L2477:
	.word	gBattlescriptCurrInstr
.L2464:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2459	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r3, .L2479
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	str	r4, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
.L2459:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2480:
	.align	2, 0
.L2479:
	.word	gBattlescriptCurrInstr
.Lfe113:
	.size	 Cmd_yesnoboxstoplearningmove,.Lfe113-Cmd_yesnoboxstoplearningmove
	.align	2, 0
	.type	 Cmd_hitanimation,function
	.thumb_func
Cmd_hitanimation:
	push	{r4, r5, lr}
	ldr	r5, .L2487
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L2487+0x4
	strb	r0, [r4]
	ldr	r0, .L2487+0x8
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2484	@cond_branch
	ldr	r0, .L2487+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2485	@cond_branch
	ldr	r0, .L2487+0x10
	ldrb	r0, [r0]
	ldrb	r1, [r4]
	ldr	r2, .L2487+0x14
	ldrh	r2, [r2]
	bl	DoesSubstituteBlockMove
	cmp	r0, #0
	beq	.L2485	@cond_branch
	ldr	r2, .L2487+0x18
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0xe]
	cmp	r0, #0
	bne	.L2484	@cond_branch
.L2485:
	mov	r0, #0x0
	bl	BtlController_EmitHitAnimation
	ldr	r0, .L2487+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L2487
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	b	.L2483
.L2488:
	.align	2, 0
.L2487:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gMoveResultFlags
	.word	gHitMarker
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gDisableStructs
.L2484:
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L2483:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 Cmd_hitanimation,.Lfe114-Cmd_hitanimation
	.align	2, 0
	.globl	BadgeGetMoney
	.type	 BadgeGetMoney,function
	.thumb_func
BadgeGetMoney:
	push	{r4, lr}
	ldr	r0, .L2498
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r4, r1, #0x1f
	ldr	r0, .L2498+0x4
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2491	@cond_branch
	add	r4, r4, #0x1
.L2491:
	ldr	r0, .L2498+0x8
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2492	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L2492:
	ldr	r0, .L2498+0xc
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2493	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L2493:
	ldr	r0, .L2498+0x10
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2494	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L2494:
	ldr	r0, .L2498+0x14
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2495	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L2495:
	ldr	r0, .L2498+0x18
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2496	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L2496:
	ldr	r0, .L2498+0x1c
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2497	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L2497:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L2499:
	.align	2, 0
.L2498:
	.word	0x867
	.word	0x868
	.word	0x869
	.word	0x86a
	.word	0x86b
	.word	0x86c
	.word	0x86d
	.word	0x86e
.Lfe115:
	.size	 BadgeGetMoney,.Lfe115-BadgeGetMoney
	.align	2, 0
	.type	 GetTrainerMoneyToGive,function
	.thumb_func
GetTrainerMoneyToGive:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r7, #0x0
	mov	r6, #0x0
	bl	BadgeGetMoney
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r4, r0
	bne	.L2501	@cond_branch
	ldr	r0, .L2523
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r0, #0x94
	ldrb	r2, [r0]
	ldr	r0, .L2523+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x4a
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mul	r0, r0, r2
	b	.L2502
.L2524:
	.align	2, 0
.L2523:
	.word	gBattleResources
	.word	gBattleStruct
.L2501:
	ldr	r0, .L2525
	lsl	r2, r4, #0x2
	add	r1, r2, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r1, [r1]
	mov	sl, r0
	cmp	r1, #0x1
	beq	.L2505	@cond_branch
	cmp	r1, #0x1
	bgt	.L2510	@cond_branch
	cmp	r1, #0
	beq	.L2504	@cond_branch
	b	.L2503
.L2526:
	.align	2, 0
.L2525:
	.word	gTrainers
.L2510:
	cmp	r1, #0x2
	beq	.L2506	@cond_branch
	cmp	r1, #0x3
	beq	.L2507	@cond_branch
	b	.L2503
.L2504:
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x5
	lsl	r0, r0, #0x18
	b	.L2521
.L2505:
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x5
	lsl	r0, r0, #0x18
	b	.L2521
.L2506:
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x5
	lsl	r0, r0, #0x18
	b	.L2521
.L2507:
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x19
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
.L2521:
	lsr	r6, r0, #0x18
.L2503:
	ldr	r1, .L2527
	lsl	r0, r7, #0x2
	add	r5, r0, r1
	ldrb	r3, [r5]
	ldr	r0, .L2527+0x4
	mov	ip, r0
	mov	r8, r1
	ldr	r1, .L2527+0x8
	mov	r9, r1
	cmp	r3, #0xff
	beq	.L2512	@cond_branch
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r0, r0, sl
	ldrb	r1, [r0, #0x1]
	cmp	r3, r1
	beq	.L2512	@cond_branch
	add	r2, r0, #0
	add	r0, r5, #0
.L2513:
	add	r0, r0, #0x4
	add	r7, r7, #0x1
	ldrb	r1, [r0]
	cmp	r1, #0xff
	beq	.L2512	@cond_branch
	ldrb	r3, [r2, #0x1]
	cmp	r1, r3
	bne	.L2513	@cond_branch
.L2512:
	mov	r0, r9
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2519	@cond_branch
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L2519	@cond_branch
	mov	r3, ip
	ldr	r0, [r3]
	add	r0, r0, #0x4a
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	mov	r1, r6
	mul	r1, r1, r0
	lsl	r0, r7, #0x2
	add	r0, r0, r8
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1
	b	.L2522
.L2528:
	.align	2, 0
.L2527:
	.word	gTrainerMoneyTable
	.word	gBattleStruct
	.word	gBattleTypeFlags
.L2519:
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r0, #0x4a
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	mov	r1, r6
	mul	r1, r1, r0
	lsl	r0, r7, #0x2
	add	r0, r0, r8
	ldrb	r0, [r0, #0x1]
.L2522:
	mul	r0, r0, r1
.L2502:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe116:
	.size	 GetTrainerMoneyToGive,.Lfe116-GetTrainerMoneyToGive
	.align	2, 0
	.type	 Cmd_getmoneyreward,function
	.thumb_func
Cmd_getmoneyreward:
	push	{r4, r5, r6, lr}
	ldr	r0, .L2546
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L2530	@cond_branch
	ldr	r0, .L2546+0x4
	ldrh	r0, [r0]
	bl	GetTrainerMoneyToGive
	add	r4, r0, #0
	ldr	r0, .L2546+0x8
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2531	@cond_branch
	ldr	r0, .L2546+0xc
	ldrh	r0, [r0]
	bl	GetTrainerMoneyToGive
	add	r4, r4, r0
.L2531:
	ldr	r0, .L2546+0x10
	ldr	r0, [r0]
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	add	r1, r4, #0
	bl	AddMoney
	b	.L2532
.L2547:
	.align	2, 0
.L2546:
	.word	gBattleOutcome
	.word	gTrainerBattleOpponent_A
	.word	gBattleTypeFlags
	.word	gTrainerBattleOpponent_B
	.word	gSaveBlock1Ptr
.L2530:
	mov	r6, #0x0
.L2536:
	mov	r0, #0x64
	mov	r1, r6
	mul	r1, r1, r0
	ldr	r0, .L2548
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L2535	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L2548+0x4
	cmp	r0, r1
	beq	.L2535	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r5, .L2548+0x8
	ldrb	r1, [r5]
	cmp	r0, r1
	bls	.L2535	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	strb	r0, [r5]
.L2535:
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L2536	@cond_branch
	mov	r5, #0x0
	mov	r6, #0x0
	ldr	r4, .L2548+0xc
.L2543:
	ldrh	r0, [r4]
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L2542	@cond_branch
	add	r5, r5, #0x1
.L2542:
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x7
	bls	.L2543	@cond_branch
	ldr	r1, .L2548+0x10
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L2548+0x8
	ldrb	r0, [r0]
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r0, .L2548+0x14
	ldr	r0, [r0]
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	add	r1, r4, #0
	bl	RemoveMoney
.L2532:
	ldr	r1, .L2548+0x18
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	mov	r0, #0x4
	strb	r0, [r1, #0x2]
	mov	r0, #0x5
	strb	r0, [r1, #0x3]
	strb	r4, [r1, #0x4]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r4
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x5]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r4
	lsr	r0, r0, #0x10
	strb	r0, [r1, #0x6]
	lsr	r0, r4, #0x18
	strb	r0, [r1, #0x7]
	mov	r0, #0xff
	strb	r0, [r1, #0x8]
	ldr	r1, .L2548+0x1c
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2549:
	.align	2, 0
.L2548:
	.word	gPlayerParty
	.word	0x4b7
	.word	gMaxPartyLevel
	.word	sBadgeFlags
	.word	sWhiteOutBadgeMoney
	.word	gSaveBlock1Ptr
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.Lfe117:
	.size	 Cmd_getmoneyreward,.Lfe117-Cmd_getmoneyreward
	.align	2, 0
	.type	 atk5E,function
	.thumb_func
atk5E:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L2562
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r6, .L2562+0x4
	strb	r0, [r6]
	ldr	r5, .L2562+0x8
	ldrb	r0, [r5]
	mov	r8, r4
	cmp	r0, #0
	beq	.L2552	@cond_branch
	cmp	r0, #0x1
	beq	.L2553	@cond_branch
	b	.L2551
.L2563:
	.align	2, 0
.L2562:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleCommunication
.L2552:
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	BtlController_EmitGetMonData
	ldrb	r0, [r6]
	bl	MarkBattlerForControllerExec
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	b	.L2551
.L2553:
	ldr	r0, .L2564
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2551	@cond_branch
	ldr	r0, .L2564+0x4
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	mov	r2, #0x82
	lsl	r2, r2, #0x4
	add	r1, r1, r2
	ldr	r0, [r0]
	add	r0, r0, r1
	add	r1, r0, #0x4
	mov	ip, r1
	mov	r2, #0x0
	add	r4, r6, #0
	mov	r5, #0x5c
	ldr	r6, .L2564+0x8
	add	r7, r6, #0
	sub	r7, r7, #0x19
	add	r3, r0, #0
	add	r3, r3, #0x10
.L2558:
	lsl	r1, r2, #0x1
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r1, r1, r7
	ldrh	r0, [r3]
	strh	r0, [r1]
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r2, r1
	add	r1, r1, r6
	mov	r0, ip
	add	r0, r0, #0x25
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r3, r3, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L2558	@cond_branch
	mov	r2, r8
	ldr	r0, [r2]
	add	r0, r0, #0x2
	str	r0, [r2]
.L2551:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2565:
	.align	2, 0
.L2564:
	.word	gBattleControllerExecFlags
	.word	gBattleResources
	.word	gBattleMons+0x25
.Lfe118:
	.size	 atk5E,.Lfe118-atk5E
	.align	2, 0
	.type	 Cmd_swapattackerwithtarget,function
	.thumb_func
Cmd_swapattackerwithtarget:
	push	{lr}
	ldr	r0, .L2570
	ldr	r2, .L2570+0x4
	ldrb	r3, [r2]
	strb	r3, [r0]
	ldr	r1, .L2570+0x8
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r3, [r1]
	ldr	r2, .L2570+0xc
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x5
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L2567	@cond_branch
	ldr	r0, .L2570+0x10
	and	r1, r1, r0
	b	.L2569
.L2571:
	.align	2, 0
.L2570:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gHitMarker
	.word	-0x1001
.L2567:
	orr	r1, r1, r3
.L2569:
	str	r1, [r2]
	ldr	r1, .L2572
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2573:
	.align	2, 0
.L2572:
	.word	gBattlescriptCurrInstr
.Lfe119:
	.size	 Cmd_swapattackerwithtarget,.Lfe119-Cmd_swapattackerwithtarget
	.align	2, 0
	.type	 Cmd_incrementgamestat,function
	.thumb_func
Cmd_incrementgamestat:
	push	{lr}
	ldr	r0, .L2576
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2575	@cond_branch
	ldr	r0, .L2576+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	IncrementGameStat
.L2575:
	ldr	r1, .L2576+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2577:
	.align	2, 0
.L2576:
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe120:
	.size	 Cmd_incrementgamestat,.Lfe120-Cmd_incrementgamestat
	.align	2, 0
	.type	 Cmd_drawpartystatussummary,function
	.thumb_func
Cmd_drawpartystatussummary:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x30
	ldr	r0, .L2591
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2578	@cond_branch
	ldr	r0, .L2591+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L2591+0x8
	strb	r0, [r1]
	ldrb	r0, [r1]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L2591+0xc
	mov	r8, r1
	cmp	r0, #0
	bne	.L2580	@cond_branch
	ldr	r0, .L2591+0x10
	mov	r8, r0
.L2580:
	mov	r7, #0x0
	add	r6, sp, #0x4
	mov	r5, sp
.L2585:
	mov	r0, #0x64
	mul	r0, r0, r7
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L2587	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L2591+0x14
	cmp	r0, r1
	bne	.L2586	@cond_branch
.L2587:
	ldr	r0, .L2591+0x18
	strh	r0, [r5]
	mov	r0, #0x0
	b	.L2590
.L2592:
	.align	2, 0
.L2591:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
	.word	0x4b7
	.word	0xffff
.L2586:
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
.L2590:
	str	r0, [r6]
	add	r6, r6, #0x8
	add	r5, r5, #0x8
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L2585	@cond_branch
	mov	r0, #0x0
	mov	r1, sp
	mov	r2, #0x1
	bl	BtlController_EmitDrawPartyStatusSummary
	ldr	r0, .L2593
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L2593+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L2578:
	add	sp, sp, #0x30
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2594:
	.align	2, 0
.L2593:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.Lfe121:
	.size	 Cmd_drawpartystatussummary,.Lfe121-Cmd_drawpartystatussummary
	.align	2, 0
	.type	 Cmd_hidepartystatussummary,function
	.thumb_func
Cmd_hidepartystatussummary:
	push	{r4, r5, lr}
	ldr	r5, .L2596
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L2596+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitHidePartyStatusSummary
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2597:
	.align	2, 0
.L2596:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe122:
	.size	 Cmd_hidepartystatussummary,.Lfe122-Cmd_hidepartystatussummary
	.align	2, 0
	.type	 Cmd_jumptocalledmove,function
	.thumb_func
Cmd_jumptocalledmove:
	push	{r4, lr}
	ldr	r0, .L2601
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0
	beq	.L2599	@cond_branch
	ldr	r0, .L2601+0x4
	ldr	r1, .L2601+0x8
	ldrh	r1, [r1]
	strh	r1, [r0]
	b	.L2600
.L2602:
	.align	2, 0
.L2601:
	.word	gBattlescriptCurrInstr
	.word	gCurrentMove
	.word	gCalledMove
.L2599:
	ldr	r2, .L2603
	ldr	r1, .L2603+0x4
	ldr	r0, .L2603+0x8
	ldrh	r0, [r0]
	strh	r0, [r1]
	strh	r0, [r2]
	add	r0, r1, #0
.L2600:
	ldr	r3, .L2603+0xc
	ldr	r2, .L2603+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2604:
	.align	2, 0
.L2603:
	.word	gChosenMove
	.word	gCurrentMove
	.word	gCalledMove
	.word	gBattleScriptsForMoveEffects
	.word	gBattleMoves
.Lfe123:
	.size	 Cmd_jumptocalledmove,.Lfe123-Cmd_jumptocalledmove
	.align	2, 0
	.type	 Cmd_statusanimation,function
	.thumb_func
Cmd_statusanimation:
	push	{r4, lr}
	ldr	r0, .L2608
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2606	@cond_branch
	ldr	r0, .L2608+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L2608+0x8
	strb	r0, [r4]
	ldr	r0, .L2608+0xc
	ldrb	r3, [r4]
	lsl	r2, r3, #0x2
	add	r0, r2, r0
	ldr	r0, [r0]
	ldr	r1, .L2608+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2607	@cond_branch
	ldr	r0, .L2608+0x14
	add	r1, r2, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0xe]
	cmp	r0, #0
	bne	.L2607	@cond_branch
	ldr	r0, .L2608+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2607	@cond_branch
	ldr	r1, .L2608+0x1c
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitStatusAnimation
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L2607:
	ldr	r1, .L2608+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L2606:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2609:
	.align	2, 0
.L2608:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gStatuses3
	.word	0x10400c0
	.word	gDisableStructs
	.word	gHitMarker
	.word	gBattleMons
.Lfe124:
	.size	 Cmd_statusanimation,.Lfe124-Cmd_statusanimation
	.align	2, 0
	.type	 Cmd_status2animation,function
	.thumb_func
Cmd_status2animation:
	push	{r4, r5, lr}
	ldr	r0, .L2613
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2611	@cond_branch
	ldr	r4, .L2613+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r5, .L2613+0x8
	strb	r0, [r5]
	ldr	r1, [r4]
	ldrb	r3, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldr	r0, .L2613+0xc
	ldrb	r4, [r5]
	lsl	r2, r4, #0x2
	add	r0, r2, r0
	ldr	r0, [r0]
	ldr	r1, .L2613+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2612	@cond_branch
	ldr	r0, .L2613+0x14
	add	r1, r2, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0xe]
	cmp	r0, #0
	bne	.L2612	@cond_branch
	ldr	r0, .L2613+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2612	@cond_branch
	ldr	r1, .L2613+0x1c
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r2, [r0]
	and	r2, r2, r3
	mov	r0, #0x0
	mov	r1, #0x1
	bl	BtlController_EmitStatusAnimation
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
.L2612:
	ldr	r1, .L2613+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
.L2611:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2614:
	.align	2, 0
.L2613:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gStatuses3
	.word	0x10400c0
	.word	gDisableStructs
	.word	gHitMarker
	.word	gBattleMons
.Lfe125:
	.size	 Cmd_status2animation,.Lfe125-Cmd_status2animation
	.align	2, 0
	.type	 Cmd_chosenstatusanimation,function
	.thumb_func
Cmd_chosenstatusanimation:
	push	{r4, r5, r6, lr}
	ldr	r0, .L2618
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2616	@cond_branch
	ldr	r4, .L2618+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r6, .L2618+0x8
	strb	r0, [r6]
	ldr	r4, [r4]
	ldrb	r2, [r4, #0x3]
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x6]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r0, .L2618+0xc
	ldrb	r5, [r6]
	lsl	r3, r5, #0x2
	add	r0, r3, r0
	ldr	r0, [r0]
	ldr	r1, .L2618+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2617	@cond_branch
	ldr	r0, .L2618+0x14
	add	r1, r3, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0xe]
	cmp	r0, #0
	bne	.L2617	@cond_branch
	ldr	r0, .L2618+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2617	@cond_branch
	ldrb	r1, [r4, #0x2]
	mov	r0, #0x0
	bl	BtlController_EmitStatusAnimation
	ldrb	r0, [r6]
	bl	MarkBattlerForControllerExec
.L2617:
	ldr	r1, .L2618+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x7
	str	r0, [r1]
.L2616:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2619:
	.align	2, 0
.L2618:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gStatuses3
	.word	0x10400c0
	.word	gDisableStructs
	.word	gHitMarker
.Lfe126:
	.size	 Cmd_chosenstatusanimation,.Lfe126-Cmd_chosenstatusanimation
	.align	2, 0
	.type	 Cmd_yesnobox,function
	.thumb_func
Cmd_yesnobox:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L2632
	ldrb	r4, [r5]
	cmp	r4, #0
	beq	.L2622	@cond_branch
	cmp	r4, #0x1
	beq	.L2623	@cond_branch
	b	.L2621
.L2633:
	.align	2, 0
.L2632:
	.word	gBattleCommunication
.L2622:
	str	r4, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r0, .L2634
	mov	r1, #0xc
	bl	BattlePutTextOnWindow
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	strb	r4, [r5, #0x1]
	mov	r0, #0x0
	bl	BattleCreateYesNoCursorAt
	b	.L2621
.L2635:
	.align	2, 0
.L2634:
	.word	gText_BattleYesNoChoice
.L2623:
	ldr	r0, .L2636
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2624	@cond_branch
	ldrb	r0, [r5, #0x1]
	cmp	r0, #0
	beq	.L2624	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r5, #0x1]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x0
	strb	r0, [r5, #0x1]
	bl	BattleCreateYesNoCursorAt
.L2624:
	ldr	r0, .L2636
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2625	@cond_branch
	ldr	r4, .L2636+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L2625	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x1]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L2625:
	ldr	r0, .L2636
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2626	@cond_branch
	ldr	r0, .L2636+0x4
	mov	r4, #0x1
	strb	r4, [r0, #0x1]
	b	.L2631
.L2637:
	.align	2, 0
.L2636:
	.word	gMain
	.word	gBattleCommunication
.L2626:
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2621	@cond_branch
.L2631:
	mov	r0, #0x5
	bl	PlaySE
	str	r4, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r1, .L2638
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L2621:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2639:
	.align	2, 0
.L2638:
	.word	gBattlescriptCurrInstr
.Lfe127:
	.size	 Cmd_yesnobox,.Lfe127-Cmd_yesnobox
	.align	2, 0
	.type	 Cmd_cancelallactions,function
	.thumb_func
Cmd_cancelallactions:
	push	{r4, r5, lr}
	mov	r1, #0x0
	ldr	r2, .L2646
	ldr	r5, .L2646+0x4
	ldrb	r0, [r2]
	cmp	r1, r0
	bge	.L2642	@cond_branch
	ldr	r4, .L2646+0x8
	mov	r3, #0xc
.L2644:
	add	r0, r1, r4
	strb	r3, [r0]
	add	r1, r1, #0x1
	ldrb	r0, [r2]
	cmp	r1, r0
	blt	.L2644	@cond_branch
.L2642:
	ldr	r0, [r5]
	add	r0, r0, #0x1
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2647:
	.align	2, 0
.L2646:
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	gActionsByTurnOrder
.Lfe128:
	.size	 Cmd_cancelallactions,.Lfe128-Cmd_cancelallactions
	.align	2, 0
	.type	 Cmd_setgravity,function
	.thumb_func
Cmd_setgravity:
	push	{lr}
	ldr	r3, .L2651
	ldr	r1, [r3]
	mov	r2, #0x20
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L2649	@cond_branch
	ldr	r3, .L2651+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2650
.L2652:
	.align	2, 0
.L2651:
	.word	gFieldStatuses
	.word	gBattlescriptCurrInstr
.L2649:
	orr	r1, r1, r2
	str	r1, [r3]
	ldr	r1, .L2653
	mov	r0, #0x5
	strb	r0, [r1, #0xa]
	ldr	r1, .L2653+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2650:
	pop	{r0}
	bx	r0
.L2654:
	.align	2, 0
.L2653:
	.word	gFieldTimers
	.word	gBattlescriptCurrInstr
.Lfe129:
	.size	 Cmd_setgravity,.Lfe129-Cmd_setgravity
	.align	2, 0
	.type	 TryCheekPouch,function
	.thumb_func
TryCheekPouch:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetPocket
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x7
	bne	.L2656	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, #0xa7
	bne	.L2656	@cond_branch
	ldr	r1, .L2659
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2656	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	ldr	r1, .L2659+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2659+0x8
	add	r1, r1, r2
	add	r1, r1, r0
	ldrb	r2, [r1]
	ldr	r3, .L2659+0xc
	ldr	r1, .L2659+0x10
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L2656	@cond_branch
	ldr	r1, .L2659+0x14
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2a]
	ldrh	r2, [r1, #0x2e]
	cmp	r0, r2
	beq	.L2656	@cond_branch
	ldr	r4, .L2659+0x18
	ldrh	r0, [r1, #0x2e]
	mov	r1, #0x3
	bl	__udivsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [r4]
	cmp	r0, #0
	bne	.L2657	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L2657:
	ldr	r0, [r4]
	neg	r0, r0
	str	r0, [r4]
	ldr	r0, .L2659+0x1c
	strb	r5, [r0]
	ldr	r4, .L2659+0x20
	ldr	r0, [r4]
	add	r0, r0, #0x2
	bl	BattleScriptPush
	ldr	r0, .L2659+0x24
	str	r0, [r4]
	mov	r0, #0x1
	b	.L2658
.L2660:
	.align	2, 0
.L2659:
	.word	gStatuses3
	.word	gBattleStruct
	.word	0x2b6
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	gBattlerAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_CheekPouchActivates
.L2656:
	mov	r0, #0x0
.L2658:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe130:
	.size	 TryCheekPouch,.Lfe130-TryCheekPouch
	.align	2, 0
	.type	 Cmd_removeitem,function
	.thumb_func
Cmd_removeitem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L2664
	mov	r8, r0
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L2664+0x4
	strb	r0, [r4]
	ldr	r7, .L2664+0x8
	ldrb	r0, [r4]
	mov	r6, #0x5c
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r7
	ldrh	r5, [r1, #0x30]
	mov	r9, r5
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x79
	beq	.L2662	@cond_branch
	ldr	r0, .L2664+0xc
	ldr	r1, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r1, r1, #0xb0
	add	r1, r1, r0
	strh	r5, [r1]
.L2662:
	ldrb	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r7
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	CheckSetUnburden
	ldrb	r0, [r4]
	mul	r0, r0, r6
	add	r1, r7, #0
	add	r1, r1, #0x30
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldrb	r0, [r4]
	bl	ClearBattlerItemEffectHistory
	ldrb	r0, [r4]
	mov	r1, r9
	bl	TryCheekPouch
	cmp	r0, #0
	bne	.L2663	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L2663:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2665:
	.align	2, 0
.L2664:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattleStruct
.Lfe131:
	.size	 Cmd_removeitem,.Lfe131-Cmd_removeitem
	.align	2, 0
	.type	 Cmd_atknameinbuff1,function
	.thumb_func
Cmd_atknameinbuff1:
	ldr	r1, .L2667
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x7
	strb	r0, [r1, #0x1]
	ldr	r2, .L2667+0x4
	ldrb	r0, [r2]
	strb	r0, [r1, #0x2]
	ldr	r3, .L2667+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L2667+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L2668:
	.align	2, 0
.L2667:
	.word	gBattleTextBuff1
	.word	gBattlerAttacker
	.word	gBattlerPartyIndexes
	.word	gBattlescriptCurrInstr
.Lfe132:
	.size	 Cmd_atknameinbuff1,.Lfe132-Cmd_atknameinbuff1
	.align	2, 0
	.type	 Cmd_drawlvlupbox,function
	.thumb_func
Cmd_drawlvlupbox:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L2694
	ldrb	r1, [r0, #0x1e]
	add	r4, r0, #0
	cmp	r1, #0
	bne	.L2670	@cond_branch
	bl	IsMonGettingExpSentOut
	cmp	r0, #0
	beq	.L2671	@cond_branch
	mov	r0, #0x3
	b	.L2692
.L2695:
	.align	2, 0
.L2694:
	.word	gBattleScripting
.L2671:
	mov	r0, #0x1
.L2692:
	strb	r0, [r4, #0x1e]
.L2670:
	ldrb	r0, [r4, #0x1e]
	sub	r0, r0, #0x1
	cmp	r0, #0x9
	bls	.LCB25796
	b	.L2673	@long jump
.LCB25796:
	lsl	r0, r0, #0x2
	ldr	r1, .L2696
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2697:
	.align	2, 0
.L2696:
	.word	.L2690
	.align	2, 0
	.align	2, 0
.L2690:
	.word	.L2674
	.word	.L2675
	.word	.L2677
	.word	.L2678
	.word	.L2680
	.word	.L2682
	.word	.L2680
	.word	.L2684
	.word	.L2686
	.word	.L2688
.L2674:
	ldr	r1, .L2698
	mov	r0, #0x60
	strh	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x7
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x2
	bl	ShowBg
	bl	sub_804F17C
	ldr	r1, .L2698+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0x1e]
	b	.L2673
.L2699:
	.align	2, 0
.L2698:
	.word	gBattle_BG2_Y
	.word	gBattleScripting
.L2675:
	bl	sub_804F1CC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB25843
	b	.L2673	@long jump
.LCB25843:
	ldr	r1, .L2700
	mov	r0, #0x3
	strb	r0, [r1, #0x1e]
	b	.L2673
.L2701:
	.align	2, 0
.L2700:
	.word	gBattleScripting
.L2677:
	ldr	r1, .L2702
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L2702+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x7
	mov	r2, #0x1
	bl	SetBgAttribute
	mov	r0, #0x1
	mov	r1, #0x7
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x80
	str	r0, [sp]
	mov	r0, #0x12
	mov	r1, #0x7
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	HandleBattleWindow
	ldr	r1, .L2702+0x8
	mov	r0, #0x4
	strb	r0, [r1, #0x1e]
	b	.L2673
.L2703:
	.align	2, 0
.L2702:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattleScripting
.L2678:
	bl	DrawLevelUpWindow1
	mov	r0, #0xd
	bl	PutWindowTilemap
	mov	r0, #0xd
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L2693
.L2680:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L2673	@cond_branch
	ldr	r0, .L2704
	strh	r1, [r0]
	b	.L2693
.L2705:
	.align	2, 0
.L2704:
	.word	gBattle_BG1_Y
.L2682:
	ldr	r0, .L2706
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0
	beq	.L2673	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	DrawLevelUpWindow2
	mov	r0, #0xd
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L2693
.L2707:
	.align	2, 0
.L2706:
	.word	gMain
.L2684:
	ldr	r0, .L2708
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0
	beq	.L2673	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x81
	str	r0, [sp]
	mov	r0, #0x12
	mov	r1, #0x7
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	HandleBattleWindow
.L2693:
	ldr	r1, .L2708+0x4
	ldrb	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1e]
	b	.L2673
.L2709:
	.align	2, 0
.L2708:
	.word	gMain
	.word	gBattleScripting
.L2686:
	bl	sub_804F344
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2673	@cond_branch
	mov	r0, #0xe
	bl	ClearWindowTilemap
	mov	r0, #0xe
	mov	r1, #0x1
	bl	CopyWindowToVram
	mov	r0, #0xd
	bl	ClearWindowTilemap
	mov	r0, #0xd
	mov	r1, #0x1
	bl	CopyWindowToVram
	mov	r0, #0x2
	mov	r1, #0x7
	mov	r2, #0x2
	bl	SetBgAttribute
	mov	r0, #0x2
	bl	ShowBg
	ldr	r1, .L2710
	mov	r0, #0xa
	strb	r0, [r1, #0x1e]
	b	.L2673
.L2711:
	.align	2, 0
.L2710:
	.word	gBattleScripting
.L2688:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2673	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x7
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x1
	mov	r1, #0x7
	mov	r2, #0x1
	bl	SetBgAttribute
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	ldr	r1, .L2712
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L2673:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L2713:
	.align	2, 0
.L2712:
	.word	gBattlescriptCurrInstr
.Lfe133:
	.size	 Cmd_drawlvlupbox,.Lfe133-Cmd_drawlvlupbox
	.align	2, 0
	.type	 DrawLevelUpWindow1,function
	.thumb_func
DrawLevelUpWindow1:
	push	{lr}
	add	sp, sp, #-0x14
	ldr	r0, .L2715
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2715+0x4
	add	r0, r0, r1
	add	r1, sp, #0x8
	bl	GetMonLevelUpWindowStats
	ldr	r0, .L2715+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x10]
	mov	r0, #0xd
	str	r0, [sp]
	mov	r0, #0xf
	str	r0, [sp, #0x4]
	mov	r0, #0xd
	add	r2, sp, #0x8
	mov	r3, #0xe
	bl	DrawLevelUpWindowPg1
	add	sp, sp, #0x14
	pop	{r0}
	bx	r0
.L2716:
	.align	2, 0
.L2715:
	.word	gBattleStruct
	.word	gPlayerParty
	.word	gBattleResources
.Lfe134:
	.size	 DrawLevelUpWindow1,.Lfe134-DrawLevelUpWindow1
	.align	2, 0
	.type	 DrawLevelUpWindow2,function
	.thumb_func
DrawLevelUpWindow2:
	push	{lr}
	add	sp, sp, #-0x10
	ldr	r0, .L2718
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2718+0x4
	add	r0, r0, r1
	add	r1, sp, #0x4
	bl	GetMonLevelUpWindowStats
	mov	r0, #0xf
	str	r0, [sp]
	mov	r0, #0xd
	add	r1, sp, #0x4
	mov	r2, #0xe
	mov	r3, #0xd
	bl	DrawLevelUpWindowPg2
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.L2719:
	.align	2, 0
.L2718:
	.word	gBattleStruct
	.word	gPlayerParty
.Lfe135:
	.size	 DrawLevelUpWindow2,.Lfe135-DrawLevelUpWindow2
	.align	2, 0
	.type	 sub_804F17C,function
	.thumb_func
sub_804F17C:
	push	{lr}
	ldr	r1, .L2721
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L2721+0x4
	mov	r2, #0xd0
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L2721+0x8
	mov	r1, #0x60
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L2721+0xc
	mov	r0, #0xe
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToWindowPixelBuffer
	mov	r0, #0xe
	bl	PutWindowTilemap
	mov	r0, #0xe
	mov	r1, #0x3
	bl	CopyWindowToVram
	bl	PutMonIconOnLvlUpBox
	pop	{r0}
	bx	r0
.L2722:
	.align	2, 0
.L2721:
	.word	gBattle_BG2_Y
	.word	gBattle_BG2_X
	.word	sUnknown_0831C2C8
	.word	sUnknown_0831C2E8
.Lfe136:
	.size	 sub_804F17C,.Lfe136-sub_804F17C
	.align	2, 0
	.type	 sub_804F1CC,function
	.thumb_func
sub_804F1CC:
	push	{r4, r5, lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2724	@cond_branch
	mov	r0, #0x1
	b	.L2729
.L2724:
	ldr	r4, .L2730
	ldrh	r1, [r4]
	mov	r5, #0x80
	lsl	r5, r5, #0x2
	cmp	r1, r5
	bne	.L2725	@cond_branch
	mov	r0, #0x0
	b	.L2729
.L2731:
	.align	2, 0
.L2730:
	.word	gBattle_BG2_X
.L2725:
	mov	r0, #0xd0
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L2726	@cond_branch
	bl	PutLevelAndGenderOnLvlUpBox
.L2726:
	ldrh	r0, [r4]
	add	r0, r0, #0x8
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	ldr	r1, .L2732
	cmp	r0, r1
	bls	.L2727	@cond_branch
	strh	r5, [r4]
.L2727:
	ldrh	r1, [r4]
	eor	r1, r1, r5
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
.L2729:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L2733:
	.align	2, 0
.L2732:
	.word	0x1ff0000
.Lfe137:
	.size	 sub_804F1CC,.Lfe137-sub_804F1CC
	.align	2, 0
	.type	 PutLevelAndGenderOnLvlUpBox,function
	.thumb_func
PutLevelAndGenderOnLvlUpBox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	ldr	r6, .L2739
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L2739+0x4
	add	r0, r0, r4
	mov	r1, #0x38
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	bl	GetMonGender
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	ldr	r5, .L2739+0x8
	add	r1, r5, #0
	bl	GetMonNickname
	str	r5, [sp]
	mov	r2, sp
	mov	r1, #0x0
	mov	r0, #0xe
	strb	r0, [r2, #0x4]
	mov	r0, sp
	strb	r1, [r0, #0x5]
	mov	r4, #0x20
	strb	r4, [r0, #0x6]
	strb	r1, [r0, #0x7]
	strb	r4, [r0, #0x8]
	strb	r1, [r0, #0x9]
	strb	r1, [r0, #0xa]
	strb	r1, [r0, #0xb]
	mov	r3, sp
	ldrb	r2, [r3, #0xc]
	sub	r1, r1, #0x10
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	mov	r2, sp
	mov	r0, #0x10
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	mov	r0, sp
	strb	r4, [r0, #0xd]
	mov	r1, #0xff
	mov	r2, #0x0
	bl	AddTextPrinter
	mov	r0, #0xf9
	strb	r0, [r5]
	add	r5, r5, #0x1
	mov	r0, #0x5
	strb	r0, [r5]
	add	r5, r5, #0x1
	add	r4, r5, #0
	add	r0, r4, #0
	mov	r1, r8
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r5, r0, #0
	sub	r4, r5, r4
	mov	r2, #0x4
	sub	r2, r2, r4
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r1, #0x77
	bl	StringFill
	add	r5, r0, #0
	cmp	r7, #0xff
	beq	.L2735	@cond_branch
	cmp	r7, #0
	bne	.L2736	@cond_branch
	mov	r1, #0x0
	mov	r2, #0xc
	bl	WriteColorChangeControlCode
	add	r5, r0, #0
	mov	r1, #0x1
	mov	r2, #0xd
	bl	WriteColorChangeControlCode
	add	r5, r0, #0
	mov	r0, #0xb5
	b	.L2738
.L2740:
	.align	2, 0
.L2739:
	.word	gBattleStruct
	.word	gPlayerParty
	.word	gStringVar4
.L2736:
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0xe
	bl	WriteColorChangeControlCode
	add	r5, r0, #0
	mov	r1, #0x1
	mov	r2, #0xf
	bl	WriteColorChangeControlCode
	add	r5, r0, #0
	mov	r0, #0xb6
.L2738:
	strb	r0, [r5]
	add	r5, r5, #0x1
	mov	r0, #0xff
	strb	r0, [r5]
.L2735:
	mov	r0, sp
	mov	r1, #0xa
	strb	r1, [r0, #0x7]
	strb	r1, [r0, #0x9]
	mov	r1, #0xff
	mov	r2, #0x0
	bl	AddTextPrinter
	mov	r0, #0xe
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe138:
	.size	 PutLevelAndGenderOnLvlUpBox,.Lfe138-PutLevelAndGenderOnLvlUpBox
	.align	2, 0
	.type	 sub_804F344,function
	.thumb_func
sub_804F344:
	push	{lr}
	ldr	r0, .L2747
	ldrh	r1, [r0]
	mov	r3, #0xd0
	lsl	r3, r3, #0x1
	add	r2, r0, #0
	cmp	r1, r3
	bne	.L2742	@cond_branch
	mov	r0, #0x0
	b	.L2746
.L2748:
	.align	2, 0
.L2747:
	.word	gBattle_BG2_X
.L2742:
	ldrh	r0, [r2]
	add	r1, r0, #0
	sub	r1, r1, #0x10
	ldr	r0, .L2749
	cmp	r1, r0
	bgt	.L2743	@cond_branch
	strh	r3, [r2]
	b	.L2744
.L2750:
	.align	2, 0
.L2749:
	.word	0x19f
.L2743:
	strh	r1, [r2]
.L2744:
	ldrh	r1, [r2]
	mov	r0, #0xd0
	lsl	r0, r0, #0x1
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
.L2746:
	pop	{r1}
	bx	r1
.Lfe139:
	.size	 sub_804F344,.Lfe139-sub_804F344
	.align	2, 0
	.type	 PutMonIconOnLvlUpBox,function
	.thumb_func
PutMonIconOnLvlUpBox:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x10
	ldr	r6, .L2752
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L2752+0x4
	add	r0, r0, r4
	mov	r1, #0xb
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x0
	bl	GetMonData
	mov	r9, r0
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x59
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r8
	mov	r1, r9
	mov	r2, #0x1
	add	r3, r4, #0
	bl	GetMonIconPtr
	str	r0, [sp]
	ldr	r5, .L2752+0x8
	ldr	r0, [sp, #0x4]
	and	r0, r0, r5
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	orr	r0, r0, r1
	ldr	r1, .L2752+0xc
	and	r0, r0, r1
	ldr	r1, .L2752+0x10
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	mov	r0, r8
	add	r1, r4, #0
	bl	GetValidMonIconPalettePtr
	str	r0, [sp, #0x8]
	add	r4, sp, #0x8
	ldr	r0, [r4, #0x4]
	and	r0, r0, r5
	ldr	r1, .L2752+0x14
	orr	r0, r0, r1
	str	r0, [r4, #0x4]
	mov	r0, sp
	bl	LoadSpriteSheet
	add	r0, r4, #0
	bl	LoadSpritePalette
	ldr	r0, .L2752+0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	mov	r2, #0xa
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2752+0x1c
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	ldr	r0, .L2752+0x20
	ldrh	r0, [r0]
	strh	r0, [r1, #0x30]
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2753:
	.align	2, 0
.L2752:
	.word	gBattleStruct
	.word	gPlayerParty
	.word	-0x10000
	.word	0xffff
	.word	-0x28a60000
	.word	0xd75a
	.word	sSpriteTemplate_MonIconOnLvlUpBox
	.word	gSprites
	.word	gBattle_BG2_X
.Lfe140:
	.size	 PutMonIconOnLvlUpBox,.Lfe140-PutMonIconOnLvlUpBox
	.align	2, 0
	.type	 SpriteCB_MonIconOnLvlUpBox,function
	.thumb_func
SpriteCB_MonIconOnLvlUpBox:
	push	{r4, lr}
	add	r2, r0, #0
	ldr	r0, .L2758
	ldrh	r1, [r2, #0x30]
	ldrh	r0, [r0]
	sub	r1, r1, r0
	strh	r1, [r2, #0x24]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	beq	.L2755	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2, #0x2e]
	b	.L2756
.L2759:
	.align	2, 0
.L2758:
	.word	gBattle_BG2_X
.L2755:
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L2756	@cond_branch
	add	r0, r2, #0
	bl	DestroySprite
	ldr	r4, .L2760
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
.L2756:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2761:
	.align	2, 0
.L2760:
	.word	0xd75a
.Lfe141:
	.size	 SpriteCB_MonIconOnLvlUpBox,.Lfe141-SpriteCB_MonIconOnLvlUpBox
	.align	2, 0
	.type	 IsMonGettingExpSentOut,function
	.thumb_func
IsMonGettingExpSentOut:
	push	{lr}
	ldr	r3, .L2767
	ldr	r0, .L2767+0x4
	ldr	r0, [r0]
	ldrh	r1, [r3]
	ldrb	r2, [r0, #0x10]
	cmp	r1, r2
	beq	.L2766	@cond_branch
	ldr	r0, .L2767+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2764	@cond_branch
	ldrh	r0, [r3, #0x4]
	cmp	r0, r2
	bne	.L2764	@cond_branch
.L2766:
	mov	r0, #0x1
	b	.L2765
.L2768:
	.align	2, 0
.L2767:
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBattleTypeFlags
.L2764:
	mov	r0, #0x0
.L2765:
	pop	{r1}
	bx	r1
.Lfe142:
	.size	 IsMonGettingExpSentOut,.Lfe142-IsMonGettingExpSentOut
	.align	2, 0
	.type	 Cmd_resetsentmonsvalue,function
	.thumb_func
Cmd_resetsentmonsvalue:
	push	{lr}
	bl	ResetSentPokesToOpponentValue
	ldr	r1, .L2770
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2771:
	.align	2, 0
.L2770:
	.word	gBattlescriptCurrInstr
.Lfe143:
	.size	 Cmd_resetsentmonsvalue,.Lfe143-Cmd_resetsentmonsvalue
	.align	2, 0
	.type	 Cmd_setatktoplayer0,function
	.thumb_func
Cmd_setatktoplayer0:
	push	{lr}
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L2773
	strb	r0, [r1]
	ldr	r1, .L2773+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2774:
	.align	2, 0
.L2773:
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe144:
	.size	 Cmd_setatktoplayer0,.Lfe144-Cmd_setatktoplayer0
	.align	2, 0
	.type	 Cmd_makevisible,function
	.thumb_func
Cmd_makevisible:
	push	{r4, r5, lr}
	ldr	r0, .L2777
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2775	@cond_branch
	ldr	r5, .L2777+0x4
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L2777+0x8
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitSpriteInvisibility
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L2775:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2778:
	.align	2, 0
.L2777:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe145:
	.size	 Cmd_makevisible,.Lfe145-Cmd_makevisible
	.align	2, 0
	.type	 Cmd_recordability,function
	.thumb_func
Cmd_recordability:
	push	{r4, lr}
	ldr	r4, .L2780
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2780+0x4
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r1, [r1, #0x20]
	bl	RecordAbilityBattle
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2781:
	.align	2, 0
.L2780:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.Lfe146:
	.size	 Cmd_recordability,.Lfe146-Cmd_recordability
	.align	2, 0
	.globl	BufferMoveToLearnIntoBattleTextBuff2
	.type	 BufferMoveToLearnIntoBattleTextBuff2,function
	.thumb_func
BufferMoveToLearnIntoBattleTextBuff2:
	ldr	r2, .L2783
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x2
	strb	r0, [r2, #0x1]
	ldr	r0, .L2783+0x4
	ldrh	r1, [r0]
	strb	r1, [r2, #0x2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x3]
	mov	r0, #0xff
	strb	r0, [r2, #0x4]
	bx	lr
.L2784:
	.align	2, 0
.L2783:
	.word	gBattleTextBuff2
	.word	gMoveToLearn
.Lfe147:
	.size	 BufferMoveToLearnIntoBattleTextBuff2,.Lfe147-BufferMoveToLearnIntoBattleTextBuff2
	.align	2, 0
	.type	 Cmd_buffermovetolearn,function
	.thumb_func
Cmd_buffermovetolearn:
	push	{lr}
	bl	BufferMoveToLearnIntoBattleTextBuff2
	ldr	r1, .L2786
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2787:
	.align	2, 0
.L2786:
	.word	gBattlescriptCurrInstr
.Lfe148:
	.size	 Cmd_buffermovetolearn,.Lfe148-Cmd_buffermovetolearn
	.align	2, 0
	.type	 Cmd_jumpifplayerran,function
	.thumb_func
Cmd_jumpifplayerran:
	push	{lr}
	ldr	r0, .L2791
	ldrb	r0, [r0]
	bl	TryRunFromBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2789	@cond_branch
	ldr	r3, .L2791+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2790
.L2792:
	.align	2, 0
.L2791:
	.word	gBattlerFainted
	.word	gBattlescriptCurrInstr
.L2789:
	ldr	r1, .L2793
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2790:
	pop	{r0}
	bx	r0
.L2794:
	.align	2, 0
.L2793:
	.word	gBattlescriptCurrInstr
.Lfe149:
	.size	 Cmd_jumpifplayerran,.Lfe149-Cmd_jumpifplayerran
	.align	2, 0
	.type	 Cmd_hpthresholds,function
	.thumb_func
Cmd_hpthresholds:
	push	{r4, r5, r6, lr}
	ldr	r0, .L2806
	ldr	r4, [r0]
	mov	r6, #0x1
	and	r4, r4, r6
	cmp	r4, #0
	bne	.L2796	@cond_branch
	ldr	r0, .L2806+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L2806+0x8
	strb	r0, [r1]
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2806+0xc
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r5, [r1, #0x2a]
	mov	r0, #0x64
	mul	r0, r0, r5
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	cmp	r0, #0
	bne	.L2797	@cond_branch
	mov	r0, #0x1
.L2797:
	cmp	r0, #0x45
	bgt	.L2799	@cond_branch
	cmp	r5, #0
	bne	.L2798	@cond_branch
.L2799:
	ldr	r0, .L2806+0x10
	ldr	r0, [r0]
	add	r0, r0, #0xa6
	strb	r4, [r0]
	b	.L2796
.L2807:
	.align	2, 0
.L2806:
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattleStruct
.L2798:
	cmp	r0, #0x27
	ble	.L2801	@cond_branch
	ldr	r0, .L2808
	ldr	r0, [r0]
	add	r0, r0, #0xa6
	strb	r6, [r0]
	b	.L2796
.L2809:
	.align	2, 0
.L2808:
	.word	gBattleStruct
.L2801:
	cmp	r0, #0x9
	ble	.L2803	@cond_branch
	ldr	r0, .L2810
	ldr	r0, [r0]
	add	r0, r0, #0xa6
	mov	r1, #0x2
	b	.L2805
.L2811:
	.align	2, 0
.L2810:
	.word	gBattleStruct
.L2803:
	ldr	r0, .L2812
	ldr	r0, [r0]
	add	r0, r0, #0xa6
	mov	r1, #0x3
.L2805:
	strb	r1, [r0]
.L2796:
	ldr	r1, .L2812+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2813:
	.align	2, 0
.L2812:
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
.Lfe150:
	.size	 Cmd_hpthresholds,.Lfe150-Cmd_hpthresholds
	.align	2, 0
	.type	 Cmd_hpthresholds2,function
	.thumb_func
Cmd_hpthresholds2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L2823
	ldr	r7, [r0]
	mov	r0, #0x1
	mov	r8, r0
	and	r7, r7, r0
	cmp	r7, #0
	bne	.L2815	@cond_branch
	ldr	r0, .L2823+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	add	r4, r0, #0
	ldr	r0, .L2823+0x8
	strb	r4, [r0]
	mov	r0, #0x1
	eor	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L2823+0xc
	ldr	r6, [r1]
	lsr	r0, r0, #0x17
	add	r0, r0, r6
	add	r0, r0, #0x9a
	ldrb	r5, [r0]
	ldr	r1, .L2823+0x10
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r4, [r0, #0x2a]
	sub	r1, r5, r4
	mov	r0, #0x64
	mul	r0, r0, r1
	add	r1, r5, #0
	bl	__divsi3
	add	r1, r0, #0
	cmp	r4, r5
	bcc	.L2816	@cond_branch
	add	r0, r6, #0
	add	r0, r0, #0xa6
	strb	r7, [r0]
	b	.L2815
.L2824:
	.align	2, 0
.L2823:
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleMons
.L2816:
	cmp	r0, #0x1d
	bgt	.L2818	@cond_branch
	add	r0, r6, #0
	add	r0, r0, #0xa6
	mov	r1, r8
	strb	r1, [r0]
	b	.L2815
.L2818:
	cmp	r1, #0x45
	bgt	.L2820	@cond_branch
	add	r1, r6, #0
	add	r1, r1, #0xa6
	mov	r0, #0x2
	b	.L2822
.L2820:
	add	r1, r6, #0
	add	r1, r1, #0xa6
	mov	r0, #0x3
.L2822:
	strb	r0, [r1]
.L2815:
	ldr	r1, .L2825
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2826:
	.align	2, 0
.L2825:
	.word	gBattlescriptCurrInstr
.Lfe151:
	.size	 Cmd_hpthresholds2,.Lfe151-Cmd_hpthresholds2
	.align	2, 0
	.type	 Cmd_useitemonopponent,function
	.thumb_func
Cmd_useitemonopponent:
	push	{lr}
	add	sp, sp, #-0x4
	ldr	r2, .L2828
	ldr	r1, .L2828+0x4
	ldrb	r0, [r1]
	strb	r0, [r2]
	ldr	r2, .L2828+0x8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r1, .L2828+0xc
	add	r0, r0, r1
	ldr	r1, .L2828+0x10
	ldrh	r1, [r1]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r3, #0x1
	str	r3, [sp]
	mov	r3, #0x0
	bl	PokemonUseItemEffects
	ldr	r1, .L2828+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L2829:
	.align	2, 0
.L2828:
	.word	gBattlerInMenuId
	.word	gBattlerAttacker
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.Lfe152:
	.size	 Cmd_useitemonopponent,.Lfe152-Cmd_useitemonopponent
	.align	2, 0
	.type	 HasAttackerFaintedTarget,function
	.thumb_func
HasAttackerFaintedTarget:
	push	{r4, r5, lr}
	ldr	r0, .L2836
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2831	@cond_branch
	ldr	r2, .L2836+0x4
	ldr	r0, .L2836+0x8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L2831	@cond_branch
	ldr	r0, .L2836+0xc
	ldr	r1, .L2836+0x10
	ldrb	r2, [r1]
	add	r0, r2, r0
	ldrb	r1, [r0]
	ldr	r5, .L2836+0x14
	cmp	r1, #0xff
	beq	.L2832	@cond_branch
	ldrb	r0, [r5]
	cmp	r1, r0
	bne	.L2831	@cond_branch
.L2832:
	ldr	r0, .L2836+0x18
	ldr	r0, [r0]
	ldrb	r1, [r5]
	add	r0, r0, #0xc
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L2831	@cond_branch
	cmp	r0, r1
	beq	.L2831	@cond_branch
	ldr	r4, .L2836+0x1c
	add	r0, r1, #0
	bl	GetBattlerTurnOrderNum
	ldrb	r1, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r1, r0
	bne	.L2831	@cond_branch
	ldr	r2, .L2836+0x20
	ldr	r1, .L2836+0x24
	ldrb	r3, [r5]
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r4, [r2]
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L2833	@cond_branch
	ldr	r2, .L2836+0x28
	ldr	r0, .L2836+0x2c
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, #0x5c
	mul	r1, r1, r3
	add	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r4, r0
	bne	.L2831	@cond_branch
.L2833:
	mov	r0, #0x1
	b	.L2835
.L2837:
	.align	2, 0
.L2836:
	.word	gMoveResultFlags
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gLastHitBy
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	gCurrentTurnActionNumber
	.word	gChosenMove
	.word	gChosenMoveByBattler
	.word	gBattleMons
	.word	gChosenMovePos
.L2831:
	mov	r0, #0x0
.L2835:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe153:
	.size	 HasAttackerFaintedTarget,.Lfe153-HasAttackerFaintedTarget
	.align	2, 0
	.type	 HandleTerrainMove,function
	.thumb_func
HandleTerrainMove:
	push	{r4, lr}
	add	r1, r0, #0
	mov	r2, #0x0
	mov	r4, #0x0
	ldr	r0, .L2854
	cmp	r1, r0
	beq	.L2841	@cond_branch
	cmp	r1, r0
	bhi	.L2846	@cond_branch
	sub	r0, r0, #0x1
	cmp	r1, r0
	beq	.L2840	@cond_branch
	b	.L2839
.L2855:
	.align	2, 0
.L2854:
	.word	0x10d
.L2846:
	mov	r0, #0x87
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L2842	@cond_branch
	add	r0, r0, #0x1
	cmp	r1, r0
	beq	.L2843	@cond_branch
	b	.L2839
.L2840:
	mov	r2, #0x80
	ldr	r4, .L2856
	ldr	r1, .L2856+0x4
	mov	r0, #0x0
	b	.L2852
.L2857:
	.align	2, 0
.L2856:
	.word	gFieldTimers+0x6
	.word	gBattleCommunication
.L2841:
	mov	r2, #0x40
	ldr	r4, .L2858
	ldr	r1, .L2858+0x4
	mov	r0, #0x1
	b	.L2852
.L2859:
	.align	2, 0
.L2858:
	.word	gFieldTimers+0x5
	.word	gBattleCommunication
.L2842:
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldr	r4, .L2860
	ldr	r1, .L2860+0x4
	mov	r0, #0x2
	b	.L2852
.L2861:
	.align	2, 0
.L2860:
	.word	gFieldTimers+0x7
	.word	gBattleCommunication
.L2843:
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	ldr	r4, .L2862
	ldr	r1, .L2862+0x4
	mov	r0, #0x3
.L2852:
	strb	r0, [r1, #0x5]
.L2839:
	ldr	r3, .L2862+0x8
	ldr	r1, [r3]
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L2848	@cond_branch
	cmp	r2, #0
	bne	.L2847	@cond_branch
.L2848:
	ldr	r3, .L2862+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2849
.L2863:
	.align	2, 0
.L2862:
	.word	gFieldTimers+0x8
	.word	gBattleCommunication
	.word	gFieldStatuses
	.word	gBattlescriptCurrInstr
.L2847:
	ldr	r0, .L2864
	and	r1, r1, r0
	orr	r1, r1, r2
	str	r1, [r3]
	ldr	r0, .L2864+0x4
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x96
	bne	.L2850	@cond_branch
	mov	r0, #0x8
	b	.L2853
.L2865:
	.align	2, 0
.L2864:
	.word	-0x3c1
	.word	gBattlerAttacker
.L2850:
	mov	r0, #0x5
.L2853:
	strb	r0, [r4]
	ldr	r1, .L2866
	ldr	r0, [r1]
	add	r0, r0, #0x7
	str	r0, [r1]
.L2849:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2867:
	.align	2, 0
.L2866:
	.word	gBattlescriptCurrInstr
.Lfe154:
	.size	 HandleTerrainMove,.Lfe154-HandleTerrainMove
	.align	2, 0
	.globl	CanPoisonType
	.type	 CanPoisonType,function
	.thumb_func
CanPoisonType:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	mov	r5, #0x0
	bl	GetBattlerAbility
	cmp	r0, #0xd4
	beq	.L2870	@cond_branch
	ldr	r0, .L2871
	mov	r1, #0x5c
	mul	r1, r1, r4
	add	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r3, [r0]
	cmp	r3, #0x3
	beq	.L2869	@cond_branch
	add	r0, r0, #0x1
	ldrb	r2, [r0]
	cmp	r2, #0x3
	beq	.L2869	@cond_branch
	add	r0, r0, #0x1
	ldrb	r0, [r0]
	cmp	r0, #0x3
	beq	.L2869	@cond_branch
	cmp	r3, #0x8
	beq	.L2869	@cond_branch
	cmp	r2, #0x8
	beq	.L2869	@cond_branch
	cmp	r0, #0x8
	beq	.L2869	@cond_branch
.L2870:
	mov	r5, #0x1
.L2869:
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L2872:
	.align	2, 0
.L2871:
	.word	gBattleMons
.Lfe155:
	.size	 CanPoisonType,.Lfe155-CanPoisonType
	.align	2, 0
	.globl	CanParalyzeType
	.type	 CanParalyzeType,function
	.thumb_func
CanParalyzeType:
	push	{lr}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r3, #0x0
	ldr	r2, .L2875
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xd
	beq	.L2874	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0xd
	beq	.L2874	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r1, [r0]
	mov	r0, #0xd
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r3, r0, #0x1f
.L2874:
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.L2876:
	.align	2, 0
.L2875:
	.word	gBattleMons
.Lfe156:
	.size	 CanParalyzeType,.Lfe156-CanParalyzeType
	.align	2, 0
	.globl	CanUseLastResort
	.type	 CanUseLastResort,function
	.thumb_func
CanUseLastResort:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	mov	r6, #0x0
	mov	r4, #0x0
	ldr	r1, .L2886
	mov	ip, r1
	ldr	r2, .L2886+0x4
	ldr	r3, .L2886+0x8
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	add	r7, r1, #0
	add	r7, r7, #0x24
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r2, r2, #0xc
	add	r2, r0, r2
	ldr	r3, .L2886+0xc
.L2881:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L2882	@cond_branch
	add	r5, r5, #0x1
.L2882:
	mov	r0, ip
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L2880	@cond_branch
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	ldr	r1, [r3]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2880	@cond_branch
	add	r6, r6, #0x1
.L2880:
	add	r2, r2, #0x2
	add	r3, r3, #0x4
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bls	.L2881	@cond_branch
	mov	r1, #0x0
	cmp	r5, #0x1
	bls	.L2885	@cond_branch
	sub	r0, r5, #0x1
	cmp	r6, r0
	bcc	.L2885	@cond_branch
	mov	r1, #0x1
.L2885:
	add	r0, r1, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2887:
	.align	2, 0
.L2886:
	.word	gCurrMovePos
	.word	gBattleMons
	.word	gDisableStructs
	.word	gBitTable
.Lfe157:
	.size	 CanUseLastResort,.Lfe157-CanUseLastResort
	.align	2, 0
	.type	 ClearDefogHazards,function
	.thumb_func
ClearDefogHazards:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0x0
	mov	r9, r0
	ldr	r4, .L2924
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	mov	r2, #0xfd
	mov	sl, r2
.L2892:
	mov	r0, r9
	lsl	r1, r0, #0x2
	ldr	r0, .L2924+0x4
	ldr	r2, [sp, #0x4]
	add	r2, r2, r0
	mov	r8, r2
	ldr	r0, .L2924+0x8
	add	r5, r1, r0
	ldr	r0, .L2924+0xc
	mov	r1, r9
	strb	r1, [r0]
	ldr	r0, [sp]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r9
	bne	.LCB27755
	b	.L2893	@long jump
.LCB27755:
	ldr	r1, [r5]
	mov	r3, #0x1
	and	r3, r3, r1
	cmp	r3, #0
	beq	.L2894	@cond_branch
	cmp	r6, #0
	bne	.LCB27765
	b	.L2919	@long jump
.LCB27765:
	mov	r2, sl
	strb	r2, [r4]
	mov	r0, #0x2
	strb	r0, [r4, #0x1]
	mov	r0, #0x73
	strb	r0, [r4, #0x2]
	mov	r0, #0x0
	strb	r0, [r4, #0x3]
	ldrb	r0, [r4, #0x4]
	mov	r1, #0xff
	orr	r0, r0, r1
	strb	r0, [r4, #0x4]
	ldr	r0, [r5]
	mov	r1, #0x2
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r5]
	mov	r0, #0x0
	mov	r2, r8
	strb	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r0, .L2924+0x10
	b	.L2923
.L2925:
	.align	2, 0
.L2924:
	.word	gBattleTextBuff1
	.word	gSideTimers
	.word	gSideStatuses
	.word	gBattlerAttacker
	.word	BattleScript_SideStatusWoreOffReturn
.L2894:
	mov	r7, #0x2
	add	r2, r1, #0
	and	r2, r2, r7
	cmp	r2, #0
	beq	.L2897	@cond_branch
	cmp	r6, #0
	bne	.LCB27811
	b	.L2919	@long jump
.LCB27811:
	mov	r2, sl
	strb	r2, [r4]
	strb	r7, [r4, #0x1]
	mov	r0, #0x71
	strb	r0, [r4, #0x2]
	strb	r3, [r4, #0x3]
	ldrb	r0, [r4, #0x4]
	mov	r1, #0xff
	orr	r0, r0, r1
	strb	r0, [r4, #0x4]
	ldr	r0, [r5]
	mov	r1, #0x3
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r5]
	mov	r2, r8
	strb	r3, [r2, #0x2]
	bl	BattleScriptPushCursor
	ldr	r0, .L2926
	b	.L2923
.L2927:
	.align	2, 0
.L2926:
	.word	BattleScript_SideStatusWoreOffReturn
.L2897:
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	and	r3, r3, r1
	cmp	r3, #0
	beq	.L2900	@cond_branch
	cmp	r6, #0
	bne	.LCB27850
	b	.L2919	@long jump
.LCB27850:
	mov	r0, sl
	strb	r0, [r4]
	strb	r7, [r4, #0x1]
	mov	r0, #0x36
	strb	r0, [r4, #0x2]
	strb	r2, [r4, #0x3]
	ldrb	r0, [r4, #0x4]
	mov	r1, #0xff
	orr	r0, r0, r1
	strb	r0, [r4, #0x4]
	ldr	r0, [r5]
	ldr	r1, .L2928
	and	r0, r0, r1
	str	r0, [r5]
	mov	r0, r8
	strb	r2, [r0, #0x4]
	bl	BattleScriptPushCursor
	ldr	r0, .L2928+0x4
	b	.L2923
.L2929:
	.align	2, 0
.L2928:
	.word	-0x101
	.word	BattleScript_SideStatusWoreOffReturn
.L2900:
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	and	r2, r2, r1
	cmp	r2, #0
	beq	.L2903	@cond_branch
	cmp	r6, #0
	bne	.LCB27889
	b	.L2919	@long jump
.LCB27889:
	mov	r2, sl
	strb	r2, [r4]
	strb	r7, [r4, #0x1]
	mov	r0, #0x91
	strb	r0, [r4, #0x2]
	strb	r7, [r4, #0x3]
	ldrb	r0, [r4, #0x4]
	mov	r1, #0xff
	orr	r0, r0, r1
	strb	r0, [r4, #0x4]
	ldr	r0, [r5]
	ldr	r1, .L2930
	and	r0, r0, r1
	str	r0, [r5]
	mov	r2, r8
	strb	r3, [r2, #0xe]
	bl	BattleScriptPushCursor
	ldr	r0, .L2930+0x4
	b	.L2923
.L2931:
	.align	2, 0
.L2930:
	.word	-0x801
	.word	BattleScript_SideStatusWoreOffReturn
.L2903:
	mov	r0, #0x20
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L2893	@cond_branch
	cmp	r6, #0
	beq	.L2919	@cond_branch
	mov	r0, sl
	strb	r0, [r4]
	strb	r7, [r4, #0x1]
	mov	r0, #0xdb
	strb	r0, [r4, #0x2]
	strb	r2, [r4, #0x3]
	ldrb	r0, [r4, #0x4]
	mov	r1, #0xff
	orr	r0, r0, r1
	strb	r0, [r4, #0x4]
	ldr	r0, [r5]
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r5]
	mov	r0, r8
	strb	r2, [r0, #0x6]
	bl	BattleScriptPushCursor
	ldr	r0, .L2932
	b	.L2923
.L2933:
	.align	2, 0
.L2932:
	.word	BattleScript_SideStatusWoreOffReturn
.L2893:
	ldr	r1, [r5]
	mov	r2, #0x10
	and	r2, r2, r1
	cmp	r2, #0
	beq	.L2909	@cond_branch
	cmp	r6, #0
	beq	.L2919	@cond_branch
	mov	r0, #0x11
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r5]
	mov	r0, #0x0
	mov	r2, r8
	strb	r0, [r2, #0xa]
	bl	BattleScriptPushCursor
	ldr	r0, .L2934
	b	.L2923
.L2935:
	.align	2, 0
.L2934:
	.word	BattleScript_SpikesFree
.L2909:
	mov	r3, #0x80
	lsl	r3, r3, #0x7
	and	r3, r3, r1
	cmp	r3, #0
	beq	.L2912	@cond_branch
	cmp	r6, #0
	beq	.L2919	@cond_branch
	ldr	r0, .L2936
	and	r1, r1, r0
	str	r1, [r5]
	mov	r0, r8
	strb	r2, [r0, #0xc]
	bl	BattleScriptPushCursor
	ldr	r0, .L2936+0x4
	b	.L2923
.L2937:
	.align	2, 0
.L2936:
	.word	-0x4001
	.word	BattleScript_StealthRockFree
.L2912:
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	and	r2, r2, r1
	cmp	r2, #0
	beq	.L2915	@cond_branch
	cmp	r6, #0
	beq	.L2919	@cond_branch
	ldr	r0, .L2938
	and	r1, r1, r0
	str	r1, [r5]
	mov	r2, r8
	strb	r3, [r2, #0xb]
	bl	BattleScriptPushCursor
	ldr	r0, .L2938+0x4
	b	.L2923
.L2939:
	.align	2, 0
.L2938:
	.word	-0x2001
	.word	BattleScript_ToxicSpikesFree
.L2915:
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2891	@cond_branch
	cmp	r6, #0
	beq	.L2919	@cond_branch
	mov	r0, #0x5
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r5]
	mov	r0, r8
	strb	r2, [r0, #0xd]
	bl	BattleScriptPushCursor
	ldr	r0, .L2940
.L2923:
	ldr	r1, .L2940+0x4
	str	r0, [r1]
.L2919:
	mov	r0, #0x1
	b	.L2922
.L2941:
	.align	2, 0
.L2940:
	.word	BattleScript_StickyWebFree
	.word	gBattlescriptCurrInstr
.L2891:
	ldr	r2, [sp, #0x4]
	add	r2, r2, #0x14
	str	r2, [sp, #0x4]
	mov	r0, #0x1
	add	r9, r9, r0
	mov	r1, r9
	cmp	r1, #0x1
	bgt	.LCB28086
	b	.L2892	@long jump
.LCB28086:
	mov	r0, #0x0
.L2922:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe158:
	.size	 ClearDefogHazards,.Lfe158-ClearDefogHazards
	.align	2, 0
	.globl	IsFlowerVeilProtected
	.type	 IsFlowerVeilProtected,function
	.thumb_func
IsFlowerVeilProtected:
	push	{lr}
	add	r2, r0, #0
	ldr	r1, .L2947
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r0, r1
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xc
	beq	.L2944	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0xc
	beq	.L2944	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0xc
	bne	.L2943	@cond_branch
.L2944:
	add	r0, r2, #0
	mov	r1, #0xa6
	bl	IsAbilityOnSide
	b	.L2946
.L2948:
	.align	2, 0
.L2947:
	.word	gBattleMons
.L2943:
	mov	r0, #0x0
.L2946:
	pop	{r1}
	bx	r1
.Lfe159:
	.size	 IsFlowerVeilProtected,.Lfe159-IsFlowerVeilProtected
	.align	2, 0
	.globl	IsLeafGuardProtected
	.type	 IsLeafGuardProtected,function
	.thumb_func
IsLeafGuardProtected:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L2950	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L2950	@cond_branch
	ldr	r0, .L2954
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2950	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAbility
	mov	r1, #0x0
	cmp	r0, #0x66
	bne	.L2951	@cond_branch
	mov	r1, #0x1
.L2951:
	add	r0, r1, #0
	b	.L2953
.L2955:
	.align	2, 0
.L2954:
	.word	gBattleWeather
.L2950:
	mov	r0, #0x0
.L2953:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe160:
	.size	 IsLeafGuardProtected,.Lfe160-IsLeafGuardProtected
	.align	2, 0
	.globl	IsShieldsDownProtected
	.type	 IsShieldsDownProtected,function
	.thumb_func
IsShieldsDownProtected:
	push	{lr}
	mov	r3, #0x0
	ldr	r2, .L2958
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r1, r0, r2
	ldrh	r0, [r1, #0x20]
	cmp	r0, #0xc5
	bne	.L2957	@cond_branch
	ldrh	r0, [r1]
	lsl	r0, r0, #0x15
	ldr	r1, .L2958+0x4
	cmp	r0, r1
	bne	.L2957	@cond_branch
	mov	r3, #0x1
.L2957:
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.L2959:
	.align	2, 0
.L2958:
	.word	gBattleMons
	.word	0x60c00000
.Lfe161:
	.size	 IsShieldsDownProtected,.Lfe161-IsShieldsDownProtected
	.align	2, 0
	.globl	IsAbilityStatusProtected
	.type	 IsAbilityStatusProtected,function
	.thumb_func
IsAbilityStatusProtected:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	bl	IsFlowerVeilProtected
	cmp	r0, #0
	bne	.L2962	@cond_branch
	add	r0, r4, #0
	bl	IsLeafGuardProtected
	cmp	r0, #0
	bne	.L2962	@cond_branch
	add	r0, r4, #0
	bl	IsShieldsDownProtected
	cmp	r0, #0
	beq	.L2961	@cond_branch
.L2962:
	mov	r5, #0x1
.L2961:
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe162:
	.size	 IsAbilityStatusProtected,.Lfe162-IsAbilityStatusProtected
	.align	2, 0
	.type	 RecalcBattlerStats,function
	.thumb_func
RecalcBattlerStats:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	add	r0, r4, #0
	bl	CalculateMonStats
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r2, .L2964
	mov	r1, #0x5c
	mul	r1, r1, r5
	add	r5, r1, r2
	add	r1, r5, #0
	add	r1, r1, #0x2c
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r5, #0x2a]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	strh	r0, [r5, #0x2e]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	strh	r0, [r5, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	strh	r0, [r5, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	strh	r0, [r5, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	strh	r0, [r5, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	strh	r0, [r5, #0xa]
	add	r0, r4, #0
	bl	GetMonAbility
	strh	r0, [r5, #0x20]
	ldr	r2, .L2964+0x4
	ldrh	r1, [r5]
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x15
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x6]
	add	r1, r5, #0
	add	r1, r1, #0x22
	strb	r0, [r1]
	ldrh	r1, [r5]
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x15
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x7]
	add	r0, r5, #0
	add	r0, r0, #0x23
	strb	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2965:
	.align	2, 0
.L2964:
	.word	gBattleMons
	.word	gBaseStats
.Lfe163:
	.size	 RecalcBattlerStats,.Lfe163-RecalcBattlerStats
	.align	2, 0
	.type	 GetHighestStatId,function
	.thumb_func
GetHighestStatId:
	push	{r4, lr}
	mov	r4, #0x1
	ldr	r2, .L2973
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r3, [r0, #0x2]
	mov	r2, #0x2
	add	r0, r0, #0x4
.L2970:
	ldrh	r1, [r0]
	cmp	r1, r3
	bls	.L2969	@cond_branch
	add	r3, r1, #0
	add	r4, r2, #0
.L2969:
	add	r0, r0, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x5
	bls	.L2970	@cond_branch
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L2974:
	.align	2, 0
.L2973:
	.word	gBattleMons
.Lfe164:
	.size	 GetHighestStatId,.Lfe164-GetHighestStatId
	.align	2, 0
	.type	 Cmd_various,function
	.thumb_func
Cmd_various:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x28
	ldr	r0, .L3490
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB28440
	bl	.L2975	@far jump
.LCB28440:
	ldr	r4, .L3490+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L3490+0x8
	strb	r0, [r1]
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0x66
	bls	.LCB28454
	bl	.L2977	@far jump
.LCB28454:
	lsl	r0, r0, #0x2
	ldr	r1, .L3490+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L3491:
	.align	2, 0
.L3490:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	.L3454
	.align	2, 0
	.align	2, 0
.L3454:
	.word	.L3058
	.word	.L3059
	.word	.L3062
	.word	.L3063
	.word	.L3064
	.word	.L3067
	.word	.L3068
	.word	.L3080
	.word	.L3082
	.word	.L3084
	.word	.L3086
	.word	.L3087
	.word	.L3088
	.word	.L3089
	.word	.L3090
	.word	.L3091
	.word	.L3092
	.word	.L3093
	.word	.L3095
	.word	.L3097
	.word	.L3099
	.word	.L3102
	.word	.L3103
	.word	.L3104
	.word	.L3105
	.word	.L3107
	.word	.L3112
	.word	.L3113
	.word	.L3114
	.word	.L3115
	.word	.L3116
	.word	.L3117
	.word	.L3408
	.word	.L3119
	.word	.L3125
	.word	.L3163
	.word	.L3167
	.word	.L3168
	.word	.L3171
	.word	.L3176
	.word	.L3186
	.word	.L3220
	.word	.L3221
	.word	.L3227
	.word	.L3247
	.word	.L3256
	.word	.L3257
	.word	.L3277
	.word	.L3280
	.word	.L3283
	.word	.L3293
	.word	.L3296
	.word	.L3314
	.word	.L3317
	.word	.L3328
	.word	.L3332
	.word	.L3335
	.word	.L3358
	.word	.L3359
	.word	.L3366
	.word	.L3369
	.word	.L3379
	.word	.L3408
	.word	.L3409
	.word	.L3410
	.word	.L3423
	.word	.L3427
	.word	.L3428
	.word	.L3431
	.word	.L3437
	.word	.L3439
	.word	.L3441
	.word	.L3449
	.word	.L3044
	.word	.L3043
	.word	.L3035
	.word	.L3033
	.word	.L3028
	.word	.L2978
	.word	.L3339
	.word	.L3025
	.word	.L3018
	.word	.L3022
	.word	.L3019
	.word	.L3021
	.word	.L3307
	.word	.L3000
	.word	.L3001
	.word	.L3372
	.word	.L3157
	.word	.L3127
	.word	.L3155
	.word	.L3004
	.word	.L2986
	.word	.L2997
	.word	.L2992
	.word	.L3012
	.word	.L2989
	.word	.L2995
	.word	.L2996
	.word	.L3015
	.word	.L2983
	.word	.L3453
.L2978:
	ldr	r0, .L3492
	ldr	r0, [r0]
	mov	r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L2981	@cond_branch
	ldr	r0, .L3492+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2979	@cond_branch
	ldr	r4, .L3492+0x8
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L2979	@cond_branch
	ldrb	r0, [r4]
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L2979	@cond_branch
	ldrb	r1, [r4]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.LCB28515
	bl	.L3451	@far jump
.LCB28515:
.L2979:
	ldr	r0, .L3492
	ldr	r0, [r0]
	mov	r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L2981	@cond_branch
	ldr	r0, .L3492+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L2981	@cond_branch
	ldr	r0, .L3492+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB28540
	bl	.L3451	@far jump
.LCB28540:
.L2981:
	ldr	r1, .L3492+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3493:
	.align	2, 0
.L3492:
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L2983:
	ldr	r0, .L3494
	ldrb	r0, [r0]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB28563
	bl	.L3451	@far jump
.LCB28563:
	ldr	r1, .L3494+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3495:
	.align	2, 0
.L3494:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L2986:
	ldr	r0, .L3496
	ldrb	r0, [r0]
	bl	IsShieldsDownProtected
	cmp	r0, #0
	beq	.LCB28583
	bl	.L3451	@far jump
.LCB28583:
	ldr	r1, .L3496+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3497:
	.align	2, 0
.L3496:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L2989:
	ldr	r0, .L3498
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	ldr	r3, .L3498+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	beq	.L2990	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	bl	.L3463	@ far jump
.L3499:
	.align	2, 0
.L3498:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L2990:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r3]
	bl	.L2975	@ far jump
.L2992:
	ldr	r0, .L3500
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB28643
	bl	.L3451	@far jump
.LCB28643:
	ldr	r1, .L3500+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3501:
	.align	2, 0
.L3500:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L2995:
	ldr	r1, .L3502
	ldr	r5, .L3502+0x4
	ldrb	r0, [r5]
	strb	r0, [r1, #0x17]
	ldr	r4, .L3502+0x8
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x3]
	bl	GetBattlerForBattleScript
	ldr	r2, .L3502+0xc
	ldrb	r3, [r5]
	mov	r1, #0x5c
	mul	r3, r3, r1
	add	r2, r2, #0x54
	add	r3, r3, r2
	ldr	r1, .L3502+0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x10
	ldr	r0, [r3]
	orr	r0, r0, r1
	str	r0, [r3]
	ldr	r0, [r4]
	add	r0, r0, #0x4
	str	r0, [r4]
	bl	.L2975	@ far jump
.L3503:
	.align	2, 0
.L3502:
	.word	gBattleScripting
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
	.word	gBitTable
.L2996:
	ldr	r3, .L3504
	ldr	r2, .L3504+0x4
	ldr	r0, .L3504+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x30]
	strh	r0, [r3]
	bl	.L2977	@ far jump
.L3505:
	.align	2, 0
.L3504:
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gActiveBattler
.L2997:
	ldr	r3, .L3506
	ldr	r1, [r3]
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.LCB28726
	bl	.L3451	@far jump
.LCB28726:
	orr	r1, r1, r2
	str	r1, [r3]
	ldr	r1, .L3506+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0xb]
	ldr	r1, .L3506+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3507:
	.align	2, 0
.L3506:
	.word	gFieldStatuses
	.word	gFieldTimers
	.word	gBattlescriptCurrInstr
.L3000:
	ldr	r2, .L3508
	mov	r9, r2
	ldr	r6, [r2]
	ldrb	r7, [r6, #0x3]
	ldr	r3, .L3508+0x4
	mov	r8, r3
	ldr	r5, .L3508+0x8
	ldrb	r0, [r5]
	mov	r4, #0x5c
	mul	r0, r0, r4
	ldr	r2, .L3508+0xc
	add	r0, r0, r2
	ldrh	r1, [r0]
	sub	r1, r1, #0x1
	add	r1, r1, r7
	str	r1, [r3]
	ldr	r3, .L3508+0x10
	ldrb	r0, [r5]
	mul	r0, r0, r4
	add	r0, r7, r0
	add	r2, r2, #0x16
	add	r0, r0, r2
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrb	r0, [r0]
	mul	r0, r0, r1
	mov	r1, r8
	str	r0, [r1]
	ldrb	r1, [r5]
	mul	r1, r1, r4
	add	r1, r7, r1
	add	r1, r1, r2
	ldrb	r1, [r1, #0]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	lsl	r1, r1, #0x1
	add	r3, r3, #0x1
	add	r1, r1, r3
	ldrb	r1, [r1]
	bl	__divsi3
	mov	r2, r8
	str	r0, [r2]
	add	r6, r6, #0x4
	mov	r3, r9
	str	r6, [r3]
	bl	.L2975	@ far jump
.L3509:
	.align	2, 0
.L3508:
	.word	gBattlescriptCurrInstr
	.word	gBattleMoveDamage
	.word	gActiveBattler
	.word	gBattleMons+0x2
	.word	gStatStageRatios
.L3001:
	ldr	r2, .L3510
	ldr	r0, .L3510+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x2a]
	ldrh	r0, [r0, #0x2e]
	cmp	r1, r0
	bne	.LCB28822
	bl	.L3451	@far jump
.LCB28822:
	ldr	r1, .L3510+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3511:
	.align	2, 0
.L3510:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L3004:
	ldr	r5, .L3512
	mov	r9, r5
	ldr	r0, [r5]
	ldr	r2, .L3512+0x4
	add	r0, r0, r2
	ldr	r1, .L3512+0x8
	ldrb	r0, [r0]
	mov	sl, r9
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L3006	@cond_branch
	ldr	r5, .L3512+0xc
	mov	r8, sl
	mov	r6, #0x1
	ldr	r7, .L3512+0x10
.L3007:
	mov	r0, r8
	ldr	r1, [r0]
	add	r1, r1, r2
	ldrb	r2, [r1]
	add	r0, r2, #0x1
	strb	r0, [r1]
	strb	r2, [r5]
	ldr	r0, .L3512+0x14
	ldrb	r0, [r0]
	add	r0, r0, r7
	ldrb	r3, [r0]
	ldrb	r4, [r5]
	add	r0, r4, r7
	ldrb	r2, [r0]
	add	r1, r6, #0
	and	r1, r1, r3
	add	r0, r6, #0
	and	r0, r0, r2
	cmp	r1, r0
	beq	.L3005	@cond_branch
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L3005	@cond_branch
	ldr	r1, .L3512+0x18
	ldrb	r4, [r5]
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r1, [r0, #0x30]
	cmp	r1, #0
	beq	.L3005	@cond_branch
	ldr	r0, .L3512+0x1c
	strh	r1, [r0]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBattlerHoldEffect
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	RecordItemEffectBattle
	bl	BattleScriptPushCursor
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r2, .L3512+0x20
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.LCB28928
	bl	.L3459	@far jump
.LCB28928:
	strb	r6, [r1]
	ldr	r1, .L3512+0x24
	ldr	r0, .L3512+0x28
	bl	.L3462	@ far jump
.L3513:
	.align	2, 0
.L3512:
	.word	gBattleStruct
	.word	0x33d
	.word	gBattlersCount
	.word	gBattlerTarget
	.word	gBattlerPositions
	.word	gActiveBattler
	.word	gBattleMons
	.word	gLastUsedItem
	.word	0x33e
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FriskMsgWithPopup
.L3005:
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r2, .L3514
	add	r0, r0, r2
	ldr	r1, .L3514+0x4
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L3007	@cond_branch
.L3006:
	mov	r5, sl
	ldr	r0, [r5]
	ldr	r6, .L3514
	add	r0, r0, r6
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, [r5]
	ldr	r2, .L3514+0x8
	bl	.L3464	@ far jump
.L3515:
	.align	2, 0
.L3514:
	.word	0x33d
	.word	gBattlersCount
	.word	0x33e
.L3012:
	ldr	r0, .L3516
	ldrb	r4, [r0]
	ldr	r5, .L3516+0x4
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x3]
	bl	GetBattlerForBattleScript
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	CanPoisonType
	cmp	r0, #0
	beq	.L3465	@cond_branch
	b	.L3016
.L3517:
	.align	2, 0
.L3516:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L3015:
	ldr	r0, .L3518
	ldrb	r4, [r0]
	ldr	r5, .L3518+0x4
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x3]
	bl	GetBattlerForBattleScript
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	CanParalyzeType
	cmp	r0, #0
	bne	.L3016	@cond_branch
.L3465:
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	bl	.L2975	@ far jump
.L3519:
	.align	2, 0
.L3518:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L3016:
	ldr	r0, [r5]
	add	r0, r0, #0x8
	str	r0, [r5]
	bl	.L2975	@ far jump
.L3018:
	ldr	r5, .L3520
	ldr	r4, .L3520+0x4
	ldrb	r1, [r4]
	mov	r3, #0x5c
	mov	r2, r1
	mul	r2, r2, r3
	add	r2, r2, r5
	ldr	r0, .L3520+0x8
	ldr	r0, [r0]
	lsl	r1, r1, #0x1
	ldr	r6, .L3520+0xc
	add	r0, r0, r6
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r2, #0x20]
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r3
	add	r1, r1, r5
	ldrh	r1, [r1, #0x20]
	bl	RecordAbilityBattle
	bl	.L2977	@ far jump
.L3521:
	.align	2, 0
.L3520:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gBattleStruct
	.word	0x2ca
.L3019:
	ldr	r0, .L3522
	ldrb	r0, [r0]
	bl	GetIllusionMonPtr
	cmp	r0, #0
	bne	.LCB29103
	bl	.L2977	@far jump
.LCB29103:
	ldr	r4, .L3522+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	bl	BattleScriptPushCursor
	ldr	r0, .L3522+0x8
	str	r0, [r4]
	bl	.L2975	@ far jump
.L3523:
	.align	2, 0
.L3522:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_IllusionOff
.L3021:
	ldr	r0, .L3524
	ldr	r1, [r0]
	ldr	r2, .L3524+0x4
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x3]
	ldr	r3, .L3524+0x8
	add	r1, r1, r3
	strb	r0, [r1]
	bl	.L3466	@ far jump
.L3525:
	.align	2, 0
.L3524:
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
	.word	0x2da
.L3022:
	ldr	r4, .L3526
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3023	@cond_branch
	ldr	r1, .L3526+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L3526+0x8
	b	.L3467
.L3527:
	.align	2, 0
.L3526:
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L3023:
	ldr	r1, .L3528
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L3528+0x4
.L3467:
	add	r7, r1, r0
	ldr	r1, .L3528+0x8
	ldr	r0, .L3528+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r1, r7, #0
	mov	r2, #0x4
	bl	UpdateHealthboxAttribute
	bl	.L2977	@ far jump
.L3529:
	.align	2, 0
.L3528:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
.L3025:
	ldr	r2, .L3530
	ldr	r0, .L3530+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x30]
	bl	ItemId_GetPocket
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x7
	beq	.LCB29215
	bl	.L3451	@far jump
.LCB29215:
	ldr	r1, .L3530+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3531:
	.align	2, 0
.L3530:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L3028:
	ldr	r1, .L3532
	ldr	r6, .L3532+0x4
	ldrb	r2, [r6]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L3532+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB29239
	bl	.L3451	@far jump
.LCB29239:
	ldr	r5, .L3532+0xc
	mov	r4, #0x5c
	mov	r0, r2
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r1, [r0, #0x2a]
	ldrh	r0, [r0, #0x2e]
	cmp	r1, r0
	bne	.LCB29252
	bl	.L3451	@far jump
.LCB29252:
	cmp	r1, #0
	bne	.LCB29254
	bl	.L3451	@far jump
.LCB29254:
	add	r0, r2, #0
	bl	IsBattlerGrounded
	cmp	r0, #0
	bne	.LCB29259
	bl	.L3451	@far jump
.LCB29259:
	ldr	r1, .L3532+0x10
	ldrb	r0, [r6]
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x4
	str	r0, [r1]
	cmp	r0, #0
	bne	.L3032	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L3032:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldr	r1, .L3532+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3533:
	.align	2, 0
.L3532:
	.word	gStatuses3
	.word	gActiveBattler
	.word	0x10400c0
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.L3033:
	ldr	r5, .L3534
	ldr	r4, .L3534+0x4
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3034	@cond_branch
	add	r0, r2, #0
	bl	CancelMultiTurnMoves
.L3034:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	ldr	r2, .L3534+0x8
	b	.L3468
.L3535:
	.align	2, 0
.L3534:
	.word	gStatuses3
	.word	gActiveBattler
	.word	-0x4800041
.L3035:
	mov	r7, #0x1
	ldr	r4, .L3536
	ldr	r5, .L3536+0x4
.L3039:
	ldr	r0, [r4]
	mov	r6, #0xae
	lsl	r6, r6, #0x2
	add	r3, r0, r6
	ldrb	r2, [r3]
	ldr	r1, .L3536+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3038	@cond_branch
	bic	r2, r2, r1
	strb	r2, [r3]
	ldr	r0, [r4]
	add	r0, r0, r6
	add	r0, r0, r7
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r7, r0
	strb	r0, [r5, #0x1a]
	mov	r1, #0xf8
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	add	r1, r7, #0
	mov	r2, #0xc0
	lsl	r2, r2, #0x8
	mov	r3, #0x0
	bl	ChangeStatBuffs
	cmp	r0, #0
	bne	.LCB29372
	bl	.L3460	@far jump
.LCB29372:
.L3038:
	add	r7, r7, #0x1
	cmp	r7, #0x7
	ble	.L3039	@cond_branch
	bl	.L2977	@ far jump
.L3537:
	.align	2, 0
.L3536:
	.word	gBattleStruct
	.word	gBattleScripting
	.word	gBitTable
.L3043:
	ldr	r1, .L3538
	ldr	r0, .L3538+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, #0x54
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L2977	@ far jump
.L3539:
	.align	2, 0
.L3538:
	.word	gBattleMons
	.word	gActiveBattler
.L3044:
	mov	r5, #0x0
	mov	r7, #0x1
	ldr	r2, .L3540
	ldr	r4, .L3540+0x4
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r4, r0
	add	r1, r0, #0
	add	r1, r1, #0x19
	ldr	r0, .L3540+0x8
	add	r2, r0, #0x4
.L3048:
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0xc
	beq	.L3047	@cond_branch
	ldr	r0, [r2]
	orr	r5, r5, r0
.L3047:
	add	r1, r1, #0x1
	add	r2, r2, #0x4
	add	r7, r7, #0x1
	cmp	r7, #0x7
	ble	.L3048	@cond_branch
	cmp	r5, #0
	bne	.LCB29451
	bl	.L3451	@far jump
.LCB29451:
	ldr	r4, .L3540+0x8
.L3052:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x7
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	add	r0, r2, #0x1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L3052	@cond_branch
	ldr	r1, .L3540+0xc
	add	r0, r2, #0
	add	r0, r0, #0x11
	strb	r0, [r1, #0x1a]
	ldr	r1, .L3540+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3541:
	.align	2, 0
.L3540:
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBitTable
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.L3058:
	ldr	r0, .L3542
	ldrb	r0, [r0]
	bl	CancelMultiTurnMoves
	bl	.L2977	@ far jump
.L3543:
	.align	2, 0
.L3542:
	.word	gActiveBattler
.L3059:
	ldr	r1, .L3544
	ldr	r4, .L3544+0x4
	ldrb	r0, [r4]
	strb	r0, [r1]
	ldrb	r0, [r1]
	bl	GetBattlerSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L3544+0x8
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldrb	r0, [r2, #0x8]
	cmp	r0, #0
	beq	.L3060	@cond_branch
	ldr	r1, .L3544+0xc
	ldrb	r2, [r2, #0x9]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L3060	@cond_branch
	strb	r2, [r4]
	bl	.L2977	@ far jump
.L3545:
	.align	2, 0
.L3544:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gSideTimers
	.word	gBattleMons
.L3060:
	ldr	r0, .L3546
	ldr	r1, .L3546+0x4
	ldrb	r1, [r1]
	strb	r1, [r0]
	bl	.L2977	@ far jump
.L3547:
	.align	2, 0
.L3546:
	.word	gBattlerTarget
	.word	gActiveBattler
.L3062:
	bl	IsRunningFromBattleImpossible
	ldr	r1, .L3548
	strb	r0, [r1]
	bl	.L2977	@ far jump
.L3549:
	.align	2, 0
.L3548:
	.word	gBattleCommunication
.L3063:
	ldr	r0, .L3550
	ldrh	r0, [r0]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L3550+0x4
	strb	r0, [r1]
	bl	.L2977	@ far jump
.L3551:
	.align	2, 0
.L3550:
	.word	gCurrentMove
	.word	gBattlerTarget
.L3064:
	ldr	r2, .L3552
	ldr	r1, .L3552+0x4
	ldr	r0, .L3552+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r0, r0, #0x1c
	ldr	r2, [r2]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L3065	@cond_branch
	ldr	r1, .L3552+0xc
	mov	r0, #0x1
	strb	r0, [r1]
	bl	.L2977	@ far jump
.L3553:
	.align	2, 0
.L3552:
	.word	gHitMarker
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleCommunication
.L3065:
	ldr	r0, .L3554
	strb	r2, [r0]
	bl	.L2977	@ far jump
.L3555:
	.align	2, 0
.L3554:
	.word	gBattleCommunication
.L3067:
	ldr	r5, .L3556
	ldr	r4, .L3556+0x4
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldrb	r2, [r1]
	mov	r3, #0x9
	neg	r3, r3
	add	r0, r3, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	and	r3, r3, r1
	strb	r3, [r0, #0x1]
	bl	.L2977	@ far jump
.L3557:
	.align	2, 0
.L3556:
	.word	gSpecialStatuses
	.word	gActiveBattler
.L3068:
	ldr	r3, .L3558
	ldr	r0, .L3558+0x4
	ldr	r0, [r0]
	ldrh	r2, [r3]
	ldrb	r1, [r0, #0x10]
	cmp	r2, r1
	beq	.L3456	@cond_branch
	ldrh	r0, [r3, #0x4]
	cmp	r0, r1
	beq	.LCB29700
	bl	.L2977	@far jump
.LCB29700:
	cmp	r2, r0
	bne	.L3071	@cond_branch
.L3456:
	ldr	r1, .L3558+0x8
	mov	r0, #0x0
	b	.L3469
.L3559:
	.align	2, 0
.L3558:
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gActiveBattler
.L3071:
	ldr	r1, .L3560
	mov	r0, #0x2
.L3469:
	strb	r0, [r1]
	mov	r7, #0x0
	ldr	r4, .L3560+0x4
	ldr	r0, .L3560
	ldrb	r2, [r0]
	ldr	r0, .L3560+0x8
	ldr	r0, [r0]
	lsl	r1, r2, #0x1
	add	r0, r0, #0xc4
	add	r3, r0, r1
	mov	r0, #0x5c
	mov	r1, r2
	mul	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldrh	r2, [r3]
.L3076:
	ldrh	r0, [r1]
	cmp	r0, r2
	beq	.L3074	@cond_branch
	add	r1, r1, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L3076	@cond_branch
.L3074:
	cmp	r7, #0x4
	beq	.LCB29761
	bl	.L2977	@far jump
.LCB29761:
	mov	r0, #0x0
	strh	r0, [r3]
	bl	.L2977	@ far jump
.L3561:
	.align	2, 0
.L3560:
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattleStruct
.L3080:
	ldr	r0, .L3562
	ldr	r0, [r0]
	mov	r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0x8
	beq	.LCB29780
	bl	.L2977	@far jump
.LCB29780:
	ldr	r1, .L3562+0x4
	ldrh	r0, [r1, #0x2a]
	cmp	r0, #0
	bne	.LCB29786
	bl	.L2977	@far jump
.LCB29786:
	add	r0, r1, #0
	add	r0, r0, #0x86
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.LCB29793
	bl	.L2977	@far jump
.LCB29793:
	ldr	r0, .L3562+0x8
	ldr	r1, [r0]
	ldr	r2, .L3562+0xc
.L3468:
	and	r1, r1, r2
	str	r1, [r0]
	bl	.L2977	@ far jump
.L3563:
	.align	2, 0
.L3562:
	.word	gBattleTypeFlags
	.word	gBattleMons
	.word	gHitMarker
	.word	-0x400001
.L3082:
	ldr	r0, .L3564
	mov	r8, r0
	mov	r0, #0x0
	mov	r1, r8
	strb	r0, [r1]
	ldr	r1, .L3564+0x4
	ldr	r6, .L3564+0x8
	mov	r2, r8
	ldrb	r0, [r2, #0x1]
	strb	r0, [r6]
	strb	r0, [r1, #0x17]
	ldr	r0, .L3564+0xc
	ldr	r0, [r0]
	add	r7, r0, #0
	add	r7, r7, #0x8b
	ldrb	r3, [r7]
	ldr	r1, .L3564+0x10
	ldrb	r2, [r6]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r5, [r0]
	add	r0, r3, #0
	and	r0, r0, r5
	cmp	r0, #0
	beq	.LCB29837
	bl	.L2977	@far jump
.LCB29837:
	ldr	r4, .L3564+0x14
	mov	r0, #0x5c
	mov	r9, r0
	mov	r1, r9
	mul	r1, r1, r2
	add	r2, r1, #0
	add	r1, r2, r4
	ldrh	r0, [r1, #0x2e]
	lsr	r0, r0, #0x1
	ldrh	r1, [r1, #0x2a]
	cmp	r0, r1
	bcs	.LCB29852
	bl	.L2977	@far jump
.LCB29852:
	cmp	r1, #0
	bne	.LCB29854
	bl	.L2977	@far jump
.LCB29854:
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB29862
	bl	.L2977	@far jump
.LCB29862:
	orr	r3, r3, r5
	strb	r3, [r7]
	mov	r0, #0x1
	mov	r2, r8
	strb	r0, [r2]
	ldrb	r0, [r6]
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r1, r4, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	GetNatureFromPersonality
	ldr	r1, .L3564+0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r5, r8
	strb	r0, [r5, #0x5]
	bl	.L2977	@ far jump
.L3565:
	.align	2, 0
.L3564:
	.word	gBattleCommunication
	.word	gBattleScripting
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBitTable
	.word	gBattleMons
	.word	sBattlePalaceNatureToFlavorTextId
.L3084:
	ldr	r4, .L3566
	add	r0, r4, #0
	bl	BattleArena_ShowJudgmentWindow
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0
	bne	.LCB29908
	bl	.L2975	@far jump
.LCB29908:
	strb	r7, [r4, #0x1]
	bl	.L2977	@ far jump
.L3567:
	.align	2, 0
.L3566:
	.word	gBattleCommunication
.L3086:
	ldr	r0, .L3568
	add	r0, r0, #0x86
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r2, .L3568+0x4
	ldr	r3, .L3568+0x8
	ldr	r1, [r3, #0x4]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L3568+0xc
	ldr	r2, [r0]
	ldr	r6, .L3568+0x10
	add	r2, r2, r6
	ldr	r0, .L3568+0x14
	ldrh	r0, [r0, #0x2]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3568+0x18
	add	r1, r1, #0x42
	ldrb	r0, [r1]
	mov	r2, #0x2
	b	.L3470
.L3569:
	.align	2, 0
.L3568:
	.word	gBattleMons
	.word	gHitMarker
	.word	gBitTable
	.word	gBattleStruct
	.word	0x275
	.word	gBattlerPartyIndexes
	.word	gDisableStructs
.L3087:
	ldr	r1, .L3570
	mov	r0, #0x0
	strh	r0, [r1, #0x2a]
	ldr	r2, .L3570+0x4
	ldr	r3, .L3570+0x8
	ldr	r1, [r3]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	orr	r0, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L3570+0xc
	ldr	r2, [r0]
	mov	r0, #0x9d
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	ldr	r0, .L3570+0x10
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L3570+0x14
	ldrb	r0, [r2, #0x1a]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0x1a]
	bl	.L2977	@ far jump
.L3571:
	.align	2, 0
.L3570:
	.word	gBattleMons
	.word	gHitMarker
	.word	gBitTable
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
	.word	gDisableStructs
.L3088:
	ldr	r0, .L3572
	mov	r1, #0x0
	strh	r1, [r0, #0x2a]
	add	r0, r0, #0x86
	strh	r1, [r0]
	ldr	r2, .L3572+0x4
	ldr	r3, .L3572+0x8
	ldr	r0, [r3]
	lsl	r0, r0, #0x1c
	ldr	r1, [r2]
	orr	r1, r1, r0
	ldr	r0, [r3, #0x4]
	lsl	r0, r0, #0x1c
	orr	r1, r1, r0
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	orr	r1, r1, r0
	str	r1, [r2]
	ldr	r5, .L3572+0xc
	ldr	r2, [r5]
	mov	r1, #0x9d
	lsl	r1, r1, #0x2
	add	r2, r2, r1
	ldr	r4, .L3572+0x10
	ldrh	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, [r5]
	ldr	r5, .L3572+0x14
	add	r2, r2, r5
	ldrh	r0, [r4, #0x2]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3572+0x18
	ldrb	r0, [r1, #0x1a]
	mov	r2, #0x2
	orr	r0, r0, r2
	strb	r0, [r1, #0x1a]
	add	r1, r1, #0x42
	ldrb	r0, [r1]
.L3470:
	orr	r0, r0, r2
	strb	r0, [r1]
	bl	.L2977	@ far jump
.L3573:
	.align	2, 0
.L3572:
	.word	gBattleMons
	.word	gHitMarker
	.word	gBitTable
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
	.word	0x275
	.word	gDisableStructs
.L3089:
	mov	r0, #0x0
	bl	BtlController_EmitUnknownYesNoBox
	b	.L3471
.L3090:
	bl	DrawArenaRefereeTextBox
	bl	.L2977	@ far jump
.L3091:
	bl	RemoveArenaRefereeTextBox
	bl	.L2977	@ far jump
.L3092:
	ldr	r1, .L3574
	ldr	r0, .L3574+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	BattleStringExpandPlaceholdersToDisplayedString
	ldr	r0, .L3574+0x8
	mov	r1, #0x16
	bl	BattlePutTextOnWindow
	bl	.L2977	@ far jump
.L3575:
	.align	2, 0
.L3574:
	.word	gRefereeStringsTable
	.word	gBattlescriptCurrInstr
	.word	gDisplayedStringBattle
.L3093:
	mov	r0, #0x16
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	b	.L3472
.L3095:
	bl	IsCryFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB30130
	bl	.L2975	@far jump
.LCB30130:
	bl	.L2977	@ far jump
.L3097:
	ldr	r4, .L3576
	mov	r0, #0x1
	strb	r0, [r4]
	ldr	r0, .L3576+0x4
	add	r0, r0, #0x5c
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.LCB30143
	bl	.L2977	@far jump
.LCB30143:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitReturnMonToBall
	bl	.L3473	@ far jump
.L3577:
	.align	2, 0
.L3576:
	.word	gActiveBattler
	.word	gBattleMons
.L3099:
	ldr	r0, .L3578
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bhi	.LCB30164
	bl	.L2977	@far jump
.LCB30164:
	ldr	r4, .L3578+0x4
	mov	r0, #0x3
	strb	r0, [r4]
	ldr	r0, .L3578+0x8
	mov	r6, #0x8a
	lsl	r6, r6, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.LCB30178
	bl	.L2977	@far jump
.LCB30178:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitReturnMonToBall
	bl	.L3473	@ far jump
.L3579:
	.align	2, 0
.L3578:
	.word	gBattlersCount
	.word	gActiveBattler
	.word	gBattleMons
.L3102:
	ldr	r0, .L3580
	ldr	r1, .L3580+0x4
	mov	r2, #0x55
	bl	m4aMPlayVolumeControl
	bl	.L2977	@ far jump
.L3581:
	.align	2, 0
.L3580:
	.word	gMPlayInfo_BGM
	.word	0xffff
.L3103:
	ldr	r0, .L3582
	ldr	r1, .L3582+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
	bl	.L2977	@ far jump
.L3583:
	.align	2, 0
.L3582:
	.word	gMPlayInfo_BGM
	.word	0xffff
.L3104:
	ldr	r0, .L3584
	ldr	r2, [r0]
	ldr	r0, .L3584+0x4
	add	r2, r2, r0
	ldr	r1, .L3584+0x8
	ldr	r0, .L3584+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	bl	.L2977	@ far jump
.L3585:
	.align	2, 0
.L3584:
	.word	gBattleStruct
	.word	0x276
	.word	gBitTable
	.word	gActiveBattler
.L3105:
	ldr	r0, .L3586
	ldrb	r0, [r0]
	bl	sub_805725C
.L3472:
	cmp	r0, #0
	beq	.LCB30262
	bl	.L2975	@far jump
.LCB30262:
	bl	.L2977	@ far jump
.L3587:
	.align	2, 0
.L3586:
	.word	gActiveBattler
.L3107:
	ldr	r5, .L3588
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L3108	@cond_branch
	ldrb	r1, [r5]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L3108	@cond_branch
	ldr	r2, .L3588+0x4
	ldr	r3, .L3588+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L3588+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r3, .L3588+0x10
	ldrb	r0, [r5]
	mov	r4, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x2a]
	ldr	r1, .L3588+0x14
	ldrb	r2, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L3588+0x18
	add	r0, r0, r1
	mul	r2, r2, r4
	add	r3, r3, #0x2a
	add	r2, r2, r3
	mov	r1, #0x39
	bl	SetMonData
	ldr	r1, .L3588+0x1c
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	FaintClearSetData
	bl	.L2977	@ far jump
.L3589:
	.align	2, 0
.L3588:
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gHitMarker
	.word	gBattleMons
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gHealthboxSpriteIds
.L3108:
	ldr	r0, .L3590
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3110	@cond_branch
	ldr	r1, .L3590+0x4
	mov	r0, #0x5
	strb	r0, [r1]
	bl	.L2977	@ far jump
.L3591:
	.align	2, 0
.L3590:
	.word	gActiveBattler
	.word	gBattleOutcome
.L3110:
	ldr	r1, .L3592
	mov	r0, #0xa
	strb	r0, [r1]
	bl	.L2977	@ far jump
.L3593:
	.align	2, 0
.L3592:
	.word	gBattleOutcome
.L3112:
	ldr	r1, .L3594
	mov	r0, #0x0
	mov	r2, #0x1
	bl	BtlController_EmitPlayFanfareOrBGM
	b	.L3471
.L3595:
	.align	2, 0
.L3594:
	.word	0x17f
.L3113:
	ldr	r1, .L3596
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	ldr	r0, .L3596+0x4
	ldrb	r0, [r0]
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	bl	.L2977	@ far jump
.L3597:
	.align	2, 0
.L3596:
	.word	gBattleTextBuff1
	.word	gBattleCommunication
.L3114:
	ldr	r1, .L3598
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
	ldr	r5, .L3598+0x4
	ldrb	r1, [r5]
	mov	r4, #0x0
	str	r4, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	ldrb	r1, [r5]
	str	r4, [sp]
	mov	r0, #0xb
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	ldrb	r1, [r5]
	str	r4, [sp]
	mov	r0, #0xd
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	bl	.L2975	@ far jump
.L3599:
	.align	2, 0
.L3598:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.L3115:
	ldr	r0, .L3600
	ldr	r0, [r0]
	ldr	r1, .L3600+0x4
	ldrb	r1, [r1]
	ldr	r2, .L3600+0x8
.L3464:
	add	r0, r0, r2
	strb	r1, [r0]
	bl	.L2977	@ far jump
.L3601:
	.align	2, 0
.L3600:
	.word	gBattleStruct
	.word	gBattlerTarget
	.word	0x286
.L3116:
	ldr	r1, .L3602
	ldr	r0, .L3602+0x4
	ldr	r0, [r0]
	ldr	r3, .L3602+0x8
	add	r0, r0, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	bl	.L2977	@ far jump
.L3603:
	.align	2, 0
.L3602:
	.word	gBattlerTarget
	.word	gBattleStruct
	.word	0x286
.L3117:
	ldr	r1, .L3604
	mov	r0, #0x0
	bl	BtlController_EmitHealthBarUpdate
.L3471:
	ldr	r0, .L3604+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	bl	.L2977	@ far jump
.L3605:
	.align	2, 0
.L3604:
	.word	0x7fff
	.word	gActiveBattler
.L3119:
	mov	r7, #0x0
	ldr	r6, .L3606
	ldr	r5, .L3606+0x4
	mov	r4, #0x5c
	mov	r0, #0x25
	add	r0, r0, r6
	mov	r8, r0
.L3123:
	lsl	r1, r7, #0x1
	ldrb	r0, [r5]
	mov	r2, r0
	mul	r2, r2, r4
	add	r1, r1, r2
	add	r3, r6, #0
	add	r3, r3, #0xc
	add	r1, r1, r3
	ldrh	r0, [r1]
	add	r2, r2, r6
	add	r2, r2, #0x3d
	ldrb	r1, [r2]
	lsl	r2, r7, #0x18
	lsr	r2, r2, #0x18
	str	r3, [sp, #0x24]
	bl	CalculatePPWithBonus
	ldrb	r1, [r5]
	mul	r1, r1, r4
	add	r1, r7, r1
	add	r1, r1, r8
	strb	r0, [r1]
	mov	r1, sp
	add	r1, r1, r7
	add	r1, r1, #0x10
	ldrb	r0, [r5]
	mul	r0, r0, r4
	add	r0, r7, r0
	add	r0, r0, r8
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r7, r7, #0x1
	ldr	r3, [sp, #0x24]
	cmp	r7, #0x3
	ble	.L3123	@cond_branch
	mov	r2, sp
	add	r2, r2, r7
	add	r2, r2, #0x10
	ldr	r4, .L3606+0x4
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r3, r0
	add	r0, r0, #0x31
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r1, sp, #0x10
	str	r1, [sp]
	mov	r0, #0x0
	mov	r1, #0x8
	mov	r2, #0x0
	mov	r3, #0x5
	bl	.L3474	@ far jump
.L3607:
	.align	2, 0
.L3606:
	.word	gBattleMons
	.word	gActiveBattler
.L3125:
	ldr	r0, .L3608
	ldrb	r0, [r0]
	bl	GetBattlerAbility
	cmp	r0, #0x99
	beq	.LCB30614
	bl	.L2977	@far jump
.LCB30614:
	bl	HasAttackerFaintedTarget
	cmp	r0, #0
	bne	.LCB30618
	bl	.L2977	@far jump
.LCB30618:
	bl	NoAliveMonsForEitherParty
	cmp	r0, #0
	beq	.LCB30622
	bl	.L2977	@far jump
.LCB30622:
	ldr	r2, .L3608+0x4
	ldr	r0, .L3608+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r0, r2
	ldrb	r2, [r1, #0x19]
	mov	r0, #0x19
	ldrsb	r0, [r1, r0]
	cmp	r0, #0xc
	bne	.LCB30633
	bl	.L2977	@far jump
.LCB30633:
	add	r0, r2, #0x1
	strb	r0, [r1, #0x19]
	ldr	r1, .L3608+0xc
	mov	r0, #0x9
	strb	r0, [r1, #0x1a]
	ldr	r1, .L3608+0x10
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	mov	r0, #0x1
	strb	r0, [r1, #0x2]
	b	.L3475
.L3609:
	.align	2, 0
.L3608:
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleScripting
	.word	gBattleTextBuff1
.L3127:
	ldr	r4, .L3610
	ldr	r5, .L3610+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	eor	r0, r0, r1
	strb	r0, [r4]
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	add	r7, r0, #0
	ldrb	r0, [r4]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB30680
	bl	.L2977	@far jump
.LCB30680:
	add	r0, r7, #0
	sub	r0, r0, #0xde
	cmp	r0, #0x1
	bls	.LCB30684
	bl	.L2977	@far jump
.LCB30684:
	ldr	r2, .L3610+0x8
	ldrb	r1, [r5]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x20]
	add	r4, r2, #0
	cmp	r0, #0xa1
	bne	.LCB30694
	bl	.L2977	@far jump
.LCB30694:
	cmp	r0, #0xa1
	bgt	.L3150	@cond_branch
	cmp	r0, #0x7a
	bgt	.L3151	@cond_branch
	cmp	r0, #0x79
	blt	.LCB30700
	bl	.L2977	@far jump
.LCB30700:
	cmp	r0, #0x24
	bne	.LCB30702
	bl	.L2977	@far jump
.LCB30702:
	cmp	r0, #0x24
	bgt	.L3152	@cond_branch
	cmp	r0, #0x19
	bne	.LCB30706
	bl	.L2977	@far jump
.LCB30706:
	b	.L3148
.L3611:
	.align	2, 0
.L3610:
	.word	gBattlerAbility
	.word	gActiveBattler
	.word	gBattleMons
.L3152:
	cmp	r0, #0x3b
	bne	.LCB30719
	bl	.L2977	@far jump
.LCB30719:
	b	.L3148
.L3151:
	cmp	r0, #0x96
	bgt	.L3148	@cond_branch
	cmp	r0, #0x95
	blt	.L3148	@cond_branch
	bl	.L2977	@ far jump
.L3150:
	cmp	r0, #0xd3
	bgt	.L3153	@cond_branch
	cmp	r0, #0xd0
	blt	.LCB30733
	bl	.L2977	@far jump
.LCB30733:
	cmp	r0, #0xb0
	bne	.LCB30735
	bl	.L2977	@far jump
.LCB30735:
	cmp	r0, #0xc5
	bne	.LCB30737
	bl	.L2977	@far jump
.LCB30737:
	b	.L3148
.L3153:
	cmp	r0, #0xdf
	bgt	.L3154	@cond_branch
	cmp	r0, #0xde
	blt	.LCB30744
	bl	.L2977	@far jump
.LCB30744:
	cmp	r0, #0xd5
	bne	.LCB30746
	bl	.L2977	@far jump
.LCB30746:
	b	.L3148
.L3154:
	cmp	r0, #0xe1
	bne	.LCB30751
	bl	.L2977	@far jump
.LCB30751:
.L3148:
	ldr	r0, .L3612
	ldr	r1, [r0]
	ldr	r0, .L3612+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	ldr	r2, .L3612+0x8
	add	r1, r1, r2
	add	r1, r1, r0
	ldr	r3, .L3612+0xc
	ldrb	r2, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0, #0x20]
	strh	r0, [r1]
	ldr	r1, .L3612+0x10
	ldrb	r0, [r3]
	strb	r0, [r1, #0x17]
	ldr	r4, .L3612+0x14
	ldr	r0, [r4]
	add	r0, r0, #0x3
	bl	BattleScriptPush
	ldr	r0, .L3612+0x18
	str	r0, [r4]
	bl	.L2975	@ far jump
.L3613:
	.align	2, 0
.L3612:
	.word	gBattleStruct
	.word	gBattlerAbility
	.word	0x2ca
	.word	gActiveBattler
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ReceiverActivates
.L3155:
	ldr	r4, .L3614
	ldrb	r0, [r4]
	bl	GetHighestStatId
	add	r7, r0, #0
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0xe0
	beq	.LCB30807
	bl	.L2977	@far jump
.LCB30807:
	bl	HasAttackerFaintedTarget
	cmp	r0, #0
	bne	.LCB30811
	bl	.L2977	@far jump
.LCB30811:
	bl	NoAliveMonsForEitherParty
	cmp	r0, #0
	beq	.LCB30815
	bl	.L2977	@far jump
.LCB30815:
	ldr	r1, .L3614+0x4
	ldr	r0, .L3614+0x8
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r7, r0
	add	r1, r1, #0x18
	add	r1, r0, r1
	ldrb	r2, [r1]
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0xc
	bne	.LCB30828
	bl	.L2977	@far jump
.LCB30828:
	add	r0, r2, #0x1
	strb	r0, [r1]
	ldr	r1, .L3614+0xc
	add	r0, r7, #0
	add	r0, r0, #0x8
	strb	r0, [r1, #0x1a]
	ldr	r1, .L3614+0x10
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	strb	r7, [r1, #0x2]
.L3475:
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r4, .L3614+0x14
	ldr	r0, [r4]
	add	r0, r0, #0x3
	bl	BattleScriptPush
	ldr	r0, .L3614+0x18
	str	r0, [r4]
	bl	.L2975	@ far jump
.L3615:
	.align	2, 0
.L3614:
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleScripting
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AttackerAbilityStatRaise
.L3157:
	ldr	r2, .L3616
	ldr	r0, [r2]
	mov	r3, #0xcf
	lsl	r3, r3, #0x2
	add	r0, r0, r3
	ldr	r1, .L3616+0x4
	ldrb	r0, [r0]
	mov	sl, r2
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L3159	@cond_branch
	ldr	r4, .L3616+0x8
	ldr	r5, .L3616+0xc
.L3160:
	ldr	r1, [r2]
	add	r1, r1, r3
	ldrb	r2, [r1]
	add	r0, r2, #0x1
	strb	r0, [r1]
	strb	r2, [r4, #0x17]
	ldrb	r0, [r4, #0x17]
	bl	GetBattlerAbility
	cmp	r0, #0xdc
	bne	.L3158	@cond_branch
	ldrb	r0, [r4, #0x17]
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L3158	@cond_branch
	bl	NoAliveMonsForEitherParty
	cmp	r0, #0
	bne	.L3158	@cond_branch
	ldrb	r1, [r4, #0x17]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r0, r5
	ldrb	r2, [r1, #0x1c]
	mov	r0, #0x1c
	ldrsb	r0, [r1, r0]
	cmp	r0, #0xc
	beq	.LCB30927
	bl	.L3461	@far jump
.LCB30927:
.L3158:
	ldr	r2, .L3616
	ldr	r0, [r2]
	mov	r3, #0xcf
	lsl	r3, r3, #0x2
	add	r0, r0, r3
	ldr	r1, .L3616+0x4
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L3160	@cond_branch
.L3159:
	mov	r3, sl
	ldr	r0, [r3]
	mov	r5, #0xcf
	lsl	r5, r5, #0x2
	add	r0, r0, r5
	mov	r1, #0x0
	strb	r1, [r0]
	bl	.L2977	@ far jump
.L3617:
	.align	2, 0
.L3616:
	.word	gBattleStruct
	.word	gBattlersCount
	.word	gBattleScripting
	.word	gBattleMons
.L3163:
	ldr	r2, .L3618
	ldr	r0, .L3618+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, #0x8d
	beq	.LCB30980
	bl	.L2977	@far jump
.LCB30980:
	bl	HasAttackerFaintedTarget
	cmp	r0, #0
	bne	.LCB30984
	bl	.L2977	@far jump
.LCB30984:
	bl	NoAliveMonsForEitherParty
	cmp	r0, #0
	beq	.LCB30988
	bl	.L2977	@far jump
.LCB30988:
	ldr	r2, .L3618+0x8
	ldr	r0, .L3618+0xc
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrb	r0, [r0, #0x19]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	bne	.LCB30999
	bl	.L2977	@far jump
.LCB30999:
	ldr	r1, .L3618+0x10
	mov	r0, #0x19
	strb	r0, [r1, #0x1a]
	ldr	r1, .L3618+0x14
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	mov	r0, #0x1
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r4, .L3618+0x18
	ldr	r0, [r4]
	add	r0, r0, #0x3
	bl	BattleScriptPush
	ldr	r0, .L3618+0x1c
	str	r0, [r4]
	bl	.L2975	@ far jump
.L3619:
	.align	2, 0
.L3618:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleScripting
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FellStingerRaisesStat
.L3167:
	ldr	r6, .L3620
	ldr	r0, [r6]
	ldrb	r1, [r0, #0x3]
	ldrb	r0, [r0, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r0, .L3620+0x4
	ldrb	r2, [r0, #0x18]
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r4, .L3620+0x8
	ldr	r5, .L3620+0xc
	ldrb	r3, [r5]
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r4
	add	r0, r0, #0x2d
	ldrb	r0, [r0]
	str	r0, [sp, #0x4]
	ldrb	r3, [r5]
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	ldr	r3, .L3620+0x10
	add	r0, r0, r3
	str	r0, [sp, #0x8]
	ldr	r0, .L3620+0x14
	ldrb	r0, [r0]
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r3, #0x0
	bl	BtlController_EmitMoveAnimation
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r6]
	add	r0, r0, #0x5
	str	r0, [r6]
	bl	.L2975	@ far jump
.L3621:
	.align	2, 0
.L3620:
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
	.word	gBattleMons
	.word	gActiveBattler
	.word	gDisableStructs
	.word	gMultiHitCounter
.L3168:
	ldr	r5, .L3622
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	ldr	r7, .L3622+0x4
	mov	r6, #0x1
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldr	r0, [r1]
	mov	r4, #0x80
	lsl	r4, r4, #0x5
	and	r0, r0, r4
	cmp	r0, #0
	beq	.LCB31114
	bl	.L3451	@far jump
.LCB31114:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldr	r0, [r1]
	orr	r0, r0, r4
	str	r0, [r1]
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	ldr	r4, .L3622+0x8
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r5]
	strb	r1, [r0, #0x13]
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x5
	strb	r1, [r0, #0x12]
	ldr	r1, .L3622+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3623:
	.align	2, 0
.L3622:
	.word	gActiveBattler
	.word	gSideStatuses
	.word	gSideTimers
	.word	gBattlescriptCurrInstr
.L3171:
	ldr	r0, .L3624
	ldrb	r0, [r0]
	bl	GetBattlerTurnOrderNum
	add	r4, r0, #0
	ldr	r5, .L3624+0x4
	ldrb	r0, [r5]
	bl	GetBattlerTurnOrderNum
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bls	.LCB31191
	bl	.L3451	@far jump
.LCB31191:
	ldr	r4, .L3624+0x8
	ldr	r2, .L3624+0xc
	ldr	r0, .L3624+0x10
	ldr	r0, [r0]
	ldrb	r3, [r5]
	add	r0, r0, #0x7f
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, #0x5c
	mul	r1, r1, r3
	add	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.LCB31215
	bl	.L3451	@far jump
.LCB31215:
	ldr	r1, .L3624+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3625:
	.align	2, 0
.L3624:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
.L3176:
	ldr	r3, .L3626
	ldr	r2, .L3626+0x4
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x20]
	add	r4, r3, #0
	cmp	r0, #0x79
	bne	.LCB31244
	bl	.L3451	@far jump
.LCB31244:
	cmp	r0, #0x79
	bgt	.L3185	@cond_branch
	cmp	r0, #0x36
	bne	.LCB31248
	bl	.L3451	@far jump
.LCB31248:
	cmp	r0, #0x56
	bne	.LCB31250
	bl	.L3451	@far jump
.LCB31250:
	b	.L3183
.L3627:
	.align	2, 0
.L3626:
	.word	gBattleMons
	.word	gActiveBattler
.L3185:
	cmp	r0, #0xb0
	bne	.LCB31262
	bl	.L3451	@far jump
.LCB31262:
	cmp	r0, #0xd1
	bne	.LCB31264
	bl	.L3451	@far jump
.LCB31264:
.L3183:
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r4
	mov	r1, #0x56
	strh	r1, [r0, #0x20]
	ldr	r1, .L3628
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3629:
	.align	2, 0
.L3628:
	.word	gBattlescriptCurrInstr
.L3186:
	ldr	r3, .L3630
	ldr	r2, .L3630+0x4
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x20]
	mov	ip, r2
	add	r4, r3, #0
	cmp	r0, #0xc5
	bne	.LCB31299
	bl	.L3451	@far jump
.LCB31299:
	cmp	r0, #0xc5
	bgt	.L3199	@cond_branch
	cmp	r0, #0x79
	bne	.LCB31303
	bl	.L3451	@far jump
.LCB31303:
	cmp	r0, #0x79
	bgt	.L3200	@cond_branch
	cmp	r0, #0x36
	bne	.LCB31307
	bl	.L3451	@far jump
.LCB31307:
	b	.L3187
.L3631:
	.align	2, 0
.L3630:
	.word	gBattleMons
	.word	gBattlerTarget
.L3200:
	cmp	r0, #0xb0
	bne	.LCB31319
	bl	.L3451	@far jump
.LCB31319:
	b	.L3187
.L3199:
	cmp	r0, #0xd5
	bne	.LCB31324
	bl	.L3451	@far jump
.LCB31324:
	cmp	r0, #0xd5
	bgt	.L3201	@cond_branch
	cmp	r0, #0xd2
	bgt	.L3187	@cond_branch
	cmp	r0, #0xd0
	blt	.L3187	@cond_branch
	bl	.L3451	@ far jump
.L3201:
	cmp	r0, #0xe1
	bne	.LCB31335
	bl	.L3451	@far jump
.LCB31335:
.L3187:
	ldr	r2, .L3632
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0, #0x20]
	add	r3, r2, #0
	cmp	r0, #0x96
	bgt	.L3215	@cond_branch
	cmp	r0, #0x95
	blt	.LCB31351
	bl	.L3451	@far jump
.LCB31351:
	cmp	r0, #0x3b
	bne	.LCB31353
	bl	.L3451	@far jump
.LCB31353:
	cmp	r0, #0x3b
	bgt	.L3216	@cond_branch
	cmp	r0, #0x24
	bne	.LCB31357
	bl	.L3451	@far jump
.LCB31357:
	b	.L3202
.L3633:
	.align	2, 0
.L3632:
	.word	gBattlerAttacker
.L3216:
	cmp	r0, #0x7a
	bne	.LCB31368
	bl	.L3451	@far jump
.LCB31368:
	b	.L3202
.L3215:
	cmp	r0, #0xd3
	bne	.LCB31373
	bl	.L3451	@far jump
.LCB31373:
	cmp	r0, #0xd3
	bgt	.L3217	@cond_branch
	cmp	r0, #0xa1
	bne	.LCB31377
	bl	.L3451	@far jump
.LCB31377:
	cmp	r0, #0xd1
	bne	.LCB31379
	bl	.L3451	@far jump
.LCB31379:
	b	.L3202
.L3217:
	cmp	r0, #0xdf
	bgt	.L3202	@cond_branch
	cmp	r0, #0xde
	blt	.LCB31386
	bl	.L3451	@far jump
.LCB31386:
.L3202:
	mov	r6, ip
	ldrb	r0, [r6]
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r2, r0, r4
	ldrb	r0, [r3]
	mul	r0, r0, r1
	add	r0, r0, r4
	ldrh	r1, [r0, #0x20]
	ldrh	r0, [r2, #0x20]
	cmp	r0, r1
	bne	.LCB31408
	bl	.L3451	@far jump
.LCB31408:
	strh	r1, [r2, #0x20]
	ldr	r1, .L3634
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3635:
	.align	2, 0
.L3634:
	.word	gBattlescriptCurrInstr
.L3220:
	ldr	r3, .L3636
	ldr	r2, .L3636+0x4
	ldr	r0, .L3636+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x20]
	strh	r0, [r3]
	bl	.L2977	@ far jump
.L3637:
	.align	2, 0
.L3636:
	.word	gLastUsedAbility
	.word	gBattleMons
	.word	gActiveBattler
.L3221:
	ldr	r7, .L3638
	ldr	r6, .L3638+0x4
	ldrb	r0, [r6]
	mov	r5, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r7
	ldrh	r1, [r0, #0x2a]
	ldrh	r0, [r0, #0x2e]
	cmp	r1, r0
	bne	.LCB31458
	bl	.L3451	@far jump
.LCB31458:
	ldr	r0, .L3638+0x8
	ldrb	r0, [r0]
	bl	GetBattlerAbility
	cmp	r0, #0xb2
	bne	.L3224	@cond_branch
	ldr	r2, .L3638+0xc
	ldr	r0, .L3638+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3224	@cond_branch
	ldr	r4, .L3638+0x14
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2e]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	neg	r0, r0
	str	r0, [r4]
	add	r3, r4, #0
	b	.L3225
.L3639:
	.align	2, 0
.L3638:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMoveDamage
.L3224:
	ldr	r3, .L3640
	ldr	r2, .L3640+0x4
	ldr	r0, .L3640+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x1
	neg	r0, r0
	str	r0, [r3]
.L3225:
	ldr	r0, [r3]
	cmp	r0, #0
	bne	.L3226	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [r3]
.L3226:
	ldr	r1, .L3640+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3641:
	.align	2, 0
.L3640:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L3227:
	ldr	r0, .L3642
	ldrb	r0, [r0]
	bl	GetBattlerTurnOrderNum
	add	r4, r0, #0
	ldr	r5, .L3642+0x4
	ldrb	r0, [r5]
	bl	GetBattlerTurnOrderNum
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bls	.LCB31565
	bl	.L3451	@far jump
.LCB31565:
	mov	r7, #0x0
	ldr	r2, .L3642+0x8
	ldr	r0, .L3642+0xc
	mov	r9, r0
	mov	ip, r5
	add	r4, r2, #0
	ldr	r5, .L3642+0x10
	ldrb	r1, [r2]
	cmp	r7, r1
	bge	.L3231	@cond_branch
	add	r3, r5, #0
.L3233:
	mov	r0, sp
	add	r0, r0, r7
	add	r0, r0, #0x10
	add	r1, r7, r3
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r7, r7, #0x1
	ldrb	r6, [r2]
	cmp	r7, r6
	blt	.L3233	@cond_branch
.L3231:
	mov	r7, #0x0
	ldrb	r0, [r4]
	cmp	r7, r0
	bge	.L3236	@cond_branch
	ldr	r1, .L3642+0x4
	mov	r8, r1
	mov	sl, r4
	add	r3, r4, #0
.L3238:
	mov	r0, sp
	add	r0, r0, r7
	add	r0, r0, #0x10
	ldrb	r1, [r0]
	mov	r2, r8
	ldrb	r2, [r2]
	cmp	r1, r2
	bne	.L3239	@cond_branch
	add	r1, r7, #0x1
	mov	r2, sl
	add	r0, r1, #0
	ldrb	r6, [r2]
	cmp	r0, r6
	bge	.L3237	@cond_branch
.L3243:
	mov	r0, sp
	add	r0, r0, r7
	add	r0, r0, #0x10
	add	r1, r1, sp
	add	r1, r1, #0x10
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r7, r7, #0x1
	add	r1, r7, #0x1
	ldrb	r0, [r2]
	cmp	r1, r0
	blt	.L3243	@cond_branch
	add	r0, r1, #0
	b	.L3237
.L3643:
	.align	2, 0
.L3642:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	gBattlerByTurnOrder
.L3239:
	add	r0, r7, r5
	strb	r1, [r0]
	add	r0, r7, #0x1
.L3237:
	add	r7, r0, #0
	ldrb	r1, [r3]
	cmp	r7, r1
	blt	.L3238	@cond_branch
.L3236:
	ldrb	r0, [r4]
	sub	r0, r0, #0x1
	add	r0, r0, r5
	mov	r2, ip
	ldrb	r1, [r2]
	strb	r1, [r0]
	mov	r3, r9
	ldr	r0, [r3]
	add	r0, r0, #0x7
	str	r0, [r3]
	bl	.L2975	@ far jump
.L3247:
	mov	r7, #0x0
	ldr	r4, .L3644
	add	r4, r4, #0x18
	mov	r1, #0xc
	ldr	r3, .L3644+0x4
	mov	r2, #0x5c
.L3251:
	ldrb	r0, [r3]
	mul	r0, r0, r2
	add	r0, r7, r0
	add	r5, r0, r4
	ldrb	r6, [r5]
	mov	r0, #0x0
	ldrsb	r0, [r5, r0]
	cmp	r0, #0x5
	ble	.L3476	@cond_branch
	cmp	r0, #0x6
	ble	.L3250	@cond_branch
.L3476:
	sub	r0, r1, r6
	strb	r0, [r5]
.L3250:
	add	r7, r7, #0x1
	cmp	r7, #0x7
	ble	.L3251	@cond_branch
	bl	.L2977	@ far jump
.L3645:
	.align	2, 0
.L3644:
	.word	gBattleMons
	.word	gActiveBattler
.L3256:
	ldr	r2, .L3646
	ldr	r0, .L3646+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	HandleTerrainMove
	bl	.L2975	@ far jump
.L3647:
	.align	2, 0
.L3646:
	.word	gBattleMoves
	.word	gCurrentMove
.L3257:
	ldr	r0, .L3648
	ldrb	r0, [r0]
	bl	GetBattlerTurnOrderNum
	add	r4, r0, #0
	ldr	r5, .L3648+0x4
	ldrb	r0, [r5]
	bl	GetBattlerTurnOrderNum
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bls	.LCB31775
	bl	.L3451	@far jump
.LCB31775:
	ldr	r4, .L3648+0x8
	ldr	r2, .L3648+0xc
	ldr	r0, .L3648+0x10
	ldr	r0, [r0]
	ldrb	r3, [r5]
	add	r0, r0, #0x7f
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, #0x5c
	mul	r1, r1, r3
	add	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.LCB31799
	bl	.L3451	@far jump
.LCB31799:
	mov	r0, #0x84
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.LCB31806
	bl	.L3451	@far jump
.LCB31806:
	cmp	r1, r0
	bgt	.L3274	@cond_branch
	cmp	r1, #0xa5
	bne	.LCB31810
	bl	.L3451	@far jump
.LCB31810:
	cmp	r1, #0xa5
	bgt	.L3275	@cond_branch
	cmp	r1, #0x44
	bne	.LCB31814
	bl	.L3451	@far jump
.LCB31814:
	b	.L3272
.L3649:
	.align	2, 0
.L3648:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBattleStruct
.L3275:
	cmp	r1, #0xa8
	bne	.LCB31829
	bl	.L3451	@far jump
.LCB31829:
	cmp	r1, #0xf3
	bne	.LCB31831
	bl	.L3451	@far jump
.LCB31831:
	b	.L3272
.L3274:
	mov	r0, #0xb8
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.LCB31838
	bl	.L3451	@far jump
.LCB31838:
	cmp	r1, r0
	bgt	.L3276	@cond_branch
	sub	r0, r0, #0x19
	b	.L3489
.L3276:
	mov	r0, #0xbf
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.LCB31848
	bl	.L3451	@far jump
.LCB31848:
	add	r0, r0, #0x42
.L3489:
	cmp	r1, r0
	bne	.LCB31852
	bl	.L3451	@far jump
.LCB31852:
.L3272:
	ldr	r3, .L3650
	strh	r1, [r3]
	ldr	r2, .L3650+0x4
	ldr	r0, [r2]
	ldr	r1, .L3650+0x8
	and	r0, r0, r1
	str	r0, [r2]
	ldrh	r0, [r3]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L3650+0xc
	strb	r0, [r1]
	ldr	r2, .L3650+0x10
	ldr	r0, .L3650+0x14
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0xf
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r1, .L3650+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3651:
	.align	2, 0
.L3650:
	.word	gCalledMove
	.word	gHitMarker
	.word	-0x401
	.word	gBattlerTarget
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3277:
	bl	NoAliveMonsForEitherParty
	cmp	r0, #0
	beq	.LCB31902
	bl	.L3451	@far jump
.LCB31902:
	ldr	r1, .L3652
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3653:
	.align	2, 0
.L3652:
	.word	gBattlescriptCurrInstr
.L3280:
	ldr	r0, .L3654
	ldrb	r0, [r0]
	bl	GetBattlerTurnOrderNum
	add	r4, r0, #0
	ldr	r5, .L3654+0x4
	ldrb	r0, [r5]
	bl	GetBattlerTurnOrderNum
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bls	.LCB31930
	bl	.L3451	@far jump
.LCB31930:
	ldr	r0, .L3654+0x8
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x17
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r1, .L3654+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3655:
	.align	2, 0
.L3654:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gStatuses3
	.word	gBattlescriptCurrInstr
.L3283:
	ldr	r2, .L3656
	ldr	r1, .L3656+0x4
	ldrb	r0, [r1]
	mov	r7, #0x5c
	mul	r0, r0, r7
	add	r5, r0, r2
	ldrh	r0, [r5]
	lsl	r6, r0, #0x15
	ldr	r0, .L3656+0x8
	mov	ip, r1
	add	r4, r2, #0
	cmp	r6, r0
	bne	.LCB31974
	bl	.L3451	@far jump
.LCB31974:
	ldr	r0, .L3656+0xc
	cmp	r6, r0
	bne	.LCB31982
	bl	.L3451	@far jump
.LCB31982:
	add	r0, r5, #0
	add	r0, r0, #0x22
	ldrb	r2, [r0]
	cmp	r2, #0x9
	bne	.L3457	@cond_branch
	add	r0, r0, #0x1
	ldrb	r2, [r0]
	cmp	r2, #0x9
	bne	.LCB31997
	bl	.L3451	@far jump
.LCB31997:
	ldr	r1, .L3656+0x10
	ldrb	r0, [r1]
	mul	r0, r0, r7
	add	r0, r0, r4
	add	r0, r0, #0x22
	strb	r2, [r0]
	ldrb	r0, [r1]
	mov	r1, r0
	mul	r1, r1, r7
	add	r1, r1, r4
	mov	r5, ip
	ldrb	r0, [r5]
	mul	r0, r0, r7
	add	r0, r0, r4
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	add	r1, r1, #0x23
	strb	r0, [r1]
	ldr	r1, .L3656+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3657:
	.align	2, 0
.L3656:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	0x3da00000
	.word	0x60a00000
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3457:
	add	r0, r5, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0x9
	bne	.L3291	@cond_branch
	ldr	r1, .L3658
	ldrb	r0, [r1]
	mul	r0, r0, r7
	add	r0, r0, r4
	add	r0, r0, #0x22
	strb	r2, [r0]
	ldrb	r0, [r1]
	mov	r1, r0
	mul	r1, r1, r7
	add	r1, r1, r4
	mov	r6, ip
	ldrb	r0, [r6]
	mul	r0, r0, r7
	add	r0, r0, r4
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	add	r1, r1, #0x23
	strb	r0, [r1]
	ldr	r1, .L3658+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3659:
	.align	2, 0
.L3658:
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3291:
	ldr	r3, .L3660
	ldrb	r0, [r3]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r4
	mov	r5, ip
	ldrb	r0, [r5]
	mul	r0, r0, r2
	add	r0, r0, r4
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	strb	r0, [r1]
	ldrb	r0, [r3]
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r4
	ldrb	r0, [r5]
	mul	r0, r0, r2
	add	r0, r0, r4
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	add	r1, r1, #0x23
	strb	r0, [r1]
	ldr	r1, .L3660+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3661:
	.align	2, 0
.L3660:
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3293:
	ldr	r3, .L3662
	ldr	r2, .L3662+0x4
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	mov	ip, r2
	add	r4, r3, #0
	cmp	r0, #0xb
	bne	.L3294	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0xb
	bne	.LCB32146
	bl	.L3451	@far jump
.LCB32146:
.L3294:
	mov	r6, ip
	ldrb	r0, [r6]
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r4
	add	r0, r0, #0x22
	mov	r2, #0xb
	strb	r2, [r0]
	ldrb	r0, [r6]
	mul	r0, r0, r1
	add	r0, r0, r4
	add	r0, r0, #0x23
	strb	r2, [r0]
	ldrb	r0, [r6]
	mul	r0, r0, r1
	add	r0, r0, r4
	add	r0, r0, #0x24
	mov	r1, #0x9
	strb	r1, [r0]
	ldr	r1, .L3662+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3663:
	.align	2, 0
.L3662:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3296:
	ldr	r4, .L3664
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L3297	@cond_branch
	ldr	r1, .L3664+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L3664+0x8
	b	.L3477
.L3665:
	.align	2, 0
.L3664:
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L3297:
	ldr	r1, .L3666
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L3666+0x4
.L3477:
	add	r7, r1, r0
	ldr	r0, .L3666+0x8
	ldr	r0, [r0]
	ldrb	r6, [r0, #0x3]
	cmp	r6, #0
	beq	.LCB32230
	b	.L3299	@long jump
.LCB32230:
	ldr	r6, .L3666+0xc
	ldr	r1, [r6]
	ldr	r4, .L3666+0x10
	ldrb	r3, [r4]
	lsl	r0, r3, #0x1
	mov	r5, #0xa8
	lsl	r5, r5, #0x2
	add	r1, r1, r5
	add	r1, r1, r0
	ldr	r2, .L3666+0x14
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	strh	r0, [r1]
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3301	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L3300	@cond_branch
	ldr	r0, .L3666+0x18
	ldr	r0, [r0]
	ldr	r1, .L3666+0x1c
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3300	@cond_branch
.L3301:
	ldr	r2, [r6]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x1
	add	r0, r2, r5
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, #0xaa
	lsl	r1, r1, #0x2
	add	r2, r2, r1
	strh	r0, [r2]
.L3300:
	ldr	r4, .L3666+0xc
	ldr	r0, [r4]
	ldr	r3, .L3666+0x10
	ldrb	r2, [r3]
	lsl	r1, r2, #0x1
	mov	r5, #0xa8
	lsl	r5, r5, #0x2
	add	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldr	r6, .L3666+0x14
	mov	sl, r6
	mov	r1, #0x5c
	mov	r9, r1
	mov	r1, r9
	mul	r1, r1, r2
	add	r1, r1, sl
	ldrh	r1, [r1, #0x30]
	bl	GetMegaEvolutionSpecies
	add	r2, sp, #0x20
	mov	r8, r2
	strh	r0, [r2]
	ldrh	r0, [r2]
	cmp	r0, #0
	bne	.L3302	@cond_branch
	ldr	r0, [r4]
	ldr	r3, .L3666+0x10
	ldrb	r2, [r3]
	lsl	r1, r2, #0x1
	add	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r4, r9
	mul	r4, r4, r2
	add	r4, r4, sl
	ldrh	r1, [r4, #0xc]
	ldrh	r2, [r4, #0xe]
	ldrh	r3, [r4, #0x10]
	ldrh	r4, [r4, #0x12]
	str	r4, [sp]
	bl	GetWishMegaEvolutionSpecies
	mov	r5, r8
	strh	r0, [r5]
.L3302:
	mov	r6, r8
	ldrh	r0, [r6]
	bl	GetBaseFormSpeciesId
	add	r6, sp, #0x1c
	strh	r0, [r6]
	mov	r1, r8
	ldrh	r0, [r1]
	bl	GetFormIdFromFormSpeciesId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, sp
	add	r5, r5, #0x1e
	strh	r0, [r5]
	ldr	r2, .L3666+0x10
	ldrb	r0, [r2]
	mov	r2, r9
	mul	r2, r2, r0
	add	r2, r2, sl
	ldr	r0, .L3666+0x20
	ldrh	r1, [r6]
	and	r1, r1, r0
	ldrh	r3, [r2]
	ldr	r0, .L3666+0x24
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r3, .L3666+0x10
	ldrb	r0, [r3]
	mov	r2, r9
	mul	r2, r2, r0
	add	r2, r2, sl
	ldrb	r1, [r5]
	lsl	r1, r1, #0x3
	ldrb	r3, [r2, #0x1]
	mov	r0, #0x7
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	add	r0, r7, #0
	mov	r1, #0xb
	add	r2, r6, #0
	bl	SetMonData
	add	r0, r7, #0
	mov	r1, #0x59
	add	r2, r5, #0
	bl	SetMonData
	ldr	r4, .L3666+0x28
	mov	r0, #0xfd
	strb	r0, [r4]
	mov	r0, #0x6
	strb	r0, [r4, #0x1]
	ldrh	r0, [r6]
	ldrb	r1, [r5]
	bl	GetFormSpeciesId
	strb	r0, [r4, #0x2]
	ldrh	r0, [r6]
	ldrb	r1, [r5]
	bl	GetFormSpeciesId
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r1, r1, r0
	lsr	r1, r1, #0x8
	strb	r1, [r4, #0x3]
	mov	r0, #0xff
	strb	r0, [r4, #0x4]
	ldr	r2, .L3666+0x2c
	ldr	r1, .L3666
	ldr	r5, .L3666+0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0]
	mov	r6, r8
	str	r6, [sp]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	b	.L3303
.L3667:
	.align	2, 0
.L3666:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlescriptCurrInstr
	.word	gBattleStruct
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	0x400040
	.word	0x7ff
	.word	-0x800
	.word	gBattleTextBuff1
	.word	gBitTable
.L3299:
	cmp	r6, #0x1
	bne	.L3304	@cond_branch
	ldr	r4, .L3668
	ldrb	r0, [r4]
	add	r1, r7, #0
	bl	RecalcBattlerStats
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	ldr	r5, .L3668+0x4
	ldr	r1, [r5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L3668+0x8
	add	r1, r1, r2
	add	r1, r1, r0
	strb	r6, [r1]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	ldr	r2, [r5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L3668+0xc
	add	r2, r2, r3
	add	r2, r2, r0
	ldr	r3, .L3668+0x10
	ldr	r1, .L3668+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L3303
.L3669:
	.align	2, 0
.L3668:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	0x29b
	.word	0x299
	.word	gBitTable
	.word	gBattlerPartyIndexes
.L3304:
	ldr	r1, .L3670
	ldr	r4, .L3670+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r1, r7, #0
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	CreateMegaIndicatorSprite
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L3303	@cond_branch
	ldrb	r0, [r4]
	ldr	r2, .L3670+0x8
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r1, [r1]
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x15
	bl	SetBattlerShadowSpriteCallback
.L3303:
	ldr	r1, .L3670+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x4
	bl	.L3462	@ far jump
.L3671:
	.align	2, 0
.L3670:
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.L3307:
	ldr	r4, .L3672
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L3308	@cond_branch
	ldr	r2, .L3672+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L3672+0x8
	b	.L3478
.L3673:
	.align	2, 0
.L3672:
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L3308:
	ldr	r2, .L3674
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L3674+0x4
.L3478:
	add	r7, r1, r0
	add	r5, r2, #0
	ldr	r0, .L3674+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0
	bne	.L3310	@cond_branch
	ldr	r2, .L3674+0xc
	ldr	r4, .L3674+0x10
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	mov	r3, sp
	add	r3, r3, #0x22
	strh	r0, [r3]
	ldr	r1, .L3674+0x14
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x6
	strb	r0, [r1, #0x1]
	ldrb	r0, [r3]
	strb	r0, [r1, #0x2]
	ldrh	r0, [r3]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L3674+0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0]
	str	r3, [sp]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L3311
.L3675:
	.align	2, 0
.L3674:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
	.word	gActiveBattler
	.word	gBattleTextBuff1
	.word	gBitTable
.L3310:
	cmp	r0, #0x1
	bne	.L3312	@cond_branch
	ldr	r0, .L3676
	ldrb	r0, [r0]
	add	r1, r7, #0
	bl	RecalcBattlerStats
	b	.L3311
.L3677:
	.align	2, 0
.L3676:
	.word	gActiveBattler
.L3312:
	ldr	r1, .L3678
	ldr	r0, .L3678+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r1, r7, #0
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
.L3311:
	ldr	r1, .L3678+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x4
	bl	.L3462	@ far jump
.L3679:
	.align	2, 0
.L3678:
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L3314:
	ldr	r0, .L3680
	ldrb	r0, [r0]
	bl	CanUseLastResort
	cmp	r0, #0
	bne	.LCB32752
	bl	.L3451	@far jump
.LCB32752:
	ldr	r1, .L3680+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3681:
	.align	2, 0
.L3680:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L3317:
	ldr	r2, .L3682
	ldr	r0, .L3682+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x11]
	cmp	r0, #0x20
	beq	.L3320	@cond_branch
	cmp	r0, #0x20
	bgt	.L3326	@cond_branch
	cmp	r0, #0x8
	beq	.L3322	@cond_branch
	cmp	r0, #0x10
	beq	.L3319	@cond_branch
	b	.L3324
.L3683:
	.align	2, 0
.L3682:
	.word	gBattleMoves
	.word	gCurrentMove
.L3326:
	cmp	r0, #0x40
	beq	.L3321	@cond_branch
	cmp	r0, #0x80
	beq	.L3323	@cond_branch
	b	.L3324
.L3319:
	ldr	r1, .L3684
	mov	r0, #0x3
	b	.L3479
.L3685:
	.align	2, 0
.L3684:
	.word	gBattleScripting
.L3320:
	ldr	r1, .L3686
	mov	r0, #0x4
	b	.L3479
.L3687:
	.align	2, 0
.L3686:
	.word	gBattleScripting
.L3321:
	ldr	r1, .L3688
	mov	r0, #0x5
	b	.L3479
.L3689:
	.align	2, 0
.L3688:
	.word	gBattleScripting
.L3322:
	ldr	r1, .L3690
	mov	r0, #0x2
	b	.L3479
.L3691:
	.align	2, 0
.L3690:
	.word	gBattleScripting
.L3323:
	ldr	r1, .L3692
	mov	r0, #0x6
	b	.L3479
.L3693:
	.align	2, 0
.L3692:
	.word	gBattleScripting
.L3324:
	ldr	r1, .L3694
	mov	r0, #0x0
.L3479:
	strh	r0, [r1, #0x2e]
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0
	bne	.LCB32872
	bl	.L2977	@far jump
.LCB32872:
	ldr	r4, .L3694+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x3
	bl	BattleScriptPush
	ldr	r0, .L3694+0x8
	str	r0, [r4]
	bl	.L2975	@ far jump
.L3695:
	.align	2, 0
.L3694:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_EffectWithChance
.L3328:
	ldr	r0, .L3696
	ldrb	r0, [r0]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB32898
	bl	.L3451	@far jump
.LCB32898:
	ldr	r4, .L3696+0x4
	ldrb	r0, [r4]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB32905
	bl	.L3451	@far jump
.LCB32905:
	ldr	r0, .L3696+0x8
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB32913
	bl	.L3451	@far jump
.LCB32913:
	ldr	r2, .L3696+0xc
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L3330	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB32930
	bl	.L3451	@far jump
.LCB32930:
.L3330:
	ldr	r1, .L3696+0x10
	ldr	r0, .L3696+0x14
	bl	.L3462	@ far jump
.L3697:
	.align	2, 0
.L3696:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gMoveResultFlags
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ForceRandomSwitch
.L3332:
	ldr	r4, .L3698
	ldrb	r0, [r4]
	bl	GetBattlerWeight
	cmp	r0, #0x1
	bhi	.LCB32956
	bl	.L3451	@far jump
.LCB32956:
	ldr	r2, .L3698+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1c]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x1c]
	ldr	r1, .L3698+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3699:
	.align	2, 0
.L3698:
	.word	gActiveBattler
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
.L3335:
	ldr	r2, .L3700
	ldrh	r1, [r2]
	ldr	r0, .L3700+0x4
	cmp	r1, r0
	bne	.LCB32990
	bl	.L3451	@far jump
.LCB32990:
	ldr	r0, .L3700+0x8
	add	r2, r1, #0
	add	r0, r2, r0
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB33000
	bl	.L3451	@far jump
.LCB33000:
	ldr	r3, .L3700+0xc
	strh	r2, [r3]
	ldr	r2, .L3700+0x10
	ldr	r0, [r2]
	ldr	r1, .L3700+0x14
	and	r0, r0, r1
	str	r0, [r2]
	ldrh	r0, [r3]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L3700+0x18
	strb	r0, [r1]
	ldr	r1, .L3700+0x1c
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3701:
	.align	2, 0
.L3700:
	.word	gLastUsedMove
	.word	0xffff
	.word	sForbiddenMoves
	.word	gCalledMove
	.word	gHitMarker
	.word	-0x401
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3339:
	mov	r7, #0x0
	ldr	r0, .L3702
	ldr	r5, .L3702+0x4
	add	r4, r5, #0
	ldrh	r1, [r0]
	ldr	r6, .L3702+0x8
	mov	r9, r6
	ldr	r2, .L3702+0xc
	mov	ip, r2
	add	r5, r0, #0
	ldr	r3, .L3702+0x10
	mov	r8, r3
	cmp	r1, r4
	beq	.L3341	@cond_branch
	ldr	r2, .L3702+0x14
	mov	r6, ip
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r1, [r0]
	add	r3, r5, #0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0]
.L3343:
	ldrh	r0, [r3]
	cmp	r0, r1
	beq	.L3341	@cond_branch
	add	r3, r3, #0x2
	add	r7, r7, #0x1
	ldrh	r0, [r3]
	cmp	r0, r4
	bne	.L3343	@cond_branch
.L3341:
	mov	r0, ip
	ldrb	r3, [r0]
	lsl	r2, r3, #0x1
	mov	r1, r8
	add	r0, r2, r1
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L3347	@cond_branch
	ldr	r4, .L3702+0x4
	cmp	r1, r4
	beq	.L3347	@cond_branch
	lsl	r0, r7, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	cmp	r0, r4
	bne	.L3347	@cond_branch
	cmp	r1, #0xa5
	beq	.L3347	@cond_branch
	mov	r0, #0x93
	lsl	r0, r0, #0x2
	cmp	r1, r0
	bne	.L3346	@cond_branch
.L3347:
	mov	r3, r9
	bl	.L3480	@ far jump
.L3703:
	.align	2, 0
.L3702:
	.word	sMoveEffectsForbiddenToInstruct
	.word	0xffff
	.word	gBattlescriptCurrInstr
	.word	gBattlerTarget
	.word	gLastMoves
	.word	gBattleMoves
.L3346:
	ldr	r0, .L3704
	add	r2, r2, r3
	lsl	r2, r2, #0x3
	add	r2, r2, r0
	ldr	r6, .L3704+0x4
	ldr	r0, [r6]
	add	r0, r3, r0
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x4
	orr	r1, r1, r0
	lsl	r1, r1, #0x5
	ldrb	r3, [r2, #0x1]
	mov	r0, #0x1f
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r3, .L3704+0x8
	mov	r5, ip
	ldrb	r0, [r5]
	strb	r0, [r3]
	ldr	r5, .L3704+0xc
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r2, [r0]
	strh	r2, [r5]
	mov	r7, #0x0
	ldr	r4, .L3704+0x10
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r4, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	sl, r6
	cmp	r0, r2
	beq	.L3481	@cond_branch
.L3351:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	bgt	.L3350	@cond_branch
	lsl	r1, r7, #0x1
	ldrb	r2, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrh	r6, [r5]
	cmp	r0, r6
	bne	.L3351	@cond_branch
.L3481:
	ldr	r0, .L3704+0x14
	strb	r7, [r0]
	mov	r7, #0x4
.L3350:
	cmp	r7, #0x4
	bne	.L3356	@cond_branch
	ldr	r1, .L3704+0x14
	ldrb	r2, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r2
	ldrb	r1, [r1]
	add	r0, r0, r1
	add	r1, r4, #0
	add	r1, r1, #0x25
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L3355	@cond_branch
.L3356:
	mov	r0, r9
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	mov	r2, r9
	str	r1, [r2]
	bl	.L2975	@ far jump
.L3705:
	.align	2, 0
.L3704:
	.word	gSpecialStatuses
	.word	gBattleStruct
	.word	gBattlerAttacker
	.word	gCalledMove
	.word	gBattleMons
	.word	gCurrMovePos
.L3355:
	mov	r3, sl
	ldr	r0, [r3]
	ldr	r5, .L3706
	add	r0, r0, r5
	add	r0, r0, r2
	ldrb	r0, [r0]
	mov	r6, ip
	strb	r0, [r6]
	ldr	r2, .L3706+0x4
	ldr	r0, [r2]
	ldr	r1, .L3706+0x8
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L3706+0xc
	mov	r0, #0xfd
	strb	r0, [r1]
	strb	r7, [r1, #0x1]
	ldr	r2, .L3706+0x10
	ldrb	r0, [r2]
	strb	r0, [r1, #0x2]
	ldr	r3, .L3706+0x14
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3707:
	.align	2, 0
.L3706:
	.word	0x2c1
	.word	gHitMarker
	.word	-0x401
	.word	gBattleTextBuff1
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L3358:
	ldr	r0, .L3708
	ldrb	r0, [r0]
	ldr	r2, .L3708+0x4
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r1, [r1, #0x20]
	ldr	r2, .L3708+0x8
	ldr	r2, [r2]
	mov	r3, #0x1
	and	r2, r2, r3
	bl	CreateAbilityPopUp
	bl	.L2977	@ far jump
.L3709:
	.align	2, 0
.L3708:
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattleTypeFlags
.L3359:
	ldr	r4, .L3710
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0
	beq	.L3360	@cond_branch
	ldr	r0, .L3710+0x4
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	ClearDefogHazards
	cmp	r0, #0
	beq	.LCB33371
	bl	.L2975	@far jump
.LCB33371:
	b	.L3482
.L3711:
	.align	2, 0
.L3710:
	.word	gBattlescriptCurrInstr
	.word	gEffectBattler
.L3360:
	ldr	r0, .L3712
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	ClearDefogHazards
	cmp	r0, #0
	beq	.L3364	@cond_branch
.L3482:
	ldr	r0, [r4]
	add	r0, r0, #0x8
	str	r0, [r4]
	bl	.L2975	@ far jump
.L3713:
	.align	2, 0
.L3712:
	.word	gActiveBattler
.L3364:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	bl	.L2975	@ far jump
.L3366:
	ldr	r0, .L3714
	ldrb	r0, [r0]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldr	r0, .L3714+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.LCB33434
	bl	.L3451	@far jump
.LCB33434:
	ldr	r1, .L3714+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3715:
	.align	2, 0
.L3714:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3369:
	ldr	r0, .L3716
	ldrb	r0, [r0]
	ldr	r1, .L3716+0x4
	ldrb	r1, [r1]
	bl	DoBattlersShareType
	cmp	r0, #0
	bne	.LCB33458
	bl	.L3451	@far jump
.LCB33458:
	ldr	r1, .L3716+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x7
	bl	.L3462	@ far jump
.L3717:
	.align	2, 0
.L3716:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3372:
	mov	r7, #0x0
	ldr	r2, .L3718
	mov	r9, r2
	ldr	r3, .L3718+0x4
	mov	r8, r3
	mov	r6, #0x5c
	ldr	r5, .L3718+0x8
	mov	r4, r9
	mov	r3, #0x9
.L3376:
	mov	r1, r8
	ldrb	r0, [r1]
	mul	r0, r0, r6
	add	r0, r0, r7
	add	r2, r0, r5
	ldr	r1, [r4]
	ldrb	r0, [r2]
	ldrb	r1, [r1, #0x3]
	cmp	r0, r1
	bne	.L3375	@cond_branch
	strb	r3, [r2]
.L3375:
	add	r7, r7, #0x1
	cmp	r7, #0x2
	ble	.L3376	@cond_branch
	mov	r2, r9
.L3466:
	ldr	r0, [r2]
	add	r0, r0, #0x4
	str	r0, [r2]
	bl	.L2975	@ far jump
.L3719:
	.align	2, 0
.L3718:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons+0x22
.L3379:
	mov	r7, #0x1
	ldr	r5, .L3720
	ldr	r3, .L3720+0x4
	mov	sl, r3
	ldrb	r0, [r3]
	mov	r6, #0x5c
	mov	r8, r6
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	mov	r2, #0x50
	add	r2, r2, r5
	mov	r9, r2
	add	r0, r0, r9
	ldr	r1, [r0]
	mov	r6, #0x40
	and	r6, r6, r1
	cmp	r6, #0
	beq	.L3380	@cond_branch
	ldr	r4, .L3720+0x8
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x7
	bne	.L3381	@cond_branch
	ldr	r1, .L3720+0xc
	ldrb	r0, [r4]
	strb	r0, [r1]
	ldr	r4, .L3720+0x10
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x3]
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x6]
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	bl	BattleScriptPush
	ldr	r0, .L3720+0x14
	b	.L3483
.L3721:
	.align	2, 0
.L3720:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattlerAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PRLZPrevention
.L3381:
	ldrb	r0, [r4]
	mov	r3, r8
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r1, r0, r5
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xd
	beq	.L3384	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0xd
	beq	.L3384	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0xd
	bne	.L3383	@cond_branch
.L3384:
	ldr	r4, .L3722
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x3]
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x6]
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	bl	BattleScriptPush
	ldr	r0, .L3722+0x4
	b	.L3483
.L3723:
	.align	2, 0
.L3722:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PRLZPrevention
.L3383:
	ldr	r1, .L3724
	mov	r0, #0x3
	b	.L3484
.L3725:
	.align	2, 0
.L3724:
	.word	gBattleCommunication
.L3380:
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3387	@cond_branch
	ldr	r4, .L3726
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x11
	bne	.L3388	@cond_branch
	ldr	r1, .L3726+0x4
	ldrb	r0, [r4]
	strb	r0, [r1]
	ldr	r4, .L3726+0x8
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x3]
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x6]
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	bl	BattleScriptPush
	ldr	r0, .L3726+0xc
	b	.L3483
.L3727:
	.align	2, 0
.L3726:
	.word	gBattlerTarget
	.word	gBattlerAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PSNPrevention
.L3388:
	ldrb	r0, [r4]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r1, r0, r5
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r3, [r0]
	cmp	r3, #0x3
	beq	.L3391	@cond_branch
	add	r0, r0, #0x1
	ldrb	r2, [r0]
	cmp	r2, #0x3
	beq	.L3391	@cond_branch
	add	r0, r0, #0x1
	ldrb	r0, [r0]
	cmp	r0, #0x3
	beq	.L3391	@cond_branch
	cmp	r3, #0x8
	beq	.L3391	@cond_branch
	cmp	r2, #0x8
	beq	.L3391	@cond_branch
	cmp	r0, #0x8
	bne	.L3390	@cond_branch
.L3391:
	ldr	r4, .L3728
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x3]
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x6]
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	bl	BattleScriptPush
	ldr	r0, .L3728+0x4
	b	.L3483
.L3729:
	.align	2, 0
.L3728:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PSNPrevention
.L3390:
	mov	r2, sl
	ldrb	r0, [r2]
	mov	r3, r8
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r0, r9
	ldr	r0, [r0]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3393	@cond_branch
	ldr	r0, .L3730
	strb	r6, [r0, #0x5]
	b	.L3386
.L3731:
	.align	2, 0
.L3730:
	.word	gBattleCommunication
.L3393:
	ldr	r0, .L3732
	strb	r7, [r0, #0x5]
	b	.L3386
.L3733:
	.align	2, 0
.L3732:
	.word	gBattleCommunication
.L3387:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3396	@cond_branch
	ldr	r4, .L3734
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x29
	bne	.L3397	@cond_branch
	ldr	r1, .L3734+0x4
	ldrb	r0, [r4]
	strb	r0, [r1]
	b	.L3400
.L3735:
	.align	2, 0
.L3734:
	.word	gBattlerTarget
	.word	gBattlerAbility
.L3397:
	ldrb	r0, [r4]
	mov	r6, r8
	mul	r6, r6, r0
	add	r0, r6, #0
	add	r1, r0, r5
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xa
	beq	.L3400	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0xa
	beq	.L3400	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0xa
	bne	.L3399	@cond_branch
.L3400:
	ldr	r4, .L3736
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x3]
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x6]
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	bl	BattleScriptPush
	ldr	r0, .L3736+0x4
.L3483:
	str	r0, [r4]
	mov	r7, #0x0
	b	.L3386
.L3737:
	.align	2, 0
.L3736:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BRNPrevention
.L3399:
	ldr	r1, .L3738
	mov	r0, #0x2
	b	.L3484
.L3739:
	.align	2, 0
.L3738:
	.word	gBattleCommunication
.L3396:
	mov	r0, #0x7
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L3386	@cond_branch
	ldr	r4, .L3740
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0xf
	beq	.L3405	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x48
	bne	.L3404	@cond_branch
.L3405:
	ldr	r1, .L3740+0x4
	ldrb	r0, [r4]
	strb	r0, [r1]
	mov	r7, #0x0
	b	.L3386
.L3741:
	.align	2, 0
.L3740:
	.word	gBattlerTarget
	.word	gBattlerAbility
.L3404:
	ldr	r1, .L3742
	mov	r0, #0x4
.L3484:
	strb	r0, [r1, #0x5]
.L3386:
	cmp	r7, #0x1
	beq	.LCB33920
	b	.L2975	@long jump
.LCB33920:
	ldr	r2, .L3742+0x4
	ldr	r5, .L3742+0x8
	ldrb	r0, [r5]
	mov	r3, #0x5c
	mov	r1, r0
	mul	r1, r1, r3
	add	r2, r2, #0x50
	add	r1, r1, r2
	ldr	r0, .L3742+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r3
	add	r0, r0, r2
	ldrb	r0, [r0]
	str	r0, [r1]
	ldr	r4, .L3742+0x10
	ldrb	r0, [r5]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r0, r2
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L3742+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x7
	b	.L3462
.L3743:
	.align	2, 0
.L3742:
	.word	gBattleCommunication
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L3408:
	ldr	r2, .L3744
	ldr	r4, .L3744+0x4
	ldrb	r0, [r4]
	mov	r3, #0x5c
	mul	r0, r0, r3
	add	r2, r2, #0x50
	add	r0, r0, r2
	mov	r1, #0x0
	str	r1, [r0]
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r0, r2
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
.L3474:
	bl	BtlController_EmitSetMonData
.L3473:
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L2977
.L3745:
	.align	2, 0
.L3744:
	.word	gBattleMons
	.word	gActiveBattler
.L3409:
	ldr	r0, .L3746
	ldr	r3, .L3746+0x4
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x18
	eor	r0, r0, r2
	str	r0, [r1]
	ldr	r4, .L3746+0x8
	ldrb	r0, [r3]
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r7, [r0, #0x2]
	ldrh	r1, [r0, #0x4]
	strh	r1, [r0, #0x2]
	ldrb	r0, [r3]
	mul	r0, r0, r2
	add	r0, r0, r4
	strh	r7, [r0, #0x4]
	b	.L2977
.L3747:
	.align	2, 0
.L3746:
	.word	gStatuses3
	.word	gActiveBattler
	.word	gBattleMons
.L3410:
	ldr	r5, .L3748
	ldrb	r0, [r5]
	bl	GetBattlerTurnOrderNum
	add	r4, r0, #0
	ldr	r6, .L3748+0x4
	ldrb	r0, [r6]
	bl	GetBattlerTurnOrderNum
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bls	.LCB34051
	b	.L3451	@long jump
.LCB34051:
	ldrb	r0, [r5]
	bl	GetBattlerTurnOrderNum
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r6]
	bl	GetBattlerTurnOrderNum
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	cmp	r4, r0
	bne	.LCB34066
	b	.L3451	@long jump
.LCB34066:
	mov	r7, #0x0
	ldr	r2, .L3748+0x8
	add	r3, r5, #0
	ldrb	r0, [r2]
	cmp	r7, r0
	bge	.L3415	@cond_branch
	ldr	r4, .L3748+0xc
.L3417:
	mov	r0, sp
	add	r0, r0, r7
	add	r0, r0, #0x10
	add	r1, r7, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r7, r7, #0x1
	ldrb	r1, [r2]
	cmp	r7, r1
	blt	.L3417	@cond_branch
.L3415:
	ldrb	r0, [r3]
	bl	GetBattlerTurnOrderNum
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3419	@cond_branch
	ldr	r4, .L3748+0x4
	ldrb	r0, [r4]
	bl	GetBattlerTurnOrderNum
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L3419	@cond_branch
	ldr	r1, .L3748+0xc
	ldrb	r0, [r4]
	strb	r0, [r1, #0x1]
	add	r0, sp, #0x10
	ldrb	r0, [r0, #0x1]
	strb	r0, [r1, #0x2]
	add	r0, sp, #0x10
	ldrb	r0, [r0, #0x3]
	b	.L3485
.L3749:
	.align	2, 0
.L3748:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBattlerByTurnOrder
.L3419:
	ldr	r0, .L3750
	ldrb	r0, [r0]
	bl	GetBattlerTurnOrderNum
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3421	@cond_branch
	ldr	r4, .L3750+0x4
	ldrb	r0, [r4]
	bl	GetBattlerTurnOrderNum
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bne	.L3421	@cond_branch
	ldr	r1, .L3750+0x8
	ldrb	r0, [r4]
	strb	r0, [r1, #0x1]
	add	r0, sp, #0x10
	ldrb	r0, [r0, #0x1]
	b	.L3486
.L3751:
	.align	2, 0
.L3750:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattlerByTurnOrder
.L3421:
	ldr	r1, .L3752
	ldr	r0, .L3752+0x4
	ldrb	r0, [r0]
.L3486:
	strb	r0, [r1, #0x2]
	add	r0, sp, #0x10
	ldrb	r0, [r0, #0x2]
.L3485:
	strb	r0, [r1, #0x3]
	ldr	r1, .L3752+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x7
	b	.L3462
.L3753:
	.align	2, 0
.L3752:
	.word	gBattlerByTurnOrder
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3423:
	ldr	r2, .L3754
	mov	r8, r2
	ldr	r3, .L3754+0x4
	mov	r9, r3
	ldrb	r2, [r3]
	mov	r7, #0x5c
	mov	r0, r2
	mul	r0, r0, r7
	mov	r5, r8
	add	r1, r0, r5
	ldrh	r0, [r1, #0x30]
	cmp	r0, #0
	bne	.LCB34206
	b	.L3451	@long jump
.LCB34206:
	ldr	r6, .L3754+0x8
	mov	sl, r6
	ldrb	r0, [r6]
	mul	r0, r0, r7
	add	r0, r0, r8
	ldrh	r5, [r0, #0x30]
	cmp	r5, #0
	beq	.LCB34216
	b	.L3451	@long jump
.LCB34216:
	ldrh	r1, [r1, #0x30]
	add	r0, r2, #0
	bl	CanBattlerGetOrLoseItem
	cmp	r0, #0
	bne	.LCB34223
	b	.L3451	@long jump
.LCB34223:
	ldrb	r0, [r6]
	mov	r2, r9
	ldrb	r1, [r2]
	mul	r1, r1, r7
	add	r1, r1, r8
	ldrh	r1, [r1, #0x30]
	bl	CanBattlerGetOrLoseItem
	cmp	r0, #0
	bne	.LCB34235
	b	.L3451	@long jump
.LCB34235:
	ldr	r6, .L3754+0xc
	mov	r3, r9
	ldrb	r0, [r3]
	mul	r0, r0, r7
	add	r0, r0, r8
	ldrh	r0, [r0, #0x30]
	strh	r0, [r6]
	ldr	r4, .L3754+0x10
	ldrb	r0, [r3]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mul	r0, r0, r7
	add	r0, r0, r8
	strh	r5, [r0, #0x30]
	ldrb	r0, [r4]
	mul	r0, r0, r7
	mov	r5, r8
	add	r5, r5, #0x30
	add	r0, r0, r5
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	mov	r1, r9
	ldrb	r0, [r1]
	bl	CheckSetUnburden
	mov	r2, sl
	ldrb	r0, [r2]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mul	r0, r0, r7
	add	r0, r0, r8
	ldrh	r1, [r6]
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	mul	r0, r0, r7
	add	r0, r0, r5
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, .L3754+0x14
	ldr	r0, [r0]
	ldr	r2, [r0, #0x4]
	mov	r3, sl
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x5
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L3754+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x7
	b	.L3462
.L3755:
	.align	2, 0
.L3754:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gLastUsedItem
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBattlescriptCurrInstr
.L3427:
	ldr	r3, .L3756
	ldr	r2, .L3756+0x4
	ldr	r0, .L3756+0x8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x11]
	strh	r0, [r3, #0x2e]
	b	.L2977
.L3757:
	.align	2, 0
.L3756:
	.word	gBattleScripting
	.word	gBattleMoves
	.word	gCurrentMove
.L3428:
	ldr	r0, .L3758
	ldrb	r0, [r0]
	bl	IsBattlerGrounded
	cmp	r0, #0
	bne	.LCB34347
	b	.L3451	@long jump
.LCB34347:
	ldr	r1, .L3758+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x7
	b	.L3462
.L3759:
	.align	2, 0
.L3758:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L3431:
	ldr	r0, .L3760
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0
	bne	.L3432	@cond_branch
	ldr	r3, .L3760+0x4
	ldr	r1, .L3760+0x8
	ldr	r2, .L3760+0xc
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	str	r0, [r3, #0x28]
	ldrb	r0, [r2]
	bl	HideBattlerShadowSprite
	b	.L3433
.L3761:
	.align	2, 0
.L3760:
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.L3432:
	cmp	r0, #0x1
	bne	.L3434	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x6
	bl	BtlController_EmitPrintString
	ldr	r0, .L3762
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	b	.L3433
.L3763:
	.align	2, 0
.L3762:
	.word	gActiveBattler
.L3434:
	ldr	r1, .L3764
	ldr	r4, .L3764+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldr	r1, .L3764+0x8
	ldr	r1, [r1, #0x28]
	strb	r1, [r0]
	ldr	r1, .L3764+0xc
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2a]
	cmp	r0, #0
	beq	.L3433	@cond_branch
	ldrh	r1, [r1]
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x15
	add	r0, r2, #0
	bl	SetBattlerShadowSpriteCallback
	ldr	r2, .L3764+0x10
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L3764+0x14
	add	r0, r0, r2
	bl	BattleLoadOpponentMonSpriteGfx
.L3433:
	ldr	r1, .L3764+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x4
	b	.L3462
.L3765:
	.align	2, 0
.L3764:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gBattleScripting
	.word	gBattleMons
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlescriptCurrInstr
.L3437:
	ldr	r0, .L3766
	ldrb	r0, [r0]
	ldr	r1, .L3766+0x4
	ldrh	r1, [r1]
	mov	r2, #0x2
	b	.L3487
.L3767:
	.align	2, 0
.L3766:
	.word	gActiveBattler
	.word	gTrainerBattleOpponent_A
.L3439:
	ldr	r0, .L3768
	ldrb	r0, [r0]
	ldr	r1, .L3768+0x4
	ldrh	r1, [r1]
	mov	r2, #0x0
.L3487:
	bl	ShouldDoTrainerSlide
	cmp	r0, #0
	bne	.LCB34500
	b	.L2977	@long jump
.LCB34500:
	ldr	r4, .L3768+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x3
	bl	BattleScriptPush
	ldr	r0, .L3768+0xc
	str	r0, [r4]
	b	.L2975
.L3769:
	.align	2, 0
.L3768:
	.word	gActiveBattler
	.word	gTrainerBattleOpponent_A
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TrainerSlideMsgRet
.L3441:
	ldr	r4, .L3770
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	ldr	r7, .L3770+0x4
	mov	r5, #0x1
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldr	r0, [r1]
	mov	r6, #0x80
	lsl	r6, r6, #0x4
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L3443	@cond_branch
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L3443	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L3443	@cond_branch
	ldr	r0, .L3770+0x8
	ldrh	r1, [r0]
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3442	@cond_branch
.L3443:
	ldr	r2, .L3770+0xc
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L3770+0x10
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	b	.L2977
.L3771:
	.align	2, 0
.L3770:
	.word	gActiveBattler
	.word	gSideStatuses
	.word	gBattleWeather
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L3442:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldr	r0, [r1]
	orr	r0, r0, r6
	str	r0, [r1]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x49
	bne	.L3445	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	ldr	r2, .L3772
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x8
	b	.L3488
.L3773:
	.align	2, 0
.L3772:
	.word	gSideTimers
.L3445:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	ldr	r2, .L3774
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x5
.L3488:
	strb	r1, [r0, #0xe]
	ldr	r4, .L3774+0x4
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	ldr	r2, .L3774
	mov	r3, #0x1
	add	r1, r3, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r4]
	strb	r1, [r0, #0xf]
	ldr	r0, .L3774+0x8
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L3447	@cond_branch
	mov	r0, #0x1
	bl	CountAliveMonsInBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L3447:
	ldr	r1, .L3774+0xc
	mov	r0, #0x5
	strb	r0, [r1, #0x5]
	b	.L2977
.L3775:
	.align	2, 0
.L3774:
	.word	gSideTimers
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gBattleCommunication
.L3449:
	ldr	r2, .L3776
	ldr	r0, .L3776+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r2, r0, r2
	add	r3, r2, #0
	add	r3, r3, #0x22
	ldr	r6, .L3776+0x8
	ldr	r5, .L3776+0xc
	ldrh	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r4, [r0, #0x11]
	ldrb	r0, [r3]
	add	r1, r4, #0
	cmp	r0, r1
	beq	.L3451	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, r1
	beq	.L3451	@cond_branch
	add	r2, r2, #0x24
	ldrb	r0, [r2]
	cmp	r0, r1
	bne	.L3450	@cond_branch
.L3451:
	ldr	r3, .L3776+0x10
.L3480:
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
.L3463:
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2975
.L3777:
	.align	2, 0
.L3776:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
.L3450:
	strb	r4, [r2]
	ldr	r2, .L3778
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x3
	strb	r0, [r2, #0x1]
	ldrh	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x11]
	strb	r0, [r2, #0x2]
	mov	r0, #0xff
	strb	r0, [r2, #0x3]
	ldr	r1, .L3778+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x7
	b	.L3462
.L3779:
	.align	2, 0
.L3778:
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.L3459:
	ldr	r1, .L3780
	ldr	r0, .L3780+0x4
	b	.L3462
.L3781:
	.align	2, 0
.L3780:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FriskMsg
.L3460:
	bl	BattleScriptPushCursor
	ldr	r1, .L3782
	ldr	r0, .L3782+0x4
	b	.L3462
.L3783:
	.align	2, 0
.L3782:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StatUpMsg
.L3461:
	add	r0, r2, #0x1
	strb	r0, [r1, #0x1c]
	mov	r0, #0xc
	strb	r0, [r4, #0x1a]
	ldr	r1, .L3784
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	mov	r0, #0x4
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	bl	BattleScriptPushCursor
	ldr	r1, .L3784+0x4
	ldr	r0, .L3784+0x8
	b	.L3462
.L3785:
	.align	2, 0
.L3784:
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ScriptingAbilityStatRaise
.L3453:
	ldr	r0, .L3786
	ldrb	r0, [r0]
	bl	DestroyAbilityPopUp
.L2977:
	ldr	r1, .L3786+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x3
.L3462:
	str	r0, [r1]
.L2975:
	add	sp, sp, #0x28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3787:
	.align	2, 0
.L3786:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.Lfe165:
	.size	 Cmd_various,.Lfe165-Cmd_various
	.align	2, 0
	.type	 Cmd_setprotectlike,function
	.thumb_func
Cmd_setprotectlike:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r0, #0x1
	mov	r8, r0
	mov	r6, #0x1
	ldr	r1, .L3816
	mov	r9, r1
	ldr	r1, .L3816+0x4
	ldr	r5, .L3816+0x8
	ldrb	r2, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, r9
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	and	r1, r1, r0
	ldr	r7, .L3816+0xc
	cmp	r1, #0
	bne	.L3789	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	strb	r1, [r0, #0x8]
.L3789:
	ldr	r0, .L3816+0x10
	ldrb	r1, [r0]
	ldr	r0, .L3816+0x14
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L3790	@cond_branch
	mov	r6, #0x0
.L3790:
	ldr	r2, .L3816+0x18
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	ldrb	r4, [r0, #0x8]
	lsl	r4, r4, #0x1
	add	r4, r4, r2
	bl	Random
	ldrh	r1, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bcs	.LCB34936
	b	.L3791	@long jump
.LCB34936:
	cmp	r6, #0
	bne	.LCB34938
	b	.L3791	@long jump
.LCB34938:
	ldr	r6, .L3816+0x1c
	ldrh	r2, [r6]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r3, [r0, #0x11]
	cmp	r3, #0
	bne	.L3792	@cond_branch
	ldrh	r0, [r0]
	cmp	r0, #0x74
	bne	.L3793	@cond_branch
	ldr	r0, .L3816+0x20
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x10
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, .L3816+0x24
	mov	r1, r8
	strb	r1, [r0, #0x5]
	b	.L3813
.L3817:
	.align	2, 0
.L3816:
	.word	gBattleMoves
	.word	gLastResultingMoves
	.word	gBattlerAttacker
	.word	gDisableStructs
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
	.word	sProtectSuccessRates
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattleCommunication
.L3793:
	add	r1, r2, #0
	cmp	r1, #0xc5
	beq	.L3796	@cond_branch
	cmp	r1, #0xb6
	bne	.L3795	@cond_branch
.L3796:
	ldr	r0, .L3818
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x1
	b	.L3812
.L3819:
	.align	2, 0
.L3818:
	.word	gProtectStructs
.L3795:
	mov	r0, #0x95
	lsl	r0, r0, #0x2
	cmp	r1, r0
	bne	.L3798	@cond_branch
	ldr	r0, .L3820
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x2
	b	.L3812
.L3821:
	.align	2, 0
.L3820:
	.word	gProtectStructs
.L3798:
	mov	r0, #0x93
	lsl	r0, r0, #0x2
	cmp	r1, r0
	bne	.L3800	@cond_branch
	ldr	r0, .L3822
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x4
	b	.L3812
.L3823:
	.align	2, 0
.L3822:
	.word	gProtectStructs
.L3800:
	mov	r0, #0x9c
	lsl	r0, r0, #0x2
	cmp	r1, r0
	bne	.L3813	@cond_branch
	ldr	r0, .L3824
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x8
.L3812:
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, .L3824+0x4
	strb	r3, [r0, #0x5]
	b	.L3813
.L3825:
	.align	2, 0
.L3824:
	.word	gProtectStructs
	.word	gBattleCommunication
.L3792:
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrh	r1, [r6]
	ldr	r0, .L3826
	cmp	r1, r0
	bne	.L3804	@cond_branch
	ldr	r1, .L3826+0x4
	lsl	r0, r4, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0xc
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L3804	@cond_branch
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r1, .L3826+0x8
	mov	r0, #0x3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	b	.L3814
.L3827:
	.align	2, 0
.L3826:
	.word	0x1d5
	.word	gSideStatuses
	.word	gBattleCommunication
.L3804:
	ldr	r0, .L3828
	ldrh	r2, [r0]
	ldr	r1, .L3828+0x4
	add	r5, r0, #0
	cmp	r2, r1
	bne	.L3806	@cond_branch
	ldr	r1, .L3828+0x8
	lsl	r0, r4, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0xb
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L3815	@cond_branch
.L3806:
	ldrh	r1, [r5]
	ldr	r0, .L3828+0xc
	cmp	r1, r0
	bne	.L3808	@cond_branch
	ldr	r1, .L3828+0x8
	lsl	r0, r4, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0xd
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L3808	@cond_branch
.L3815:
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r1, .L3828+0x10
	mov	r0, #0x3
	strb	r0, [r1, #0x5]
.L3813:
	ldr	r2, .L3828+0x14
	ldr	r0, .L3828+0x18
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
.L3814:
	ldrb	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x8]
	b	.L3811
.L3829:
	.align	2, 0
.L3828:
	.word	gCurrentMove
	.word	0x1f5
	.word	gSideStatuses
	.word	0x242
	.word	gBattleCommunication
	.word	gDisableStructs
	.word	gBattlerAttacker
.L3808:
	ldrh	r1, [r5]
	ldr	r0, .L3830
	cmp	r1, r0
	bne	.L3791	@cond_branch
	ldr	r1, .L3830+0x4
	lsl	r0, r4, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0xe
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L3791	@cond_branch
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r1, .L3830+0x8
	mov	r0, #0x3
	strb	r0, [r1, #0x5]
	mov	r0, #0x0
	mov	r8, r0
.L3791:
	mov	r1, r8
	cmp	r1, #0
	beq	.L3811	@cond_branch
	ldr	r2, .L3830+0xc
	ldr	r0, .L3830+0x10
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x8]
	ldr	r1, .L3830+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	ldr	r2, .L3830+0x14
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
.L3811:
	ldr	r1, .L3830+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3831:
	.align	2, 0
.L3830:
	.word	0x231
	.word	gSideStatuses
	.word	gBattleCommunication
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
.Lfe166:
	.size	 Cmd_setprotectlike,.Lfe166-Cmd_setprotectlike
	.align	2, 0
	.type	 Cmd_faintifabilitynotdamp,function
	.thumb_func
Cmd_faintifabilitynotdamp:
	push	{r4, r5, r6, lr}
	ldr	r0, .L3842
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L3832	@cond_branch
	ldr	r5, .L3842+0x4
	mov	r0, #0x6
	bl	IsAbilityOnField
	add	r2, r0, #0
	strb	r2, [r5]
	lsl	r0, r2, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	beq	.L3834	@cond_branch
	ldr	r1, .L3842+0x8
	mov	r0, #0x6
	strh	r0, [r1]
	sub	r0, r2, #0x1
	strb	r0, [r5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x6
	bl	RecordAbilityBattle
	ldr	r1, .L3842+0xc
	ldr	r0, .L3842+0x10
	str	r0, [r1]
	b	.L3832
.L3843:
	.align	2, 0
.L3842:
	.word	gBattleControllerExecFlags
	.word	gBattlerTarget
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_DampStopsExplosion
.L3834:
	ldr	r4, .L3844
	ldr	r0, .L3844+0x4
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r3, .L3844+0x8
	ldr	r2, .L3844+0xc
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2a]
	str	r0, [r3]
	ldr	r1, .L3844+0x10
	mov	r0, #0x0
	bl	BtlController_EmitHealthBarUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L3844+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	strb	r6, [r5]
	add	r4, r5, #0
	ldr	r5, .L3844+0x18
	b	.L3835
.L3845:
	.align	2, 0
.L3844:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	0x7fff
	.word	gBattlescriptCurrInstr
	.word	gBattlersCount
.L3837:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L3835:
	ldrb	r1, [r4]
	ldrb	r0, [r5]
	cmp	r1, r0
	bcs	.L3832	@cond_branch
	ldr	r0, .L3846
	ldrb	r0, [r0]
	cmp	r1, r0
	beq	.L3837	@cond_branch
	add	r0, r1, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L3837	@cond_branch
.L3832:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3847:
	.align	2, 0
.L3846:
	.word	gBattlerAttacker
.Lfe167:
	.size	 Cmd_faintifabilitynotdamp,.Lfe167-Cmd_faintifabilitynotdamp
	.align	2, 0
	.type	 Cmd_setatkhptozero,function
	.thumb_func
Cmd_setatkhptozero:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L3850
	ldr	r3, [r0]
	cmp	r3, #0
	bne	.L3848	@cond_branch
	ldr	r4, .L3850+0x4
	ldr	r0, .L3850+0x8
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r1, .L3850+0xc
	ldrb	r0, [r4]
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r1
	strh	r3, [r0, #0x2a]
	ldrb	r0, [r4]
	mul	r0, r0, r2
	add	r1, r1, #0x2a
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2a
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L3850+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L3848:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L3851:
	.align	2, 0
.L3850:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.Lfe168:
	.size	 Cmd_setatkhptozero,.Lfe168-Cmd_setatkhptozero
	.align	2, 0
	.type	 Cmd_jumpifnexttargetvalid,function
	.thumb_func
Cmd_jumpifnexttargetvalid:
	push	{r4, r5, r6, lr}
	ldr	r2, .L3863
	ldr	r1, [r2]
	ldrb	r5, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r5, r5, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r5, r5, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r5, r5, r0
	ldr	r3, .L3863+0x4
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	ldr	r1, .L3863+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L3862	@cond_branch
	add	r4, r3, #0
	ldr	r6, .L3863+0xc
.L3856:
	ldr	r1, .L3863+0x10
	ldrb	r0, [r4]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L3857	@cond_branch
	ldr	r0, .L3863+0x14
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3855	@cond_branch
.L3857:
	ldrb	r0, [r4]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L3854	@cond_branch
.L3855:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L3863+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L3856	@cond_branch
.L3854:
	ldr	r0, .L3863+0x4
	ldr	r1, .L3863+0x8
	ldrb	r0, [r0]
	ldr	r2, .L3863
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L3860	@cond_branch
.L3862:
	ldr	r0, [r2]
	add	r0, r0, #0x5
	str	r0, [r2]
	b	.L3861
.L3864:
	.align	2, 0
.L3863:
	.word	gBattlescriptCurrInstr
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBattleMoves
	.word	gBattlerAttacker
	.word	gCurrentMove
.L3860:
	str	r5, [r2]
.L3861:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe169:
	.size	 Cmd_jumpifnexttargetvalid,.Lfe169-Cmd_jumpifnexttargetvalid
	.align	2, 0
	.type	 Cmd_tryhealhalfhealth,function
	.thumb_func
Cmd_tryhealhalfhealth:
	push	{r4, r5, r6, lr}
	ldr	r4, .L3870
	ldr	r1, [r4]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x5]
	ldr	r3, .L3870+0x4
	cmp	r0, #0x1
	bne	.L3866	@cond_branch
	ldr	r0, .L3870+0x8
	ldrb	r0, [r0]
	strb	r0, [r3]
.L3866:
	ldr	r1, .L3870+0xc
	ldr	r6, .L3870+0x10
	ldrb	r0, [r3]
	mov	r5, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0
	bne	.L3867	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L3867:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldrb	r0, [r3]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r1, [r0, #0x2a]
	ldrh	r0, [r0, #0x2e]
	cmp	r1, r0
	bne	.L3868	@cond_branch
	str	r2, [r4]
	b	.L3869
.L3871:
	.align	2, 0
.L3870:
	.word	gBattlescriptCurrInstr
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattleMons
.L3868:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L3869:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe170:
	.size	 Cmd_tryhealhalfhealth,.Lfe170-Cmd_tryhealhalfhealth
	.align	2, 0
	.type	 Cmd_trymirrormove,function
	.thumb_func
Cmd_trymirrormove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	mov	r7, #0x0
	mov	r5, #0x0
	ldr	r0, .L3885
	ldrb	r1, [r0]
	cmp	r5, r1
	bge	.L3874	@cond_branch
	ldr	r0, .L3885+0x4
	ldrb	r4, [r0]
	ldr	r0, .L3885+0x8
	mov	r8, r0
	add	r6, r1, #0
	lsl	r2, r4, #0x3
	mov	r1, sp
	ldr	r3, .L3885+0xc
	mov	ip, r3
.L3876:
	cmp	r5, r4
	beq	.L3875	@cond_branch
	mov	r3, ip
	ldr	r0, [r3]
	add	r0, r0, #0xda
	add	r0, r0, r2
	ldrh	r3, [r0]
	cmp	r3, #0
	beq	.L3875	@cond_branch
	cmp	r3, r8
	beq	.L3875	@cond_branch
	strh	r3, [r1]
	add	r1, r1, #0x2
	add	r7, r7, #0x1
.L3875:
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, r6
	blt	.L3876	@cond_branch
.L3874:
	ldr	r0, .L3885+0xc
	ldr	r1, [r0]
	ldr	r2, .L3885+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x92
	add	r1, r1, r0
	ldrh	r3, [r1]
	add	r1, r2, #0
	cmp	r3, #0
	beq	.L3880	@cond_branch
	ldr	r0, .L3885+0x8
	cmp	r3, r0
	beq	.L3880	@cond_branch
	ldr	r2, .L3885+0x10
	ldr	r0, [r2]
	ldr	r1, .L3885+0x14
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L3885+0x18
	strh	r3, [r4]
	b	.L3884
.L3886:
	.align	2, 0
.L3885:
	.word	gBattlersCount
	.word	gBattlerAttacker
	.word	0xffff
	.word	gBattleStruct
	.word	gHitMarker
	.word	-0x401
	.word	gCurrentMove
.L3880:
	cmp	r7, #0
	beq	.L3882	@cond_branch
	ldr	r2, .L3887
	ldr	r0, [r2]
	ldr	r1, .L3887+0x4
	and	r0, r0, r1
	str	r0, [r2]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r7, #0
	bl	__modsi3
	add	r5, r0, #0
	ldr	r4, .L3887+0x8
	lsl	r0, r5, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4]
.L3884:
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L3887+0xc
	strb	r0, [r1]
	ldr	r5, .L3887+0x10
	ldr	r3, .L3887+0x14
	ldr	r2, .L3887+0x18
	ldrh	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	str	r0, [r5]
	b	.L3881
.L3888:
	.align	2, 0
.L3887:
	.word	gHitMarker
	.word	-0x401
	.word	gCurrentMove
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	gBattleScriptsForMoveEffects
	.word	gBattleMoves
.L3882:
	ldr	r2, .L3889
	ldrb	r1, [r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r1, .L3889+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L3881:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3890:
	.align	2, 0
.L3889:
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
.Lfe171:
	.size	 Cmd_trymirrormove,.Lfe171-Cmd_trymirrormove
	.align	2, 0
	.type	 Cmd_setrain,function
	.thumb_func
Cmd_setrain:
	push	{lr}
	ldr	r0, .L3895
	ldrb	r0, [r0]
	mov	r1, #0x1
	mov	r2, #0x0
	bl	TryChangeBattleWeather
	cmp	r0, #0
	bne	.L3892	@cond_branch
	ldr	r2, .L3895+0x4
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L3895+0x8
	mov	r0, #0x2
	b	.L3894
.L3896:
	.align	2, 0
.L3895:
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L3892:
	ldr	r1, .L3897
	mov	r0, #0x0
.L3894:
	strb	r0, [r1, #0x5]
	ldr	r1, .L3897+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3898:
	.align	2, 0
.L3897:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe172:
	.size	 Cmd_setrain,.Lfe172-Cmd_setrain
	.align	2, 0
	.type	 Cmd_setreflect,function
	.thumb_func
Cmd_setreflect:
	push	{r4, r5, r6, lr}
	ldr	r5, .L3908
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	ldr	r6, .L3908+0x4
	mov	r4, #0x1
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldr	r0, [r1]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L3900	@cond_branch
	ldr	r2, .L3908+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L3908+0xc
	mov	r0, #0x0
	b	.L3906
.L3909:
	.align	2, 0
.L3908:
	.word	gBattlerAttacker
	.word	gSideStatuses
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L3900:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldr	r0, [r1]
	orr	r0, r0, r4
	str	r0, [r1]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x49
	bne	.L3902	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	ldr	r2, .L3910
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x8
	b	.L3907
.L3911:
	.align	2, 0
.L3910:
	.word	gSideTimers
.L3902:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	ldr	r2, .L3912
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x5
.L3907:
	strb	r1, [r0]
	ldr	r4, .L3912+0x4
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	ldr	r2, .L3912
	mov	r3, #0x1
	add	r1, r3, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r4]
	strb	r1, [r0, #0x1]
	ldr	r0, .L3912+0x8
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L3904	@cond_branch
	mov	r0, #0x1
	bl	CountAliveMonsInBattle
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x2
	bne	.L3904	@cond_branch
	ldr	r0, .L3912+0xc
	strb	r1, [r0, #0x5]
	b	.L3901
.L3913:
	.align	2, 0
.L3912:
	.word	gSideTimers
	.word	gBattlerAttacker
	.word	gBattleTypeFlags
	.word	gBattleCommunication
.L3904:
	ldr	r1, .L3914
	mov	r0, #0x1
.L3906:
	strb	r0, [r1, #0x5]
.L3901:
	ldr	r1, .L3914+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3915:
	.align	2, 0
.L3914:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe173:
	.size	 Cmd_setreflect,.Lfe173-Cmd_setreflect
	.align	2, 0
	.type	 Cmd_setseeded,function
	.thumb_func
Cmd_setseeded:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r1, .L3923
	ldrh	r5, [r1]
	mov	r0, #0x29
	and	r0, r0, r5
	add	r6, r1, #0
	cmp	r0, #0
	bne	.L3918	@cond_branch
	ldr	r0, .L3923+0x4
	mov	r9, r0
	ldr	r1, .L3923+0x8
	mov	r8, r1
	ldrb	r3, [r1]
	lsl	r0, r3, #0x2
	mov	r2, r9
	add	r7, r0, r2
	ldr	r2, [r7]
	mov	r0, #0x4
	mov	ip, r0
	add	r4, r2, #0
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L3917	@cond_branch
.L3918:
	mov	r0, #0x1
	add	r1, r5, #0
	orr	r1, r1, r0
	strh	r1, [r6]
	ldr	r1, .L3923+0xc
	strb	r0, [r1, #0x5]
	b	.L3919
.L3924:
	.align	2, 0
.L3923:
	.word	gMoveResultFlags
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gBattleCommunication
.L3917:
	ldr	r1, .L3925
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r1, r0, r1
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xc
	beq	.L3921	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0xc
	beq	.L3921	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0xc
	bne	.L3920	@cond_branch
.L3921:
	ldrh	r0, [r6]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r6]
	ldr	r1, .L3925+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L3919
.L3926:
	.align	2, 0
.L3925:
	.word	gBattleMons
	.word	gBattleCommunication
.L3920:
	ldr	r0, .L3927
	ldrb	r0, [r0]
	orr	r2, r2, r0
	str	r2, [r7]
	mov	r2, r8
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldr	r0, [r1]
	mov	r2, ip
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r0, .L3927+0x4
	strb	r4, [r0, #0x5]
.L3919:
	ldr	r1, .L3927+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3928:
	.align	2, 0
.L3927:
	.word	gBattlerAttacker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe174:
	.size	 Cmd_setseeded,.Lfe174-Cmd_setseeded
	.align	2, 0
	.type	 Cmd_manipulatedamage,function
	.thumb_func
Cmd_manipulatedamage:
	push	{r4, lr}
	ldr	r0, .L3946
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x7
	bls	.LCB36212
	b	.L3930	@long jump
.LCB36212:
	lsl	r0, r0, #0x2
	ldr	r1, .L3946+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L3947:
	.align	2, 0
.L3946:
	.word	gBattlescriptCurrInstr
	.word	.L3942
	.align	2, 0
	.align	2, 0
.L3942:
	.word	.L3931
	.word	.L3932
	.word	.L3935
	.word	.L3936
	.word	.L3938
	.word	.L3939
	.word	.L3940
	.word	.L3941
.L3931:
	ldr	r1, .L3948
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	b	.L3930
.L3949:
	.align	2, 0
.L3948:
	.word	gBattleMoveDamage
.L3932:
	ldr	r3, .L3950
	ldr	r0, [r3]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	str	r0, [r3]
	cmp	r0, #0
	bne	.L3933	@cond_branch
	mov	r0, #0x1
	str	r0, [r3]
.L3933:
	ldr	r2, .L3950+0x4
	ldr	r0, .L3950+0x8
	b	.L3944
.L3951:
	.align	2, 0
.L3950:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerTarget
.L3935:
	ldr	r1, .L3952
	ldr	r0, [r1]
	lsl	r0, r0, #0x1
	str	r0, [r1]
	b	.L3930
.L3953:
	.align	2, 0
.L3952:
	.word	gBattleMoveDamage
.L3936:
	ldr	r3, .L3954
	ldr	r2, .L3954+0x4
	ldr	r0, .L3954+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x3
	str	r0, [r3]
	cmp	r0, #0
	bne	.L3930	@cond_branch
	mov	r0, #0x1
	b	.L3945
.L3955:
	.align	2, 0
.L3954:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerTarget
.L3938:
	ldr	r3, .L3956
	ldr	r2, .L3956+0x4
	ldr	r0, .L3956+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	b	.L3945
.L3957:
	.align	2, 0
.L3956:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerAttacker
.L3939:
	ldr	r3, .L3958
	ldr	r2, .L3958+0x4
	ldr	r0, .L3958+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2a]
	b	.L3945
.L3959:
	.align	2, 0
.L3958:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerAttacker
.L3940:
	ldr	r0, .L3960
	ldrb	r0, [r0]
	ldr	r4, .L3960+0x4
	ldr	r1, [r4]
	bl	GetDrainedBigRootHp
	str	r0, [r4]
	b	.L3930
.L3961:
	.align	2, 0
.L3960:
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
.L3941:
	ldr	r3, .L3962
	ldr	r2, .L3962+0x4
	ldr	r0, .L3962+0x8
.L3944:
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x1
.L3945:
	str	r0, [r3]
.L3930:
	ldr	r1, .L3962+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L3963:
	.align	2, 0
.L3962:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe175:
	.size	 Cmd_manipulatedamage,.Lfe175-Cmd_manipulatedamage
	.align	2, 0
	.type	 Cmd_trysetrest,function
	.thumb_func
Cmd_trysetrest:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L3969
	mov	ip, r0
	ldr	r1, [r0]
	ldrb	r6, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r6, r6, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r6, r6, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r6, r6, r0
	ldr	r5, .L3969+0x4
	ldr	r2, .L3969+0x8
	ldr	r0, .L3969+0xc
	ldrb	r0, [r0]
	strb	r0, [r2]
	strb	r0, [r5]
	ldr	r4, .L3969+0x10
	ldr	r1, .L3969+0x14
	ldrb	r0, [r2]
	mov	r3, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	neg	r0, r0
	str	r0, [r4]
	ldrb	r0, [r2]
	mov	r4, r0
	mul	r4, r4, r3
	add	r0, r4, r1
	ldrh	r3, [r0, #0x2a]
	add	r7, r5, #0
	add	r5, r2, #0
	add	r2, r1, #0
	ldrh	r0, [r0, #0x2e]
	cmp	r3, r0
	bne	.L3965	@cond_branch
	mov	r0, ip
	str	r6, [r0]
	b	.L3966
.L3970:
	.align	2, 0
.L3969:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattleMons
.L3965:
	add	r0, r2, #0
	add	r0, r0, #0x50
	add	r0, r4, r0
	ldr	r1, [r0]
	mov	r0, #0xf8
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L3967	@cond_branch
	ldr	r1, .L3971
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L3968
.L3972:
	.align	2, 0
.L3971:
	.word	gBattleCommunication
.L3967:
	ldr	r0, .L3973
	strb	r1, [r0, #0x5]
.L3968:
	ldrb	r0, [r5]
	mov	r3, #0x5c
	mul	r0, r0, r3
	add	r2, r2, #0x50
	add	r0, r0, r2
	mov	r1, #0x3
	str	r1, [r0]
	ldrb	r0, [r7]
	mul	r0, r0, r3
	add	r0, r0, r2
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L3973+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3966:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3974:
	.align	2, 0
.L3973:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe176:
	.size	 Cmd_trysetrest,.Lfe176-Cmd_trysetrest
	.align	2, 0
	.type	 Cmd_jumpifnotfirstturn,function
	.thumb_func
Cmd_jumpifnotfirstturn:
	push	{r4, r5, lr}
	ldr	r5, .L3978
	ldr	r4, [r5]
	ldrb	r3, [r4, #0x1]
	ldrb	r0, [r4, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldr	r2, .L3978+0x4
	ldr	r0, .L3978+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x19]
	cmp	r0, #0
	beq	.L3976	@cond_branch
	add	r0, r4, #0x5
	str	r0, [r5]
	b	.L3977
.L3979:
	.align	2, 0
.L3978:
	.word	gBattlescriptCurrInstr
	.word	gDisableStructs
	.word	gBattlerAttacker
.L3976:
	str	r3, [r5]
.L3977:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe177:
	.size	 Cmd_jumpifnotfirstturn,.Lfe177-Cmd_jumpifnotfirstturn
	.align	2, 0
	.type	 Cmd_setmiracleeye,function
	.thumb_func
Cmd_setmiracleeye:
	push	{lr}
	ldr	r1, .L3983
	ldr	r0, .L3983+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L3981	@cond_branch
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r1, .L3983+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3982
.L3984:
	.align	2, 0
.L3983:
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3981:
	ldr	r3, .L3985
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3982:
	pop	{r0}
	bx	r0
.L3986:
	.align	2, 0
.L3985:
	.word	gBattlescriptCurrInstr
.Lfe178:
	.size	 Cmd_setmiracleeye,.Lfe178-Cmd_setmiracleeye
	.align	2, 0
	.globl	UproarWakeUpCheck
	.type	 UproarWakeUpCheck,function
	.thumb_func
UproarWakeUpCheck:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r2, #0x0
	ldr	r0, .L4004
	ldrb	r1, [r0]
	mov	r8, r0
	cmp	r2, r1
	bge	.L3989	@cond_branch
	ldr	r0, .L4004+0x4
	mov	ip, r0
	mov	r0, #0x5c
	mul	r0, r0, r3
	mov	r3, ip
	add	r5, r0, r3
	add	r4, r1, #0
	mov	r3, #0x0
	ldr	r6, .L4004+0x8
	ldr	r7, .L4004+0xc
.L3991:
	mov	r0, ip
	add	r0, r0, #0x54
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x70
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3990	@cond_branch
	ldrh	r0, [r5, #0x20]
	cmp	r0, #0x2b
	beq	.L3990	@cond_branch
	mov	r3, #0x0
	strb	r2, [r6, #0x17]
	ldr	r1, .L4004+0x10
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L4002	@cond_branch
	cmp	r0, r2
	beq	.L4003	@cond_branch
	mov	r0, #0x1
	strb	r0, [r7, #0x5]
	b	.L3989
.L4005:
	.align	2, 0
.L4004:
	.word	gBattlersCount
	.word	gBattleMons
	.word	gBattleScripting
	.word	gBattleCommunication
	.word	gBattlerTarget
.L3990:
	add	r3, r3, #0x5c
	add	r2, r2, #0x1
	cmp	r2, r4
	blt	.L3991	@cond_branch
.L3989:
	mov	r0, r8
	ldrb	r0, [r0]
	cmp	r2, r0
	beq	.L3999	@cond_branch
	mov	r0, #0x1
	b	.L4001
.L4003:
	ldr	r0, .L4006
	strb	r3, [r0, #0x5]
	b	.L3989
.L4007:
	.align	2, 0
.L4006:
	.word	gBattleCommunication
.L4002:
	strb	r2, [r1]
	b	.L3989
.L3999:
	mov	r0, #0x0
.L4001:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe179:
	.size	 UproarWakeUpCheck,.Lfe179-UproarWakeUpCheck
	.align	2, 0
	.type	 Cmd_jumpifcantmakeasleep,function
	.thumb_func
Cmd_jumpifcantmakeasleep:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L4014
	ldr	r1, [r7]
	ldrb	r4, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	ldr	r6, .L4014+0x4
	ldrb	r0, [r6]
	bl	GetBattlerAbility
	add	r5, r0, #0
	ldrb	r0, [r6]
	bl	UproarWakeUpCheck
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L4009	@cond_branch
	str	r4, [r7]
	b	.L4010
.L4015:
	.align	2, 0
.L4014:
	.word	gBattlescriptCurrInstr
	.word	gBattlerTarget
.L4009:
	cmp	r5, #0xf
	beq	.L4012	@cond_branch
	cmp	r5, #0x48
	bne	.L4011	@cond_branch
.L4012:
	ldr	r2, .L4016
	strh	r5, [r2]
	ldr	r1, .L4016+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	str	r4, [r7]
	ldrb	r0, [r6]
	ldrh	r1, [r2]
	bl	RecordAbilityBattle
	b	.L4010
.L4017:
	.align	2, 0
.L4016:
	.word	gLastUsedAbility
	.word	gBattleCommunication
.L4011:
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
.L4010:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe180:
	.size	 Cmd_jumpifcantmakeasleep,.Lfe180-Cmd_jumpifcantmakeasleep
	.align	2, 0
	.type	 Cmd_stockpile,function
	.thumb_func
Cmd_stockpile:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L4027
	ldr	r0, [r1]
	ldrb	r4, [r0, #0x1]
	add	r7, r1, #0
	cmp	r4, #0
	beq	.L4020	@cond_branch
	cmp	r4, #0x1
	beq	.L4023	@cond_branch
	b	.L4019
.L4028:
	.align	2, 0
.L4027:
	.word	gBattlescriptCurrInstr
.L4020:
	ldr	r6, .L4029
	ldr	r5, .L4029+0x4
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r1, r0, r6
	ldrb	r0, [r1, #0x9]
	cmp	r0, #0x2
	bls	.L4021	@cond_branch
	ldr	r1, .L4029+0x8
	ldrh	r0, [r1]
	mov	r2, #0x1
	orr	r0, r0, r2
	strh	r0, [r1]
	ldr	r0, .L4029+0xc
	strb	r2, [r0, #0x5]
	b	.L4019
.L4030:
	.align	2, 0
.L4029:
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L4021:
	add	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	ldrb	r0, [r5]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldr	r3, .L4031
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1a]
	strb	r0, [r1, #0xc]
	ldrb	r0, [r5]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	mul	r0, r0, r2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1d]
	strb	r0, [r1, #0xd]
	ldr	r2, .L4031+0x4
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x1
	strb	r0, [r2, #0x1]
	strb	r0, [r2, #0x2]
	strb	r0, [r2, #0x3]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r0, [r0, #0x9]
	strb	r0, [r2, #0x4]
	mov	r0, #0xff
	strb	r0, [r2, #0x5]
	ldr	r0, .L4031+0x8
	strb	r4, [r0, #0x5]
	b	.L4019
.L4032:
	.align	2, 0
.L4031:
	.word	gBattleMons
	.word	gBattleTextBuff1
	.word	gBattleCommunication
.L4023:
	ldr	r0, .L4033
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4019	@cond_branch
	ldr	r6, .L4033+0x4
	ldr	r4, .L4033+0x8
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldr	r5, .L4033+0xc
	mov	r3, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r5
	ldrb	r0, [r0, #0x1a]
	ldrb	r2, [r1, #0xc]
	sub	r0, r0, r2
	ldrb	r2, [r1, #0xa]
	add	r0, r0, r2
	strb	r0, [r1, #0xa]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	mul	r0, r0, r3
	add	r0, r0, r5
	ldrb	r0, [r0, #0x1d]
	ldrb	r2, [r1, #0xd]
	sub	r0, r0, r2
	ldrb	r2, [r1, #0xb]
	add	r0, r0, r2
	strb	r0, [r1, #0xb]
.L4019:
	ldr	r0, [r7]
	add	r0, r0, #0x2
	str	r0, [r7]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4034:
	.align	2, 0
.L4033:
	.word	gMoveResultFlags
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattleMons
.Lfe181:
	.size	 Cmd_stockpile,.Lfe181-Cmd_stockpile
	.align	2, 0
	.type	 Cmd_stockpiletobasedamage,function
	.thumb_func
Cmd_stockpiletobasedamage:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L4039
	ldr	r1, [r7]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r6, .L4039+0x4
	ldr	r5, .L4039+0x8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r1, [r0, #0x9]
	cmp	r1, #0
	bne	.L4036	@cond_branch
	str	r2, [r7]
	b	.L4037
.L4040:
	.align	2, 0
.L4039:
	.word	gBattlescriptCurrInstr
	.word	gDisableStructs
	.word	gBattlerAttacker
.L4036:
	ldr	r0, .L4041
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	beq	.L4038	@cond_branch
	ldr	r0, .L4041+0x4
	strb	r1, [r0, #0x18]
.L4038:
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	mov	r1, #0x0
	strb	r1, [r0, #0x9]
	ldr	r4, .L4041+0x8
	ldrb	r1, [r5]
	mov	r3, #0x5c
	mov	r2, r1
	mul	r2, r2, r3
	add	r2, r2, r4
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r1, [r2, #0x1a]
	ldrb	r0, [r0, #0xa]
	sub	r1, r1, r0
	strb	r1, [r2, #0x1a]
	ldrb	r1, [r5]
	mov	r2, r1
	mul	r2, r2, r3
	add	r2, r2, r4
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r1, [r2, #0x1d]
	ldrb	r0, [r0, #0xb]
	sub	r1, r1, r0
	strb	r1, [r2, #0x1d]
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
.L4037:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4042:
	.align	2, 0
.L4041:
	.word	gBattleCommunication
	.word	gBattleScripting
	.word	gBattleMons
.Lfe182:
	.size	 Cmd_stockpiletobasedamage,.Lfe182-Cmd_stockpiletobasedamage
	.align	2, 0
	.type	 Cmd_stockpiletohpheal,function
	.thumb_func
Cmd_stockpiletohpheal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L4049
	mov	r8, r0
	ldr	r1, [r0]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldr	r1, .L4049+0x4
	ldr	r2, .L4049+0x8
	ldrb	r4, [r2]
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldrb	r5, [r6, #0x9]
	mov	r9, r1
	add	r7, r2, #0
	cmp	r5, #0
	bne	.L4044	@cond_branch
	mov	r1, r8
	str	r3, [r1]
	ldr	r0, .L4049+0xc
	strb	r5, [r0, #0x5]
	b	.L4045
.L4050:
	.align	2, 0
.L4049:
	.word	gBattlescriptCurrInstr
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattleCommunication
.L4044:
	ldr	r1, .L4051
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r2, r0, r1
	ldrh	r0, [r2, #0x2e]
	mov	sl, r1
	ldrh	r1, [r2, #0x2a]
	cmp	r0, r1
	bne	.L4046	@cond_branch
	mov	r0, #0x0
	strb	r0, [r6, #0x9]
	mov	r0, r8
	str	r3, [r0]
	ldr	r1, .L4051+0x4
	ldrb	r0, [r7]
	strb	r0, [r1]
	ldr	r1, .L4051+0x8
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L4047
.L4052:
	.align	2, 0
.L4051:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattleCommunication
.L4046:
	ldr	r4, .L4053
	ldrh	r0, [r2, #0x2e]
	ldrb	r1, [r6, #0x9]
	mov	r2, #0x3
	sub	r2, r2, r1
	mov	r5, #0x1
	add	r1, r5, #0
	lsl	r1, r1, r2
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L4048	@cond_branch
	str	r5, [r4]
.L4048:
	ldr	r0, [r4]
	neg	r0, r0
	str	r0, [r4]
	ldr	r3, .L4053+0x4
	ldrb	r1, [r7]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	ldrb	r0, [r0, #0x9]
	mov	r2, #0x0
	strb	r0, [r3, #0x18]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	strb	r2, [r0, #0x9]
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	ldr	r1, .L4053+0x8
	ldrb	r0, [r7]
	strb	r0, [r1]
.L4047:
	ldrb	r1, [r7]
	mov	r3, #0x5c
	mov	r2, r1
	mul	r2, r2, r3
	add	r2, r2, sl
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	ldrb	r1, [r2, #0x1a]
	ldrb	r0, [r0, #0xa]
	sub	r1, r1, r0
	strb	r1, [r2, #0x1a]
	ldrb	r1, [r7]
	mov	r2, r1
	mul	r2, r2, r3
	add	r2, r2, sl
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	ldrb	r1, [r2, #0x1d]
	ldrb	r0, [r0, #0xb]
	sub	r1, r1, r0
	strb	r1, [r2, #0x1d]
.L4045:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4054:
	.align	2, 0
.L4053:
	.word	gBattleMoveDamage
	.word	gBattleScripting
	.word	gBattlerTarget
.Lfe183:
	.size	 Cmd_stockpiletohpheal,.Lfe183-Cmd_stockpiletohpheal
	.align	2, 0
	.type	 Cmd_setdrainedhp,function
	.thumb_func
Cmd_setdrainedhp:
	push	{r4, lr}
	ldr	r2, .L4059
	ldr	r0, .L4059+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	ldrb	r0, [r1, #0x11]
	cmp	r0, #0
	beq	.L4056	@cond_branch
	ldr	r4, .L4059+0x8
	ldr	r0, .L4059+0xc
	ldrb	r1, [r1, #0x11]
	ldr	r0, [r0]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	neg	r0, r0
	str	r0, [r4]
	add	r2, r4, #0
	b	.L4057
.L4060:
	.align	2, 0
.L4059:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMoveDamage
	.word	gHpDealt
.L4056:
	ldr	r2, .L4061
	ldr	r0, .L4061+0x4
	ldr	r0, [r0]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	neg	r0, r0
	str	r0, [r2]
.L4057:
	ldr	r0, [r2]
	cmp	r0, #0
	bne	.L4058	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [r2]
.L4058:
	ldr	r1, .L4061+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4062:
	.align	2, 0
.L4061:
	.word	gBattleMoveDamage
	.word	gHpDealt
	.word	gBattlescriptCurrInstr
.Lfe184:
	.size	 Cmd_setdrainedhp,.Lfe184-Cmd_setdrainedhp
	.align	2, 0
	.type	 ChangeStatBuffs,function
	.thumb_func
ChangeStatBuffs:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r9, r1
	add	r7, r2, #0
	mov	r8, r3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x0
	mov	sl, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L4064	@cond_branch
	ldr	r2, .L4130
	ldr	r1, .L4130+0x4
	ldrb	r0, [r1]
	strb	r0, [r2]
	add	r3, r1, #0
	b	.L4065
.L4131:
	.align	2, 0
.L4130:
	.word	gActiveBattler
	.word	gBattlerAttacker
.L4064:
	ldr	r0, .L4132
	ldr	r1, .L4132+0x4
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldr	r3, .L4132+0x8
.L4065:
	ldr	r2, .L4132+0xc
	ldr	r4, .L4132
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r3]
	strb	r1, [r0, #0x16]
	ldr	r0, .L4132+0x10
	and	r7, r7, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L4066	@cond_branch
	mov	r6, #0x1
	add	sl, sl, r6
.L4066:
	ldr	r0, .L4132+0x14
	and	r7, r7, r0
	mov	r0, #0x20
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L4067	@cond_branch
	ldr	r0, [sp]
	add	r0, r0, #0x1
	str	r0, [sp]
.L4067:
	mov	r0, #0x21
	neg	r0, r0
	and	r7, r7, r0
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x7e
	bne	.L4068	@cond_branch
	lsl	r1, r5, #0x18
	mov	r0, #0x80
	lsl	r0, r0, #0x18
	eor	r0, r0, r1
	lsr	r5, r0, #0x18
	ldr	r2, .L4132+0x18
	ldrb	r0, [r2, #0x1a]
	mov	r1, #0x80
	eor	r0, r0, r1
	strb	r0, [r2, #0x1a]
	b	.L4069
.L4133:
	.align	2, 0
.L4132:
	.word	gActiveBattler
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gSpecialStatuses
	.word	-0x4001
	.word	-0x8001
	.word	gBattleScripting
.L4068:
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x56
	bne	.L4069	@cond_branch
	lsl	r0, r5, #0x18
	asr	r1, r0, #0x1b
	mov	r2, #0xf
	and	r1, r1, r2
	lsl	r1, r1, #0x4
	cmp	r0, #0
	bge	.L4071	@cond_branch
	mov	r0, #0x80
	orr	r1, r1, r0
.L4071:
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
.L4069:
	ldr	r1, .L4134
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	mov	r6, r9
	strb	r6, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	lsl	r0, r5, #0x18
	cmp	r0, #0
	blt	.LCB37502
	b	.L4073	@long jump
.LCB37502:
	ldr	r4, .L4134+0x4
	ldr	r6, .L4134+0x8
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L4074	@cond_branch
	mov	r0, sl
	cmp	r0, #0
	bne	.L4074	@cond_branch
	ldr	r0, .L4134+0xc
	ldrh	r0, [r0]
	cmp	r0, #0xae
	beq	.L4080	@cond_branch
	ldr	r1, .L4134+0x10
	ldrb	r0, [r6]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L4075	@cond_branch
	ldr	r0, .L4134+0x14
	ldrb	r0, [r0]
	bl	GetBattlerAbility
	cmp	r0, #0x97
	beq	.L4074	@cond_branch
.L4075:
	cmp	r7, #0x1
	bne	.L4129	@cond_branch
	ldr	r4, .L4134+0x18
	ldrb	r0, [r6]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L4077	@cond_branch
	ldr	r0, .L4134+0x1c
	mov	r1, r8
	str	r1, [r0]
	b	.L4129
.L4135:
	.align	2, 0
.L4134:
	.word	gBattleTextBuff1
	.word	gSideTimers
	.word	gActiveBattler
	.word	gCurrentMove
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
.L4077:
	mov	r0, r8
	bl	BattleScriptPush
	ldr	r1, .L4136
	ldrb	r0, [r6]
	strb	r0, [r1, #0x17]
	ldr	r1, .L4136+0x4
	ldr	r0, .L4136+0x8
	str	r0, [r1]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L4129
.L4137:
	.align	2, 0
.L4136:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MistProtected
.L4074:
	ldr	r0, .L4138
	ldrh	r0, [r0]
	cmp	r0, #0xae
	beq	.L4080	@cond_branch
	ldr	r6, [sp]
	cmp	r6, #0x1
	beq	.L4080	@cond_branch
	mov	r0, #0x0
	bl	JumpIfMoveAffectedByProtect
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L4080	@cond_branch
	ldr	r1, .L4138+0x4
	ldr	r0, .L4138+0x8
	str	r0, [r1]
.L4129:
	mov	r0, #0x1
	b	.L4124
.L4139:
	.align	2, 0
.L4138:
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ButItFailed
.L4080:
	ldr	r4, .L4140
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x1d
	beq	.L4083	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0xe6
	beq	.L4083	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x49
	bne	.L4082	@cond_branch
.L4083:
	mov	r0, sl
	cmp	r0, #0
	bne	.L4082	@cond_branch
	ldr	r0, .L4140+0x4
	ldrh	r0, [r0]
	cmp	r0, #0xae
	beq	.L4082	@cond_branch
	cmp	r7, #0x1
	bne	.L4129	@cond_branch
	ldr	r6, .L4140+0x8
	ldr	r5, .L4140
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L4085	@cond_branch
	ldr	r0, .L4140+0xc
	mov	r1, r8
	str	r1, [r0]
	b	.L4129
.L4141:
	.align	2, 0
.L4140:
	.word	gActiveBattler
	.word	gCurrentMove
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
.L4085:
	mov	r0, r8
	bl	BattleScriptPush
	ldr	r0, .L4142
	ldrb	r1, [r5]
	strb	r1, [r0, #0x17]
	ldr	r0, .L4142+0x4
	strb	r1, [r0]
	ldr	r1, .L4142+0x8
	ldr	r0, .L4142+0xc
	str	r0, [r1]
	ldr	r4, .L4142+0x10
	ldrb	r0, [r5]
	bl	GetBattlerAbility
	strh	r0, [r4]
	ldrb	r0, [r5]
	ldrh	r1, [r4]
	bl	RecordAbilityBattle
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L4129
.L4143:
	.align	2, 0
.L4142:
	.word	gBattleScripting
	.word	gBattlerAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityNoStatLoss
	.word	gLastUsedAbility
.L4082:
	ldr	r6, .L4144
	ldrb	r0, [r6]
	bl	IsFlowerVeilProtected
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L4088	@cond_branch
	mov	r0, sl
	cmp	r0, #0
	bne	.L4088	@cond_branch
	cmp	r7, #0x1
	bne	.L4129	@cond_branch
	ldr	r5, .L4144+0x4
	ldrb	r0, [r6]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L4090	@cond_branch
	ldr	r0, .L4144+0x8
	mov	r1, r8
	str	r1, [r0]
	b	.L4129
.L4145:
	.align	2, 0
.L4144:
	.word	gActiveBattler
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
.L4090:
	mov	r0, r8
	bl	BattleScriptPush
	ldr	r1, .L4146
	ldrb	r0, [r6]
	strb	r0, [r1, #0x17]
	ldr	r1, .L4146+0x4
	sub	r0, r4, #0x1
	strb	r0, [r1]
	ldr	r1, .L4146+0x8
	ldr	r0, .L4146+0xc
	str	r0, [r1]
	ldr	r1, .L4146+0x10
	mov	r0, #0xa6
	strh	r0, [r1]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L4129
.L4147:
	.align	2, 0
.L4146:
	.word	gBattleScripting
	.word	gBattlerAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlowerVeilProtectsRet
	.word	gLastUsedAbility
.L4088:
	ldr	r6, .L4148
	ldrb	r0, [r6]
	bl	GetBattlerAbility
	cmp	r0, #0x33
	bne	.L4093	@cond_branch
	mov	r0, sl
	cmp	r0, #0
	bne	.L4093	@cond_branch
	mov	r1, r9
	cmp	r1, #0x6
	bne	.L4093	@cond_branch
	cmp	r7, #0x1
	beq	.LCB37851
	b	.L4129	@long jump
.LCB37851:
	mov	r0, r8
	bl	BattleScriptPush
	ldr	r0, .L4148+0x4
	ldrb	r1, [r6]
	strb	r1, [r0, #0x17]
	ldr	r0, .L4148+0x8
	strb	r1, [r0]
	ldr	r1, .L4148+0xc
	ldr	r0, .L4148+0x10
	str	r0, [r1]
	ldr	r4, .L4148+0x14
	ldrb	r0, [r6]
	bl	GetBattlerAbility
	strh	r0, [r4]
	ldrb	r0, [r6]
	ldrh	r1, [r4]
	bl	RecordAbilityBattle
	b	.L4129
.L4149:
	.align	2, 0
.L4148:
	.word	gActiveBattler
	.word	gBattleScripting
	.word	gBattlerAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityNoSpecificStatLoss
	.word	gLastUsedAbility
.L4093:
	ldr	r6, .L4150
	ldrb	r0, [r6]
	bl	GetBattlerAbility
	cmp	r0, #0x34
	bne	.L4096	@cond_branch
	mov	r0, sl
	cmp	r0, #0
	bne	.L4096	@cond_branch
	mov	r1, r9
	cmp	r1, #0x1
	bne	.L4096	@cond_branch
	cmp	r7, #0x1
	beq	.LCB37904
	b	.L4129	@long jump
.LCB37904:
	mov	r0, r8
	bl	BattleScriptPush
	ldr	r0, .L4150+0x4
	ldrb	r1, [r6]
	strb	r1, [r0, #0x17]
	ldr	r0, .L4150+0x8
	strb	r1, [r0]
	ldr	r1, .L4150+0xc
	ldr	r0, .L4150+0x10
	str	r0, [r1]
	ldr	r4, .L4150+0x14
	ldrb	r0, [r6]
	bl	GetBattlerAbility
	strh	r0, [r4]
	ldrb	r0, [r6]
	ldrh	r1, [r4]
	bl	RecordAbilityBattle
	b	.L4129
.L4151:
	.align	2, 0
.L4150:
	.word	gActiveBattler
	.word	gBattleScripting
	.word	gBattlerAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityNoSpecificStatLoss
	.word	gLastUsedAbility
.L4096:
	ldr	r0, .L4152
	ldrb	r0, [r0]
	bl	GetBattlerAbility
	cmp	r0, #0x13
	bne	.L4099	@cond_branch
	cmp	r7, #0
	bne	.LCB37950
	b	.L4129	@long jump
.LCB37950:
.L4099:
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x1b
	mov	r1, #0xf
	and	r0, r0, r1
	neg	r0, r0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r3, .L4152+0x4
	ldr	r2, .L4152
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r9
	add	r1, r3, #0
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	sl, r2
	cmp	r0, #0x1
	bne	.L4101	@cond_branch
	mov	r5, #0xff
	b	.L4102
.L4153:
	.align	2, 0
.L4152:
	.word	gActiveBattler
	.word	gBattleMons
.L4101:
	cmp	r0, #0x2
	bne	.L4102	@cond_branch
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0x2
	neg	r1, r1
	cmp	r0, r1
	bge	.L4102	@cond_branch
	mov	r5, #0xfe
.L4102:
	ldr	r0, .L4154
	mov	r6, #0x0
	mov	r1, #0xfd
	mov	ip, r1
	mov	r1, ip
	strb	r1, [r0]
	mov	r4, #0x1
	lsl	r1, r5, #0x18
	asr	r5, r1, #0x18
	mov	r2, #0x2
	neg	r2, r2
	mov	r8, r1
	add	r3, r0, #0
	cmp	r5, r2
	bne	.L4104	@cond_branch
	strb	r6, [r3, #0x1]
	mov	r0, #0xd3
	strb	r0, [r3, #0x2]
	strb	r6, [r3, #0x3]
	b	.L4126
.L4155:
	.align	2, 0
.L4154:
	.word	gBattleTextBuff2
.L4104:
	mov	r1, ip
	lsl	r0, r1, #0x18
	asr	r0, r0, #0x18
	cmp	r5, r0
	bgt	.L4105	@cond_branch
	strb	r6, [r3, #0x1]
	mov	r0, #0xf9
	strb	r0, [r3, #0x2]
	strb	r4, [r3, #0x3]
.L4126:
	mov	r4, #0x4
.L4105:
	add	r0, r4, r3
	mov	r2, #0x0
	strb	r2, [r0]
	add	r4, r4, #0x1
	add	r1, r4, r3
	mov	r0, #0xd4
	strb	r0, [r1]
	add	r4, r4, #0x1
	add	r0, r4, r3
	strb	r2, [r0]
	add	r4, r4, #0x1
	add	r1, r4, r3
	mov	r0, #0xff
	strb	r0, [r1]
	mov	r6, sl
	ldrb	r2, [r6]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r9
	ldr	r1, .L4156
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	beq	.L4127	@cond_branch
	b	.L4117
.L4157:
	.align	2, 0
.L4156:
	.word	gBattleMons
.L4073:
	asr	r5, r0, #0x1b
	mov	r0, #0xf
	and	r5, r5, r0
	ldr	r3, .L4158
	ldr	r2, .L4158+0x4
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r9
	add	r1, r3, #0
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	sl, r2
	cmp	r0, #0xb
	bne	.L4111	@cond_branch
	mov	r5, #0x1
	b	.L4112
.L4159:
	.align	2, 0
.L4158:
	.word	gBattleMons
	.word	gActiveBattler
.L4111:
	cmp	r0, #0xa
	bne	.L4112	@cond_branch
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x2
	ble	.L4112	@cond_branch
	mov	r5, #0x2
.L4112:
	ldr	r0, .L4160
	mov	r6, #0x0
	mov	r1, #0xfd
	strb	r1, [r0]
	mov	r4, #0x1
	lsl	r1, r5, #0x18
	asr	r2, r1, #0x18
	mov	r8, r1
	add	r3, r0, #0
	cmp	r2, #0x2
	bne	.L4114	@cond_branch
	strb	r6, [r3, #0x1]
	mov	r0, #0xd1
	strb	r0, [r3, #0x2]
	strb	r6, [r3, #0x3]
	b	.L4128
.L4161:
	.align	2, 0
.L4160:
	.word	gBattleTextBuff2
.L4114:
	cmp	r2, #0x2
	ble	.L4115	@cond_branch
	strb	r6, [r3, #0x1]
	mov	r0, #0xf8
	strb	r0, [r3, #0x2]
	strb	r4, [r3, #0x3]
.L4128:
	mov	r4, #0x4
.L4115:
	add	r0, r4, r3
	mov	r2, #0x0
	strb	r2, [r0]
	add	r4, r4, #0x1
	add	r1, r4, r3
	mov	r0, #0xd2
	strb	r0, [r1]
	add	r4, r4, #0x1
	add	r0, r4, r3
	strb	r2, [r0]
	add	r4, r4, #0x1
	add	r1, r4, r3
	mov	r0, #0xff
	strb	r0, [r1]
	mov	r0, sl
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r9
	ldr	r1, .L4162
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	bne	.L4117	@cond_branch
.L4127:
	ldr	r1, .L4162+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	add	r5, r1, #0
	b	.L4110
.L4163:
	.align	2, 0
.L4162:
	.word	gBattleMons
	.word	gBattleCommunication
.L4117:
	mov	r1, #0x0
	ldr	r0, .L4164
	ldrb	r0, [r0]
	ldr	r5, .L4164+0x4
	cmp	r0, r2
	bne	.L4119	@cond_branch
	mov	r1, #0x1
.L4119:
	strb	r1, [r5, #0x5]
.L4110:
	mov	r2, sl
	ldrb	r0, [r2]
	mov	r4, #0x5c
	mov	r1, r0
	mul	r1, r1, r4
	add	r1, r1, r9
	ldr	r3, .L4164+0x8
	add	r3, r3, #0x18
	add	r1, r1, r3
	mov	r6, r8
	asr	r0, r6, #0x18
	ldrb	r6, [r1]
	add	r0, r0, r6
	strb	r0, [r1]
	ldrb	r0, [r2]
	mul	r0, r0, r4
	add	r0, r0, r9
	add	r1, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0
	bge	.L4120	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
.L4120:
	mov	r1, sl
	ldrb	r0, [r1]
	mul	r0, r0, r4
	add	r0, r0, r9
	add	r1, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0xc
	ble	.L4121	@cond_branch
	mov	r0, #0xc
	strb	r0, [r1]
.L4121:
	ldrb	r0, [r5, #0x5]
	cmp	r0, #0x2
	bne	.L4123	@cond_branch
	mov	r3, #0x1
	and	r3, r3, r7
	cmp	r3, #0
	beq	.L4122	@cond_branch
	ldr	r0, .L4164+0xc
	ldrh	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strh	r1, [r0]
.L4122:
	ldrb	r0, [r5, #0x5]
	cmp	r0, #0x2
	bne	.L4123	@cond_branch
	cmp	r3, #0
	bne	.LCB38296
	b	.L4129	@long jump
.LCB38296:
.L4123:
	mov	r0, #0x0
.L4124:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L4165:
	.align	2, 0
.L4164:
	.word	gBattlerTarget
	.word	gBattleCommunication
	.word	gBattleMons
	.word	gMoveResultFlags
.Lfe185:
	.size	 ChangeStatBuffs,.Lfe185-ChangeStatBuffs
	.align	2, 0
	.type	 Cmd_statbuffchange,function
	.thumb_func
Cmd_statbuffchange:
	push	{r4, r5, r6, lr}
	ldr	r6, .L4170
	ldr	r5, [r6]
	ldrb	r2, [r5, #0x1]
	ldrb	r0, [r5, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r4, [r5, #0x3]
	ldrb	r0, [r5, #0x4]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r5, #0x5]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r5, #0x6]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	ldr	r0, .L4170+0x4
	ldrb	r3, [r0, #0x1a]
	mov	r0, #0xf8
	and	r0, r0, r3
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0x7
	and	r1, r1, r3
	add	r3, r4, #0
	bl	ChangeStatBuffs
	cmp	r0, #0
	bne	.L4167	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, #0x7
	str	r0, [r6]
	b	.L4168
.L4171:
	.align	2, 0
.L4170:
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
.L4167:
	ldr	r0, [r6]
	cmp	r0, r5
	bne	.L4168	@cond_branch
	str	r4, [r6]
.L4168:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe186:
	.size	 Cmd_statbuffchange,.Lfe186-Cmd_statbuffchange
	.align	2, 0
	.type	 Cmd_normalisebuffs,function
	.thumb_func
Cmd_normalisebuffs:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r2, #0x0
	ldr	r0, .L4183
	add	r6, r0, #0
	ldr	r0, .L4183+0x4
	mov	r9, r0
	ldrb	r1, [r6]
	cmp	r2, r1
	bge	.L4174	@cond_branch
	ldr	r0, .L4183+0x8
	mov	r8, r0
	mov	r4, #0x0
	ldr	r1, .L4183+0xc
	mov	ip, r1
	mov	r5, #0x6
	mov	r7, #0x5c
.L4176:
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	strb	r4, [r0, #0xa]
	strb	r4, [r0, #0xb]
	add	r3, r2, #0x1
	mov	r1, #0x7
	mov	r0, r2
	mul	r0, r0, r7
	add	r0, r0, ip
	add	r0, r0, #0x1f
.L4180:
	strb	r5, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L4180	@cond_branch
	add	r2, r3, #0
	ldrb	r0, [r6]
	cmp	r2, r0
	blt	.L4176	@cond_branch
.L4174:
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4184:
	.align	2, 0
.L4183:
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	gDisableStructs
	.word	gBattleMons
.Lfe187:
	.size	 Cmd_normalisebuffs,.Lfe187-Cmd_normalisebuffs
	.align	2, 0
	.type	 Cmd_setbide,function
	.thumb_func
Cmd_setbide:
	push	{r4, r5, lr}
	ldr	r4, .L4186
	ldr	r3, .L4186+0x4
	ldrb	r0, [r3]
	mov	r5, #0x5c
	mov	r2, r0
	mul	r2, r2, r5
	add	r4, r4, #0x54
	add	r2, r2, r4
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L4186+0x8
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L4186+0xc
	ldrh	r1, [r1]
	mov	r2, #0x0
	strh	r1, [r0]
	ldr	r1, .L4186+0x10
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	str	r2, [r0]
	ldrb	r0, [r3]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r4
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r1, .L4186+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4187:
	.align	2, 0
.L4186:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gLockedMoves
	.word	gCurrentMove
	.word	gTakenDmg
	.word	gBattlescriptCurrInstr
.Lfe188:
	.size	 Cmd_setbide,.Lfe188-Cmd_setbide
	.align	2, 0
	.type	 Cmd_confuseifrepeatingattackends,function
	.thumb_func
Cmd_confuseifrepeatingattackends:
	push	{lr}
	ldr	r1, .L4190
	ldr	r0, .L4190+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0xc0
	lsl	r1, r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4189	@cond_branch
	ldr	r0, .L4190+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	blt	.L4189	@cond_branch
	ldr	r1, .L4190+0xc
	ldr	r0, .L4190+0x10
	strh	r0, [r1, #0x2e]
.L4189:
	ldr	r1, .L4190+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L4191:
	.align	2, 0
.L4190:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gSpecialStatuses
	.word	gBattleScripting
	.word	0x4035
	.word	gBattlescriptCurrInstr
.Lfe189:
	.size	 Cmd_confuseifrepeatingattackends,.Lfe189-Cmd_confuseifrepeatingattackends
	.align	2, 0
	.type	 Cmd_setmultihitcounter,function
	.thumb_func
Cmd_setmultihitcounter:
	push	{r4, r5, r6, lr}
	ldr	r1, .L4206
	ldr	r0, [r1]
	ldrb	r2, [r0, #0x1]
	add	r6, r1, #0
	cmp	r2, #0
	beq	.L4193	@cond_branch
	ldr	r0, .L4206+0x4
	strb	r2, [r0]
	b	.L4194
.L4207:
	.align	2, 0
.L4206:
	.word	gBattlescriptCurrInstr
	.word	gMultiHitCounter
.L4193:
	ldr	r0, .L4208
	ldrb	r0, [r0]
	bl	GetBattlerAbility
	cmp	r0, #0x5c
	bne	.L4195	@cond_branch
	ldr	r1, .L4208+0x4
	mov	r0, #0x5
	strb	r0, [r1]
	b	.L4194
.L4209:
	.align	2, 0
.L4208:
	.word	gBattlerAttacker
	.word	gMultiHitCounter
.L4195:
	ldr	r4, .L4210
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r5, #0x3
	and	r0, r0, r5
	strb	r0, [r4]
	cmp	r0, #0x2
	bls	.L4198	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	strb	r0, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L4199	@cond_branch
	mov	r0, #0x2
	b	.L4205
.L4211:
	.align	2, 0
.L4210:
	.word	gMultiHitCounter
.L4199:
	strb	r5, [r4]
	b	.L4194
.L4198:
	add	r0, r0, #0x3
.L4205:
	strb	r0, [r4]
.L4194:
	ldr	r0, [r6]
	add	r0, r0, #0x2
	str	r0, [r6]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe190:
	.size	 Cmd_setmultihitcounter,.Lfe190-Cmd_setmultihitcounter
	.align	2, 0
	.type	 Cmd_initmultihitstring,function
	.thumb_func
Cmd_initmultihitstring:
	ldr	r1, .L4213
	mov	r2, #0x0
	mov	r0, #0xfd
	strb	r0, [r1, #0x8]
	mov	r0, #0x1
	strb	r0, [r1, #0x9]
	strb	r0, [r1, #0xa]
	strb	r0, [r1, #0xb]
	strb	r2, [r1, #0xc]
	mov	r0, #0xff
	strb	r0, [r1, #0xd]
	ldr	r1, .L4213+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L4214:
	.align	2, 0
.L4213:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe191:
	.size	 Cmd_initmultihitstring,.Lfe191-Cmd_initmultihitstring
	.align	2, 0
	.type	 Cmd_forcerandomswitch,function
	.thumb_func
Cmd_forcerandomswitch:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	ldr	r0, .L4265
	ldr	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4217	@cond_branch
	mov	r0, #0xb
	and	r1, r1, r0
	cmp	r1, #0x1
	beq	.LCB38738
	b	.L4216	@long jump
.LCB38738:
	ldr	r0, .L4265+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L4218	@cond_branch
	ldr	r4, .L4265+0x8
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L4218	@cond_branch
	ldrb	r0, [r4]
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L4218	@cond_branch
	ldrb	r1, [r4]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L4217	@cond_branch
.L4218:
	ldr	r0, .L4265
	ldr	r0, [r0]
	mov	r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0x1
	beq	.LCB38779
	b	.L4216	@long jump
.LCB38779:
	ldr	r0, .L4265+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB38788
	b	.L4216	@long jump
.LCB38788:
	ldr	r0, .L4265+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB38797
	b	.L4216	@long jump
.LCB38797:
.L4217:
	ldr	r4, .L4265+0x8
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L4265+0xc
	str	r1, [sp]
	cmp	r0, #0
	bne	.L4219	@cond_branch
	ldr	r0, .L4265+0x10
	str	r0, [sp]
.L4219:
	ldr	r0, .L4265
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4221	@cond_branch
	ldr	r0, .L4265+0x14
	ldrh	r1, [r0]
	ldr	r0, .L4265+0x18
	cmp	r1, r0
	bne	.L4221	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L4221	@cond_branch
	mov	r1, #0x0
	mov	r9, r1
	mov	r3, #0x6
	mov	sl, r3
	mov	r0, #0x2
	mov	r8, r0
	ldr	r2, .L4265+0x1c
	ldrb	r1, [r4]
	b	.L4261
.L4266:
	.align	2, 0
.L4265:
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gTrainerBattleOpponent_B
	.word	0xffff
	.word	gBattlerPartyIndexes
.L4221:
	ldr	r0, .L4267
	ldr	r2, [r0]
	mov	r1, #0x81
	lsl	r1, r1, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, r1
	beq	.L4224	@cond_branch
	ldr	r1, .L4267+0x4
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, r1
	beq	.L4224	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L4223	@cond_branch
.L4224:
	ldr	r2, .L4267+0x8
	ldrb	r1, [r2]
	mov	r0, #0x2
	and	r0, r0, r1
	add	r1, r2, #0
	cmp	r0, #0
	beq	.L4225	@cond_branch
	mov	r0, #0x3
	mov	r9, r0
	mov	r3, #0x6
	b	.L4226
.L4268:
	.align	2, 0
.L4267:
	.word	gBattleTypeFlags
	.word	0x2000100
	.word	gBattlerTarget
.L4225:
	mov	r0, #0x0
	mov	r9, r0
	mov	r3, #0x3
.L4226:
	mov	r0, #0x3
	mov	sl, r0
	mov	r0, #0x1
	mov	r8, r0
	ldr	r2, .L4269
	ldrb	r1, [r1]
	b	.L4261
.L4270:
	.align	2, 0
.L4269:
	.word	gBattlerPartyIndexes
.L4223:
	mov	r0, #0x42
	and	r0, r0, r2
	cmp	r0, #0x42
	beq	.L4229	@cond_branch
	ldr	r1, .L4271
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, r1
	bne	.L4228	@cond_branch
.L4229:
	ldr	r0, .L4271+0x4
	ldrb	r0, [r0]
	bl	GetBattlerMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetLinkTrainerFlankId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L4230	@cond_branch
	mov	r1, #0x3
	mov	r9, r1
	mov	r3, #0x6
	b	.L4231
.L4272:
	.align	2, 0
.L4271:
	.word	0x2000040
	.word	gBattlerTarget
.L4230:
	mov	r0, #0x0
	mov	r9, r0
	mov	r3, #0x3
.L4231:
	mov	r1, #0x3
	mov	sl, r1
	mov	r0, #0x1
	b	.L4262
.L4228:
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L4233	@cond_branch
	ldr	r4, .L4273
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L4264	@cond_branch
	ldrb	r1, [r4]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4236	@cond_branch
	mov	r1, #0x3
	mov	r9, r1
	mov	r3, #0x6
	b	.L4237
.L4274:
	.align	2, 0
.L4273:
	.word	gBattlerTarget
.L4236:
	mov	r0, #0x0
	mov	r9, r0
	mov	r3, #0x3
.L4237:
	mov	r1, #0x3
	mov	sl, r1
	mov	r0, #0x1
	b	.L4262
.L4233:
	mov	r0, #0x1
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L4239	@cond_branch
.L4264:
	mov	r1, #0x0
	mov	r9, r1
	mov	r3, #0x6
	mov	sl, r3
	mov	r0, #0x2
.L4262:
	mov	r8, r0
	ldr	r2, .L4275
	ldr	r0, .L4275+0x4
	ldrb	r1, [r0]
.L4261:
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r7, [r0]
	mov	r0, #0x2
	eor	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r5, [r1]
	b	.L4222
.L4276:
	.align	2, 0
.L4275:
	.word	gBattlerPartyIndexes
	.word	gBattlerTarget
.L4239:
	mov	r1, #0x0
	mov	r9, r1
	mov	r3, #0x6
	mov	sl, r3
	mov	r0, #0x1
	mov	r8, r0
	ldr	r1, .L4277
	ldr	r0, .L4277+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r5, [r0]
	add	r7, r5, #0
.L4222:
	mov	r6, r9
	cmp	r6, r3
	bge	.L4242	@cond_branch
.L4244:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, [sp]
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	str	r3, [sp, #0x8]
	bl	GetMonData
	ldr	r3, [sp, #0x8]
	cmp	r0, #0
	beq	.L4243	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	ldr	r3, [sp, #0x8]
	cmp	r0, #0
	bne	.L4243	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	ldr	r3, [sp, #0x8]
	cmp	r0, #0
	beq	.L4243	@cond_branch
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0x1
	str	r0, [sp, #0x4]
.L4243:
	add	r6, r6, #0x1
	cmp	r6, r3
	blt	.L4244	@cond_branch
.L4242:
	ldr	r1, [sp, #0x4]
	cmp	r1, r8
	bgt	.LCB39134
	b	.L4259	@long jump
.LCB39134:
	ldr	r0, .L4277+0x4
	ldrb	r1, [r0]
	ldr	r0, .L4277+0x8
	ldr	r2, [r0]
	add	r2, r1, r2
	add	r2, r2, #0x58
	ldr	r0, .L4277
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	strb	r0, [r2]
	ldr	r1, .L4277+0xc
	ldr	r0, .L4277+0x10
	str	r0, [r1]
.L4249:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, sl
	bl	__modsi3
	add	r6, r0, #0
	add	r6, r6, r9
	cmp	r6, r7
	beq	.L4249	@cond_branch
	cmp	r6, r5
	beq	.L4249	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, [sp]
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L4249	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0x1
	beq	.L4249	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L4249	@cond_branch
	ldr	r4, .L4277+0x4
	ldrb	r0, [r4]
	ldr	r1, .L4277+0x8
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	strb	r6, [r0]
	bl	IsMultiBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L4254	@cond_branch
	ldrb	r0, [r4]
	bl	SwitchPartyOrder
.L4254:
	ldr	r0, .L4277+0x14
	ldr	r2, [r0]
	mov	r1, #0x81
	lsl	r1, r1, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, r1
	beq	.L4256	@cond_branch
	mov	r0, #0x42
	and	r0, r0, r2
	cmp	r0, #0x42
	beq	.L4256	@cond_branch
	ldr	r1, .L4277+0x18
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, r1
	beq	.L4256	@cond_branch
	ldr	r0, .L4277+0x1c
	and	r2, r2, r0
	cmp	r2, r0
	bne	.L4255	@cond_branch
.L4256:
	ldr	r5, .L4277+0x4
	ldrb	r0, [r5]
	lsl	r4, r6, #0x18
	lsr	r4, r4, #0x18
	add	r1, r4, #0
	mov	r2, #0x0
	bl	SwitchPartyOrderLinkMulti
	ldrb	r1, [r5]
	mov	r0, #0x2
	eor	r0, r0, r1
	add	r1, r4, #0
	mov	r2, #0x1
	bl	SwitchPartyOrderLinkMulti
.L4255:
	ldr	r0, .L4277+0x14
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4258	@cond_branch
	ldr	r0, .L4277+0x4
	ldrb	r0, [r0]
	lsl	r1, r6, #0x18
	lsr	r1, r1, #0x18
	bl	SwitchPartyOrderInGameMulti
	b	.L4258
.L4278:
	.align	2, 0
.L4277:
	.word	gBattlerPartyIndexes
	.word	gBattlerTarget
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
	.word	BattleScript_RoarSuccessSwitch
	.word	gBattleTypeFlags
	.word	0x2000100
	.word	0x2000040
.L4216:
	ldr	r3, .L4279
	ldr	r0, .L4279+0x4
	ldrb	r0, [r0]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2c
	ldr	r0, .L4279+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2c
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.L4259	@cond_branch
	ldr	r1, .L4279+0xc
	ldr	r0, .L4279+0x10
	str	r0, [r1]
	b	.L4258
.L4280:
	.align	2, 0
.L4279:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_RoarSuccessEndBattle
.L4259:
	ldr	r3, .L4281
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4258:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4282:
	.align	2, 0
.L4281:
	.word	gBattlescriptCurrInstr
.Lfe192:
	.size	 Cmd_forcerandomswitch,.Lfe192-Cmd_forcerandomswitch
	.align	2, 0
	.type	 Cmd_tryconversiontypechange,function
	.thumb_func
Cmd_tryconversiontypechange:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r6, #0x0
	ldr	r2, .L4314
	ldr	r3, .L4314+0x4
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r2, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r8, r2
	cmp	r0, #0
	beq	.L4285	@cond_branch
	mov	r5, #0x5c
	add	r2, r1, #0
.L4287:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bhi	.L4285	@cond_branch
	lsl	r1, r6, #0x1
	ldrb	r0, [r3]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r1, r1, r2
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L4287	@cond_branch
.L4285:
	mov	r3, #0x0
	cmp	r3, r6
	bcs	.L4290	@cond_branch
	ldr	r0, .L4314+0x8
	mov	sl, r0
	ldr	r1, .L4314
	mov	ip, r1
	ldr	r5, .L4314+0x4
	ldrb	r0, [r5]
	mov	r4, #0x5c
	mov	r5, r0
	mul	r5, r5, r4
	mov	r7, #0xc
	add	r7, r7, ip
	mov	r9, r7
.L4292:
	lsl	r0, r3, #0x1
	add	r0, r0, r5
	add	r0, r0, r9
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrb	r2, [r0, #0x3]
	cmp	r2, #0x9
	bne	.L4293	@cond_branch
	mov	r0, r8
	add	r1, r5, r0
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L4295	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L4295	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bne	.L4294	@cond_branch
.L4295:
	mov	r2, #0x7
	b	.L4293
.L4315:
	.align	2, 0
.L4314:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoves
.L4294:
	mov	r2, #0x0
.L4293:
	ldr	r1, .L4316
	ldrb	r0, [r1]
	mul	r0, r0, r4
	mov	r7, ip
	add	r1, r0, r7
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r2, r0
	beq	.L4291	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r2, r0
	beq	.L4291	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r2, r0
	bne	.L4290	@cond_branch
.L4291:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r6
	bcc	.L4292	@cond_branch
.L4290:
	cmp	r3, r6
	bne	.L4299	@cond_branch
	ldr	r3, .L4316+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L4300
.L4317:
	.align	2, 0
.L4316:
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L4299:
	mov	r7, #0x3
	ldr	r0, .L4318
	mov	r9, r0
.L4304:
	bl	Random
	add	r3, r0, #0
	and	r3, r3, r7
	cmp	r3, r6
	bcs	.L4304	@cond_branch
	ldr	r4, .L4318+0x4
	lsl	r1, r3, #0x1
	ldr	r3, .L4318+0x8
	ldrb	r2, [r3]
	mov	r0, #0x5c
	mov	r5, r2
	mul	r5, r5, r0
	add	r1, r1, r5
	add	r0, r4, #0
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldrh	r1, [r1]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r2, [r0, #0x3]
	mov	r8, r4
	add	r4, r3, #0
	cmp	r2, #0x9
	bne	.L4303	@cond_branch
	mov	r0, r8
	add	r1, r5, r0
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L4310	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L4310	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bne	.L4309	@cond_branch
.L4310:
	mov	r2, #0x7
	b	.L4303
.L4319:
	.align	2, 0
.L4318:
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBattlerAttacker
.L4309:
	mov	r2, #0x0
.L4303:
	ldrb	r0, [r4]
	mov	r3, #0x5c
	mul	r0, r0, r3
	mov	r5, r8
	add	r1, r0, r5
	add	r5, r1, #0
	add	r5, r5, #0x22
	ldrb	r0, [r5]
	cmp	r2, r0
	beq	.L4304	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r2, r0
	beq	.L4304	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r2, r0
	beq	.L4304	@cond_branch
	strb	r2, [r5]
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r0, r8
	add	r0, r0, #0x23
	strb	r2, [r0]
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r0, r8
	add	r0, r0, #0x24
	mov	r1, #0x9
	strb	r1, [r0]
	ldr	r1, .L4320
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	strb	r2, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r1, .L4320+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L4300:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4321:
	.align	2, 0
.L4320:
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.Lfe193:
	.size	 Cmd_tryconversiontypechange,.Lfe193-Cmd_tryconversiontypechange
	.align	2, 0
	.type	 Cmd_givepaydaymoney,function
	.thumb_func
Cmd_givepaydaymoney:
	push	{r4, lr}
	ldr	r0, .L4325
	ldr	r0, [r0]
	ldr	r1, .L4325+0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4323	@cond_branch
	ldr	r1, .L4325+0x8
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L4323	@cond_branch
	add	r1, r0, #0
	ldr	r0, .L4325+0xc
	ldr	r0, [r0]
	add	r0, r0, #0x4a
	ldrb	r0, [r0]
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r0, .L4325+0x10
	ldr	r0, [r0]
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	add	r1, r4, #0
	bl	AddMoney
	ldr	r1, .L4325+0x14
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	mov	r0, #0x5
	strb	r0, [r1, #0x3]
	strb	r4, [r1, #0x4]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r4, r4, r0
	lsr	r4, r4, #0x8
	strb	r4, [r1, #0x5]
	mov	r0, #0xff
	strb	r0, [r1, #0x6]
	ldr	r4, .L4325+0x18
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L4325+0x1c
	str	r0, [r4]
	b	.L4324
.L4326:
	.align	2, 0
.L4325:
	.word	gBattleTypeFlags
	.word	0x2000002
	.word	gPaydayMoney
	.word	gBattleStruct
	.word	gSaveBlock1Ptr
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PrintPayDayMoneyString
.L4323:
	ldr	r1, .L4327
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L4324:
	pop	{r4}
	pop	{r0}
	bx	r0
.L4328:
	.align	2, 0
.L4327:
	.word	gBattlescriptCurrInstr
.Lfe194:
	.size	 Cmd_givepaydaymoney,.Lfe194-Cmd_givepaydaymoney
	.align	2, 0
	.type	 Cmd_setlightscreen,function
	.thumb_func
Cmd_setlightscreen:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L4338
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	ldr	r7, .L4338+0x4
	mov	r5, #0x1
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldr	r0, [r1]
	mov	r6, #0x2
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L4330	@cond_branch
	ldr	r2, .L4338+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L4338+0xc
	mov	r0, #0x0
	b	.L4336
.L4339:
	.align	2, 0
.L4338:
	.word	gBattlerAttacker
	.word	gSideStatuses
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L4330:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldr	r0, [r1]
	orr	r0, r0, r6
	str	r0, [r1]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x49
	bne	.L4332	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	ldr	r2, .L4340
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x8
	b	.L4337
.L4341:
	.align	2, 0
.L4340:
	.word	gSideTimers
.L4332:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	ldr	r2, .L4342
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x5
.L4337:
	strb	r1, [r0, #0x2]
	ldr	r4, .L4342+0x4
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	ldr	r2, .L4342
	mov	r3, #0x1
	add	r1, r3, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r4]
	strb	r1, [r0, #0x3]
	ldr	r0, .L4342+0x8
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L4334	@cond_branch
	mov	r0, #0x1
	bl	CountAliveMonsInBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L4334	@cond_branch
	ldr	r1, .L4342+0xc
	mov	r0, #0x4
	b	.L4336
.L4343:
	.align	2, 0
.L4342:
	.word	gSideTimers
	.word	gBattlerAttacker
	.word	gBattleTypeFlags
	.word	gBattleCommunication
.L4334:
	ldr	r1, .L4344
	mov	r0, #0x3
.L4336:
	strb	r0, [r1, #0x5]
	ldr	r1, .L4344+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4345:
	.align	2, 0
.L4344:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe195:
	.size	 Cmd_setlightscreen,.Lfe195-Cmd_setlightscreen
	.align	2, 0
	.type	 Cmd_tryKO,function
	.thumb_func
Cmd_tryKO:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r0, #0x0
	mov	r9, r0
	ldr	r5, .L4368
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	add	r6, r0, #0
	ldr	r1, .L4368+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	cmp	r6, #0x27
	bne	.L4347	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	bl	GetBattlerHoldEffectParam
	cmp	r4, r0
	bcs	.L4347	@cond_branch
	ldr	r2, .L4368+0x8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r0, [r5]
	mov	r1, #0x27
	bl	RecordItemEffectBattle
	b	.L4348
.L4369:
	.align	2, 0
.L4368:
	.word	gBattlerTarget
	.word	gPotentialItemEffectBattler
	.word	gSpecialStatuses
.L4347:
	cmp	r6, #0x55
	bne	.L4348	@cond_branch
	ldr	r1, .L4370
	ldr	r3, .L4370+0x4
	ldrb	r2, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x2a]
	ldrh	r0, [r0, #0x2e]
	cmp	r1, r0
	bne	.L4348	@cond_branch
	ldr	r1, .L4370+0x8
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	ldrb	r0, [r3]
	mov	r1, #0x55
	bl	RecordItemEffectBattle
.L4348:
	ldr	r4, .L4370+0x4
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	add	r3, r0, #0
	cmp	r3, #0x5
	bne	.L4350	@cond_branch
	ldr	r2, .L4370+0xc
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r0, .L4370+0x10
	strh	r3, [r0]
	ldr	r1, .L4370+0x14
	ldr	r0, .L4370+0x18
	str	r0, [r1]
	ldr	r1, .L4370+0x1c
	ldrb	r0, [r4]
	strb	r0, [r1]
	b	.L4351
.L4371:
	.align	2, 0
.L4370:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gSpecialStatuses
	.word	gMoveResultFlags
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SturdyPreventsOHKO
	.word	gBattlerAbility
.L4350:
	ldr	r0, .L4372
	ldrb	r3, [r4]
	lsl	r2, r3, #0x2
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4354	@cond_branch
	ldr	r1, .L4372+0x4
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L4372+0x8
	ldrb	r0, [r0, #0x18]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L4353	@cond_branch
.L4354:
	ldr	r0, .L4372+0x8
	ldrb	r0, [r0]
	bl	GetBattlerAbility
	cmp	r0, #0x63
	beq	.L4353	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x63
	bne	.L4352	@cond_branch
.L4353:
	ldr	r2, .L4372+0xc
	ldr	r0, .L4372+0x8
	ldrb	r0, [r0]
	mov	r3, #0x5c
	mov	r1, r0
	mul	r1, r1, r3
	add	r1, r1, r2
	add	r1, r1, #0x2c
	ldr	r4, .L4372+0x10
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r0, r2
	add	r0, r0, #0x2c
	ldrb	r1, [r1]
	add	r5, r4, #0
	add	r4, r2, #0
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L4366	@cond_branch
.L4352:
	ldr	r2, .L4372+0x14
	ldr	r0, .L4372+0x18
	ldrh	r0, [r0]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r6, .L4372+0xc
	ldr	r2, .L4372+0x8
	mov	r8, r2
	ldrb	r0, [r2]
	mov	r5, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2c
	ldrb	r4, [r0]
	ldr	r7, .L4372+0x10
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2c
	ldrb	r0, [r0]
	sub	r4, r4, r0
	ldrb	r1, [r1, #0x4]
	add	r4, r4, r1
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r0, r0, #0x1
	cmp	r0, r4
	bge	.L4355	@cond_branch
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r6
	add	r1, r1, #0x2c
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2c
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.L4355	@cond_branch
	mov	r2, #0x1
	mov	r9, r2
.L4355:
	ldr	r5, .L4372+0x10
	ldr	r4, .L4372+0xc
	mov	r0, r9
	cmp	r0, #0
	beq	.L4357	@cond_branch
.L4366:
	ldr	r0, .L4372+0x1c
	ldrb	r2, [r5]
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.L4358	@cond_branch
	ldr	r1, .L4372+0x20
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0, #0x2a]
	sub	r0, r0, #0x1
	str	r0, [r1]
	ldr	r2, .L4372+0x24
	ldrh	r0, [r2]
	mov	r1, #0x40
	b	.L4367
.L4373:
	.align	2, 0
.L4372:
	.word	gStatuses3
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
.L4358:
	ldr	r0, .L4374
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	bne	.L4361	@cond_branch
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L4360	@cond_branch
.L4361:
	ldr	r1, .L4374+0x4
	mov	r3, #0x5c
	mov	r0, r2
	mul	r0, r0, r3
	add	r0, r0, r4
	ldrh	r0, [r0, #0x2a]
	sub	r0, r0, #0x1
	str	r0, [r1]
	ldr	r2, .L4374+0x8
	ldrh	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L4374+0xc
	ldrb	r0, [r5]
	mul	r0, r0, r3
	add	r0, r0, r4
	ldrh	r0, [r0, #0x30]
	strh	r0, [r1]
	b	.L4359
.L4375:
	.align	2, 0
.L4374:
	.word	gSpecialStatuses
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
	.word	gLastUsedItem
.L4360:
	ldr	r1, .L4376
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0, #0x2a]
	str	r0, [r1]
	ldr	r2, .L4376+0x4
	ldrh	r0, [r2]
	mov	r1, #0x10
.L4367:
	orr	r0, r0, r1
	strh	r0, [r2]
.L4359:
	ldr	r1, .L4376+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4351
.L4377:
	.align	2, 0
.L4376:
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
.L4357:
	ldr	r1, .L4378
	ldrh	r0, [r1]
	mov	r3, #0x1
	orr	r0, r0, r3
	strh	r0, [r1]
	ldr	r0, .L4378+0x4
	ldrb	r0, [r0]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r4
	add	r1, r1, #0x2c
	ldrb	r0, [r5]
	mul	r0, r0, r2
	add	r0, r0, r4
	add	r0, r0, #0x2c
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.L4364	@cond_branch
	ldr	r0, .L4378+0x8
	mov	r1, r9
	strb	r1, [r0, #0x5]
	b	.L4365
.L4379:
	.align	2, 0
.L4378:
	.word	gMoveResultFlags
	.word	gBattlerAttacker
	.word	gBattleCommunication
.L4364:
	ldr	r0, .L4380
	strb	r3, [r0, #0x5]
.L4365:
	ldr	r3, .L4380+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4351:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4381:
	.align	2, 0
.L4380:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe196:
	.size	 Cmd_tryKO,.Lfe196-Cmd_tryKO
	.align	2, 0
	.type	 Cmd_damagetohalftargethp,function
	.thumb_func
Cmd_damagetohalftargethp:
	push	{lr}
	ldr	r3, .L4384
	ldr	r2, .L4384+0x4
	ldr	r0, .L4384+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2a]
	lsr	r0, r0, #0x1
	str	r0, [r3]
	cmp	r0, #0
	bne	.L4383	@cond_branch
	mov	r0, #0x1
	str	r0, [r3]
.L4383:
	ldr	r1, .L4384+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L4385:
	.align	2, 0
.L4384:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.Lfe197:
	.size	 Cmd_damagetohalftargethp,.Lfe197-Cmd_damagetohalftargethp
	.align	2, 0
	.type	 Cmd_setsandstorm,function
	.thumb_func
Cmd_setsandstorm:
	push	{lr}
	ldr	r0, .L4390
	ldrb	r0, [r0]
	mov	r1, #0x3
	mov	r2, #0x0
	bl	TryChangeBattleWeather
	cmp	r0, #0
	bne	.L4387	@cond_branch
	ldr	r2, .L4390+0x4
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L4390+0x8
	mov	r0, #0x2
	b	.L4389
.L4391:
	.align	2, 0
.L4390:
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L4387:
	ldr	r1, .L4392
	mov	r0, #0x3
.L4389:
	strb	r0, [r1, #0x5]
	ldr	r1, .L4392+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L4393:
	.align	2, 0
.L4392:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe198:
	.size	 Cmd_setsandstorm,.Lfe198-Cmd_setsandstorm
	.align	2, 0
	.type	 Cmd_weatherdamage,function
	.thumb_func
Cmd_weatherdamage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r6, .L4406
	ldrb	r0, [r6]
	bl	GetBattlerAbility
	add	r4, r0, #0
	ldr	r7, .L4406+0x4
	mov	r0, #0x0
	str	r0, [r7]
	ldrb	r0, [r6]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB40519
	b	.L4395	@long jump
.LCB40519:
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.LCB40524
	b	.L4395	@long jump
.LCB40524:
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.LCB40529
	b	.L4395	@long jump
.LCB40529:
	cmp	r4, #0x62
	bne	.LCB40531
	b	.L4395	@long jump
.LCB40531:
	ldr	r0, .L4406+0x8
	ldrh	r1, [r0]
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4396	@cond_branch
	ldr	r1, .L4406+0xc
	ldrb	r5, [r6]
	mov	r0, #0x5c
	mov	r8, r0
	mov	r0, r8
	mul	r0, r0, r5
	add	r2, r0, r1
	add	r0, r2, #0
	add	r0, r0, #0x22
	ldrb	r3, [r0]
	mov	r9, r1
	cmp	r3, #0x5
	beq	.L4396	@cond_branch
	add	r0, r0, #0x1
	ldrb	r1, [r0]
	cmp	r1, #0x5
	beq	.L4396	@cond_branch
	add	r0, r0, #0x1
	ldrb	r0, [r0]
	cmp	r0, #0x5
	beq	.L4396	@cond_branch
	cmp	r3, #0x4
	beq	.L4396	@cond_branch
	cmp	r1, #0x4
	beq	.L4396	@cond_branch
	cmp	r0, #0x4
	beq	.L4396	@cond_branch
	cmp	r3, #0x8
	beq	.L4396	@cond_branch
	cmp	r1, #0x8
	beq	.L4396	@cond_branch
	cmp	r0, #0x8
	beq	.L4396	@cond_branch
	cmp	r4, #0x8
	beq	.L4396	@cond_branch
	cmp	r4, #0x9f
	beq	.L4396	@cond_branch
	cmp	r4, #0x92
	beq	.L4396	@cond_branch
	cmp	r4, #0x8e
	beq	.L4396	@cond_branch
	ldr	r1, .L4406+0x10
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L4406+0x14
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4396	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x83
	beq	.L4396	@cond_branch
	ldrb	r0, [r6]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r9
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x4
	str	r0, [r7]
	cmp	r0, #0
	bne	.L4396	@cond_branch
	mov	r0, #0x1
	str	r0, [r7]
.L4396:
	ldr	r0, .L4406+0x8
	ldrh	r1, [r0]
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4395	@cond_branch
	ldr	r6, .L4406
	ldr	r3, .L4406+0xc
	mov	r9, r3
	cmp	r4, #0x73
	bne	.L4400	@cond_branch
	ldr	r0, .L4406+0x10
	ldrb	r3, [r6]
	lsl	r1, r3, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	ldr	r0, .L4406+0x14
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L4400	@cond_branch
	mov	r5, #0x5c
	mov	r0, r3
	mul	r0, r0, r5
	add	r0, r0, r9
	ldrh	r1, [r0, #0x2a]
	ldrh	r0, [r0, #0x2e]
	cmp	r1, r0
	beq	.L4400	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x14
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L4400	@cond_branch
	ldr	r0, .L4406+0x18
	strb	r3, [r0]
	ldr	r1, .L4406+0x4
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r9
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x4
	str	r0, [r1]
	cmp	r0, #0
	bne	.L4401	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L4401:
	ldr	r0, [r1]
	neg	r0, r0
	b	.L4405
.L4407:
	.align	2, 0
.L4406:
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattleWeather
	.word	gBattleMons
	.word	gStatuses3
	.word	0x40080
	.word	gBattlerAbility
.L4400:
	ldrb	r2, [r6]
	mov	r5, #0x5c
	mov	r0, r2
	mul	r0, r0, r5
	mov	r3, r9
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xf
	beq	.L4395	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0xf
	beq	.L4395	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0xf
	beq	.L4395	@cond_branch
	cmp	r4, #0x51
	beq	.L4395	@cond_branch
	cmp	r4, #0x8e
	beq	.L4395	@cond_branch
	cmp	r4, #0x73
	beq	.L4395	@cond_branch
	ldr	r1, .L4408
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L4408+0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4395	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x83
	beq	.L4395	@cond_branch
	ldr	r1, .L4408+0x8
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r9
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x4
	str	r0, [r1]
	cmp	r0, #0
	bne	.L4395	@cond_branch
	mov	r0, #0x1
.L4405:
	str	r0, [r1]
.L4395:
	ldr	r1, .L4408+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4409:
	.align	2, 0
.L4408:
	.word	gStatuses3
	.word	0x40080
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.Lfe199:
	.size	 Cmd_weatherdamage,.Lfe199-Cmd_weatherdamage
	.align	2, 0
	.type	 Cmd_tryinfatuating,function
	.thumb_func
Cmd_tryinfatuating:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, .L4422
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L4411	@cond_branch
	ldr	r1, .L4422+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L4422+0x8
	b	.L4420
.L4423:
	.align	2, 0
.L4422:
	.word	gBattlerAttacker
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L4411:
	ldr	r1, .L4424
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L4424+0x4
.L4420:
	add	r5, r1, r0
	ldr	r4, .L4424+0x8
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L4413	@cond_branch
	ldr	r1, .L4424
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L4424+0xc
	b	.L4421
.L4425:
	.align	2, 0
.L4424:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlerTarget
	.word	gPlayerParty
.L4413:
	ldr	r1, .L4426
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L4426+0x4
.L4421:
	add	r4, r1, r0
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetMonData
	mov	r8, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	add	r6, r0, #0
	ldr	r5, .L4426+0x8
	ldrb	r0, [r5]
	bl	GetBattlerAbility
	add	r2, r0, #0
	cmp	r2, #0xc
	bne	.L4415	@cond_branch
	ldr	r1, .L4426+0xc
	ldr	r0, .L4426+0x10
	str	r0, [r1]
	ldr	r0, .L4426+0x14
	strh	r2, [r0]
	ldrb	r0, [r5]
	mov	r1, #0xc
	bl	RecordAbilityBattle
	b	.L4416
.L4427:
	.align	2, 0
.L4426:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ObliviousPreventsAttraction
	.word	gLastUsedAbility
.L4415:
	mov	r0, r9
	mov	r1, r8
	bl	GetGenderFromSpeciesAndPersonality
	add	r4, r0, #0
	add	r0, r7, #0
	add	r1, r6, #0
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L4418	@cond_branch
	ldr	r1, .L4428
	ldrb	r0, [r5]
	mov	r2, #0x5c
	mov	sl, r2
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r4, r1, #0
	add	r4, r4, #0x54
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r1, #0xf0
	lsl	r1, r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4418	@cond_branch
	mov	r0, r9
	mov	r1, r8
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L4418	@cond_branch
	add	r0, r7, #0
	add	r1, r6, #0
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L4417	@cond_branch
.L4418:
	ldr	r3, .L4428+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L4416
.L4429:
	.align	2, 0
.L4428:
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.L4417:
	ldrb	r0, [r5]
	mov	r2, sl
	mul	r2, r2, r0
	add	r2, r2, r4
	ldr	r1, .L4430
	ldr	r0, .L4430+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x10
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L4430+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L4416:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4431:
	.align	2, 0
.L4430:
	.word	gBitTable
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe200:
	.size	 Cmd_tryinfatuating,.Lfe200-Cmd_tryinfatuating
	.align	2, 0
	.type	 Cmd_updatestatusicon,function
	.thumb_func
Cmd_updatestatusicon:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L4439
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L4432	@cond_branch
	ldr	r5, .L4439+0x4
	ldr	r1, [r5]
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x4
	beq	.L4434	@cond_branch
	bl	GetBattlerForBattleScript
	ldr	r4, .L4439+0x8
	strb	r0, [r4]
	ldr	r3, .L4439+0xc
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mov	r2, r1
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r3, r3, #0x54
	add	r2, r2, r3
	ldr	r2, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitStatusIconUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	b	.L4432
.L4440:
	.align	2, 0
.L4439:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
.L4434:
	ldr	r4, .L4441
	ldr	r5, .L4441+0x4
	ldrb	r0, [r5]
	strb	r0, [r4]
	ldr	r6, .L4441+0x8
	ldrb	r1, [r6]
	ldr	r7, .L4441+0xc
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L4436	@cond_branch
	ldr	r3, .L4441+0x10
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r3, r3, #0x54
	add	r2, r2, r3
	ldr	r2, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitStatusIconUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L4436:
	ldr	r0, .L4441+0x14
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4437	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	strb	r0, [r4]
	ldrb	r1, [r6]
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L4437	@cond_branch
	ldr	r3, .L4441+0x10
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r3, r3, #0x54
	add	r2, r2, r3
	ldr	r2, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitStatusIconUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L4437:
	ldr	r1, .L4441+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L4432:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4442:
	.align	2, 0
.L4441:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
.Lfe201:
	.size	 Cmd_updatestatusicon,.Lfe201-Cmd_updatestatusicon
	.align	2, 0
	.type	 Cmd_setmist,function
	.thumb_func
Cmd_setmist:
	push	{r4, r5, r6, r7, lr}
	ldr	r6, .L4446
	ldr	r4, .L4446+0x4
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	mov	r5, #0x1
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r7, [r0, #0x4]
	cmp	r7, #0
	beq	.L4444	@cond_branch
	ldr	r2, .L4446+0x8
	ldrh	r0, [r2]
	mov	r1, #0x20
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r0, .L4446+0xc
	strb	r5, [r0, #0x5]
	b	.L4445
.L4447:
	.align	2, 0
.L4446:
	.word	gSideTimers
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L4444:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x5
	strb	r1, [r0, #0x4]
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r4]
	strb	r1, [r0, #0x5]
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	ldr	r2, .L4448
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r0, .L4448+0x4
	strb	r7, [r0, #0x5]
.L4445:
	ldr	r1, .L4448+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4449:
	.align	2, 0
.L4448:
	.word	gSideStatuses
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe202:
	.size	 Cmd_setmist,.Lfe202-Cmd_setmist
	.align	2, 0
	.type	 Cmd_setfocusenergy,function
	.thumb_func
Cmd_setfocusenergy:
	push	{lr}
	ldr	r1, .L4453
	ldr	r0, .L4453+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r3, #0x80
	lsl	r3, r3, #0xd
	add	r2, r1, #0
	and	r2, r2, r3
	cmp	r2, #0
	beq	.L4451	@cond_branch
	ldr	r2, .L4453+0x8
	ldrh	r0, [r2]
	mov	r1, #0x20
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L4453+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L4452
.L4454:
	.align	2, 0
.L4453:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L4451:
	orr	r1, r1, r3
	str	r1, [r0]
	ldr	r0, .L4455
	strb	r2, [r0, #0x5]
.L4452:
	ldr	r1, .L4455+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L4456:
	.align	2, 0
.L4455:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe203:
	.size	 Cmd_setfocusenergy,.Lfe203-Cmd_setfocusenergy
	.align	2, 0
	.type	 Cmd_transformdataexecution,function
	.thumb_func
Cmd_transformdataexecution:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r1, .L4475
	ldr	r2, .L4475+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, .L4475+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r7, .L4475+0xc
	ldr	r0, .L4475+0x10
	mov	ip, r0
	ldrb	r2, [r0]
	mov	r6, #0x5c
	mov	r0, r2
	mul	r0, r0, r6
	add	r5, r7, #0
	add	r5, r5, #0x54
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r3, #0x80
	lsl	r3, r3, #0xe
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L4459	@cond_branch
	ldr	r0, .L4475+0x14
	ldr	r0, [r0]
	lsl	r1, r2, #0x3
	add	r0, r0, r1
	mov	r1, #0xb7
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L4459	@cond_branch
	ldr	r0, .L4475+0x18
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	ldr	r0, .L4475+0x1c
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L4458	@cond_branch
.L4459:
	ldr	r2, .L4475+0x20
	ldrh	r0, [r2]
	mov	r1, #0x20
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L4475+0x24
	mov	r0, #0x1
	b	.L4473
.L4476:
	.align	2, 0
.L4475:
	.word	gChosenMove
	.word	0xffff
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattleStruct
	.word	gStatuses3
	.word	0x10400c0
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L4458:
	ldr	r4, .L4477
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r5
	ldr	r0, [r1]
	orr	r0, r0, r3
	str	r0, [r1]
	ldr	r5, .L4477+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r2, [r0, #0x4]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldrb	r2, [r1, #0xf]
	mov	r3, #0x10
	neg	r3, r3
	add	r0, r3, #0
	and	r0, r0, r2
	strb	r0, [r1, #0xf]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r2, ip
	ldrb	r1, [r2]
	mul	r1, r1, r6
	add	r2, r7, #0
	add	r2, r2, #0x4c
	add	r1, r1, r2
	ldr	r1, [r1]
	str	r1, [r0]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldrb	r2, [r1, #0x1a]
	mov	r0, #0x3d
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1a]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	add	r0, r0, #0x24
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	ldr	r1, .L4477+0x8
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x6
	strb	r0, [r1, #0x1]
	mov	r2, ip
	ldrb	r0, [r2]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r2]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x1d
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldrb	r0, [r4]
	mul	r0, r0, r6
	add	r5, r0, r7
	ldrb	r0, [r2]
	mul	r0, r0, r6
	add	r2, r0, r7
	mov	r3, #0x0
	add	r6, r4, #0
	ldr	r0, .L4477+0xc
	mov	r8, r0
.L4464:
	add	r0, r5, r3
	add	r1, r2, r3
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0x24
	bls	.L4464	@cond_branch
	mov	r3, #0x0
	ldr	r7, .L4477+0x10
	ldr	r4, .L4477+0x14
	add	r5, r4, #0
	add	r5, r5, #0x19
.L4469:
	lsl	r1, r3, #0x1
	ldrb	r2, [r6]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, r2
	add	r1, r1, r4
	ldrh	r1, [r1]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r1, [r0, #0x5]
	cmp	r1, #0x4
	bhi	.L4470	@cond_branch
	add	r0, r3, r2
	add	r0, r0, r5
	b	.L4474
.L4478:
	.align	2, 0
.L4477:
	.word	gBattlerAttacker
	.word	gDisableStructs
	.word	gBattleTextBuff1
	.word	gActiveBattler
	.word	gBattleMoves
	.word	gBattleMons+0xc
.L4470:
	add	r0, r3, r2
	add	r0, r0, r5
	mov	r1, #0x5
.L4474:
	strb	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L4469	@cond_branch
	ldrb	r0, [r6]
	mov	r1, r8
	strb	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x2
	bl	BtlController_EmitResetActionMoveSelection
	mov	r2, r8
	ldrb	r0, [r2]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L4479
	mov	r0, #0x0
.L4473:
	strb	r0, [r1, #0x5]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4480:
	.align	2, 0
.L4479:
	.word	gBattleCommunication
.Lfe204:
	.size	 Cmd_transformdataexecution,.Lfe204-Cmd_transformdataexecution
	.align	2, 0
	.type	 Cmd_setsubstitute,function
	.thumb_func
Cmd_setsubstitute:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L4486
	ldr	r6, .L4486+0x4
	ldrb	r0, [r6]
	mov	r5, #0x5c
	mul	r0, r0, r5
	add	r3, r0, r7
	ldrh	r0, [r3, #0x2e]
	lsr	r1, r0, #0x2
	add	r2, r1, #0
	cmp	r1, #0
	bne	.L4482	@cond_branch
	mov	r2, #0x1
.L4482:
	ldrh	r0, [r3, #0x2a]
	cmp	r0, r2
	bhi	.L4483	@cond_branch
	ldr	r1, .L4486+0x8
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r1, .L4486+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L4484
.L4487:
	.align	2, 0
.L4486:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattleCommunication
.L4483:
	ldr	r4, .L4488
	str	r1, [r4]
	cmp	r1, #0
	bne	.L4485	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L4485:
	ldrb	r0, [r6]
	mov	r2, r0
	mul	r2, r2, r5
	add	r3, r7, #0
	add	r3, r3, #0x54
	add	r2, r2, r3
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	orr	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r3
	ldr	r0, [r1]
	ldr	r2, .L4488+0x4
	and	r0, r0, r2
	str	r0, [r1]
	ldr	r2, .L4488+0x8
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, [r4]
	mov	r2, #0x0
	strb	r1, [r0, #0xe]
	ldr	r0, .L4488+0xc
	strb	r2, [r0, #0x5]
	ldr	r2, .L4488+0x10
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	orr	r0, r0, r1
	str	r0, [r2]
.L4484:
	ldr	r1, .L4488+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4489:
	.align	2, 0
.L4488:
	.word	gBattleMoveDamage
	.word	-0x2001
	.word	gDisableStructs
	.word	gBattleCommunication
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
.Lfe205:
	.size	 Cmd_setsubstitute,.Lfe205-Cmd_setsubstitute
	.align	2, 0
	.type	 Cmd_mimicattackcopy,function
	.thumb_func
Cmd_mimicattackcopy:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r1, .L4504
	ldr	r2, .L4504+0x4
	ldr	r3, .L4504+0x8
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r6, [r0]
	add	r1, r6, r1
	ldrb	r1, [r1]
	mov	r0, #0x1
	and	r0, r0, r1
	mov	r9, r2
	mov	ip, r3
	cmp	r0, #0
	bne	.L4492	@cond_branch
	ldr	r3, .L4504+0xc
	ldr	r2, .L4504+0x10
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mov	r4, r1
	mul	r4, r4, r0
	add	r0, r3, #0
	add	r0, r0, #0x54
	add	r0, r4, r0
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xe
	and	r1, r1, r0
	add	r5, r3, #0
	mov	r8, r2
	cmp	r1, #0
	bne	.L4492	@cond_branch
	add	r1, r6, #0
	ldr	r0, .L4504+0x14
	cmp	r1, r0
	bne	.L4491	@cond_branch
.L4492:
	ldr	r3, .L4504+0x18
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L4493
.L4505:
	.align	2, 0
.L4504:
	.word	sForbiddenMoves
	.word	gLastMoves
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	0xffff
	.word	gBattlescriptCurrInstr
.L4491:
	mov	r2, #0x0
	add	r3, r5, #0
	add	r3, r3, #0xc
	add	r0, r4, r3
	ldrh	r0, [r0]
	ldr	r4, .L4506
	mov	sl, r4
	cmp	r0, r1
	beq	.L4495	@cond_branch
	mov	r6, r9
	mov	r4, r8
	mov	r3, #0x5c
.L4496:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L4495	@cond_branch
	lsl	r1, r2, #0x1
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r1, r1, r0
	ldr	r7, .L4506+0x4
	add	r1, r1, r7
	mov	r7, ip
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r1, [r1]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L4496	@cond_branch
.L4495:
	cmp	r2, #0x4
	bne	.L4500	@cond_branch
	ldr	r1, .L4506+0x8
	ldr	r2, .L4506+0xc
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r3, .L4506+0x10
	ldrb	r1, [r3]
	lsl	r1, r1, #0x1
	mov	r4, r8
	ldrb	r0, [r4]
	mov	r4, #0x5c
	mul	r0, r0, r4
	add	r1, r1, r0
	add	r0, r5, #0
	add	r0, r0, #0xc
	add	r1, r1, r0
	mov	r7, ip
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r2, .L4506+0x14
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x5]
	add	r6, r3, #0
	cmp	r2, #0x4
	bhi	.L4501	@cond_branch
	mov	r1, r8
	ldrb	r0, [r1]
	mul	r0, r0, r4
	ldrb	r4, [r6]
	add	r0, r0, r4
	add	r1, r5, #0
	add	r1, r1, #0x25
	add	r0, r0, r1
	strb	r2, [r0]
	b	.L4502
.L4507:
	.align	2, 0
.L4506:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons+0xc
	.word	gChosenMove
	.word	0xffff
	.word	gCurrMovePos
	.word	gBattleMoves
.L4501:
	mov	r7, r8
	ldrb	r0, [r7]
	mul	r0, r0, r4
	ldrb	r1, [r6]
	add	r0, r0, r1
	add	r1, r5, #0
	add	r1, r1, #0x25
	add	r0, r0, r1
	mov	r1, #0x5
	strb	r1, [r0]
.L4502:
	ldr	r1, .L4508
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	mov	r2, ip
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L4508+0x4
	mov	r4, r8
	ldrb	r0, [r4]
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	add	r2, r2, r1
	ldrb	r4, [r2, #0x1a]
	lsl	r3, r4, #0x1a
	lsr	r3, r3, #0x1c
	ldr	r1, .L4508+0x8
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	orr	r1, r1, r3
	mov	r0, #0xf
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x3d
	neg	r0, r0
	and	r0, r0, r4
	orr	r0, r0, r1
	strb	r0, [r2, #0x1a]
	mov	r7, sl
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
	b	.L4493
.L4509:
	.align	2, 0
.L4508:
	.word	gBattleTextBuff1
	.word	gDisableStructs
	.word	gBitTable
.L4500:
	mov	r0, sl
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	mov	r2, sl
	str	r1, [r2]
.L4493:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe206:
	.size	 Cmd_mimicattackcopy,.Lfe206-Cmd_mimicattackcopy
	.align	2, 0
	.type	 Cmd_metronome,function
	.thumb_func
Cmd_metronome:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L4517
	ldr	r6, .L4517+0x4
	ldr	r0, .L4517+0x8
	mov	r8, r0
	ldr	r5, .L4517+0xc
	ldr	r7, .L4517+0x10
.L4513:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L4517+0x14
	bl	__umodsi3
	add	r0, r0, #0x1
	strh	r0, [r4]
	ldrh	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r0, [r0]
	cmp	r0, #0xd1
	beq	.L4513	@cond_branch
	ldr	r0, .L4517+0x18
	add	r0, r1, r0
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4513	@cond_branch
	ldr	r0, [r5]
	ldr	r1, .L4517+0x1c
	and	r0, r0, r1
	str	r0, [r5]
	ldrh	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	mov	r1, r8
	str	r0, [r1]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L4517+0x20
	strb	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4518:
	.align	2, 0
.L4517:
	.word	gCurrentMove
	.word	gBattleMoves
	.word	gBattlescriptCurrInstr
	.word	gHitMarker
	.word	gBattleScriptsForMoveEffects
	.word	0x2f2
	.word	sForbiddenMoves
	.word	-0x401
	.word	gBattlerTarget
.Lfe207:
	.size	 Cmd_metronome,.Lfe207-Cmd_metronome
	.align	2, 0
	.type	 Cmd_dmgtolevel,function
	.thumb_func
Cmd_dmgtolevel:
	ldr	r3, .L4520
	ldr	r2, .L4520+0x4
	ldr	r0, .L4520+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2c
	ldrb	r0, [r0]
	str	r0, [r3]
	ldr	r1, .L4520+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L4521:
	.align	2, 0
.L4520:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe208:
	.size	 Cmd_dmgtolevel,.Lfe208-Cmd_dmgtolevel
	.align	2, 0
	.type	 Cmd_psywavedamageeffect,function
	.thumb_func
Cmd_psywavedamageeffect:
	push	{r4, lr}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x65
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L4525
	ldr	r3, .L4525+0x4
	ldr	r1, .L4525+0x8
	ldrb	r2, [r1]
	mov	r1, #0x5c
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2c
	ldrb	r1, [r1]
	add	r0, r0, #0x32
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	ldr	r1, .L4525+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4526:
	.align	2, 0
.L4525:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe209:
	.size	 Cmd_psywavedamageeffect,.Lfe209-Cmd_psywavedamageeffect
	.align	2, 0
	.type	 Cmd_counterdamagecalculator,function
	.thumb_func
Cmd_counterdamagecalculator:
	push	{r4, r5, r6, lr}
	ldr	r4, .L4532
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L4532+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0, #0xc]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r0, r5, #0x4
	add	r0, r1, r0
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L4528	@cond_branch
	cmp	r6, r2
	beq	.L4528	@cond_branch
	ldr	r6, .L4532+0x8
	add	r0, r1, r5
	ldrb	r0, [r0, #0xc]
	mov	r4, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L4528	@cond_branch
	ldr	r1, .L4532+0xc
	lsl	r0, r3, #0x1
	str	r0, [r1]
	ldr	r1, .L4532+0x10
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.L4529	@cond_branch
	ldrb	r1, [r1, #0x9]
	mov	r0, r1
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L4529	@cond_branch
	ldr	r0, .L4532+0x14
	strb	r1, [r0]
	b	.L4530
.L4533:
	.align	2, 0
.L4532:
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	gSideTimers
	.word	gBattlerTarget
.L4529:
	ldr	r2, .L4534
	ldr	r1, .L4534+0x4
	ldr	r0, .L4534+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0xc]
	strb	r0, [r2]
.L4530:
	ldr	r1, .L4534+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4531
.L4535:
	.align	2, 0
.L4534:
	.word	gBattlerTarget
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L4528:
	ldr	r2, .L4536
	ldr	r0, .L4536+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r3, .L4536+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4531:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L4537:
	.align	2, 0
.L4536:
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe210:
	.size	 Cmd_counterdamagecalculator,.Lfe210-Cmd_counterdamagecalculator
	.align	2, 0
	.type	 Cmd_mirrorcoatdamagecalculator,function
	.thumb_func
Cmd_mirrorcoatdamagecalculator:
	push	{r4, r5, r6, lr}
	ldr	r4, .L4543
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L4543+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0, #0xd]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r0, r5, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L4539	@cond_branch
	cmp	r6, r2
	beq	.L4539	@cond_branch
	ldr	r6, .L4543+0x8
	add	r0, r1, r5
	ldrb	r0, [r0, #0xd]
	mov	r4, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L4539	@cond_branch
	ldr	r1, .L4543+0xc
	lsl	r0, r3, #0x1
	str	r0, [r1]
	ldr	r1, .L4543+0x10
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.L4540	@cond_branch
	ldrb	r1, [r1, #0x9]
	mov	r0, r1
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L4540	@cond_branch
	ldr	r0, .L4543+0x14
	strb	r1, [r0]
	b	.L4541
.L4544:
	.align	2, 0
.L4543:
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	gSideTimers
	.word	gBattlerTarget
.L4540:
	ldr	r2, .L4545
	ldr	r1, .L4545+0x4
	ldr	r0, .L4545+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0xd]
	strb	r0, [r2]
.L4541:
	ldr	r1, .L4545+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4542
.L4546:
	.align	2, 0
.L4545:
	.word	gBattlerTarget
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L4539:
	ldr	r2, .L4547
	ldr	r0, .L4547+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r3, .L4547+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4542:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L4548:
	.align	2, 0
.L4547:
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe211:
	.size	 Cmd_mirrorcoatdamagecalculator,.Lfe211-Cmd_mirrorcoatdamagecalculator
	.align	2, 0
	.type	 Cmd_disablelastusedattack,function
	.thumb_func
Cmd_disablelastusedattack:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r4, #0x0
	ldr	r2, .L4562
	ldr	r3, .L4562+0x4
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r7, r2, #0
	add	r7, r7, #0xc
	add	r0, r0, r7
	ldr	r6, .L4562+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldrh	r0, [r0]
	mov	sl, r2
	add	r5, r3, #0
	ldr	r2, .L4562+0xc
	mov	r8, r2
	ldr	r2, .L4562+0x10
	mov	r9, r2
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L4551	@cond_branch
	mov	ip, r5
	mov	r3, #0x5c
.L4552:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L4551	@cond_branch
	lsl	r2, r4, #0x1
	mov	r0, ip
	ldrb	r1, [r0]
	mov	r0, r1
	mul	r0, r0, r3
	add	r2, r2, r0
	add	r2, r2, r7
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldrh	r0, [r2]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L4552	@cond_branch
.L4551:
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	ldrh	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L4556	@cond_branch
	cmp	r4, #0x4
	beq	.L4556	@cond_branch
	mov	r6, #0x5c
	mov	r0, r1
	mul	r0, r0, r6
	add	r0, r4, r0
	mov	r1, sl
	add	r1, r1, #0x25
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L4556	@cond_branch
	ldr	r1, .L4562+0x14
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	lsl	r2, r4, #0x1
	ldrb	r0, [r5]
	mul	r0, r0, r6
	add	r0, r2, r0
	mov	r3, sl
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r5]
	mul	r0, r0, r6
	add	r0, r2, r0
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	mul	r1, r1, r6
	add	r2, r2, r1
	add	r2, r2, r3
	ldrh	r1, [r2]
	strh	r1, [r0, #0x4]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	ldrb	r2, [r0, #0xf]
	mov	r1, #0x10
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0, #0xf]
	ldrb	r0, [r5]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r8
	ldrb	r3, [r1, #0xf]
	lsl	r2, r3, #0x1c
	lsr	r2, r2, #0x18
	mov	r0, #0xf
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0xf]
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4561
.L4563:
	.align	2, 0
.L4562:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gLastMoves
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
	.word	gBattleTextBuff1
.L4556:
	mov	r0, r9
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	mov	r2, r9
	str	r1, [r2]
.L4561:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe212:
	.size	 Cmd_disablelastusedattack,.Lfe212-Cmd_disablelastusedattack
	.align	2, 0
	.type	 Cmd_trysetencore,function
	.thumb_func
Cmd_trysetencore:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r5, #0x0
	ldr	r3, .L4575
	ldr	r4, .L4575+0x4
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r6, r3, #0
	add	r6, r6, #0xc
	add	r0, r0, r6
	ldr	r2, .L4575+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r0, [r0]
	mov	r9, r2
	ldr	r2, .L4575+0xc
	mov	r8, r2
	ldr	r2, .L4575+0x10
	mov	sl, r2
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L4566	@cond_branch
	mov	ip, r4
	add	r7, r6, #0
	mov	r6, r9
	mov	r3, #0x5c
.L4567:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	bgt	.L4566	@cond_branch
	lsl	r2, r5, #0x1
	mov	r0, ip
	ldrb	r1, [r0]
	mov	r0, r1
	mul	r0, r0, r3
	add	r2, r2, r0
	add	r2, r2, r7
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldrh	r0, [r2]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L4567	@cond_branch
.L4566:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r2, [r0]
	cmp	r2, #0xa5
	beq	.L4572	@cond_branch
	cmp	r2, #0xe3
	beq	.L4572	@cond_branch
	cmp	r2, #0x77
	bne	.L4571	@cond_branch
.L4572:
	mov	r5, #0x4
.L4571:
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	mov	r2, r8
	add	r3, r0, r2
	ldrh	r0, [r3, #0x6]
	cmp	r0, #0
	bne	.L4573	@cond_branch
	cmp	r5, #0x4
	beq	.L4573	@cond_branch
	mov	r0, #0x5c
	mov	r2, r1
	mul	r2, r2, r0
	add	r0, r5, r2
	ldr	r1, .L4575
	add	r1, r1, #0x25
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L4573	@cond_branch
	lsl	r0, r5, #0x1
	add	r0, r0, r2
	ldr	r1, .L4575
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r3, #0x6]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	strb	r5, [r0, #0x10]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	ldrb	r2, [r0, #0x11]
	mov	r1, #0x10
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x3
	orr	r1, r1, r2
	strb	r1, [r0, #0x11]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r8
	ldrb	r3, [r1, #0x11]
	lsl	r2, r3, #0x1c
	lsr	r2, r2, #0x18
	mov	r0, #0xf
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x11]
	mov	r1, sl
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4574
.L4576:
	.align	2, 0
.L4575:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gLastMoves
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
.L4573:
	mov	r0, sl
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	mov	r2, sl
	str	r1, [r2]
.L4574:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe213:
	.size	 Cmd_trysetencore,.Lfe213-Cmd_trysetencore
	.align	2, 0
	.type	 Cmd_painsplitdmgcalc,function
	.thumb_func
Cmd_painsplitdmgcalc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r7, .L4580
	ldrb	r0, [r7]
	ldr	r1, .L4580+0x4
	mov	r8, r1
	ldrb	r1, [r1]
	ldr	r2, .L4580+0x8
	ldrh	r2, [r2]
	bl	DoesSubstituteBlockMove
	cmp	r0, #0
	bne	.L4578	@cond_branch
	ldr	r5, .L4580+0xc
	ldrb	r0, [r7]
	mov	r4, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r3, [r0, #0x2a]
	mov	r2, r8
	ldrb	r0, [r2]
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r1, [r0, #0x2a]
	add	r3, r3, r1
	asr	r3, r3, #0x1
	ldr	r6, .L4580+0x10
	sub	r1, r1, r3
	str	r1, [r6]
	ldr	r2, .L4580+0x14
	strb	r1, [r2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	asr	r0, r0, #0x8
	strb	r0, [r2, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	asr	r0, r0, #0x10
	strb	r0, [r2, #0x2]
	lsr	r1, r1, #0x18
	strb	r1, [r2, #0x3]
	ldrb	r0, [r7]
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2a]
	sub	r0, r0, r3
	str	r0, [r6]
	ldr	r2, .L4580+0x18
	mov	r0, r8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, #0x8
	add	r0, r0, r2
	ldr	r1, .L4580+0x1c
	str	r1, [r0]
	ldr	r1, .L4580+0x20
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4579
.L4581:
	.align	2, 0
.L4580:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	gBattleScripting
	.word	gSpecialStatuses
	.word	0xffff
	.word	gBattlescriptCurrInstr
.L4578:
	ldr	r3, .L4582
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4579:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4583:
	.align	2, 0
.L4582:
	.word	gBattlescriptCurrInstr
.Lfe214:
	.size	 Cmd_painsplitdmgcalc,.Lfe214-Cmd_painsplitdmgcalc
	.align	2, 0
	.type	 Cmd_settypetorandomresistance,function
	.thumb_func
Cmd_settypetorandomresistance:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r1, .L4609
	ldr	r4, .L4609+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r2, r0, r1
	ldrh	r1, [r2]
	cmp	r1, #0
	bne	.LCB43012
	b	.L4608	@long jump
.LCB43012:
	ldr	r0, .L4609+0x8
	cmp	r1, r0
	bne	.LCB43017
	b	.L4608	@long jump
.LCB43017:
	ldrh	r0, [r2]
	bl	IsTwoTurnsMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L4588	@cond_branch
	ldr	r1, .L4609+0xc
	ldr	r2, .L4609+0x10
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4608	@cond_branch
.L4588:
	mov	r7, #0x0
	ldr	r1, .L4609+0x14
	ldr	r0, .L4609+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r4, #0x0
	ldr	r5, .L4609+0x18
	lsl	r6, r0, #0x18
.L4593:
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r6, #0x18
	bl	GetTypeModifier
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L4596	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	cmp	r1, r0
	bne	.L4592	@cond_branch
.L4596:
	ldr	r0, [r5]
	orr	r7, r7, r0
.L4592:
	add	r5, r5, #0x4
	add	r4, r4, #0x1
	cmp	r4, #0x12
	bls	.L4593	@cond_branch
	cmp	r7, #0
	beq	.L4608	@cond_branch
	ldr	r0, .L4609+0x18
	mov	r9, r0
	ldr	r1, .L4609+0x1c
	mov	r8, r1
.L4602:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x13
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	lsl	r0, r4, #0x2
	add	r0, r0, r9
	ldr	r0, [r0]
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L4600	@cond_branch
	ldr	r6, .L4609+0xc
	ldr	r5, .L4609+0x4
	ldrb	r0, [r5]
	mov	r3, #0x5c
	mul	r0, r0, r3
	add	r1, r0, r6
	add	r2, r1, #0
	add	r2, r2, #0x22
	ldrb	r0, [r2]
	cmp	r0, r4
	beq	.L4605	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L4605	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, r4
	bne	.L4604	@cond_branch
.L4605:
	lsl	r0, r4, #0x2
	add	r0, r0, r9
	ldr	r0, [r0]
	bic	r7, r7, r0
	b	.L4600
.L4610:
	.align	2, 0
.L4609:
	.word	gLastLandedMoves
	.word	gBattlerAttacker
	.word	0xffff
	.word	gBattleMons
	.word	gLastHitBy
	.word	gLastHitByType
	.word	gBitTable
	.word	gBattleTextBuff1
.L4604:
	strb	r4, [r2]
	ldrb	r0, [r5]
	mul	r0, r0, r3
	add	r0, r0, r6
	add	r0, r0, #0x23
	strb	r4, [r0]
	ldrb	r0, [r5]
	mul	r0, r0, r3
	add	r0, r0, r6
	add	r0, r0, #0x24
	mov	r1, #0x9
	strb	r1, [r0]
	mov	r0, #0xfd
	mov	r1, r8
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	strb	r4, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r1, .L4611
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4584
.L4612:
	.align	2, 0
.L4611:
	.word	gBattlescriptCurrInstr
.L4600:
	cmp	r7, #0
	bne	.L4602	@cond_branch
.L4608:
	ldr	r3, .L4613
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4584:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4614:
	.align	2, 0
.L4613:
	.word	gBattlescriptCurrInstr
.Lfe215:
	.size	 Cmd_settypetorandomresistance,.Lfe215-Cmd_settypetorandomresistance
	.align	2, 0
	.type	 Cmd_setalwayshitflag,function
	.thumb_func
Cmd_setalwayshitflag:
	push	{r4, lr}
	ldr	r4, .L4616
	ldr	r3, .L4616+0x4
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r0, [r1]
	mov	r2, #0x19
	neg	r2, r2
	and	r0, r0, r2
	str	r0, [r1]
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r0, [r1]
	mov	r2, #0x10
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r2, .L4616+0x8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L4616+0xc
	ldrb	r1, [r1]
	strb	r1, [r0, #0x18]
	ldr	r1, .L4616+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4617:
	.align	2, 0
.L4616:
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe216:
	.size	 Cmd_setalwayshitflag,.Lfe216-Cmd_setalwayshitflag
	.align	2, 0
	.type	 Cmd_copymovepermanently,function
	.thumb_func
Cmd_copymovepermanently:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	ldr	r0, .L4635
	ldr	r1, .L4635+0x4
	add	r5, r1, #0
	strh	r5, [r0]
	ldr	r3, .L4635+0x8
	ldr	r2, .L4635+0xc
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mov	r4, r1
	mul	r4, r4, r0
	add	r0, r3, #0
	add	r0, r0, #0x54
	add	r0, r4, r0
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xe
	and	r1, r1, r0
	mov	ip, r3
	mov	sl, r2
	cmp	r1, #0
	beq	.LCB43304
	b	.L4619	@long jump
.LCB43304:
	ldr	r0, .L4635+0x10
	ldr	r2, .L4635+0x14
	ldrb	r1, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r1, [r1]
	mov	r9, r0
	mov	r8, r2
	cmp	r1, #0xa5
	bne	.LCB43316
	b	.L4619	@long jump
.LCB43316:
	cmp	r1, #0
	bne	.LCB43318
	b	.L4619	@long jump
.LCB43318:
	cmp	r1, r5
	bne	.LCB43322
	b	.L4619	@long jump
.LCB43322:
	cmp	r1, #0xa6
	bne	.LCB43324
	b	.L4619	@long jump
.LCB43324:
	mov	r7, #0x0
	mov	r5, r9
	mov	r0, ip
	add	r0, r0, #0xc
	add	r1, r4, r0
	mov	r3, r8
.L4623:
	ldrh	r2, [r1]
	cmp	r2, #0xa6
	beq	.L4622	@cond_branch
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	cmp	r2, r0
	beq	.L4621	@cond_branch
.L4622:
	add	r1, r1, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L4623	@cond_branch
.L4621:
	cmp	r7, #0x4
	beq	.LCB43366
	b	.L4619	@long jump
.LCB43366:
	ldr	r4, .L4635+0x18
	ldrb	r1, [r4]
	lsl	r1, r1, #0x1
	mov	r2, sl
	ldrb	r0, [r2]
	mov	r3, #0x5c
	mul	r0, r0, r3
	add	r1, r1, r0
	mov	r6, ip
	add	r6, r6, #0xc
	add	r1, r1, r6
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	strh	r0, [r1]
	mov	r1, sl
	ldrb	r0, [r1]
	mov	r2, r0
	mul	r2, r2, r3
	ldrb	r4, [r4]
	add	r2, r2, r4
	mov	r5, ip
	add	r5, r5, #0x25
	add	r2, r2, r5
	ldr	r4, .L4635+0x1c
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x5]
	strb	r0, [r2]
	ldr	r1, .L4635+0x20
	mov	r2, sl
	ldrb	r0, [r2]
	strb	r0, [r1]
	mov	r7, #0x0
	ldrb	r0, [r2]
	mul	r0, r0, r3
	add	r4, r0, r5
	add	r3, r0, #0
	add	r2, sp, #0x4
	add	r5, sp, #0xc
.L4632:
	add	r0, r3, r6
	ldrh	r0, [r0]
	strh	r0, [r2]
	add	r1, r5, r7
	ldrb	r0, [r4]
	strb	r0, [r1]
	add	r4, r4, #0x1
	add	r3, r3, #0x2
	add	r2, r2, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L4632	@cond_branch
	add	r2, sp, #0x4
	mov	r0, sl
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, ip
	add	r0, r0, #0x3d
	ldrb	r0, [r0]
	strb	r0, [r2, #0xc]
	str	r2, [sp]
	mov	r0, #0x0
	mov	r1, #0x3
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BtlController_EmitSetMonData
	ldr	r0, .L4635+0x20
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L4635+0x24
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldr	r3, .L4635+0x10
	ldr	r2, .L4635+0x14
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L4635+0x28
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4634
.L4636:
	.align	2, 0
.L4635:
	.word	gChosenMove
	.word	0xffff
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gLastPrintedMoves
	.word	gBattlerTarget
	.word	gCurrMovePos
	.word	gBattleMoves
	.word	gActiveBattler
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.L4619:
	ldr	r3, .L4637
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4634:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4638:
	.align	2, 0
.L4637:
	.word	gBattlescriptCurrInstr
.Lfe217:
	.size	 Cmd_copymovepermanently,.Lfe217-Cmd_copymovepermanently
	.align	2, 0
	.type	 IsTwoTurnsMove,function
	.thumb_func
IsTwoTurnsMove:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L4644
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	cmp	r0, #0x91
	beq	.L4641	@cond_branch
	cmp	r0, #0x4b
	beq	.L4641	@cond_branch
	cmp	r0, #0x97
	beq	.L4641	@cond_branch
	cmp	r0, #0x9b
	beq	.L4641	@cond_branch
	cmp	r0, #0x1a
	bne	.L4640	@cond_branch
.L4641:
	mov	r0, #0x1
	b	.L4643
.L4645:
	.align	2, 0
.L4644:
	.word	gBattleMoves
.L4640:
	mov	r0, #0x0
.L4643:
	pop	{r1}
	bx	r1
.Lfe218:
	.size	 IsTwoTurnsMove,.Lfe218-IsTwoTurnsMove
	.align	2, 0
	.type	 AttacksThisTurn,function
	.thumb_func
AttacksThisTurn:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x10
	ldr	r1, .L4652
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0]
	add	r3, r1, #0
	cmp	r0, #0x97
	bne	.L4647	@cond_branch
	ldr	r0, .L4652+0x4
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4648	@cond_branch
.L4647:
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r0, #0x91
	beq	.L4649	@cond_branch
	cmp	r0, #0x4b
	beq	.L4649	@cond_branch
	cmp	r0, #0x97
	beq	.L4649	@cond_branch
	cmp	r0, #0x9b
	beq	.L4649	@cond_branch
	cmp	r0, #0x1a
	bne	.L4648	@cond_branch
.L4649:
	ldr	r0, .L4652+0x8
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4648	@cond_branch
	mov	r0, #0x1
	b	.L4651
.L4653:
	.align	2, 0
.L4652:
	.word	gBattleMoves
	.word	gBattleWeather
	.word	gHitMarker
.L4648:
	mov	r0, #0x2
.L4651:
	pop	{r1}
	bx	r1
.Lfe219:
	.size	 AttacksThisTurn,.Lfe219-AttacksThisTurn
	.align	2, 0
	.type	 Cmd_trychoosesleeptalkmove,function
	.thumb_func
Cmd_trychoosesleeptalkmove:
	push	{r4, r5, r6, r7, lr}
	mov	r6, #0x0
	mov	r4, #0x0
	ldr	r7, .L4669
	ldr	r5, .L4669+0x4
.L4658:
	lsl	r1, r4, #0x1
	ldr	r0, .L4669+0x8
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r5
	ldrh	r2, [r1]
	add	r0, r2, r7
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4660	@cond_branch
	add	r0, r2, #0
	bl	IsTwoTurnsMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L4657	@cond_branch
.L4660:
	ldr	r0, .L4669+0xc
	lsl	r1, r4, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	orr	r6, r6, r0
.L4657:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bls	.L4658	@cond_branch
	ldr	r0, .L4669+0x8
	ldrb	r0, [r0]
	lsl	r1, r6, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0xfd
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0xf
	bne	.L4662	@cond_branch
	ldr	r1, .L4669+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4663
.L4670:
	.align	2, 0
.L4669:
	.word	sForbiddenMoves
	.word	gBattleMons+0xc
	.word	gBattlerAttacker
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.L4662:
	mov	r7, #0x3
	ldr	r4, .L4671
.L4664:
	bl	Random
	add	r5, r7, #0
	and	r5, r5, r0
	lsl	r0, r5, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L4664	@cond_branch
	ldr	r4, .L4671+0x4
	ldr	r2, .L4671+0x8
	lsl	r1, r5, #0x1
	ldr	r0, .L4671+0xc
	ldrb	r3, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r2, r2, #0xc
	add	r1, r1, r2
	ldrh	r0, [r1]
	strh	r0, [r4]
	ldr	r0, .L4671+0x10
	strb	r5, [r0]
	ldr	r2, .L4671+0x14
	ldr	r0, [r2]
	ldr	r1, .L4671+0x18
	and	r0, r0, r1
	str	r0, [r2]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L4671+0x1c
	strb	r0, [r1]
	ldr	r3, .L4671+0x20
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4663:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4672:
	.align	2, 0
.L4671:
	.word	gBitTable
	.word	gCalledMove
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gCurrMovePos
	.word	gHitMarker
	.word	-0x401
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.Lfe220:
	.size	 Cmd_trychoosesleeptalkmove,.Lfe220-Cmd_trychoosesleeptalkmove
	.align	2, 0
	.type	 Cmd_setdestinybond,function
	.thumb_func
Cmd_setdestinybond:
	ldr	r1, .L4674
	ldr	r0, .L4674+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, #0x54
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L4674+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L4675:
	.align	2, 0
.L4674:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe221:
	.size	 Cmd_setdestinybond,.Lfe221-Cmd_setdestinybond
	.align	2, 0
	.type	 TrySetDestinyBondToHappen,function
	.thumb_func
TrySetDestinyBondToHappen:
	push	{r4, r5, lr}
	ldr	r0, .L4678
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L4678+0x4
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L4678+0x8
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4677	@cond_branch
	cmp	r5, r3
	beq	.L4677	@cond_branch
	ldr	r2, .L4678+0xc
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4677	@cond_branch
	mov	r0, #0x40
	orr	r1, r1, r0
	str	r1, [r2]
.L4677:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4679:
	.align	2, 0
.L4678:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gHitMarker
.Lfe222:
	.size	 TrySetDestinyBondToHappen,.Lfe222-TrySetDestinyBondToHappen
	.align	2, 0
	.type	 Cmd_trysetdestinybondtohappen,function
	.thumb_func
Cmd_trysetdestinybondtohappen:
	push	{lr}
	bl	TrySetDestinyBondToHappen
	ldr	r1, .L4681
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L4682:
	.align	2, 0
.L4681:
	.word	gBattlescriptCurrInstr
.Lfe223:
	.size	 Cmd_trysetdestinybondtohappen,.Lfe223-Cmd_trysetdestinybondtohappen
	.align	2, 0
	.type	 Cmd_settailwind,function
	.thumb_func
Cmd_settailwind:
	push	{r4, r5, r6, lr}
	ldr	r6, .L4686
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L4686+0x4
	lsl	r4, r5, #0x2
	add	r2, r4, r0
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L4684	@cond_branch
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r1, .L4686+0x8
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r6]
	strb	r1, [r0, #0x11]
	mov	r1, #0x3
	strb	r1, [r0, #0x10]
	ldr	r1, .L4686+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4685
.L4687:
	.align	2, 0
.L4686:
	.word	gBattlerAttacker
	.word	gSideStatuses
	.word	gSideTimers
	.word	gBattlescriptCurrInstr
.L4684:
	ldr	r3, .L4688
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4685:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L4689:
	.align	2, 0
.L4688:
	.word	gBattlescriptCurrInstr
.Lfe224:
	.size	 Cmd_settailwind,.Lfe224-Cmd_settailwind
	.align	2, 0
	.type	 Cmd_tryspiteppreduce,function
	.thumb_func
Cmd_tryspiteppreduce:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L4704
	ldr	r2, .L4704+0x4
	ldrb	r4, [r2]
	lsl	r1, r4, #0x1
	add	r1, r1, r0
	ldrh	r3, [r1]
	mov	ip, r0
	mov	r8, r2
	cmp	r3, #0
	bne	.LCB44036
	b	.L4691	@long jump
.LCB44036:
	ldr	r0, .L4704+0x8
	cmp	r3, r0
	bne	.LCB44041
	b	.L4691	@long jump
.LCB44041:
	mov	r6, #0x0
	ldr	r0, .L4704+0xc
	mov	r1, #0x5c
	mul	r1, r1, r4
	add	r2, r0, #0
	add	r2, r2, #0xc
	add	r1, r1, r2
	ldrh	r1, [r1]
	cmp	r3, r1
	beq	.L4693	@cond_branch
	mov	r7, ip
	mov	r5, r8
	add	r4, r2, #0
	mov	r3, #0x5c
.L4694:
	add	r6, r6, #0x1
	cmp	r6, #0x3
	bgt	.L4693	@cond_branch
	ldrb	r0, [r5]
	lsl	r2, r0, #0x1
	add	r2, r2, r7
	lsl	r1, r6, #0x1
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r1, r1, r4
	ldrh	r0, [r2]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L4694	@cond_branch
.L4693:
	cmp	r6, #0x4
	bne	.LCB44090
	b	.L4698	@long jump
.LCB44090:
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r2, #0x5c
	mov	r9, r2
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r6, r0
	ldr	r1, .L4704+0xc
	add	r1, r1, #0x25
	mov	sl, r1
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.LCB44108
	b	.L4698	@long jump
.LCB44108:
	mov	r7, #0x4
	cmp	r0, #0x4
	bge	.L4699	@cond_branch
	add	r7, r0, #0
.L4699:
	ldr	r1, .L4704+0x10
	mov	r5, #0xfd
	strb	r5, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, ip
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, ip
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r4, .L4704+0x14
	add	r0, r4, #0
	add	r1, r7, #0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	strb	r5, [r4]
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	strb	r0, [r4, #0x2]
	strb	r0, [r4, #0x3]
	strb	r7, [r4, #0x4]
	sub	r0, r0, #0x2
	strb	r0, [r4, #0x5]
	mov	r3, r8
	ldrb	r0, [r3]
	mov	r1, r9
	mul	r1, r1, r0
	add	r1, r6, r1
	add	r1, r1, sl
	ldrb	r0, [r1]
	sub	r0, r0, r7
	strb	r0, [r1]
	ldr	r4, .L4704+0x18
	ldrb	r0, [r3]
	strb	r0, [r4]
	ldr	r1, .L4704+0x1c
	ldrb	r3, [r4]
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1a]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1c
	ldr	r2, .L4704+0x20
	lsl	r0, r6, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L4700	@cond_branch
	mov	r2, r9
	mul	r2, r2, r3
	ldr	r0, .L4704+0xc
	add	r0, r0, #0x54
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4700	@cond_branch
	add	r1, r6, #0
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r3, sl
	add	r0, r2, r3
	add	r0, r0, r6
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L4700:
	ldr	r1, .L4704+0x24
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	ldr	r1, .L4704+0xc
	ldr	r0, .L4704+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r6, r0
	add	r1, r1, #0x25
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L4703	@cond_branch
	add	r0, r2, #0
	bl	CancelMultiTurnMoves
	b	.L4703
.L4705:
	.align	2, 0
.L4704:
	.word	gLastMoves
	.word	gBattlerTarget
	.word	0xffff
	.word	gBattleMons
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gActiveBattler
	.word	gDisableStructs
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.L4698:
.L4691:
	ldr	r3, .L4706
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4703:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4707:
	.align	2, 0
.L4706:
	.word	gBattlescriptCurrInstr
.Lfe225:
	.size	 Cmd_tryspiteppreduce,.Lfe225-Cmd_tryspiteppreduce
	.align	2, 0
	.type	 Cmd_healpartystatus,function
	.thumb_func
Cmd_healpartystatus:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	mov	r8, r4
	ldr	r0, .L4732
	ldrh	r0, [r0]
	cmp	r0, #0xd7
	beq	.LCB44301
	b	.L4709	@long jump
.LCB44301:
	ldr	r6, .L4732+0x4
	mov	r0, r8
	strb	r0, [r6, #0x5]
	ldr	r5, .L4732+0x8
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L4732+0xc
	mov	sl, r1
	cmp	r0, #0
	bne	.L4710	@cond_branch
	ldr	r2, .L4732+0x10
	mov	sl, r2
.L4710:
	ldr	r4, .L4732+0x14
	ldrb	r3, [r5]
	mov	r7, #0x5c
	mov	r2, r3
	mul	r2, r2, r7
	add	r1, r2, r4
	ldrh	r0, [r1, #0x20]
	cmp	r0, #0x2b
	beq	.L4712	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	mov	r1, r8
	str	r1, [r0]
	ldrb	r0, [r5]
	mov	r2, r0
	mul	r2, r2, r7
	add	r0, r4, #0
	add	r0, r0, #0x54
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L4732+0x18
	and	r0, r0, r1
	str	r0, [r2]
	b	.L4713
.L4733:
	.align	2, 0
.L4732:
	.word	gCurrentMove
	.word	gBattleCommunication
	.word	gBattlerAttacker
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattleMons
	.word	-0x8000001
.L4712:
	ldrh	r1, [r1, #0x20]
	add	r0, r3, #0
	bl	RecordAbilityBattle
	ldrb	r0, [r6, #0x5]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r6, #0x5]
.L4713:
	ldr	r7, .L4734
	ldr	r0, .L4734+0x4
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r2, #0x2
	mov	r9, r2
	mov	r1, r9
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L4734+0x8
	strb	r0, [r1, #0x17]
	strb	r0, [r7]
	ldr	r0, .L4734+0xc
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4714	@cond_branch
	ldr	r0, .L4734+0x10
	ldrb	r2, [r0]
	ldr	r1, .L4734+0x14
	ldrb	r3, [r7]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L4714	@cond_branch
	ldr	r5, .L4734+0x18
	mov	r6, #0x5c
	mov	r4, r3
	mul	r4, r4, r6
	add	r1, r4, r5
	ldrh	r0, [r1, #0x20]
	cmp	r0, #0x2b
	beq	.L4715	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x50
	add	r0, r4, r0
	str	r2, [r0]
	ldrb	r0, [r7]
	mov	r2, r0
	mul	r2, r2, r6
	add	r0, r5, #0
	add	r0, r0, #0x54
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L4734+0x1c
	and	r0, r0, r1
	str	r0, [r2]
	b	.L4714
.L4735:
	.align	2, 0
.L4734:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleScripting
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons
	.word	-0x8000001
.L4715:
	ldrh	r1, [r1, #0x20]
	add	r0, r3, #0
	bl	RecordAbilityBattle
	ldr	r1, .L4736
	ldrb	r0, [r1, #0x5]
	mov	r2, r9
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L4714:
	mov	r6, #0x0
	ldr	r0, .L4736+0x4
	mov	r9, r0
.L4720:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	add	r4, r4, sl
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0x59
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r5, #0
	beq	.L4719	@cond_branch
	ldr	r0, .L4736+0x8
	cmp	r5, r0
	beq	.L4719	@cond_branch
	ldr	r2, .L4736+0xc
	ldr	r0, .L4736+0x10
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, r6
	bne	.L4722	@cond_branch
	mov	r0, #0x5c
	mul	r0, r0, r1
	b	.L4731
.L4737:
	.align	2, 0
.L4736:
	.word	gBattleCommunication
	.word	gBattleMons
	.word	0x4b7
	.word	gBattlerPartyIndexes
	.word	gBattlerAttacker
.L4722:
	ldr	r0, .L4738
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4724	@cond_branch
	ldr	r0, .L4738+0x4
	ldrb	r3, [r0]
	lsl	r0, r3, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, r6
	bne	.L4724	@cond_branch
	ldr	r0, .L4738+0x8
	ldrb	r1, [r0]
	ldr	r2, .L4738+0xc
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L4724	@cond_branch
	mov	r0, #0x5c
	mul	r0, r0, r3
.L4731:
	add	r0, r0, r9
	ldrh	r0, [r0, #0x20]
	b	.L4723
.L4739:
	.align	2, 0
.L4738:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L4724:
	add	r0, r5, #0
	add	r1, r7, #0
	add	r2, r4, #0
	bl	GetAbilityBySpecies
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L4723:
	cmp	r0, #0x2b
	beq	.L4719	@cond_branch
	mov	r0, #0x1
	lsl	r0, r0, r6
	mov	r1, r8
	orr	r1, r1, r0
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
.L4719:
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L4720	@cond_branch
	b	.L4728
.L4709:
	ldr	r1, .L4740
	mov	r0, #0x4
	strb	r0, [r1, #0x5]
	mov	r2, #0x3f
	mov	r8, r2
	ldr	r3, .L4740+0x4
	ldr	r2, .L4740+0x8
	ldrb	r0, [r2]
	mov	r5, #0x5c
	mul	r0, r0, r5
	mov	r1, #0x50
	add	r1, r1, r3
	mov	r9, r1
	add	r0, r0, r9
	str	r4, [r0]
	ldrb	r0, [r2]
	mov	r1, r0
	mul	r1, r1, r5
	add	r7, r3, #0
	add	r7, r7, #0x54
	add	r1, r1, r7
	ldr	r0, [r1]
	ldr	r6, .L4740+0xc
	and	r0, r0, r6
	str	r0, [r1]
	ldrb	r0, [r2]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r4, .L4740+0x10
	strb	r0, [r4]
	ldr	r0, .L4740+0x14
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4728	@cond_branch
	ldr	r0, .L4740+0x18
	ldrb	r2, [r0]
	ldr	r1, .L4740+0x1c
	ldrb	r3, [r4]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L4728	@cond_branch
	mov	r0, r3
	mul	r0, r0, r5
	add	r0, r0, r9
	str	r2, [r0]
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r7
	ldr	r0, [r1]
	and	r0, r0, r6
	str	r0, [r1]
.L4728:
	mov	r2, r8
	cmp	r2, #0
	beq	.L4730	@cond_branch
	ldr	r4, .L4740+0x10
	ldr	r0, .L4740+0x8
	ldrb	r0, [r0]
	strb	r0, [r4]
	add	r0, sp, #0x4
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L4730:
	ldr	r1, .L4740+0x20
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4741:
	.align	2, 0
.L4740:
	.word	gBattleCommunication
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	-0x8000001
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.Lfe226:
	.size	 Cmd_healpartystatus,.Lfe226-Cmd_healpartystatus
	.align	2, 0
	.type	 Cmd_cursetarget,function
	.thumb_func
Cmd_cursetarget:
	push	{r4, r5, lr}
	ldr	r5, .L4746
	ldr	r0, .L4746+0x4
	ldrb	r0, [r0]
	mov	r4, #0x5c
	mov	r1, r0
	mul	r1, r1, r4
	add	r0, r5, #0
	add	r0, r0, #0x54
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r3, #0x80
	lsl	r3, r3, #0x15
	add	r0, r2, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L4743	@cond_branch
	ldr	r3, .L4746+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L4744
.L4747:
	.align	2, 0
.L4746:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L4743:
	orr	r2, r2, r3
	str	r2, [r1]
	ldr	r1, .L4748
	ldr	r0, .L4748+0x4
	ldrb	r0, [r0]
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0
	bne	.L4745	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L4745:
	ldr	r1, .L4748+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L4744:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4749:
	.align	2, 0
.L4748:
	.word	gBattleMoveDamage
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe227:
	.size	 Cmd_cursetarget,.Lfe227-Cmd_cursetarget
	.align	2, 0
	.type	 Cmd_trysetspikes,function
	.thumb_func
Cmd_trysetspikes:
	push	{r4, lr}
	ldr	r4, .L4753
	ldrb	r0, [r4]
	bl	GetBattlerSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L4753+0x4
	lsl	r2, r0, #0x2
	add	r0, r2, r0
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r0, [r3, #0xa]
	cmp	r0, #0x3
	bne	.L4751	@cond_branch
	ldr	r2, .L4753+0x8
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r3, .L4753+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L4752
.L4754:
	.align	2, 0
.L4753:
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
.L4751:
	ldr	r1, .L4755
	add	r1, r2, r1
	ldr	r0, [r1]
	mov	r2, #0x10
	orr	r0, r0, r2
	str	r0, [r1]
	ldrb	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strb	r0, [r3, #0xa]
	ldr	r1, .L4755+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L4752:
	pop	{r4}
	pop	{r0}
	bx	r0
.L4756:
	.align	2, 0
.L4755:
	.word	gSideStatuses
	.word	gBattlescriptCurrInstr
.Lfe228:
	.size	 Cmd_trysetspikes,.Lfe228-Cmd_trysetspikes
	.align	2, 0
	.type	 Cmd_setforesight,function
	.thumb_func
Cmd_setforesight:
	ldr	r1, .L4758
	ldr	r0, .L4758+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, #0x54
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L4758+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L4759:
	.align	2, 0
.L4758:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.Lfe229:
	.size	 Cmd_setforesight,.Lfe229-Cmd_setforesight
	.align	2, 0
	.type	 Cmd_trysetperishsong,function
	.thumb_func
Cmd_trysetperishsong:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r6, #0x0
	mov	r3, #0x0
	ldr	r0, .L4771
	add	r7, r0, #0
	ldr	r0, .L4771+0x4
	mov	r8, r0
	ldrb	r1, [r7]
	cmp	r6, r1
	bge	.L4762	@cond_branch
	mov	r5, #0x20
	ldr	r0, .L4771+0x8
	mov	ip, r0
	ldr	r0, .L4771+0xc
	add	r4, r0, #0
	add	r4, r4, #0x12
	ldr	r2, .L4771+0x10
.L4764:
	ldr	r1, [r2]
	add	r0, r1, #0
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L4766	@cond_branch
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, ip
	ldrh	r0, [r0, #0x20]
	cmp	r0, #0x2b
	bne	.L4765	@cond_branch
.L4766:
	add	r6, r6, #0x1
	b	.L4763
.L4772:
	.align	2, 0
.L4771:
	.word	gBattlersCount
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gDisableStructs
	.word	gStatuses3
.L4765:
	orr	r1, r1, r5
	str	r1, [r2]
	mov	r0, #0x33
	strb	r0, [r4]
.L4763:
	add	r4, r4, #0x28
	add	r2, r2, #0x4
	add	r3, r3, #0x1
	ldrb	r0, [r7]
	cmp	r3, r0
	blt	.L4764	@cond_branch
.L4762:
	mov	r1, r8
	ldrb	r0, [r1]
	bl	PressurePPLoseOnUsingPerishSong
	ldr	r0, .L4773
	ldrb	r0, [r0]
	cmp	r6, r0
	bne	.L4769	@cond_branch
	ldr	r3, .L4773+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L4770
.L4774:
	.align	2, 0
.L4773:
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
.L4769:
	ldr	r1, .L4775
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L4770:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4776:
	.align	2, 0
.L4775:
	.word	gBattlescriptCurrInstr
.Lfe230:
	.size	 Cmd_trysetperishsong,.Lfe230-Cmd_trysetperishsong
	.align	2, 0
	.type	 Cmd_handlerollout,function
	.thumb_func
Cmd_handlerollout:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L4783
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4778	@cond_branch
	ldr	r0, .L4783+0x4
	ldrb	r0, [r0]
	bl	CancelMultiTurnMoves
	ldr	r1, .L4783+0x8
	ldr	r0, .L4783+0xc
	b	.L4782
.L4784:
	.align	2, 0
.L4783:
	.word	gMoveResultFlags
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveMissedPause
.L4778:
	ldr	r0, .L4785
	ldr	r4, .L4785+0x4
	ldrb	r2, [r4]
	mov	r6, #0x5c
	mov	r1, r2
	mul	r1, r1, r6
	add	r5, r0, #0
	add	r5, r5, #0x54
	add	r1, r1, r5
	ldr	r0, [r1]
	mov	r7, #0x80
	lsl	r7, r7, #0x5
	and	r0, r0, r7
	ldr	r3, .L4785+0x8
	cmp	r0, #0
	bne	.L4780	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrb	r2, [r0, #0x14]
	mov	r1, #0x10
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x5
	orr	r1, r1, r2
	strb	r1, [r0, #0x14]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrb	r2, [r0, #0x14]
	mov	r1, #0xf
	and	r1, r1, r2
	mov	r2, #0x50
	orr	r1, r1, r2
	strb	r1, [r0, #0x14]
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r5
	ldr	r0, [r1]
	orr	r0, r0, r7
	str	r0, [r1]
	ldr	r1, .L4785+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L4785+0x10
	ldrh	r1, [r1]
	strh	r1, [r0]
.L4780:
	ldrb	r0, [r4]
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	add	r2, r2, r3
	ldrb	r3, [r2, #0x14]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x14]
	cmp	r1, #0
	bne	.L4781	@cond_branch
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r5
	ldr	r0, [r1]
	ldr	r2, .L4785+0x14
	and	r0, r0, r2
	str	r0, [r1]
.L4781:
	ldr	r1, .L4785+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x1
.L4782:
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4786:
	.align	2, 0
.L4785:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gDisableStructs
	.word	gLockedMoves
	.word	gCurrentMove
	.word	-0x1001
	.word	gBattlescriptCurrInstr
.Lfe231:
	.size	 Cmd_handlerollout,.Lfe231-Cmd_handlerollout
	.align	2, 0
	.type	 Cmd_jumpifconfusedandstatmaxed,function
	.thumb_func
Cmd_jumpifconfusedandstatmaxed:
	push	{r4, r5, lr}
	ldr	r5, .L4790
	ldr	r0, .L4790+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mov	r3, r1
	mul	r3, r3, r0
	add	r0, r5, #0
	add	r0, r0, #0x54
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	ldr	r4, .L4790+0x8
	cmp	r0, #0
	beq	.L4788	@cond_branch
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x1]
	add	r0, r0, r3
	add	r1, r5, #0
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	bne	.L4788	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L4789
.L4791:
	.align	2, 0
.L4790:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L4788:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L4789:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe232:
	.size	 Cmd_jumpifconfusedandstatmaxed,.Lfe232-Cmd_jumpifconfusedandstatmaxed
	.align	2, 0
	.type	 Cmd_handlefurycutter,function
	.thumb_func
Cmd_handlefurycutter:
	push	{lr}
	ldr	r0, .L4797
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4793	@cond_branch
	ldr	r2, .L4797+0x4
	ldr	r0, .L4797+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x13]
	ldr	r1, .L4797+0xc
	ldr	r0, .L4797+0x10
	b	.L4796
.L4798:
	.align	2, 0
.L4797:
	.word	gMoveResultFlags
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveMissedPause
.L4793:
	ldr	r2, .L4799
	ldr	r0, .L4799+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0x5
	beq	.L4795	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x13]
.L4795:
	ldr	r1, .L4799+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
.L4796:
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L4800:
	.align	2, 0
.L4799:
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe233:
	.size	 Cmd_handlefurycutter,.Lfe233-Cmd_handlefurycutter
	.align	2, 0
	.type	 Cmd_setembargo,function
	.thumb_func
Cmd_setembargo:
	push	{r4, lr}
	ldr	r0, .L4804
	ldr	r4, .L4804+0x4
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r3, #0x80
	lsl	r3, r3, #0xa
	add	r0, r2, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L4802	@cond_branch
	ldr	r3, .L4804+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L4803
.L4805:
	.align	2, 0
.L4804:
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L4802:
	orr	r2, r2, r3
	str	r2, [r1]
	ldr	r2, .L4806
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x5
	strb	r1, [r0, #0x1e]
	ldr	r1, .L4806+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L4803:
	pop	{r4}
	pop	{r0}
	bx	r0
.L4807:
	.align	2, 0
.L4806:
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
.Lfe234:
	.size	 Cmd_setembargo,.Lfe234-Cmd_setembargo
	.align	2, 0
	.type	 Cmd_presentdamagecalculation,function
	.thumb_func
Cmd_presentdamagecalculation:
	push	{r4, lr}
	bl	Random
	mov	r4, #0xff
	and	r4, r4, r0
	cmp	r4, #0x65
	bhi	.L4809	@cond_branch
	ldr	r0, .L4821
	ldr	r0, [r0]
	ldr	r1, .L4821+0x4
	add	r0, r0, r1
	mov	r1, #0x28
	strb	r1, [r0]
	b	.L4810
.L4822:
	.align	2, 0
.L4821:
	.word	gBattleStruct
	.word	0x279
.L4809:
	cmp	r4, #0xb1
	bhi	.L4811	@cond_branch
	ldr	r0, .L4823
	ldr	r0, [r0]
	ldr	r1, .L4823+0x4
	add	r0, r0, r1
	mov	r1, #0x50
	strb	r1, [r0]
	b	.L4810
.L4824:
	.align	2, 0
.L4823:
	.word	gBattleStruct
	.word	0x279
.L4811:
	cmp	r4, #0xcb
	bhi	.L4813	@cond_branch
	ldr	r0, .L4825
	ldr	r0, [r0]
	ldr	r1, .L4825+0x4
	add	r0, r0, r1
	mov	r1, #0x78
	strb	r1, [r0]
	b	.L4810
.L4826:
	.align	2, 0
.L4825:
	.word	gBattleStruct
	.word	0x279
.L4813:
	ldr	r3, .L4827
	ldr	r2, .L4827+0x4
	ldr	r0, .L4827+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x2
	str	r0, [r3]
	cmp	r0, #0
	bne	.L4815	@cond_branch
	mov	r0, #0x1
	str	r0, [r3]
.L4815:
	ldr	r0, [r3]
	neg	r0, r0
	str	r0, [r3]
.L4810:
	cmp	r4, #0xcb
	bhi	.L4816	@cond_branch
	ldr	r1, .L4827+0xc
	ldr	r0, .L4827+0x10
	b	.L4820
.L4828:
	.align	2, 0
.L4827:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_HitFromCritCalc
.L4816:
	ldr	r2, .L4829
	ldr	r0, .L4829+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x2e]
	ldrh	r0, [r0, #0x2a]
	cmp	r1, r0
	bne	.L4818	@cond_branch
	ldr	r1, .L4829+0x8
	ldr	r0, .L4829+0xc
	b	.L4820
.L4830:
	.align	2, 0
.L4829:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AlreadyAtFullHp
.L4818:
	ldr	r2, .L4831
	ldrh	r1, [r2]
	ldr	r0, .L4831+0x4
	and	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L4831+0x8
	ldr	r0, .L4831+0xc
.L4820:
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4832:
	.align	2, 0
.L4831:
	.word	gMoveResultFlags
	.word	0xfff7
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PresentHealTarget
.Lfe235:
	.size	 Cmd_presentdamagecalculation,.Lfe235-Cmd_presentdamagecalculation
	.align	2, 0
	.type	 Cmd_setsafeguard,function
	.thumb_func
Cmd_setsafeguard:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L4836
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	ldr	r5, .L4836+0x4
	mov	r6, #0x1
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r0, [r1]
	mov	r4, #0x20
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L4834	@cond_branch
	ldr	r2, .L4836+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L4836+0xc
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	b	.L4835
.L4837:
	.align	2, 0
.L4836:
	.word	gBattlerAttacker
	.word	gSideStatuses
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L4834:
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r0, [r1]
	orr	r0, r0, r4
	str	r0, [r1]
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	ldr	r5, .L4838
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r4, #0x5
	strb	r4, [r0, #0x6]
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r7]
	strb	r1, [r0, #0x7]
	ldr	r0, .L4838+0x4
	strb	r4, [r0, #0x5]
.L4835:
	ldr	r1, .L4838+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4839:
	.align	2, 0
.L4838:
	.word	gSideTimers
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe236:
	.size	 Cmd_setsafeguard,.Lfe236-Cmd_setsafeguard
	.align	2, 0
	.type	 Cmd_magnitudedamagecalculation,function
	.thumb_func
Cmd_magnitudedamagecalculation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x4
	bhi	.L4841	@cond_branch
	ldr	r0, .L4860
	ldr	r0, [r0]
	mov	r1, #0x9e
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0xa
	strb	r1, [r0]
	mov	r3, #0x4
	b	.L4842
.L4861:
	.align	2, 0
.L4860:
	.word	gBattleStruct
.L4841:
	cmp	r3, #0xe
	bhi	.L4843	@cond_branch
	ldr	r0, .L4862
	ldr	r0, [r0]
	mov	r1, #0x9e
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x1e
	strb	r1, [r0]
	mov	r3, #0x5
	b	.L4842
.L4863:
	.align	2, 0
.L4862:
	.word	gBattleStruct
.L4843:
	cmp	r3, #0x22
	bhi	.L4845	@cond_branch
	ldr	r0, .L4864
	ldr	r0, [r0]
	mov	r1, #0x9e
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x32
	strb	r1, [r0]
	mov	r3, #0x6
	b	.L4842
.L4865:
	.align	2, 0
.L4864:
	.word	gBattleStruct
.L4845:
	cmp	r3, #0x40
	bhi	.L4847	@cond_branch
	ldr	r0, .L4866
	ldr	r0, [r0]
	mov	r1, #0x9e
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x46
	strb	r1, [r0]
	mov	r3, #0x7
	b	.L4842
.L4867:
	.align	2, 0
.L4866:
	.word	gBattleStruct
.L4847:
	cmp	r3, #0x54
	bhi	.L4849	@cond_branch
	ldr	r0, .L4868
	ldr	r0, [r0]
	mov	r1, #0x9e
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x5a
	strb	r1, [r0]
	mov	r3, #0x8
	b	.L4842
.L4869:
	.align	2, 0
.L4868:
	.word	gBattleStruct
.L4849:
	cmp	r3, #0x5e
	bhi	.L4851	@cond_branch
	ldr	r0, .L4870
	ldr	r0, [r0]
	mov	r1, #0x9e
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x6e
	strb	r1, [r0]
	mov	r3, #0x9
	b	.L4842
.L4871:
	.align	2, 0
.L4870:
	.word	gBattleStruct
.L4851:
	ldr	r0, .L4872
	ldr	r0, [r0]
	mov	r1, #0x9e
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x96
	strb	r1, [r0]
	mov	r3, #0xa
.L4842:
	ldr	r1, .L4872+0x4
	mov	r2, #0x0
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	strb	r0, [r1, #0x2]
	mov	r0, #0x2
	strb	r0, [r1, #0x3]
	strb	r3, [r1, #0x4]
	mov	r0, #0xff
	strb	r0, [r1, #0x5]
	ldr	r1, .L4872+0x8
	strb	r2, [r1]
	ldr	r0, .L4872+0xc
	ldrb	r3, [r0]
	add	r6, r1, #0
	ldr	r0, .L4872+0x10
	mov	r8, r0
	cmp	r2, r3
	bcs	.L4854	@cond_branch
	add	r4, r6, #0
	ldr	r0, .L4872+0x14
	ldrb	r5, [r0]
	ldr	r1, .L4872+0x18
	mov	ip, r1
	ldr	r7, .L4872+0x1c
.L4856:
	ldrb	r2, [r4]
	cmp	r2, r5
	beq	.L4855	@cond_branch
	ldrb	r0, [r7]
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4854	@cond_branch
.L4855:
	add	r0, r2, #0x1
	strb	r0, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r3
	bcc	.L4856	@cond_branch
.L4854:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4873:
	.align	2, 0
.L4872:
	.word	gBattleStruct
	.word	gBattleTextBuff1
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
	.word	gBitTable
	.word	gAbsentBattlerFlags
.Lfe237:
	.size	 Cmd_magnitudedamagecalculation,.Lfe237-Cmd_magnitudedamagecalculation
	.align	2, 0
	.type	 Cmd_jumpifnopursuitswitchdmg,function
	.thumb_func
Cmd_jumpifnopursuitswitchdmg:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L4890
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L4875	@cond_branch
	ldr	r0, .L4890+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L4876	@cond_branch
	mov	r0, #0x1
	b	.L4889
.L4891:
	.align	2, 0
.L4890:
	.word	gMultiHitCounter
	.word	gBattlerAttacker
.L4876:
	mov	r0, #0x0
	b	.L4889
.L4875:
	ldr	r0, .L4892
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L4879	@cond_branch
	mov	r0, #0x3
	b	.L4889
.L4893:
	.align	2, 0
.L4892:
	.word	gBattlerAttacker
.L4879:
	mov	r0, #0x2
.L4889:
	bl	GetBattlerAtPosition
	ldr	r1, .L4894
	strb	r0, [r1]
	ldr	r0, .L4894+0x4
	ldr	r1, .L4894
	ldrb	r3, [r1]
	add	r0, r3, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB45973
	b	.L4881	@long jump
.LCB45973:
	ldr	r5, .L4894+0x8
	ldr	r0, .L4894+0xc
	ldr	r1, [r0]
	add	r1, r3, r1
	ldrb	r2, [r5]
	ldrb	r1, [r1, #0xc]
	cmp	r2, r1
	bne	.L4881	@cond_branch
	ldr	r4, .L4894+0x10
	mov	r2, #0x5c
	mov	r0, r3
	mul	r0, r0, r2
	add	r1, r4, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x27
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4881	@cond_branch
	ldrb	r0, [r5]
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L4881	@cond_branch
	ldr	r0, .L4894+0x14
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1a]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L4881	@cond_branch
	ldr	r0, .L4894+0x18
	lsl	r1, r3, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0xe4
	bne	.L4881	@cond_branch
	mov	r1, #0x0
	ldr	r0, .L4894+0x1c
	ldr	r2, .L4894+0x20
	mov	r8, r2
	ldr	r7, .L4894+0x24
	mov	sl, r7
	ldr	r2, .L4894+0x28
	mov	r9, r2
	ldr	r7, .L4894+0x2c
	mov	ip, r7
	ldrb	r2, [r0]
	cmp	r1, r2
	bge	.L4883	@cond_branch
	ldr	r6, .L4894+0x30
	ldr	r5, .L4894
	ldr	r4, .L4894+0x34
	mov	r3, #0xb
	add	r2, r0, #0
.L4885:
	add	r0, r1, r6
	ldrb	r0, [r0]
	ldrb	r7, [r5]
	cmp	r0, r7
	bne	.L4884	@cond_branch
	add	r0, r1, r4
	strb	r3, [r0]
.L4884:
	add	r1, r1, #0x1
	ldrb	r0, [r2]
	cmp	r1, r0
	blt	.L4885	@cond_branch
.L4883:
	mov	r0, #0xe4
	mov	r1, r8
	strh	r0, [r1]
	ldr	r2, .L4894
	ldrb	r0, [r2]
	ldr	r7, .L4894+0xc
	ldr	r1, [r7]
	add	r0, r0, r1
	add	r0, r0, #0x7f
	ldrb	r0, [r0]
	mov	r1, r9
	strb	r0, [r1]
	mov	r2, sl
	strb	r0, [r2]
	ldr	r7, .L4894+0x38
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
	mov	r0, #0x1
	ldr	r1, .L4894+0x3c
	strb	r0, [r1, #0x18]
	mov	r2, ip
	ldr	r0, [r2]
	ldr	r1, .L4894+0x40
	and	r0, r0, r1
	str	r0, [r2]
	b	.L4888
.L4895:
	.align	2, 0
.L4894:
	.word	gBattlerTarget
	.word	gChosenActionByBattler
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	gBattleMons
	.word	gDisableStructs
	.word	gChosenMoveByBattler
	.word	gBattlersCount
	.word	gCurrentMove
	.word	gCurrMovePos
	.word	gChosenMovePos
	.word	gHitMarker
	.word	gBattlerByTurnOrder
	.word	gActionsByTurnOrder
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
	.word	-0x401
.L4881:
	ldr	r3, .L4896
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4888:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4897:
	.align	2, 0
.L4896:
	.word	gBattlescriptCurrInstr
.Lfe238:
	.size	 Cmd_jumpifnopursuitswitchdmg,.Lfe238-Cmd_jumpifnopursuitswitchdmg
	.align	2, 0
	.type	 Cmd_setsunny,function
	.thumb_func
Cmd_setsunny:
	push	{lr}
	ldr	r0, .L4902
	ldrb	r0, [r0]
	mov	r1, #0x2
	mov	r2, #0x0
	bl	TryChangeBattleWeather
	cmp	r0, #0
	bne	.L4899	@cond_branch
	ldr	r2, .L4902+0x4
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L4902+0x8
	mov	r0, #0x2
	b	.L4901
.L4903:
	.align	2, 0
.L4902:
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L4899:
	ldr	r1, .L4904
	mov	r0, #0x4
.L4901:
	strb	r0, [r1, #0x5]
	ldr	r1, .L4904+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L4905:
	.align	2, 0
.L4904:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe239:
	.size	 Cmd_setsunny,.Lfe239-Cmd_setsunny
	.align	2, 0
	.type	 Cmd_maxattackhalvehp,function
	.thumb_func
Cmd_maxattackhalvehp:
	push	{r4, r5, lr}
	ldr	r5, .L4911
	ldr	r4, .L4911+0x4
	ldrb	r0, [r4]
	mov	r3, #0x5c
	mul	r0, r0, r3
	add	r2, r0, r5
	ldrh	r0, [r2, #0x2e]
	lsr	r1, r0, #0x1
	cmp	r1, #0
	bne	.L4907	@cond_branch
	mov	r1, #0x1
.L4907:
	mov	r0, #0x19
	ldrsb	r0, [r2, r0]
	cmp	r0, #0xb
	bgt	.L4908	@cond_branch
	ldrh	r0, [r2, #0x2a]
	cmp	r0, r1
	bls	.L4908	@cond_branch
	mov	r0, #0xc
	strb	r0, [r2, #0x19]
	ldr	r1, .L4911+0x8
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0
	bne	.L4909	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L4909:
	ldr	r1, .L4911+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4910
.L4912:
	.align	2, 0
.L4911:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.L4908:
	ldr	r3, .L4913
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4910:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4914:
	.align	2, 0
.L4913:
	.word	gBattlescriptCurrInstr
.Lfe240:
	.size	 Cmd_maxattackhalvehp,.Lfe240-Cmd_maxattackhalvehp
	.align	2, 0
	.type	 Cmd_copyfoestats,function
	.thumb_func
Cmd_copyfoestats:
	push	{r4, r5, r6, r7, lr}
	mov	r2, #0x0
	ldr	r7, .L4921
	ldr	r6, .L4921+0x4
	mov	r4, #0x5c
	ldr	r3, .L4921+0x8
	ldr	r5, .L4921+0xc
.L4919:
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r4
	add	r1, r2, r1
	add	r1, r1, r3
	ldrb	r0, [r5]
	mul	r0, r0, r4
	add	r0, r2, r0
	add	r0, r0, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L4919	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4922:
	.align	2, 0
.L4921:
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
	.word	gBattleMons+0x18
	.word	gBattlerTarget
.Lfe241:
	.size	 Cmd_copyfoestats,.Lfe241-Cmd_copyfoestats
	.align	2, 0
	.type	 Cmd_rapidspinfree,function
	.thumb_func
Cmd_rapidspinfree:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L4937
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r8, r6
	ldr	r1, .L4937+0x4
	ldrb	r2, [r4]
	mov	r7, #0x5c
	mov	r0, r2
	mul	r0, r0, r7
	add	r5, r1, #0
	add	r5, r5, #0x54
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	ip, r1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4924	@cond_branch
	ldr	r1, .L4937+0x8
	ldr	r3, .L4937+0xc
	ldrb	r0, [r3]
	strb	r0, [r1, #0x17]
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r7
	add	r1, r1, r5
	ldr	r0, [r1]
	ldr	r2, .L4937+0x10
	and	r0, r0, r2
	str	r0, [r1]
	ldrb	r0, [r4]
	ldr	r1, .L4937+0x14
	ldr	r1, [r1]
	add	r0, r0, r1
	ldrb	r0, [r0, #0x13]
	strb	r0, [r3]
	ldr	r2, .L4937+0x18
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x2
	strb	r0, [r2, #0x1]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x4
	add	r0, r1, r0
	ldrh	r0, [r0]
	strb	r0, [r2, #0x2]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x3]
	mov	r0, #0xff
	strb	r0, [r2, #0x4]
	bl	BattleScriptPushCursor
	ldr	r1, .L4937+0x1c
	ldr	r0, .L4937+0x20
	b	.L4936
.L4938:
	.align	2, 0
.L4937:
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattleScripting
	.word	gBattlerTarget
	.word	-0x2001
	.word	gBattleStruct
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WrapFree
.L4924:
	ldr	r5, .L4939
	lsl	r0, r2, #0x2
	add	r3, r0, r5
	ldr	r1, [r3]
	mov	r7, #0x4
	add	r2, r1, #0
	and	r2, r2, r7
	cmp	r2, #0
	beq	.L4926	@cond_branch
	mov	r0, #0x5
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r3]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r0, [r1]
	mov	r2, #0x4
	neg	r2, r2
	and	r0, r0, r2
	str	r0, [r1]
	bl	BattleScriptPushCursor
	ldr	r1, .L4939+0x4
	ldr	r0, .L4939+0x8
	b	.L4936
.L4940:
	.align	2, 0
.L4939:
	.word	gStatuses3
	.word	gBattlescriptCurrInstr
	.word	BattleScript_LeechSeedFree
.L4926:
	ldr	r0, .L4941
	lsl	r5, r6, #0x2
	add	r4, r5, r0
	ldr	r1, [r4]
	mov	r3, #0x10
	and	r3, r3, r1
	cmp	r3, #0
	beq	.L4928	@cond_branch
	mov	r0, #0x11
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r4]
	ldr	r1, .L4941+0x4
	add	r0, r5, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r2, [r0, #0xa]
	bl	BattleScriptPushCursor
	ldr	r1, .L4941+0x8
	ldr	r0, .L4941+0xc
	b	.L4936
.L4942:
	.align	2, 0
.L4941:
	.word	gSideStatuses
	.word	gSideTimers
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SpikesFree
.L4928:
	add	r2, r1, #0
	mov	r0, ip
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L4930	@cond_branch
	ldr	r0, .L4943
	and	r1, r1, r0
	str	r1, [r4]
	ldr	r1, .L4943+0x4
	add	r0, r5, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r3, [r0, #0xb]
	bl	BattleScriptPushCursor
	ldr	r1, .L4943+0x8
	ldr	r0, .L4943+0xc
	b	.L4936
.L4944:
	.align	2, 0
.L4943:
	.word	-0x2001
	.word	gSideTimers
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ToxicSpikesFree
.L4930:
	add	r3, r1, #0
	and	r3, r3, r7
	cmp	r3, #0
	beq	.L4932	@cond_branch
	mov	r0, #0x5
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r4]
	ldr	r1, .L4945
	add	r0, r5, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r2, [r0, #0xd]
	bl	BattleScriptPushCursor
	ldr	r1, .L4945+0x4
	ldr	r0, .L4945+0x8
	b	.L4936
.L4946:
	.align	2, 0
.L4945:
	.word	gSideTimers
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StickyWebFree
.L4932:
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4934	@cond_branch
	ldr	r0, .L4947
	and	r1, r1, r0
	str	r1, [r4]
	ldr	r1, .L4947+0x4
	mov	r2, r8
	add	r0, r5, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r3, [r0, #0xc]
	bl	BattleScriptPushCursor
	ldr	r1, .L4947+0x8
	ldr	r0, .L4947+0xc
	b	.L4936
.L4948:
	.align	2, 0
.L4947:
	.word	-0x4001
	.word	gSideTimers
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StealthRockFree
.L4934:
	ldr	r1, .L4949
	ldr	r0, [r1]
	add	r0, r0, #0x1
.L4936:
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4950:
	.align	2, 0
.L4949:
	.word	gBattlescriptCurrInstr
.Lfe242:
	.size	 Cmd_rapidspinfree,.Lfe242-Cmd_rapidspinfree
	.align	2, 0
	.type	 Cmd_setdefensecurlbit,function
	.thumb_func
Cmd_setdefensecurlbit:
	ldr	r1, .L4952
	ldr	r0, .L4952+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, #0x54
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x17
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L4952+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L4953:
	.align	2, 0
.L4952:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe243:
	.size	 Cmd_setdefensecurlbit,.Lfe243-Cmd_setdefensecurlbit
	.align	2, 0
	.type	 Cmd_recoverbasedonsunlight,function
	.thumb_func
Cmd_recoverbasedonsunlight:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L4968
	ldr	r5, .L4968+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	ldr	r7, .L4968+0x8
	ldrb	r0, [r5]
	mov	r6, #0x5c
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r1, [r0, #0x2a]
	ldrh	r0, [r0, #0x2e]
	cmp	r1, r0
	beq	.L4955	@cond_branch
	ldr	r0, .L4968+0xc
	ldrh	r1, [r0]
	ldr	r0, .L4968+0x10
	cmp	r1, r0
	bne	.L4956	@cond_branch
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L4961	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L4961	@cond_branch
	ldr	r0, .L4968+0x14
	ldrh	r1, [r0]
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4967	@cond_branch
	b	.L4961
.L4969:
	.align	2, 0
.L4968:
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gCurrentMove
	.word	0x26e
	.word	gBattleWeather
.L4956:
	ldr	r4, .L4970
	ldrh	r1, [r4]
	ldr	r0, .L4970+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4961	@cond_branch
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L4961	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.L4960	@cond_branch
.L4961:
	ldr	r3, .L4970+0x8
	ldr	r2, .L4970+0xc
	ldr	r0, .L4970+0x10
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x1
	str	r0, [r3]
	add	r1, r3, #0
	b	.L4959
.L4971:
	.align	2, 0
.L4970:
	.word	gBattleWeather
	.word	0x1ff
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerAttacker
.L4960:
	ldrh	r1, [r4]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4963	@cond_branch
.L4967:
	ldr	r4, .L4972
	ldrb	r0, [r5]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r1, [r0, #0x2e]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, #0x1e
	bl	__divsi3
	str	r0, [r4]
	add	r1, r4, #0
	b	.L4959
.L4973:
	.align	2, 0
.L4972:
	.word	gBattleMoveDamage
.L4963:
	ldr	r1, .L4974
	ldrb	r0, [r5]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x2
	str	r0, [r1]
.L4959:
	add	r2, r1, #0
	ldr	r0, [r2]
	cmp	r0, #0
	bne	.L4965	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L4965:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldr	r1, .L4974+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4966
.L4975:
	.align	2, 0
.L4974:
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.L4955:
	ldr	r3, .L4976
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4966:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4977:
	.align	2, 0
.L4976:
	.word	gBattlescriptCurrInstr
.Lfe244:
	.size	 Cmd_recoverbasedonsunlight,.Lfe244-Cmd_recoverbasedonsunlight
	.align	2, 0
	.type	 Cmd_setstickyweb,function
	.thumb_func
Cmd_setstickyweb:
	push	{r4, r5, lr}
	ldr	r0, .L4981
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L4981+0x4
	lsl	r4, r5, #0x2
	add	r2, r4, r0
	ldr	r1, [r2]
	mov	r3, #0x4
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L4979	@cond_branch
	ldr	r3, .L4981+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L4980
.L4982:
	.align	2, 0
.L4981:
	.word	gBattlerTarget
	.word	gSideStatuses
	.word	gBattlescriptCurrInstr
.L4979:
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r1, .L4983
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0, #0xd]
	ldr	r1, .L4983+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L4980:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4984:
	.align	2, 0
.L4983:
	.word	gSideTimers
	.word	gBattlescriptCurrInstr
.Lfe245:
	.size	 Cmd_setstickyweb,.Lfe245-Cmd_setstickyweb
	.align	2, 0
	.type	 Cmd_selectfirstvalidtarget,function
	.thumb_func
Cmd_selectfirstvalidtarget:
	push	{r4, r5, lr}
	ldr	r1, .L4993
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L4993+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L4987	@cond_branch
	add	r4, r1, #0
	ldr	r5, .L4993+0x8
.L4989:
	ldr	r1, .L4993+0xc
	ldrb	r0, [r4]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L4990	@cond_branch
	ldr	r0, .L4993+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4988	@cond_branch
.L4990:
	ldrb	r0, [r4]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L4987	@cond_branch
.L4988:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L4993+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L4989	@cond_branch
.L4987:
	ldr	r1, .L4993+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4994:
	.align	2, 0
.L4993:
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBattleMoves
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
.Lfe246:
	.size	 Cmd_selectfirstvalidtarget,.Lfe246-Cmd_selectfirstvalidtarget
	.align	2, 0
	.type	 Cmd_trysetfutureattack,function
	.thumb_func
Cmd_trysetfutureattack:
	push	{r4, r5, lr}
	ldr	r5, .L5000
	ldr	r4, .L5000+0x4
	ldrb	r1, [r4]
	add	r0, r1, r5
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L4996	@cond_branch
	ldr	r3, .L5000+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L4997
.L5001:
	.align	2, 0
.L5000:
	.word	gWishFutureKnock
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L4996:
	add	r0, r1, #0
	bl	GetBattlerPosition
	ldr	r1, .L5002
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r3, #0x1
	and	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	str	r1, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r1, r5, #0
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldr	r2, .L5002+0x4
	ldrh	r1, [r2]
	strh	r1, [r0]
	add	r0, r5, #0x4
	ldrb	r1, [r4]
	add	r0, r0, r1
	ldr	r1, .L5002+0x8
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldrb	r0, [r4]
	add	r0, r0, r5
	mov	r1, #0x3
	strb	r1, [r0]
	ldrh	r1, [r2]
	ldr	r0, .L5002+0xc
	cmp	r1, r0
	bne	.L4998	@cond_branch
	ldr	r0, .L5002+0x10
	strb	r3, [r0, #0x5]
	b	.L4999
.L5003:
	.align	2, 0
.L5002:
	.word	gSideStatuses
	.word	gCurrentMove
	.word	gBattlerAttacker
	.word	0x161
	.word	gBattleCommunication
.L4998:
	ldr	r1, .L5004
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
.L4999:
	ldr	r1, .L5004+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L4997:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L5005:
	.align	2, 0
.L5004:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe247:
	.size	 Cmd_trysetfutureattack,.Lfe247-Cmd_trysetfutureattack
	.align	2, 0
	.type	 Cmd_trydobeatup,function
	.thumb_func
Cmd_trydobeatup:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L5023
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r7, .L5023+0x4
	cmp	r0, #0
	bne	.L5007	@cond_branch
	ldr	r7, .L5023+0x8
.L5007:
	ldr	r2, .L5023+0xc
	ldr	r0, .L5023+0x10
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.L5009	@cond_branch
	ldr	r3, .L5023+0x14
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	b	.L5022
.L5024:
	.align	2, 0
.L5023:
	.word	gBattlerAttacker
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L5009:
	ldr	r6, .L5025
	ldrb	r0, [r6]
	mov	r8, r0
	cmp	r0, #0x5
	bls	.LCB47196
	b	.L5017	@long jump
.LCB47196:
	add	r4, r6, #0
	mov	r5, #0x64
.L5014:
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r7, r0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L5013	@cond_branch
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r7, r0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L5013	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r7, r0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L5025+0x4
	cmp	r0, r1
	beq	.L5013	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r7, r0
	mov	r1, #0x37
	bl	GetMonData
	cmp	r0, #0
	beq	.L5012	@cond_branch
.L5013:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	add	r6, r4, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x5
	bls	.L5014	@cond_branch
.L5012:
	ldr	r1, .L5025
	mov	r9, r1
	ldrb	r2, [r1]
	cmp	r2, #0x5
	bls	.LCB47259
	b	.L5017	@long jump
.LCB47259:
	ldr	r1, .L5025+0x8
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
	ldr	r6, .L5025+0xc
	ldrb	r0, [r6]
	strb	r0, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L5025+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
	ldr	r2, .L5025+0x14
	mov	r8, r2
	ldr	r5, .L5025+0x18
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r4, #0x64
	mul	r0, r0, r4
	add	r0, r7, r0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r3, [r1, #0x1]
	mov	r2, r8
	str	r3, [r2]
	ldr	r2, .L5025+0x1c
	ldr	r0, .L5025+0x20
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	mul	r0, r0, r3
	mov	r1, r8
	str	r0, [r1]
	mov	r2, r9
	ldrb	r0, [r2]
	mul	r0, r0, r4
	add	r0, r7, r0
	mov	r1, #0x38
	bl	GetMonData
	lsl	r0, r0, #0x1
	mov	r1, #0x5
	bl	__udivsi3
	add	r0, r0, #0x2
	mov	r2, r8
	ldr	r1, [r2]
	mul	r0, r0, r1
	str	r0, [r2]
	ldr	r3, .L5025+0x24
	ldr	r1, .L5025+0x28
	ldrb	r2, [r1]
	mov	r1, #0x5c
	mul	r1, r1, r2
	add	r1, r1, r3
	ldrh	r2, [r1]
	lsl	r2, r2, #0x15
	lsr	r2, r2, #0x15
	lsl	r1, r2, #0x3
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r1, [r1, #0x2]
	bl	__divsi3
	mov	r1, r8
	str	r0, [r1]
	mov	r1, #0x32
	bl	__divsi3
	add	r2, r0, #0x2
	mov	r0, r8
	str	r2, [r0]
	ldr	r1, .L5025+0x2c
	ldrb	r0, [r6]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	bge	.L5018	@cond_branch
	lsl	r0, r2, #0x4
	sub	r0, r0, r2
	mov	r1, #0xa
	bl	__divsi3
	mov	r1, r8
	str	r0, [r1]
.L5018:
	mov	r2, r9
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	b	.L5010
.L5026:
	.align	2, 0
.L5025:
	.word	gBattleCommunication
	.word	0x4b7
	.word	gBattleTextBuff1
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattleMoveDamage
	.word	gBaseStats
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gProtectStructs
.L5017:
	mov	r0, r8
	cmp	r0, #0
	beq	.L5020	@cond_branch
	ldr	r3, .L5027
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	b	.L5022
.L5028:
	.align	2, 0
.L5027:
	.word	gBattlescriptCurrInstr
.L5020:
	ldr	r3, .L5029
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
.L5022:
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L5010:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5030:
	.align	2, 0
.L5029:
	.word	gBattlescriptCurrInstr
.Lfe248:
	.size	 Cmd_trydobeatup,.Lfe248-Cmd_trydobeatup
	.align	2, 0
	.type	 Cmd_setsemiinvulnerablebit,function
	.thumb_func
Cmd_setsemiinvulnerablebit:
	push	{lr}
	ldr	r0, .L5044
	ldrh	r1, [r0]
	ldr	r0, .L5044+0x4
	cmp	r1, r0
	beq	.L5036	@cond_branch
	cmp	r1, r0
	bgt	.L5041	@cond_branch
	cmp	r1, #0x13
	beq	.L5034	@cond_branch
	cmp	r1, #0x5b
	beq	.L5035	@cond_branch
	b	.L5032
.L5045:
	.align	2, 0
.L5044:
	.word	gCurrentMove
	.word	0x123
.L5041:
	ldr	r0, .L5046
	cmp	r1, r0
	beq	.L5038	@cond_branch
	cmp	r1, r0
	bgt	.L5042	@cond_branch
	sub	r0, r0, #0x7f
	cmp	r1, r0
	beq	.L5034	@cond_branch
	b	.L5032
.L5047:
	.align	2, 0
.L5046:
	.word	0x1d3
.L5042:
	ldr	r0, .L5048
	cmp	r1, r0
	beq	.L5038	@cond_branch
	b	.L5032
.L5049:
	.align	2, 0
.L5048:
	.word	0x236
.L5034:
	ldr	r2, .L5050
	ldr	r0, .L5050+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x40
	b	.L5043
.L5051:
	.align	2, 0
.L5050:
	.word	gStatuses3
	.word	gBattlerAttacker
.L5035:
	ldr	r2, .L5052
	ldr	r0, .L5052+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x80
	b	.L5043
.L5053:
	.align	2, 0
.L5052:
	.word	gStatuses3
	.word	gBattlerAttacker
.L5036:
	ldr	r2, .L5054
	ldr	r0, .L5054+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0xb
	b	.L5043
.L5055:
	.align	2, 0
.L5054:
	.word	gStatuses3
	.word	gBattlerAttacker
.L5038:
	ldr	r2, .L5056
	ldr	r0, .L5056+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x11
.L5043:
	orr	r0, r0, r2
	str	r0, [r1]
.L5032:
	ldr	r1, .L5056+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L5057:
	.align	2, 0
.L5056:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe249:
	.size	 Cmd_setsemiinvulnerablebit,.Lfe249-Cmd_setsemiinvulnerablebit
	.align	2, 0
	.type	 Cmd_clearsemiinvulnerablebit,function
	.thumb_func
Cmd_clearsemiinvulnerablebit:
	ldr	r2, .L5059
	ldr	r0, .L5059+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	ldr	r2, .L5059+0x8
	and	r0, r0, r2
	str	r0, [r1]
	ldr	r1, .L5059+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L5060:
	.align	2, 0
.L5059:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	-0x10400c1
	.word	gBattlescriptCurrInstr
.Lfe250:
	.size	 Cmd_clearsemiinvulnerablebit,.Lfe250-Cmd_clearsemiinvulnerablebit
	.align	2, 0
	.type	 Cmd_setminimize,function
	.thumb_func
Cmd_setminimize:
	push	{lr}
	ldr	r0, .L5063
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L5062	@cond_branch
	ldr	r2, .L5063+0x4
	ldr	r0, .L5063+0x8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	orr	r0, r0, r2
	str	r0, [r1]
.L5062:
	ldr	r1, .L5063+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L5064:
	.align	2, 0
.L5063:
	.word	gHitMarker
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe251:
	.size	 Cmd_setminimize,.Lfe251-Cmd_setminimize
	.align	2, 0
	.type	 Cmd_sethail,function
	.thumb_func
Cmd_sethail:
	push	{lr}
	ldr	r0, .L5069
	ldrb	r0, [r0]
	mov	r1, #0x4
	mov	r2, #0x0
	bl	TryChangeBattleWeather
	cmp	r0, #0
	bne	.L5066	@cond_branch
	ldr	r2, .L5069+0x4
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L5069+0x8
	mov	r0, #0x2
	b	.L5068
.L5070:
	.align	2, 0
.L5069:
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L5066:
	ldr	r1, .L5071
	mov	r0, #0x5
.L5068:
	strb	r0, [r1, #0x5]
	ldr	r1, .L5071+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L5072:
	.align	2, 0
.L5071:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe252:
	.size	 Cmd_sethail,.Lfe252-Cmd_sethail
	.align	2, 0
	.type	 Cmd_jumpifattackandspecialattackcannotfall,function
	.thumb_func
Cmd_jumpifattackandspecialattackcannotfall:
	push	{r4, lr}
	ldr	r2, .L5076
	ldr	r0, .L5076+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r0, r2
	mov	r0, #0x19
	ldrsb	r0, [r1, r0]
	add	r3, r2, #0
	cmp	r0, #0
	bne	.L5074	@cond_branch
	mov	r0, #0x1c
	ldrsb	r0, [r1, r0]
	cmp	r0, #0
	bne	.L5074	@cond_branch
	ldr	r0, .L5076+0x8
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	beq	.L5074	@cond_branch
	ldr	r3, .L5076+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5075
.L5077:
	.align	2, 0
.L5076:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L5074:
	ldr	r4, .L5078
	ldr	r0, .L5078+0x4
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r2, .L5078+0x8
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x2a]
	str	r0, [r2]
	ldr	r1, .L5078+0xc
	mov	r0, #0x0
	bl	BtlController_EmitHealthBarUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L5078+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5075:
	pop	{r4}
	pop	{r0}
	bx	r0
.L5079:
	.align	2, 0
.L5078:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	0x7fff
	.word	gBattlescriptCurrInstr
.Lfe253:
	.size	 Cmd_jumpifattackandspecialattackcannotfall,.Lfe253-Cmd_jumpifattackandspecialattackcannotfall
	.align	2, 0
	.type	 Cmd_setforcedtarget,function
	.thumb_func
Cmd_setforcedtarget:
	push	{r4, r5, lr}
	ldr	r4, .L5081
	ldrb	r0, [r4]
	bl	GetBattlerSide
	ldr	r5, .L5081+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	mov	r0, #0x1
	strb	r0, [r1, #0x8]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r4]
	strb	r0, [r1, #0x9]
	ldr	r1, .L5081+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L5082:
	.align	2, 0
.L5081:
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gBattlescriptCurrInstr
.Lfe254:
	.size	 Cmd_setforcedtarget,.Lfe254-Cmd_setforcedtarget
	.align	2, 0
	.type	 Cmd_setcharge,function
	.thumb_func
Cmd_setcharge:
	push	{r4, lr}
	ldr	r0, .L5084
	ldr	r3, .L5084+0x4
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r4, .L5084+0x8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r2, [r0, #0x15]
	mov	r1, #0x10
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0, #0x15]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r2, [r0, #0x15]
	mov	r1, #0xf
	and	r1, r1, r2
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0, #0x15]
	ldr	r1, .L5084+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L5085:
	.align	2, 0
.L5084:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
.Lfe255:
	.size	 Cmd_setcharge,.Lfe255-Cmd_setcharge
	.align	2, 0
	.type	 Cmd_callterrainattack,function
	.thumb_func
Cmd_callterrainattack:
	push	{r4, lr}
	ldr	r2, .L5087
	ldr	r0, [r2]
	ldr	r1, .L5087+0x4
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L5087+0x8
	ldr	r1, .L5087+0xc
	ldr	r0, .L5087+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r4]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L5087+0x14
	strb	r0, [r1]
	ldr	r3, .L5087+0x18
	ldr	r2, .L5087+0x1c
	ldrh	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	bl	BattleScriptPush
	ldr	r1, .L5087+0x20
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L5088:
	.align	2, 0
.L5087:
	.word	gHitMarker
	.word	-0x401
	.word	gCurrentMove
	.word	sNaturePowerMoves
	.word	gBattleTerrain
	.word	gBattlerTarget
	.word	gBattleScriptsForMoveEffects
	.word	gBattleMoves
	.word	gBattlescriptCurrInstr
.Lfe256:
	.size	 Cmd_callterrainattack,.Lfe256-Cmd_callterrainattack
	.align	2, 0
	.type	 Cmd_cureifburnedparalysedorpoisoned,function
	.thumb_func
Cmd_cureifburnedparalysedorpoisoned:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L5092
	ldr	r3, .L5092+0x4
	ldrb	r0, [r3]
	mov	r6, #0x5c
	mul	r0, r0, r6
	add	r5, r1, #0
	add	r5, r5, #0x50
	add	r2, r0, r5
	ldr	r0, [r2]
	mov	r1, #0xd8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L5090	@cond_branch
	mov	r0, #0x0
	str	r0, [r2]
	ldr	r1, .L5092+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	ldr	r4, .L5092+0xc
	ldrb	r0, [r3]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L5091
.L5093:
	.align	2, 0
.L5092:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.L5090:
	ldr	r3, .L5094
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L5091:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L5095:
	.align	2, 0
.L5094:
	.word	gBattlescriptCurrInstr
.Lfe257:
	.size	 Cmd_cureifburnedparalysedorpoisoned,.Lfe257-Cmd_cureifburnedparalysedorpoisoned
	.align	2, 0
	.type	 Cmd_settorment,function
	.thumb_func
Cmd_settorment:
	push	{lr}
	ldr	r1, .L5099
	ldr	r0, .L5099+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x18
	cmp	r1, #0
	bge	.L5097	@cond_branch
	ldr	r3, .L5099+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5098
.L5100:
	.align	2, 0
.L5099:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L5097:
	orr	r1, r1, r2
	str	r1, [r0]
	ldr	r1, .L5101
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5098:
	pop	{r0}
	bx	r0
.L5102:
	.align	2, 0
.L5101:
	.word	gBattlescriptCurrInstr
.Lfe258:
	.size	 Cmd_settorment,.Lfe258-Cmd_settorment
	.align	2, 0
	.type	 Cmd_jumpifnodamage,function
	.thumb_func
Cmd_jumpifnodamage:
	push	{lr}
	ldr	r2, .L5107
	ldr	r0, .L5107+0x4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r0, r2, #0x4
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L5105	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L5104	@cond_branch
.L5105:
	ldr	r1, .L5107+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L5106
.L5108:
	.align	2, 0
.L5107:
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L5104:
	ldr	r3, .L5109
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L5106:
	pop	{r0}
	bx	r0
.L5110:
	.align	2, 0
.L5109:
	.word	gBattlescriptCurrInstr
.Lfe259:
	.size	 Cmd_jumpifnodamage,.Lfe259-Cmd_jumpifnodamage
	.align	2, 0
	.type	 Cmd_settaunt,function
	.thumb_func
Cmd_settaunt:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L5115
	ldr	r6, .L5115+0x4
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	ldrb	r0, [r0, #0x16]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bne	.L5112	@cond_branch
	mov	r5, #0x4
	add	r0, r1, #0
	bl	GetBattlerTurnOrderNum
	add	r4, r0, #0
	ldr	r0, .L5115+0x8
	ldrb	r0, [r0]
	bl	GetBattlerTurnOrderNum
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bls	.L5113	@cond_branch
	mov	r5, #0x3
.L5113:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	lsl	r1, r5, #0x4
	orr	r1, r1, r5
	strb	r1, [r0, #0x16]
	ldr	r1, .L5115+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L5114
.L5116:
	.align	2, 0
.L5115:
	.word	gDisableStructs
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L5112:
	ldr	r3, .L5117
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L5114:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5118:
	.align	2, 0
.L5117:
	.word	gBattlescriptCurrInstr
.Lfe260:
	.size	 Cmd_settaunt,.Lfe260-Cmd_settaunt
	.align	2, 0
	.type	 Cmd_trysethelpinghand,function
	.thumb_func
Cmd_trysethelpinghand:
	push	{r4, lr}
	ldr	r4, .L5122
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r3, .L5122+0x4
	strb	r0, [r3]
	ldr	r0, .L5122+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L5120	@cond_branch
	ldr	r0, .L5122+0xc
	ldrb	r1, [r0]
	ldr	r2, .L5122+0x10
	ldrb	r3, [r3]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L5120	@cond_branch
	ldr	r1, .L5122+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L5120	@cond_branch
	lsl	r0, r3, #0x4
	add	r2, r0, r1
	ldrb	r1, [r2]
	lsl	r0, r1, #0x19
	cmp	r0, #0
	blt	.L5120	@cond_branch
	mov	r0, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L5122+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L5121
.L5123:
	.align	2, 0
.L5122:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.L5120:
	ldr	r3, .L5124
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L5121:
	pop	{r4}
	pop	{r0}
	bx	r0
.L5125:
	.align	2, 0
.L5124:
	.word	gBattlescriptCurrInstr
.Lfe261:
	.size	 Cmd_trysethelpinghand,.Lfe261-Cmd_trysethelpinghand
	.align	2, 0
	.type	 Cmd_tryswapitems,function
	.thumb_func
Cmd_tryswapitems:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, .L5146
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L5134	@cond_branch
	ldr	r0, .L5146+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L5127	@cond_branch
	ldr	r0, [r4]
	ldr	r1, .L5146+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L5134	@cond_branch
.L5127:
	ldr	r6, .L5146+0x4
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r7, .L5146+0xc
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L5146
	ldr	r0, [r0]
	ldr	r1, .L5146+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L5130	@cond_branch
	ldr	r0, .L5146+0x10
	add	r2, r0, #0
	add	r2, r2, #0x19
	add	r0, r4, r2
	ldrb	r1, [r0]
	ldr	r4, .L5146+0x14
	ldr	r3, .L5146+0x18
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L5134	@cond_branch
	add	r0, r5, r2
	ldrb	r1, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L5134	@cond_branch
.L5130:
	ldr	r0, .L5146+0x1c
	mov	r9, r0
	ldr	r1, .L5146+0x4
	mov	r8, r1
	ldrb	r2, [r1]
	mov	r5, #0x5c
	mov	r0, r2
	mul	r0, r0, r5
	mov	r3, r9
	add	r1, r0, r3
	ldrh	r0, [r1, #0x30]
	cmp	r0, #0
	bne	.L5135	@cond_branch
	ldr	r0, .L5146+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r9
	ldrh	r0, [r0, #0x30]
	cmp	r0, #0
	beq	.L5134	@cond_branch
.L5135:
	ldrh	r1, [r1, #0x30]
	add	r0, r2, #0
	bl	CanBattlerGetOrLoseItem
	cmp	r0, #0
	beq	.L5134	@cond_branch
	mov	r4, r8
	ldrb	r0, [r4]
	ldr	r7, .L5146+0xc
	ldrb	r1, [r7]
	mul	r1, r1, r5
	add	r1, r1, r9
	ldrh	r1, [r1, #0x30]
	bl	CanBattlerGetOrLoseItem
	cmp	r0, #0
	beq	.L5134	@cond_branch
	ldrb	r0, [r7]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r9
	ldrh	r1, [r1, #0x30]
	bl	CanBattlerGetOrLoseItem
	cmp	r0, #0
	beq	.L5134	@cond_branch
	ldrb	r0, [r7]
	ldrb	r1, [r4]
	mul	r1, r1, r5
	add	r1, r1, r9
	ldrh	r1, [r1, #0x30]
	bl	CanBattlerGetOrLoseItem
	cmp	r0, #0
	bne	.L5133	@cond_branch
.L5134:
	ldr	r3, .L5146+0x20
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5129
.L5147:
	.align	2, 0
.L5146:
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	0xa3f0902
	.word	gBattlerTarget
	.word	gWishFutureKnock
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.L5133:
	ldrb	r0, [r7]
	mul	r0, r0, r5
	mov	r1, r9
	add	r3, r0, r1
	ldrh	r2, [r3, #0x20]
	cmp	r2, #0x3c
	bne	.L5137	@cond_branch
	ldr	r1, .L5148
	ldr	r0, .L5148+0x4
	str	r0, [r1]
	ldr	r1, .L5148+0x8
	strh	r2, [r1]
	ldrb	r0, [r7]
	ldrh	r1, [r1]
	bl	RecordAbilityBattle
	b	.L5129
.L5149:
	.align	2, 0
.L5148:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StickyHoldActivates
	.word	gLastUsedAbility
.L5137:
	mov	r4, r8
	ldrb	r2, [r4]
	lsl	r0, r2, #0x1
	add	r0, r0, #0xcc
	ldr	r4, .L5150
	ldr	r1, [r4]
	add	r6, r1, r0
	mov	r0, r2
	mul	r0, r0, r5
	add	r0, r0, r9
	ldrh	r0, [r0, #0x30]
	mov	sl, r0
	ldrh	r0, [r3, #0x30]
	strh	r0, [r6]
	mov	r1, r8
	ldrb	r0, [r1]
	mul	r0, r0, r5
	add	r0, r0, r9
	mov	r2, #0x0
	strh	r2, [r0, #0x30]
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r0, r0, r9
	mov	r3, sl
	strh	r3, [r0, #0x30]
	ldr	r4, .L5150+0x4
	ldrb	r0, [r1]
	strb	r0, [r4]
	str	r6, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	mov	r1, r8
	ldrb	r0, [r1]
	bl	MarkBattlerForControllerExec
	ldrb	r0, [r7]
	strb	r0, [r4]
	ldrb	r0, [r7]
	mul	r0, r0, r5
	mov	r1, r9
	add	r1, r1, #0x30
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
	ldr	r2, .L5150
	ldr	r1, [r2]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r1, r1, #0xc4
	add	r0, r1, r0
	mov	r3, #0x0
	strh	r3, [r0]
	mov	r4, r8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	strh	r3, [r1]
	ldr	r1, .L5150+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	ldr	r1, .L5150+0xc
	mov	r3, #0xfd
	strb	r3, [r1]
	mov	r2, #0xa
	strb	r2, [r1, #0x1]
	ldrh	r0, [r6]
	strb	r0, [r1, #0x2]
	ldrh	r0, [r6]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L5150+0x10
	strb	r3, [r1]
	strb	r2, [r1, #0x1]
	mov	r0, sl
	strb	r0, [r1, #0x2]
	mov	r2, sl
	lsr	r0, r2, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r1, #0x4]
	cmp	r2, #0
	beq	.L5144	@cond_branch
	ldrh	r0, [r6]
	cmp	r0, #0
	beq	.L5141	@cond_branch
	ldr	r1, .L5150+0x14
	mov	r0, #0x2
	b	.L5145
.L5151:
	.align	2, 0
.L5150:
	.word	gBattleStruct
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gBattleCommunication
.L5144:
	ldrh	r0, [r6]
	cmp	r0, #0
	beq	.L5141	@cond_branch
	mov	r3, r8
	ldrb	r0, [r3]
	bl	GetBattlerAbility
	cmp	r0, #0x54
	bne	.L5142	@cond_branch
	ldr	r0, .L5152
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	mov	r4, r8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x4
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L5142	@cond_branch
	mov	r0, #0x5
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r1]
.L5142:
	ldr	r1, .L5152+0x4
	mov	r0, #0x0
	b	.L5145
.L5153:
	.align	2, 0
.L5152:
	.word	gBattleResources
	.word	gBattleCommunication
.L5141:
	ldr	r0, .L5154
	ldrb	r0, [r0]
	bl	CheckSetUnburden
	ldr	r1, .L5154+0x4
	mov	r0, #0x1
.L5145:
	strb	r0, [r1, #0x5]
.L5129:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5155:
	.align	2, 0
.L5154:
	.word	gBattlerAttacker
	.word	gBattleCommunication
.Lfe262:
	.size	 Cmd_tryswapitems,.Lfe262-Cmd_tryswapitems
	.align	2, 0
	.type	 Cmd_trycopyability,function
	.thumb_func
Cmd_trycopyability:
	push	{r4, lr}
	ldr	r2, .L5164
	ldr	r3, .L5164+0x4
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x20]
	add	r4, r2, #0
	cmp	r0, #0x19
	beq	.L5160	@cond_branch
	cmp	r0, #0x19
	bgt	.L5163	@cond_branch
	cmp	r0, #0
	beq	.L5160	@cond_branch
	b	.L5161
.L5165:
	.align	2, 0
.L5164:
	.word	gBattleMons
	.word	gBattlerTarget
.L5163:
	cmp	r0, #0xd1
	bne	.L5161	@cond_branch
.L5160:
	ldr	r3, .L5166
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5157
.L5167:
	.align	2, 0
.L5166:
	.word	gBattlescriptCurrInstr
.L5161:
	ldr	r0, .L5168
	ldrb	r0, [r0]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r4
	ldrb	r0, [r3]
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0, #0x20]
	strh	r0, [r1, #0x20]
	ldr	r1, .L5168+0x4
	ldrb	r0, [r3]
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0, #0x20]
	strh	r0, [r1]
	ldr	r1, .L5168+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5157:
	pop	{r4}
	pop	{r0}
	bx	r0
.L5169:
	.align	2, 0
.L5168:
	.word	gBattlerAttacker
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
.Lfe263:
	.size	 Cmd_trycopyability,.Lfe263-Cmd_trycopyability
	.align	2, 0
	.type	 Cmd_trywish,function
	.thumb_func
Cmd_trywish:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L5183
	ldr	r2, [r7]
	ldrb	r3, [r2, #0x1]
	cmp	r3, #0
	beq	.L5172	@cond_branch
	cmp	r3, #0x1
	beq	.L5175	@cond_branch
	b	.L5171
.L5184:
	.align	2, 0
.L5183:
	.word	gBattlescriptCurrInstr
.L5172:
	ldr	r1, .L5185
	ldr	r4, .L5185+0x4
	add	r0, r1, #0
	add	r0, r0, #0x10
	ldrb	r5, [r4]
	add	r3, r0, r5
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L5182	@cond_branch
	mov	r0, #0x2
	strb	r0, [r3]
	ldrb	r0, [r4]
	add	r1, r1, #0x14
	add	r1, r0, r1
	ldr	r2, .L5185+0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldr	r0, [r7]
	add	r0, r0, #0x6
	b	.L5181
.L5186:
	.align	2, 0
.L5185:
	.word	gWishFutureKnock
	.word	gBattlerAttacker
	.word	gBattlerPartyIndexes
.L5175:
	ldr	r1, .L5187
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
	ldr	r4, .L5187+0x4
	ldrb	r0, [r4]
	strb	r0, [r1, #0x2]
	ldr	r0, .L5187+0x8
	add	r0, r0, #0x14
	ldrb	r5, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L5187+0xc
	ldr	r6, .L5187+0x10
	ldrb	r0, [r4]
	mov	r5, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0
	bne	.L5176	@cond_branch
	str	r3, [r1]
.L5176:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r1, [r0, #0x2a]
	ldrh	r0, [r0, #0x2e]
	cmp	r1, r0
	bne	.L5177	@cond_branch
.L5182:
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r7]
	b	.L5171
.L5188:
	.align	2, 0
.L5187:
	.word	gBattleTextBuff1
	.word	gBattlerTarget
	.word	gWishFutureKnock
	.word	gBattleMoveDamage
	.word	gBattleMons
.L5177:
	add	r0, r2, #0x6
.L5181:
	str	r0, [r7]
.L5171:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe264:
	.size	 Cmd_trywish,.Lfe264-Cmd_trywish
	.align	2, 0
	.type	 Cmd_settoxicspikes,function
	.thumb_func
Cmd_settoxicspikes:
	push	{lr}
	ldr	r0, .L5192
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L5192+0x4
	lsl	r2, r0, #0x2
	add	r0, r2, r0
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0xb]
	cmp	r0, #0x1
	bls	.L5190	@cond_branch
	ldr	r3, .L5192+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5191
.L5193:
	.align	2, 0
.L5192:
	.word	gBattlerTarget
	.word	gSideTimers
	.word	gBattlescriptCurrInstr
.L5190:
	add	r0, r0, #0x1
	strb	r0, [r1, #0xb]
	ldr	r1, .L5194
	add	r1, r2, r1
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r1, .L5194+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5191:
	pop	{r0}
	bx	r0
.L5195:
	.align	2, 0
.L5194:
	.word	gSideStatuses
	.word	gBattlescriptCurrInstr
.Lfe265:
	.size	 Cmd_settoxicspikes,.Lfe265-Cmd_settoxicspikes
	.align	2, 0
	.type	 Cmd_setgastroacid,function
	.thumb_func
Cmd_setgastroacid:
	push	{lr}
	ldr	r3, .L5211
	ldr	r2, .L5211+0x4
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x20]
	cmp	r0, #0xd3
	bgt	.L5209	@cond_branch
	cmp	r0, #0xd0
	bge	.L5206	@cond_branch
	cmp	r0, #0xb0
	beq	.L5206	@cond_branch
	cmp	r0, #0xb0
	bgt	.L5210	@cond_branch
	cmp	r0, #0x79
	beq	.L5206	@cond_branch
	b	.L5207
.L5212:
	.align	2, 0
.L5211:
	.word	gBattleMons
	.word	gBattlerTarget
.L5210:
	cmp	r0, #0xc5
	beq	.L5206	@cond_branch
	b	.L5207
.L5209:
	cmp	r0, #0xd5
	beq	.L5206	@cond_branch
	cmp	r0, #0xe1
	bne	.L5207	@cond_branch
.L5206:
	ldr	r3, .L5213
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5197
.L5214:
	.align	2, 0
.L5213:
	.word	gBattlescriptCurrInstr
.L5207:
	ldr	r0, .L5215
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r1, .L5215+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5197:
	pop	{r0}
	bx	r0
.L5216:
	.align	2, 0
.L5215:
	.word	gStatuses3
	.word	gBattlescriptCurrInstr
.Lfe266:
	.size	 Cmd_setgastroacid,.Lfe266-Cmd_setgastroacid
	.align	2, 0
	.type	 Cmd_setyawn,function
	.thumb_func
Cmd_setyawn:
	push	{r4, lr}
	ldr	r1, .L5221
	ldr	r0, .L5221+0x4
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r4, r0, r1
	ldr	r2, [r4]
	mov	r0, #0xc0
	lsl	r0, r0, #0x5
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L5219	@cond_branch
	ldr	r1, .L5221+0x8
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L5218	@cond_branch
.L5219:
	ldr	r3, .L5221+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5220
.L5222:
	.align	2, 0
.L5221:
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.L5218:
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	orr	r2, r2, r0
	str	r2, [r4]
	ldr	r1, .L5223
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5220:
	pop	{r4}
	pop	{r0}
	bx	r0
.L5224:
	.align	2, 0
.L5223:
	.word	gBattlescriptCurrInstr
.Lfe267:
	.size	 Cmd_setyawn,.Lfe267-Cmd_setyawn
	.align	2, 0
	.type	 Cmd_setdamagetohealthdifference,function
	.thumb_func
Cmd_setdamagetohealthdifference:
	push	{lr}
	ldr	r2, .L5228
	ldr	r0, .L5228+0x4
	ldrb	r0, [r0]
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r3, r0, r2
	ldr	r0, .L5228+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r1
	add	r1, r0, r2
	ldrh	r0, [r3, #0x2a]
	ldrh	r2, [r1, #0x2a]
	cmp	r0, r2
	bhi	.L5226	@cond_branch
	ldr	r3, .L5228+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5227
.L5229:
	.align	2, 0
.L5228:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L5226:
	ldr	r2, .L5230
	ldrh	r0, [r3, #0x2a]
	ldrh	r1, [r1, #0x2a]
	sub	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L5230+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5227:
	pop	{r0}
	bx	r0
.L5231:
	.align	2, 0
.L5230:
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.Lfe268:
	.size	 Cmd_setdamagetohealthdifference,.Lfe268-Cmd_setdamagetohealthdifference
	.align	2, 0
	.type	 HandleRoomMove,function
	.thumb_func
HandleRoomMove:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r1, .L5235
	ldr	r3, [r1]
	add	r0, r3, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L5233	@cond_branch
	bic	r3, r3, r4
	str	r3, [r1]
	mov	r0, #0x0
	strb	r0, [r5]
	ldr	r1, .L5235+0x4
	add	r0, r2, #0x1
	strb	r0, [r1, #0x5]
	b	.L5234
.L5236:
	.align	2, 0
.L5235:
	.word	gFieldStatuses
	.word	gBattleCommunication
.L5233:
	orr	r3, r3, r4
	str	r3, [r1]
	mov	r0, #0x5
	strb	r0, [r5]
	ldr	r0, .L5237
	strb	r2, [r0, #0x5]
.L5234:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L5238:
	.align	2, 0
.L5237:
	.word	gBattleCommunication
.Lfe269:
	.size	 HandleRoomMove,.Lfe269-HandleRoomMove
	.align	2, 0
	.type	 Cmd_setroom,function
	.thumb_func
Cmd_setroom:
	push	{lr}
	ldr	r2, .L5247
	ldr	r0, .L5247+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, #0xf4
	beq	.L5242	@cond_branch
	cmp	r0, #0xf4
	bgt	.L5246	@cond_branch
	cmp	r0, #0xf3
	beq	.L5241	@cond_branch
	b	.L5244
.L5248:
	.align	2, 0
.L5247:
	.word	gBattleMoves
	.word	gCurrentMove
.L5246:
	cmp	r0, #0xf5
	beq	.L5243	@cond_branch
	b	.L5244
.L5241:
	ldr	r1, .L5249
	mov	r0, #0x2
	mov	r2, #0x0
	bl	HandleRoomMove
	b	.L5240
.L5250:
	.align	2, 0
.L5249:
	.word	gFieldTimers+0x4
.L5242:
	ldr	r1, .L5251
	mov	r0, #0x4
	mov	r2, #0x2
	bl	HandleRoomMove
	b	.L5240
.L5252:
	.align	2, 0
.L5251:
	.word	gFieldTimers+0x2
.L5243:
	ldr	r1, .L5253
	mov	r0, #0x1
	mov	r2, #0x4
	bl	HandleRoomMove
	b	.L5240
.L5254:
	.align	2, 0
.L5253:
	.word	gFieldTimers+0x3
.L5244:
	ldr	r1, .L5255
	mov	r0, #0x6
	strb	r0, [r1, #0x5]
.L5240:
	ldr	r1, .L5255+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L5256:
	.align	2, 0
.L5255:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe270:
	.size	 Cmd_setroom,.Lfe270-Cmd_setroom
	.align	2, 0
	.type	 Cmd_tryswapabilities,function
	.thumb_func
Cmd_tryswapabilities:
	push	{r4, r5, lr}
	ldr	r2, .L5275
	ldr	r3, .L5275+0x4
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x20]
	add	r4, r2, #0
	cmp	r0, #0x19
	beq	.L5274	@cond_branch
	cmp	r0, #0x19
	bgt	.L5264	@cond_branch
	cmp	r0, #0
	beq	.L5274	@cond_branch
	b	.L5258
.L5276:
	.align	2, 0
.L5275:
	.word	gBattleMons
	.word	gBattlerAttacker
.L5264:
	cmp	r0, #0xd1
	beq	.L5274	@cond_branch
.L5258:
	ldr	r2, .L5277
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0, #0x20]
	add	r5, r2, #0
	cmp	r0, #0x19
	beq	.L5274	@cond_branch
	cmp	r0, #0x19
	bgt	.L5271	@cond_branch
	cmp	r0, #0
	beq	.L5274	@cond_branch
	b	.L5265
.L5278:
	.align	2, 0
.L5277:
	.word	gBattlerTarget
.L5271:
	cmp	r0, #0xd1
	beq	.L5274	@cond_branch
.L5265:
	ldr	r0, .L5279
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L5272	@cond_branch
.L5274:
	ldr	r3, .L5279+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5257
.L5280:
	.align	2, 0
.L5279:
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
.L5272:
	ldrb	r0, [r3]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r4
	ldrh	r3, [r1, #0x20]
	ldrb	r0, [r5]
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0, #0x20]
	strh	r0, [r1, #0x20]
	ldrb	r0, [r5]
	mul	r0, r0, r2
	add	r0, r0, r4
	strh	r3, [r0, #0x20]
	ldr	r1, .L5281
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5257:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L5282:
	.align	2, 0
.L5281:
	.word	gBattlescriptCurrInstr
.Lfe271:
	.size	 Cmd_tryswapabilities,.Lfe271-Cmd_tryswapabilities
	.align	2, 0
	.type	 Cmd_tryimprison,function
	.thumb_func
Cmd_tryimprison:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r1, .L5309
	ldr	r4, .L5309+0x4
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L5284	@cond_branch
	b	.L5307
.L5310:
	.align	2, 0
.L5309:
	.word	gStatuses3
	.word	gBattlerAttacker
.L5306:
	ldr	r0, .L5311
	mov	r2, r9
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r1, .L5311+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L5287
.L5312:
	.align	2, 0
.L5311:
	.word	gStatuses3
	.word	gBattlescriptCurrInstr
.L5284:
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r0, [r4]
	bl	PressurePPLoseOnUsingImprison
	mov	r6, #0x0
	b	.L5308
.L5289:
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r8, r0
	beq	.L5288	@cond_branch
	mov	r4, #0x0
	ldr	r7, .L5313
	mov	r9, r7
	ldr	r0, .L5313+0x4
	mov	ip, r0
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r2, ip
	add	r2, r2, #0xc
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r3, r0, r2
	mov	r5, r6
	mul	r5, r5, r1
.L5294:
	mov	r2, #0x0
	ldrh	r1, [r3]
	mov	r0, ip
	add	r0, r0, #0xc
	add	r0, r5, r0
.L5298:
	ldrh	r7, [r0]
	cmp	r1, r7
	bne	.L5297	@cond_branch
	cmp	r1, #0
	bne	.L5296	@cond_branch
.L5297:
	add	r0, r0, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L5298	@cond_branch
.L5296:
	cmp	r2, #0x4
	bne	.L5292	@cond_branch
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L5294	@cond_branch
.L5292:
	cmp	r4, #0x4
	bne	.L5306	@cond_branch
.L5288:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L5308:
	ldr	r0, .L5313+0x8
	ldrb	r0, [r0]
	cmp	r6, r0
	bcc	.L5289	@cond_branch
.L5287:
	ldr	r0, .L5313+0x8
	ldrb	r0, [r0]
	cmp	r6, r0
	bne	.L5285	@cond_branch
.L5307:
	ldr	r3, .L5313+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L5285:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5314:
	.align	2, 0
.L5313:
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
.Lfe272:
	.size	 Cmd_tryimprison,.Lfe272-Cmd_tryimprison
	.align	2, 0
	.type	 Cmd_setstealthrock,function
	.thumb_func
Cmd_setstealthrock:
	push	{r4, r5, lr}
	ldr	r0, .L5318
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L5318+0x4
	lsl	r4, r5, #0x2
	add	r2, r4, r0
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x7
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L5316	@cond_branch
	ldr	r3, .L5318+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5317
.L5319:
	.align	2, 0
.L5318:
	.word	gBattlerTarget
	.word	gSideStatuses
	.word	gBattlescriptCurrInstr
.L5316:
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r1, .L5320
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0, #0xc]
	ldr	r1, .L5320+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5317:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L5321:
	.align	2, 0
.L5320:
	.word	gSideTimers
	.word	gBattlescriptCurrInstr
.Lfe273:
	.size	 Cmd_setstealthrock,.Lfe273-Cmd_setstealthrock
	.align	2, 0
	.type	 Cmd_setuserstatus3,function
	.thumb_func
Cmd_setuserstatus3:
	push	{r4, r5, r6, lr}
	ldr	r6, .L5327
	ldr	r2, [r6]
	ldrb	r3, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldr	r1, .L5327+0x4
	ldr	r5, .L5327+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldr	r1, [r4]
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L5323	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r6]
	b	.L5324
.L5328:
	.align	2, 0
.L5327:
	.word	gBattlescriptCurrInstr
	.word	gStatuses3
	.word	gBattlerAttacker
.L5323:
	orr	r1, r1, r3
	str	r1, [r4]
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L5325	@cond_branch
	ldr	r2, .L5329
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x5
	strb	r1, [r0, #0x1f]
.L5325:
	mov	r0, #0x80
	lsl	r0, r0, #0x16
	and	r3, r3, r0
	cmp	r3, #0
	beq	.L5326	@cond_branch
	ldr	r2, .L5329
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	add	r0, r0, #0x22
	mov	r1, #0x2
	strb	r1, [r0]
.L5326:
	ldr	r0, [r6]
	add	r0, r0, #0x9
	str	r0, [r6]
.L5324:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L5330:
	.align	2, 0
.L5329:
	.word	gDisableStructs
.Lfe274:
	.size	 Cmd_setuserstatus3,.Lfe274-Cmd_setuserstatus3
	.align	2, 0
	.type	 Cmd_assistattackselect,function
	.thumb_func
Cmd_assistattackselect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r7, #0x0
	ldr	r0, .L5350
	ldr	r0, [r0]
	add	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, .L5350+0x4
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	ldr	r0, .L5350+0x8
	mov	r9, r0
	cmp	r1, #0
	beq	.L5332	@cond_branch
	ldr	r1, .L5350+0xc
	mov	r9, r1
.L5332:
	mov	r2, #0x0
.L5337:
	ldr	r1, .L5350+0x10
	ldr	r0, .L5350+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r1, r2, #0x1
	mov	r8, r1
	ldrh	r0, [r0]
	cmp	r2, r0
	beq	.L5336	@cond_branch
	mov	r0, #0x64
	mov	r6, r2
	mul	r6, r6, r0
	mov	r2, r9
	add	r4, r2, r6
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L5336	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L5350+0x14
	cmp	r0, r1
	beq	.L5336	@cond_branch
	mov	r5, #0x0
	lsl	r0, r7, #0x1
	mov	r1, sl
	add	r4, r0, r1
.L5344:
	add	r1, r5, #0
	add	r1, r1, #0xd
	mov	r2, r9
	add	r0, r2, r6
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r0, .L5350+0x18
	add	r0, r2, r0
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L5343	@cond_branch
	strh	r2, [r4]
	add	r4, r4, #0x2
	add	r7, r7, #0x1
.L5343:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L5344	@cond_branch
.L5336:
	mov	r2, r8
	cmp	r2, #0x5
	ble	.L5337	@cond_branch
	cmp	r7, #0
	beq	.L5348	@cond_branch
	ldr	r2, .L5350+0x1c
	ldr	r0, [r2]
	ldr	r1, .L5350+0x20
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L5350+0x24
	bl	Random
	mov	r1, #0xff
	and	r1, r1, r0
	mov	r0, r1
	mul	r0, r0, r7
	asr	r0, r0, #0x8
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	strh	r0, [r4]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L5350+0x28
	strb	r0, [r1]
	ldr	r1, .L5350+0x2c
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L5349
.L5351:
	.align	2, 0
.L5350:
	.word	gBattleStruct
	.word	gBattlerAttacker
	.word	gPlayerParty
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
	.word	0x4b7
	.word	sForbiddenMoves
	.word	gHitMarker
	.word	-0x401
	.word	gCalledMove
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L5348:
	ldr	r3, .L5352
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L5349:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5353:
	.align	2, 0
.L5352:
	.word	gBattlescriptCurrInstr
.Lfe275:
	.size	 Cmd_assistattackselect,.Lfe275-Cmd_assistattackselect
	.align	2, 0
	.type	 Cmd_trysetmagiccoat,function
	.thumb_func
Cmd_trysetmagiccoat:
	push	{lr}
	ldr	r1, .L5357
	ldr	r3, .L5357+0x4
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r2, .L5357+0x8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r0, .L5357+0xc
	ldrb	r1, [r0]
	ldr	r0, .L5357+0x10
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L5355	@cond_branch
	ldr	r3, .L5357+0x14
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5356
.L5358:
	.align	2, 0
.L5357:
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gSpecialStatuses
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
.L5355:
	ldr	r0, .L5359
	ldrb	r1, [r3]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x80
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L5359+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5356:
	pop	{r0}
	bx	r0
.L5360:
	.align	2, 0
.L5359:
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe276:
	.size	 Cmd_trysetmagiccoat,.Lfe276-Cmd_trysetmagiccoat
	.align	2, 0
	.type	 Cmd_trysetsnatch,function
	.thumb_func
Cmd_trysetsnatch:
	push	{lr}
	ldr	r2, .L5364
	ldr	r3, .L5364+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r0, .L5364+0x8
	ldrb	r1, [r0]
	ldr	r0, .L5364+0xc
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L5362	@cond_branch
	ldr	r3, .L5364+0x10
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5363
.L5365:
	.align	2, 0
.L5364:
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
.L5362:
	ldr	r0, .L5366
	ldrb	r1, [r3]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	mov	r2, #0x1
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r1, .L5366+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5363:
	pop	{r0}
	bx	r0
.L5367:
	.align	2, 0
.L5366:
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe277:
	.size	 Cmd_trysetsnatch,.Lfe277-Cmd_trysetsnatch
	.align	2, 0
	.type	 Cmd_trygetintimidatetarget,function
	.thumb_func
Cmd_trygetintimidatetarget:
	push	{r4, r5, r6, lr}
	ldr	r4, .L5379
	ldr	r0, .L5379+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xd4
	ldrb	r0, [r0]
	strb	r0, [r4, #0x17]
	ldrb	r0, [r4, #0x17]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L5379+0x8
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x9
	strb	r0, [r1, #0x1]
	ldr	r3, .L5379+0xc
	ldrb	r0, [r4, #0x17]
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r3
	ldrh	r0, [r0, #0x20]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r4, #0x17]
	mul	r0, r0, r2
	add	r0, r0, r3
	ldrh	r0, [r0, #0x20]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r2, .L5379+0x10
	ldr	r1, .L5379+0x14
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L5378	@cond_branch
	add	r4, r2, #0
	ldr	r5, .L5379+0x18
.L5372:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r6
	beq	.L5371	@cond_branch
	ldr	r0, .L5379+0x1c
	ldrb	r1, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	and	r1, r1, r0
	ldr	r2, .L5379+0x14
	cmp	r1, #0
	beq	.L5370	@cond_branch
.L5371:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L5379+0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r1, #0
	ldrb	r1, [r2]
	cmp	r0, r1
	bcc	.L5372	@cond_branch
.L5370:
	ldr	r0, .L5379+0x10
	ldrb	r0, [r0]
	ldrb	r2, [r2]
	cmp	r0, r2
	bcc	.L5376	@cond_branch
.L5378:
	ldr	r3, .L5379+0x20
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5377
.L5380:
	.align	2, 0
.L5379:
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gBattleTextBuff1
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBitTable
	.word	gAbsentBattlerFlags
	.word	gBattlescriptCurrInstr
.L5376:
	ldr	r1, .L5381
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5377:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L5382:
	.align	2, 0
.L5381:
	.word	gBattlescriptCurrInstr
.Lfe278:
	.size	 Cmd_trygetintimidatetarget,.Lfe278-Cmd_trygetintimidatetarget
	.align	2, 0
	.type	 Cmd_switchoutabilities,function
	.thumb_func
Cmd_switchoutabilities:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L5390
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r6, .L5390+0x4
	strb	r0, [r6]
	ldrb	r0, [r6]
	bl	GetBattlerAbility
	cmp	r0, #0x1e
	beq	.L5385	@cond_branch
	cmp	r0, #0x90
	beq	.L5386	@cond_branch
	b	.L5384
.L5391:
	.align	2, 0
.L5390:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.L5385:
	ldr	r3, .L5392
	ldrb	r0, [r6]
	mov	r4, #0x5c
	mul	r0, r0, r4
	add	r3, r3, #0x50
	add	r0, r0, r3
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r2, .L5392+0x4
	ldrb	r1, [r6]
	ldr	r0, .L5392+0x8
	ldr	r0, [r0]
	add	r0, r1, r0
	add	r0, r0, #0x58
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0]
	mov	r0, r1
	mul	r0, r0, r4
	add	r0, r0, r3
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r6]
	bl	MarkBattlerForControllerExec
	b	.L5384
.L5393:
	.align	2, 0
.L5392:
	.word	gBattleMons
	.word	gBitTable
	.word	gBattleStruct
.L5386:
	ldr	r7, .L5394
	ldr	r5, .L5394+0x4
	ldrb	r0, [r6]
	mov	r4, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2e]
	mov	r1, #0x3
	bl	__udivsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [r7]
	ldrb	r1, [r6]
	mul	r1, r1, r4
	add	r1, r1, r5
	ldrh	r1, [r1, #0x2a]
	add	r0, r0, r1
	str	r0, [r7]
	ldrb	r2, [r6]
	mov	r1, r2
	mul	r1, r1, r4
	add	r1, r1, r5
	ldrh	r1, [r1, #0x2e]
	cmp	r0, r1
	ble	.L5387	@cond_branch
	str	r1, [r7]
.L5387:
	ldr	r1, .L5394+0x8
	ldr	r0, .L5394+0xc
	ldr	r0, [r0]
	add	r0, r2, r0
	add	r0, r0, #0x58
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0]
	str	r7, [sp]
	mov	r0, #0x0
	mov	r1, #0x2a
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r6]
	bl	MarkBattlerForControllerExec
.L5384:
	ldr	r1, .L5394+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5395:
	.align	2, 0
.L5394:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBitTable
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
.Lfe279:
	.size	 Cmd_switchoutabilities,.Lfe279-Cmd_switchoutabilities
	.align	2, 0
	.type	 Cmd_jumpifhasnohp,function
	.thumb_func
Cmd_jumpifhasnohp:
	push	{r4, lr}
	ldr	r4, .L5399
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L5399+0x4
	strb	r0, [r1]
	ldr	r2, .L5399+0x8
	ldrb	r1, [r1]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.L5397	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L5398
.L5400:
	.align	2, 0
.L5399:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
.L5397:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L5398:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe280:
	.size	 Cmd_jumpifhasnohp,.Lfe280-Cmd_jumpifhasnohp
	.align	2, 0
	.type	 Cmd_getsecretpowereffect,function
	.thumb_func
Cmd_getsecretpowereffect:
	push	{lr}
	ldr	r0, .L5416
	ldrb	r0, [r0]
	cmp	r0, #0xb
	bhi	.L5413	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L5416+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L5417:
	.align	2, 0
.L5416:
	.word	gBattleTerrain
	.word	.L5414
	.align	2, 0
	.align	2, 0
.L5414:
	.word	.L5405
	.word	.L5406
	.word	.L5407
	.word	.L5408
	.word	.L5409
	.word	.L5410
	.word	.L5411
	.word	.L5412
	.word	.L5413
	.word	.L5413
	.word	.L5405
	.word	.L5405
.L5405:
	ldr	r1, .L5418
	mov	r0, #0x2
	b	.L5415
.L5419:
	.align	2, 0
.L5418:
	.word	gBattleScripting
.L5406:
	ldr	r1, .L5420
	mov	r0, #0x1
	b	.L5415
.L5421:
	.align	2, 0
.L5420:
	.word	gBattleScripting
.L5407:
	ldr	r1, .L5422
	mov	r0, #0x1b
	b	.L5415
.L5423:
	.align	2, 0
.L5422:
	.word	gBattleScripting
.L5408:
	ldr	r1, .L5424
	mov	r0, #0x17
	b	.L5415
.L5425:
	.align	2, 0
.L5424:
	.word	gBattleScripting
.L5409:
	ldr	r1, .L5426
	mov	r0, #0x16
	b	.L5415
.L5427:
	.align	2, 0
.L5426:
	.word	gBattleScripting
.L5410:
	ldr	r1, .L5428
	mov	r0, #0x18
	b	.L5415
.L5429:
	.align	2, 0
.L5428:
	.word	gBattleScripting
.L5411:
	ldr	r1, .L5430
	mov	r0, #0x7
	b	.L5415
.L5431:
	.align	2, 0
.L5430:
	.word	gBattleScripting
.L5412:
	ldr	r1, .L5432
	mov	r0, #0x8
	b	.L5415
.L5433:
	.align	2, 0
.L5432:
	.word	gBattleScripting
.L5413:
	ldr	r1, .L5434
	mov	r0, #0x5
.L5415:
	strh	r0, [r1, #0x2e]
	ldr	r1, .L5434+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L5435:
	.align	2, 0
.L5434:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe281:
	.size	 Cmd_getsecretpowereffect,.Lfe281-Cmd_getsecretpowereffect
	.align	2, 0
	.type	 Cmd_pickup,function
	.thumb_func
Cmd_pickup:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	bl	InBattlePike
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB50830
	b	.L5438	@long jump
.LCB50830:
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB50836
	b	.L5439	@long jump
.LCB50836:
	mov	r0, #0x0
	mov	r9, r0
	ldr	r1, .L5489
	mov	r8, r1
	mov	r6, sp
	add	r7, r7, #0x1
	ldr	r0, .L5489+0x4
	mov	sl, r0
.L5443:
	mov	r0, #0x64
	mov	r4, r9
	mul	r4, r4, r0
	add	r4, r4, r8
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	strh	r0, [r6]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	cmp	r0, #0
	beq	.L5444	@cond_branch
	lsl	r0, r5, #0x3
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	ldr	r1, .L5489+0x8
	add	r0, r0, r1
	ldrh	r4, [r0, #0x1a]
	b	.L5445
.L5490:
	.align	2, 0
.L5489:
	.word	gPlayerParty
	.word	0x4b7
	.word	gBaseStats
.L5444:
	lsl	r0, r5, #0x3
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	ldr	r1, .L5491
	add	r0, r0, r1
	ldrh	r4, [r0, #0x18]
.L5445:
	cmp	r4, #0x35
	bne	.L5446	@cond_branch
	cmp	r5, #0
	beq	.L5446	@cond_branch
	cmp	r5, sl
	beq	.L5446	@cond_branch
	ldrh	r0, [r6]
	cmp	r0, #0
	bne	.L5446	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L5446	@cond_branch
	bl	GetBattlePyramidPickupItemId
	strh	r0, [r6]
	mov	r0, #0x64
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	b	.L5486
.L5492:
	.align	2, 0
.L5491:
	.word	gBaseStats
.L5446:
	cmp	r4, #0x76
	bne	.L5448	@cond_branch
	cmp	r5, #0
	beq	.L5448	@cond_branch
	cmp	r5, sl
	beq	.L5448	@cond_branch
	ldrh	r0, [r6]
	cmp	r0, #0
	bne	.L5448	@cond_branch
	lsl	r4, r7, #0x2
	add	r4, r4, r7
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r5, #0x64
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r4, r0
	ble	.L5442	@cond_branch
	mov	r0, #0x82
	strh	r0, [r6]
	mov	r0, r9
	mul	r0, r0, r5
.L5486:
	add	r0, r0, r8
	mov	r1, #0xc
	mov	r2, sp
	bl	SetMonData
	b	.L5442
.L5448:
	cmp	r5, #0xd5
	bne	.L5442	@cond_branch
	ldrh	r0, [r6]
	cmp	r0, #0x8f
	bls	.L5442	@cond_branch
	cmp	r0, #0xd2
	bhi	.L5442	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xf0
	lsl	r1, r1, #0xc
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L5442	@cond_branch
	mov	r0, #0x3b
	strh	r0, [r6]
	mov	r0, #0x64
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	mov	r1, #0xc
	mov	r2, sp
	bl	SetMonData
.L5442:
	mov	r0, #0x1
	add	r9, r9, r0
	mov	r1, r9
	cmp	r1, #0x5
	bgt	.LCB51020
	b	.L5443	@long jump
.LCB51020:
	b	.L5438
.L5439:
	mov	r0, #0x0
	mov	r9, r0
	ldr	r1, .L5493
	mov	sl, r1
	mov	r8, sp
.L5458:
	mov	r1, #0x64
	mov	r0, r9
	mul	r0, r0, r1
	mov	r1, sl
	add	r4, r0, r1
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	sub	r0, r0, #0x1
	mov	r1, #0xa
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x9
	bls	.L5459	@cond_branch
	mov	r7, #0x9
.L5459:
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	cmp	r0, #0
	beq	.L5460	@cond_branch
	ldr	r1, .L5493+0x4
	lsl	r0, r5, #0x3
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r4, [r0, #0x1a]
	b	.L5461
.L5494:
	.align	2, 0
.L5493:
	.word	gPlayerParty
	.word	gBaseStats
.L5460:
	ldr	r1, .L5495
	lsl	r0, r5, #0x3
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r4, [r0, #0x18]
.L5461:
	cmp	r4, #0x35
	bne	.L5464	@cond_branch
	cmp	r5, #0
	beq	.L5464	@cond_branch
	ldr	r0, .L5495+0x4
	cmp	r5, r0
	beq	.L5464	@cond_branch
	mov	r1, r8
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L5464	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L5463	@cond_branch
.L5464:
	cmp	r5, #0xe1
	bne	.L5462	@cond_branch
	mov	r1, r8
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L5462	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L5462	@cond_branch
.L5463:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r2, #0x0
	mov	r6, r9
	add	r6, r6, #0x1
	b	.L5465
.L5496:
	.align	2, 0
.L5495:
	.word	gBaseStats
	.word	0x4b7
.L5469:
	add	r0, r4, #0
	sub	r0, r0, #0x62
	cmp	r0, #0x1
	bhi	.LCB51173
	b	.L5485	@long jump
.LCB51173:
	add	r2, r2, #0x1
.L5465:
	cmp	r2, #0x8
	ble	.LCB51178
	b	.L5457	@long jump
.LCB51178:
	ldr	r0, .L5497
	add	r0, r2, r0
	ldrb	r0, [r0]
	cmp	r0, r4
	ble	.L5469	@cond_branch
	mov	r1, #0x64
	mov	r0, r9
	mul	r0, r0, r1
	add	r0, r0, sl
	add	r2, r7, r2
	lsl	r2, r2, #0x1
	ldr	r1, .L5497+0x4
	b	.L5487
.L5498:
	.align	2, 0
.L5497:
	.word	sPickupProbabilities
	.word	sPickupItems
.L5462:
	cmp	r4, #0x76
	bne	.L5474	@cond_branch
	cmp	r5, #0
	beq	.L5474	@cond_branch
	ldr	r0, .L5499
	cmp	r5, r0
	beq	.L5474	@cond_branch
	mov	r1, r8
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L5474	@cond_branch
	add	r0, r7, #0x1
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r5, #0x64
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r6, r9
	add	r6, r6, #0x1
	cmp	r4, r0
	bgt	.LCB51237
	b	.L5457	@long jump
.LCB51237:
	mov	r0, #0x82
	mov	r1, r8
	strh	r0, [r1]
	mov	r0, r9
	mul	r0, r0, r5
	b	.L5488
.L5500:
	.align	2, 0
.L5499:
	.word	0x4b7
.L5474:
	cmp	r5, #0xd5
	bne	.L5477	@cond_branch
	mov	r1, r8
	ldrh	r0, [r1]
	cmp	r0, #0x8f
	bls	.L5477	@cond_branch
	cmp	r0, #0xd2
	bhi	.L5477	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xf0
	lsl	r1, r1, #0xc
	and	r1, r1, r0
	mov	r6, r9
	add	r6, r6, #0x1
	cmp	r1, #0
	bne	.L5457	@cond_branch
	mov	r0, #0x3b
	mov	r1, r8
	strh	r0, [r1]
	mov	r1, #0x64
	mov	r0, r9
	mul	r0, r0, r1
.L5488:
	add	r0, r0, sl
	mov	r1, #0xc
	mov	r2, sp
	bl	SetMonData
	b	.L5457
.L5477:
	mov	r0, #0x97
	lsl	r0, r0, #0x1
	cmp	r5, r0
	beq	.L5481	@cond_branch
	ldr	r0, .L5501
	cmp	r5, r0
	beq	.L5481	@cond_branch
	add	r0, r0, #0x10
	cmp	r5, r0
	bne	.L5480	@cond_branch
.L5481:
	mov	r1, r8
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L5480	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L5480	@cond_branch
	ldr	r4, .L5501+0x4
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x12
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r1, r8
	strh	r0, [r1]
	mov	r1, #0x64
	mov	r0, r9
	mul	r0, r0, r1
	add	r0, r0, sl
	mov	r1, #0xc
	mov	r2, sp
	bl	SetMonData
	mov	r6, r9
	add	r6, r6, #0x1
	b	.L5457
.L5502:
	.align	2, 0
.L5501:
	.word	0x2bf
	.word	sGemItems
.L5485:
	mov	r1, #0x64
	mov	r0, r9
	mul	r0, r0, r1
	add	r0, r0, sl
	add	r2, r7, #0
	add	r2, r2, #0x63
	sub	r2, r2, r4
	lsl	r2, r2, #0x1
	ldr	r1, .L5503
.L5487:
	add	r2, r2, r1
	mov	r1, #0xc
	bl	SetMonData
	b	.L5457
.L5504:
	.align	2, 0
.L5503:
	.word	sRarePickupItems
.L5480:
	mov	r6, r9
	add	r6, r6, #0x1
	cmp	r4, #0x8b
	bne	.L5457	@cond_branch
	cmp	r5, #0
	beq	.L5457	@cond_branch
	ldr	r0, .L5505
	cmp	r5, r0
	beq	.L5457	@cond_branch
	mov	r1, r8
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L5457	@cond_branch
	ldr	r4, .L5505+0x4
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x16
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r1, r8
	strh	r0, [r1]
	mov	r1, #0x64
	mov	r0, r9
	mul	r0, r0, r1
	add	r0, r0, sl
	mov	r1, #0xc
	mov	r2, sp
	bl	SetMonData
.L5457:
	mov	r9, r6
	cmp	r6, #0x5
	bgt	.LCB51438
	b	.L5458	@long jump
.LCB51438:
.L5438:
	ldr	r1, .L5505+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5506:
	.align	2, 0
.L5505:
	.word	0x4b7
	.word	sHarvestItems
	.word	gBattlescriptCurrInstr
.Lfe282:
	.size	 Cmd_pickup,.Lfe282-Cmd_pickup
	.align	2, 0
	.type	 Cmd_docastformchangeanimation,function
	.thumb_func
Cmd_docastformchangeanimation:
	push	{r4, lr}
	ldr	r4, .L5509
	ldr	r0, .L5509+0x4
	ldrb	r0, [r0, #0x17]
	strb	r0, [r4]
	ldr	r1, .L5509+0x8
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	ldr	r3, .L5509+0xc
	cmp	r0, #0
	beq	.L5508	@cond_branch
	ldr	r0, [r3]
	add	r0, r0, #0x7e
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
.L5508:
	ldr	r0, [r3]
	add	r0, r0, #0x7e
	ldrb	r2, [r0]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitBattleAnimation
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L5509+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L5510:
	.align	2, 0
.L5509:
	.word	gActiveBattler
	.word	gBattleScripting
	.word	gBattleMons
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
.Lfe283:
	.size	 Cmd_docastformchangeanimation,.Lfe283-Cmd_docastformchangeanimation
	.align	2, 0
	.type	 Cmd_trycastformdatachange,function
	.thumb_func
Cmd_trycastformdatachange:
	push	{r4, lr}
	ldr	r1, .L5513
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r0, .L5513+0x4
	ldrb	r0, [r0, #0x17]
	bl	TryWeatherFormChange
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L5512	@cond_branch
	ldr	r0, .L5513+0x8
	bl	BattleScriptPushCursorAndCallback
	ldr	r0, .L5513+0xc
	ldr	r0, [r0]
	add	r0, r0, #0x7e
	sub	r1, r4, #0x1
	strb	r1, [r0]
.L5512:
	pop	{r4}
	pop	{r0}
	bx	r0
.L5514:
	.align	2, 0
.L5513:
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
	.word	BattleScript_CastformChange
	.word	gBattleStruct
.Lfe284:
	.size	 Cmd_trycastformdatachange,.Lfe284-Cmd_trycastformdatachange
	.align	2, 0
	.type	 Cmd_settypebasedhalvers,function
	.thumb_func
Cmd_settypebasedhalvers:
	push	{r4, lr}
	mov	r4, #0x0
	ldr	r2, .L5523
	ldr	r0, .L5523+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, #0xc9
	bne	.L5516	@cond_branch
	ldr	r3, .L5523+0x8
	ldr	r1, [r3]
	mov	r2, #0x8
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L5518	@cond_branch
	orr	r1, r1, r2
	str	r1, [r3]
	ldr	r0, .L5523+0xc
	mov	r1, #0x5
	strb	r1, [r0]
	ldr	r0, .L5523+0x10
	strb	r4, [r0, #0x5]
	b	.L5522
.L5524:
	.align	2, 0
.L5523:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gFieldStatuses
	.word	gFieldTimers
	.word	gBattleCommunication
.L5516:
	ldr	r3, .L5525
	ldr	r1, [r3]
	mov	r2, #0x10
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L5518	@cond_branch
	orr	r1, r1, r2
	str	r1, [r3]
	ldr	r1, .L5525+0x4
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	ldr	r1, .L5525+0x8
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	mov	r4, #0x1
.L5518:
	cmp	r4, #0
	beq	.L5520	@cond_branch
.L5522:
	ldr	r1, .L5525+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L5521
.L5526:
	.align	2, 0
.L5525:
	.word	gFieldStatuses
	.word	gFieldTimers
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L5520:
	ldr	r3, .L5527
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L5521:
	pop	{r4}
	pop	{r0}
	bx	r0
.L5528:
	.align	2, 0
.L5527:
	.word	gBattlescriptCurrInstr
.Lfe285:
	.size	 Cmd_settypebasedhalvers,.Lfe285-Cmd_settypebasedhalvers
	.align	2, 0
	.globl	DoesSubstituteBlockMove
	.type	 DoesSubstituteBlockMove,function
	.thumb_func
DoesSubstituteBlockMove:
	push	{r4, lr}
	add	r3, r2, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L5537
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r2, r2, #0x54
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L5534	@cond_branch
	ldr	r1, .L5537+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L5534	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, #0x97
	beq	.L5534	@cond_branch
	mov	r0, #0x1
	b	.L5536
.L5538:
	.align	2, 0
.L5537:
	.word	gBattleMons
	.word	gBattleMoves
.L5534:
	mov	r0, #0x0
.L5536:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe286:
	.size	 DoesSubstituteBlockMove,.Lfe286-DoesSubstituteBlockMove
	.align	2, 0
	.globl	DoesDisguiseBlockMove
	.type	 DoesDisguiseBlockMove,function
	.thumb_func
DoesDisguiseBlockMove:
	push	{r4, r5, lr}
	add	r5, r2, #0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, #0xd1
	bne	.L5541	@cond_branch
	ldr	r3, .L5544
	mov	r0, #0x5c
	mov	r2, r4
	mul	r2, r2, r0
	add	r0, r2, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	ldr	r1, .L5544+0x4
	cmp	r0, r1
	bne	.L5541	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x54
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L5541	@cond_branch
	ldr	r0, .L5544+0x8
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L5541	@cond_branch
	ldr	r0, .L5544+0xc
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0x46
	bne	.L5540	@cond_branch
.L5541:
	mov	r0, #0x0
	b	.L5543
.L5545:
	.align	2, 0
.L5544:
	.word	gBattleMons
	.word	0x61400000
	.word	gBattleMoves
	.word	gBattleScripting
.L5540:
	mov	r0, #0x1
.L5543:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe287:
	.size	 DoesDisguiseBlockMove,.Lfe287-DoesDisguiseBlockMove
	.align	2, 0
	.type	 Cmd_jumpifsubstituteblocks,function
	.thumb_func
Cmd_jumpifsubstituteblocks:
	push	{lr}
	ldr	r0, .L5549
	ldrb	r0, [r0]
	ldr	r1, .L5549+0x4
	ldrb	r1, [r1]
	ldr	r2, .L5549+0x8
	ldrh	r2, [r2]
	bl	DoesSubstituteBlockMove
	cmp	r0, #0
	beq	.L5547	@cond_branch
	ldr	r3, .L5549+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5548
.L5550:
	.align	2, 0
.L5549:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
.L5547:
	ldr	r1, .L5551
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5548:
	pop	{r0}
	bx	r0
.L5552:
	.align	2, 0
.L5551:
	.word	gBattlescriptCurrInstr
.Lfe288:
	.size	 Cmd_jumpifsubstituteblocks,.Lfe288-Cmd_jumpifsubstituteblocks
	.align	2, 0
	.type	 Cmd_tryrecycleitem,function
	.thumb_func
Cmd_tryrecycleitem:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r7, .L5556
	ldr	r0, .L5556+0x4
	ldrb	r0, [r0]
	strb	r0, [r7]
	ldr	r1, .L5556+0x8
	ldrb	r2, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, #0xb0
	ldr	r1, [r1]
	add	r6, r1, r0
	ldrh	r5, [r6]
	cmp	r5, #0
	beq	.L5554	@cond_branch
	ldr	r4, .L5556+0xc
	mov	r3, #0x5c
	mov	r0, r2
	mul	r0, r0, r3
	add	r0, r0, r4
	ldrh	r0, [r0, #0x30]
	cmp	r0, #0
	bne	.L5554	@cond_branch
	ldr	r1, .L5556+0x10
	strh	r5, [r1]
	strh	r0, [r6]
	ldrb	r0, [r7]
	mul	r0, r0, r3
	add	r0, r0, r4
	ldrh	r1, [r1]
	strh	r1, [r0, #0x30]
	ldrb	r0, [r7]
	mul	r0, r0, r3
	add	r1, r4, #0
	add	r1, r1, #0x30
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L5556+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L5555
.L5557:
	.align	2, 0
.L5556:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	gBattleMons
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.L5554:
	ldr	r3, .L5558
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L5555:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5559:
	.align	2, 0
.L5558:
	.word	gBattlescriptCurrInstr
.Lfe289:
	.size	 Cmd_tryrecycleitem,.Lfe289-Cmd_tryrecycleitem
	.align	2, 0
	.type	 Cmd_settypetoterrain,function
	.thumb_func
Cmd_settypetoterrain:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r6, .L5563
	ldr	r5, .L5563+0x4
	ldrb	r0, [r5]
	mov	r4, #0x5c
	mul	r0, r0, r4
	add	r2, r0, r6
	mov	r0, #0x22
	add	r0, r0, r2
	mov	ip, r0
	ldr	r1, .L5563+0x8
	mov	r8, r1
	ldr	r7, .L5563+0xc
	ldrb	r0, [r7]
	add	r0, r0, r8
	ldrb	r3, [r0]
	mov	r1, ip
	ldrb	r0, [r1]
	add	r1, r3, #0
	cmp	r0, r1
	beq	.L5561	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, r1
	beq	.L5561	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, r1
	beq	.L5561	@cond_branch
	mov	r0, ip
	strb	r3, [r0]
	ldrb	r0, [r5]
	mov	r1, r0
	mul	r1, r1, r4
	add	r1, r1, r6
	ldrb	r0, [r7]
	add	r0, r0, r8
	ldrb	r0, [r0]
	add	r1, r1, #0x23
	strb	r0, [r1]
	ldrb	r0, [r5]
	mul	r0, r0, r4
	add	r0, r0, r6
	add	r0, r0, #0x24
	mov	r1, #0x9
	strb	r1, [r0]
	ldr	r1, .L5563+0x10
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	ldrb	r0, [r7]
	add	r0, r0, r8
	ldrb	r0, [r0]
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r1, .L5563+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L5562
.L5564:
	.align	2, 0
.L5563:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	sTerrainToType
	.word	gBattleTerrain
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.L5561:
	ldr	r3, .L5565
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L5562:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5566:
	.align	2, 0
.L5565:
	.word	gBattlescriptCurrInstr
.Lfe290:
	.size	 Cmd_settypetoterrain,.Lfe290-Cmd_settypetoterrain
	.align	2, 0
	.type	 Cmd_pursuitrelated,function
	.thumb_func
Cmd_pursuitrelated:
	push	{r4, r5, r6, lr}
	ldr	r5, .L5570
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r4, .L5570+0x4
	strb	r0, [r4]
	ldr	r0, .L5570+0x8
	ldr	r0, [r0]
	mov	r6, #0x1
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L5568	@cond_branch
	ldr	r0, .L5570+0xc
	ldrb	r1, [r0]
	ldr	r2, .L5570+0x10
	ldrb	r3, [r4]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L5568	@cond_branch
	ldr	r0, .L5570+0x14
	add	r0, r3, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L5568	@cond_branch
	ldr	r1, .L5570+0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r2, [r0]
	cmp	r2, #0xe4
	bne	.L5568	@cond_branch
	ldr	r0, .L5570+0x1c
	add	r0, r3, r0
	mov	r1, #0xb
	strb	r1, [r0]
	ldr	r0, .L5570+0x20
	strh	r2, [r0]
	ldr	r1, .L5570+0x24
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	ldr	r0, .L5570+0x28
	strb	r6, [r0, #0x18]
	ldrb	r1, [r5]
	add	r0, r0, #0x20
	strb	r1, [r0]
	ldrb	r0, [r4]
	strb	r0, [r5]
	b	.L5569
.L5571:
	.align	2, 0
.L5570:
	.word	gBattlerAttacker
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gChosenActionByBattler
	.word	gChosenMoveByBattler
	.word	gActionsByTurnOrder
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
.L5568:
	ldr	r3, .L5572
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L5569:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L5573:
	.align	2, 0
.L5572:
	.word	gBattlescriptCurrInstr
.Lfe291:
	.size	 Cmd_pursuitrelated,.Lfe291-Cmd_pursuitrelated
	.align	2, 0
	.type	 Cmd_snatchsetbattlers,function
	.thumb_func
Cmd_snatchsetbattlers:
	push	{r4, lr}
	ldr	r1, .L5577
	ldr	r3, .L5577+0x4
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r2, .L5577+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r1, #0
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L5575	@cond_branch
	ldr	r1, .L5577+0xc
	ldrb	r0, [r1, #0x17]
	strb	r0, [r2]
	strb	r0, [r3]
	b	.L5576
.L5578:
	.align	2, 0
.L5577:
	.word	gEffectBattler
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleScripting
.L5575:
	ldr	r1, .L5579
	ldrb	r0, [r1, #0x17]
	strb	r0, [r2]
.L5576:
	ldrb	r0, [r4]
	strb	r0, [r1, #0x17]
	ldr	r1, .L5579+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L5580:
	.align	2, 0
.L5579:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe292:
	.size	 Cmd_snatchsetbattlers,.Lfe292-Cmd_snatchsetbattlers
	.align	2, 0
	.type	 Cmd_removelightscreenreflect,function
	.thumb_func
Cmd_removelightscreenreflect:
	push	{r4, lr}
	ldr	r0, .L5585
	ldrb	r0, [r0]
	bl	GetBattlerSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L5585+0x4
	lsl	r4, r0, #0x2
	add	r0, r4, r0
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L5583	@cond_branch
	ldrb	r1, [r3, #0x2]
	cmp	r1, #0
	beq	.L5582	@cond_branch
.L5583:
	ldr	r2, .L5585+0x8
	add	r2, r4, r2
	ldr	r0, [r2]
	mov	r1, #0x2
	neg	r1, r1
	and	r0, r0, r1
	sub	r1, r1, #0x1
	and	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	strb	r0, [r3]
	strb	r0, [r3, #0x2]
	ldr	r1, .L5585+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x18]
	strb	r0, [r1, #0x19]
	b	.L5584
.L5586:
	.align	2, 0
.L5585:
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gSideStatuses
	.word	gBattleScripting
.L5582:
	ldr	r0, .L5587
	strb	r1, [r0, #0x18]
	strb	r1, [r0, #0x19]
.L5584:
	ldr	r1, .L5587+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L5588:
	.align	2, 0
.L5587:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe293:
	.size	 Cmd_removelightscreenreflect,.Lfe293-Cmd_removelightscreenreflect
	.align	2, 0
	.type	 GetCatchingBattler,function
	.thumb_func
GetCatchingBattler:
	push	{lr}
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L5590	@cond_branch
	mov	r0, #0x3
	b	.L5594
.L5590:
	mov	r0, #0x1
.L5594:
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe294:
	.size	 GetCatchingBattler,.Lfe294-GetCatchingBattler
	.align	2, 0
	.type	 Cmd_handleballthrow,function
	.thumb_func
Cmd_handleballthrow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r7, #0xa
	mov	r0, #0x0
	mov	sl, r0
	ldr	r0, .L5706
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB52380
	b	.L5595	@long jump
.LCB52380:
	ldr	r4, .L5706+0x4
	ldr	r0, .L5706+0x8
	ldrb	r0, [r0]
	strb	r0, [r4]
	bl	GetCatchingBattler
	ldr	r5, .L5706+0xc
	strb	r0, [r5]
	ldr	r0, .L5706+0x10
	ldr	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L5597	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x5
	bl	BtlController_EmitBallThrowAnim
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L5706+0x14
	ldr	r0, .L5706+0x18
	b	.L5695
.L5707:
	.align	2, 0
.L5706:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TrainerBallBlock
.L5597:
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L5599	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x4
	bl	BtlController_EmitBallThrowAnim
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L5708
	ldr	r0, .L5708+0x4
	b	.L5695
.L5709:
	.align	2, 0
.L5708:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WallyBallThrow
.L5599:
	ldr	r0, .L5710
	ldr	r1, [r0]
	ldr	r2, .L5710+0x4
	ldrh	r0, [r2]
	strh	r0, [r1, #0x2c]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r4, r2, #0
	cmp	r0, #0x5
	bne	.L5601	@cond_branch
	ldr	r0, .L5710+0x8
	ldr	r0, [r0]
	add	r0, r0, #0x7b
	ldrb	r0, [r0]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r0, r1, #0x8
	sub	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r5, .L5710+0xc
	ldr	r3, .L5710+0x10
	b	.L5602
.L5711:
	.align	2, 0
.L5710:
	.word	gSaveBlock2Ptr
	.word	gLastUsedItem
	.word	gBattleStruct
	.word	gBaseStats
	.word	gBattleMons
.L5601:
	ldr	r2, .L5712
	ldr	r3, .L5712+0x4
	ldrb	r1, [r5]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r1, [r0]
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x15
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x8]
	mov	r9, r0
	add	r5, r2, #0
.L5602:
	ldr	r0, .L5712+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r1, [r0]
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x15
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L5603	@cond_branch
	ldr	r0, .L5712+0xc
	ldrh	r0, [r0]
	mov	r7, #0x1
	cmp	r0, #0x1b
	beq	.LCB52535
	b	.L5606	@long jump
.LCB52535:
.L5704:
	mov	r7, #0x32
	b	.L5606
.L5713:
	.align	2, 0
.L5712:
	.word	gBaseStats
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gLastUsedItem
.L5603:
	ldrh	r0, [r4]
	cmp	r0, #0x5
	bhi	.LCB52556
	b	.L5607	@long jump
.LCB52556:
	sub	r0, r0, #0x6
	cmp	r0, #0x15
	bls	.LCB52561
	b	.L5606	@long jump
.LCB52561:
	lsl	r0, r0, #0x2
	ldr	r1, .L5714
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L5715:
	.align	2, 0
.L5714:
	.word	.L5662
	.align	2, 0
	.align	2, 0
.L5662:
	.word	.L5609
	.word	.L5612
	.word	.L5615
	.word	.L5617
	.word	.L5619
	.word	.L5625
	.word	.L5625
	.word	.L5656
	.word	.L5625
	.word	.L5654
	.word	.L5625
	.word	.L5652
	.word	.L5627
	.word	.L5633
	.word	.L5645
	.word	.L5642
	.word	.L5625
	.word	.L5635
	.word	.L5626
	.word	.L5606
	.word	.L5659
	.word	.L5661
.L5609:
	ldr	r2, .L5716
	ldr	r0, .L5716+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r3, [r0]
	cmp	r3, #0xb
	beq	.L5704	@cond_branch
	add	r0, r0, #0x1
	ldrb	r2, [r0]
	cmp	r2, #0xb
	beq	.L5704	@cond_branch
	add	r0, r0, #0x1
	ldrb	r0, [r0]
	cmp	r0, #0xb
	beq	.L5704	@cond_branch
	cmp	r3, #0x6
	beq	.L5704	@cond_branch
	cmp	r2, #0x6
	beq	.L5704	@cond_branch
	cmp	r0, #0x6
	beq	.LCB52612
	b	.L5606	@long jump
.LCB52612:
	b	.L5704
.L5717:
	.align	2, 0
.L5716:
	.word	gBattleMons
	.word	gBattlerTarget
.L5612:
	bl	GetCurrentMapType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x5
	beq	.L5697	@cond_branch
	ldr	r0, .L5718
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L5697	@cond_branch
	ldr	r0, .L5718+0x4
	ldrb	r0, [r0]
	b	.L5703
.L5719:
	.align	2, 0
.L5718:
	.word	gIsFishingEncounter
	.word	gIsSurfingEncounter
.L5615:
	ldr	r2, .L5720
	ldr	r0, .L5720+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	cmp	r1, #0x1d
	bls	.LCB52660
	b	.L5606	@long jump
.LCB52660:
	mov	r0, #0x29
	sub	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	b	.L5606
.L5721:
	.align	2, 0
.L5720:
	.word	gBattleMons
	.word	gBattlerTarget
.L5617:
	ldr	r2, .L5722
	ldr	r0, .L5722+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetSetPokedexFlag
	lsl	r0, r0, #0x18
.L5703:
	cmp	r0, #0
	bne	.LCB52699
	b	.L5606	@long jump
.LCB52699:
.L5697:
	mov	r7, #0x23
	b	.L5606
.L5723:
	.align	2, 0
.L5722:
	.word	gBattleMons
	.word	gBattlerTarget
.L5619:
	ldr	r0, .L5724
	ldrb	r1, [r0, #0x13]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x28
	bhi	.LCB52720
	b	.L5606	@long jump
.LCB52720:
.L5705:
	mov	r7, #0x28
	b	.L5606
.L5725:
	.align	2, 0
.L5724:
	.word	gBattleResults
.L5625:
	mov	r7, #0xa
	b	.L5606
.L5626:
	mov	r7, #0xf
	b	.L5606
.L5627:
	ldr	r2, .L5726
	ldr	r0, .L5726+0x4
	ldrb	r0, [r0]
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2c
	ldrb	r3, [r0]
	ldr	r0, .L5726+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	cmp	r3, r0
	bge	.L5698	@cond_branch
	lsl	r0, r1, #0x1
	cmp	r3, r0
	bgt	.L5705	@cond_branch
	cmp	r3, r1
	bhi	.LCB52767
	b	.L5606	@long jump
.LCB52767:
	mov	r7, #0x14
	b	.L5606
.L5727:
	.align	2, 0
.L5726:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlerTarget
.L5633:
	ldr	r0, .L5728
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB52785
	b	.L5606	@long jump
.LCB52785:
	b	.L5704
.L5729:
	.align	2, 0
.L5728:
	.word	gIsFishingEncounter
.L5635:
	mov	r3, #0x0
	ldr	r5, .L5730
	add	r6, r5, #0
	ldr	r2, .L5730+0x4
	ldr	r0, .L5730+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r4, r0, #0x15
.L5639:
	lsl	r2, r3, #0x3
	lsr	r0, r4, #0x15
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x4
	add	r1, r2, r1
	add	r1, r1, r6
	ldrh	r0, [r1]
	cmp	r0, #0x7
	bne	.L5638	@cond_branch
	lsr	r0, r4, #0x15
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x4
	add	r1, r2, r1
	add	r1, r1, r5
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0x66
	bne	.L5638	@cond_branch
	mov	r7, #0x28
.L5638:
	add	r3, r3, #0x1
	cmp	r3, #0x9
	bls	.L5639	@cond_branch
	b	.L5606
.L5731:
	.align	2, 0
.L5730:
	.word	gEvolutionTable
	.word	gBattleMons
	.word	gBattlerTarget
.L5642:
	ldr	r3, .L5732
	ldr	r0, .L5732+0x4
	ldrb	r4, [r0]
	mov	r2, #0x5c
	mov	r0, r4
	mul	r0, r0, r2
	add	r0, r0, r3
	ldrh	r1, [r0]
	lsl	r1, r1, #0x15
	ldr	r5, .L5732+0x8
	mov	r8, r5
	ldrb	r0, [r5]
	mul	r0, r0, r2
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	cmp	r1, r0
	beq	.LCB52879
	b	.L5606	@long jump
.LCB52879:
	ldr	r5, .L5732+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	mov	r4, #0x64
	mul	r0, r0, r4
	ldr	r1, .L5732+0x10
	add	r0, r0, r1
	bl	GetMonGender
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	mul	r0, r0, r4
	ldr	r1, .L5732+0x14
	add	r0, r0, r1
	bl	GetMonGender
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	bne	.LCB52908
	b	.L5606	@long jump
.LCB52908:
	cmp	r6, #0xff
	bne	.LCB52910
	b	.L5606	@long jump
.LCB52910:
	cmp	r0, #0xff
	bne	.LCB52912
	b	.L5606	@long jump
.LCB52912:
.L5698:
	mov	r7, #0x50
	b	.L5606
.L5733:
	.align	2, 0
.L5732:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gPlayerParty
.L5645:
	ldr	r2, .L5734
	ldr	r0, .L5734+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetPokedexHeightWeight
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldr	r0, .L5734+0x8
	cmp	r3, r0
	bhi	.L5646	@cond_branch
	mov	r5, #0xec
	mov	sl, r5
	b	.L5606
.L5735:
	.align	2, 0
.L5734:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	0x3e7
.L5646:
	ldr	r0, .L5736
	cmp	r3, r0
	bhi	.L5648	@cond_branch
	mov	r0, #0x0
	mov	sl, r0
	b	.L5606
.L5737:
	.align	2, 0
.L5736:
	.word	0x7cf
.L5648:
	ldr	r0, .L5738
	mov	r1, #0x1e
	mov	sl, r1
	cmp	r3, r0
	bhi	.L5606	@cond_branch
	mov	r5, #0x14
	mov	sl, r5
	b	.L5606
.L5739:
	.align	2, 0
.L5738:
	.word	0xbb7
.L5652:
	ldr	r2, .L5740
	ldr	r0, .L5740+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0]
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x15
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0x63
	bls	.L5606	@cond_branch
	b	.L5705
.L5741:
	.align	2, 0
.L5740:
	.word	gBattleMons
	.word	gBattlerTarget
.L5654:
	ldr	r0, .L5742
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	bne	.L5606	@cond_branch
	b	.L5704
.L5743:
	.align	2, 0
.L5742:
	.word	gBattleResults
.L5656:
	bl	RtcCalcLocalTime
	ldr	r1, .L5744
	ldrb	r0, [r1, #0x15]
	cmp	r0, #0
	bne	.L5658	@cond_branch
	ldrb	r0, [r1, #0x17]
	cmp	r0, #0x4
	bne	.L5606	@cond_branch
.L5658:
	mov	r7, #0x1e
	b	.L5606
.L5745:
	.align	2, 0
.L5744:
	.word	gMapHeader
.L5659:
	ldr	r1, .L5746
	ldr	r0, .L5746+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L5606	@cond_branch
	b	.L5705
.L5747:
	.align	2, 0
.L5746:
	.word	gBattleMons
	.word	gBattlerTarget
.L5661:
	mov	r7, #0x1
	b	.L5606
.L5607:
	ldr	r1, .L5748
	ldrh	r0, [r4]
	sub	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r7, [r0]
.L5606:
	mov	r0, r9
	cmp	r0, #0x14
	bhi	.L5665	@cond_branch
	mov	r1, sl
	lsl	r0, r1, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0x14
	neg	r1, r1
	cmp	r0, r1
	bne	.L5665	@cond_branch
	mov	r5, #0x1
	mov	r9, r5
	b	.L5666
.L5749:
	.align	2, 0
.L5748:
	.word	sBallCatchBonuses
.L5665:
	mov	r0, r9
	add	r0, r0, sl
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L5666:
	mov	r0, r9
	mul	r0, r0, r7
	mov	r1, #0xa
	bl	__divsi3
	ldr	r5, .L5750
	ldr	r1, .L5750+0x4
	ldrb	r2, [r1]
	mov	r1, #0x5c
	mov	r4, r2
	mul	r4, r4, r1
	add	r3, r4, r5
	ldrh	r2, [r3, #0x2e]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	ldrh	r2, [r3, #0x2a]
	lsl	r2, r2, #0x1
	sub	r2, r1, r2
	mul	r0, r0, r2
	bl	__divsi3
	add	r6, r0, #0
	add	r5, r5, #0x50
	add	r4, r4, r5
	ldr	r4, [r4]
	mov	r0, #0x27
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L5667	@cond_branch
	lsl	r6, r6, #0x1
.L5667:
	mov	r0, #0xd8
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L5668	@cond_branch
	lsl	r0, r6, #0x4
	sub	r0, r0, r6
	mov	r1, #0xa
	bl	__udivsi3
	add	r6, r0, #0
.L5668:
	ldr	r1, .L5750+0x8
	ldrh	r0, [r1]
	cmp	r0, #0x5
	beq	.L5669	@cond_branch
	cmp	r0, #0x1
	bne	.L5670	@cond_branch
	ldr	r0, .L5750+0xc
	ldrb	r1, [r0, #0x5]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	b	.L5669
.L5751:
	.align	2, 0
.L5750:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gLastUsedItem
	.word	gBattleResults
.L5670:
	ldr	r0, .L5752
	ldrh	r1, [r1]
	add	r0, r0, r1
	add	r1, r0, #0
	add	r1, r1, #0x34
	ldrb	r0, [r1]
	cmp	r0, #0xfe
	bhi	.L5669	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
.L5669:
	cmp	r6, #0xfe
	bls	.L5673	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x4
	bl	BtlController_EmitBallThrowAnim
	ldr	r0, .L5752+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L5752+0x8
	ldr	r0, .L5752+0xc
	str	r0, [r1]
	ldr	r1, .L5752+0x10
	ldr	r0, .L5752+0x14
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L5752+0x18
	add	r0, r0, r1
	ldr	r2, .L5752+0x1c
	mov	r1, #0x26
	bl	SetMonData
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	bne	.L5674	@cond_branch
	ldr	r1, .L5752+0x20
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	b	.L5595
.L5753:
	.align	2, 0
.L5752:
	.word	gBattleResults
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SuccessBallThrow
	.word	gBattlerPartyIndexes
	.word	gBattlerTarget
	.word	gEnemyParty
	.word	gLastUsedItem
	.word	gBattleCommunication
.L5674:
	ldr	r1, .L5754
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L5595
.L5755:
	.align	2, 0
.L5754:
	.word	gBattleCommunication
.L5673:
	ldr	r4, .L5756
	ldr	r0, [r4]
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x8]
	ldr	r0, [r4]
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x8]
	add	r0, r6, #0
	bl	CriticalCapture
	cmp	r0, #0
	beq	.L5677	@cond_branch
	mov	r5, #0x1
	ldr	r0, [r4]
	ldr	r2, [r0, #0x8]
	ldrb	r0, [r2, #0x8]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2, #0x8]
	b	.L5678
.L5757:
	.align	2, 0
.L5756:
	.word	gBattleSpritesDataPtr
.L5677:
	mov	r5, #0x4
.L5678:
	ldr	r0, .L5758
	ldrh	r0, [r0]
	cmp	r0, #0x1
	bne	.L5679	@cond_branch
	add	r4, r5, #0
	b	.L5680
.L5759:
	.align	2, 0
.L5758:
	.word	gLastUsedItem
.L5679:
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	add	r1, r6, #0
	bl	__udivsi3
	bl	Sqrt
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	Sqrt
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L5760
	add	r1, r6, #0
	bl	__udivsi3
	add	r6, r0, #0
	mov	r4, #0x0
	b	.L5681
.L5761:
	.align	2, 0
.L5760:
	.word	0xffff0
.L5683:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L5681:
	cmp	r4, r5
	bcs	.L5680	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bcc	.L5683	@cond_branch
.L5680:
	mov	r0, #0x0
	add	r1, r4, #0
	bl	BtlController_EmitBallThrowAnim
	ldr	r0, .L5762
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	cmp	r4, r5
	bne	.L5687	@cond_branch
	bl	IsCriticalCapture
	cmp	r0, #0
	beq	.L5688	@cond_branch
	ldr	r0, .L5762+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x8]
	ldrb	r0, [r2, #0x8]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x8]
.L5688:
	ldr	r1, .L5762+0x8
	ldr	r0, .L5762+0xc
	str	r0, [r1]
	ldr	r1, .L5762+0x10
	ldr	r0, .L5762+0x14
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L5762+0x18
	add	r0, r0, r1
	ldr	r2, .L5762+0x1c
	mov	r1, #0x26
	bl	SetMonData
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	bne	.L5689	@cond_branch
	ldr	r1, .L5762+0x20
	mov	r0, #0x0
	b	.L5702
.L5763:
	.align	2, 0
.L5762:
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SuccessBallThrow
	.word	gBattlerPartyIndexes
	.word	gBattlerTarget
	.word	gEnemyParty
	.word	gLastUsedItem
	.word	gBattleCommunication
.L5689:
	ldr	r1, .L5764
	mov	r0, #0x1
.L5702:
	strb	r0, [r1, #0x5]
	ldr	r0, .L5764+0x4
	ldrh	r0, [r0]
	cmp	r0, #0xe
	bne	.L5595	@cond_branch
	ldr	r0, .L5764+0x8
	mov	r8, r0
	ldr	r4, .L5764+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L5764+0x10
	add	r0, r0, r5
	bl	MonRestorePP
	ldrb	r3, [r4]
	lsl	r0, r3, #0x1
	add	r0, r0, r8
	ldrh	r1, [r0]
	mov	r0, r1
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r2, #0xff
	bl	HealStatusConditions
	ldr	r3, .L5764+0x14
	ldrb	r0, [r4]
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x2e]
	strh	r1, [r0, #0x2a]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mul	r2, r2, r1
	add	r3, r3, #0x2a
	add	r2, r2, r3
	mov	r1, #0x39
	bl	SetMonData
	b	.L5595
.L5765:
	.align	2, 0
.L5764:
	.word	gBattleCommunication
	.word	gLastUsedItem
	.word	gBattlerPartyIndexes
	.word	gBattlerTarget
	.word	gEnemyParty
	.word	gBattleMons
.L5687:
	bl	IsCriticalCapture
	cmp	r0, #0
	beq	.L5693	@cond_branch
	ldr	r1, .L5766
	add	r0, r4, #0x3
	strb	r0, [r1, #0x5]
	b	.L5694
.L5767:
	.align	2, 0
.L5766:
	.word	gBattleCommunication
.L5693:
	ldr	r0, .L5768
	strb	r4, [r0, #0x5]
.L5694:
	ldr	r1, .L5768+0x4
	ldr	r0, .L5768+0x8
.L5695:
	str	r0, [r1]
.L5595:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5769:
	.align	2, 0
.L5768:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ShakeBallThrow
.Lfe295:
	.size	 Cmd_handleballthrow,.Lfe295-Cmd_handleballthrow
	.align	2, 0
	.type	 Cmd_givecaughtmon,function
	.thumb_func
Cmd_givecaughtmon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	bl	GetCatchingBattler
	ldr	r7, .L5775
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r6, .L5775+0x4
	add	r0, r0, r6
	bl	GiveMonToPlayer
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L5771	@cond_branch
	bl	ShouldShowBoxWasFullMessage
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L5772	@cond_branch
	ldr	r0, .L5775+0x8
	strb	r1, [r0, #0x5]
	ldr	r4, .L5775+0xc
	ldr	r0, .L5775+0x10
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBoxNamePtr
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringCopy
	bl	GetCatchingBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r7
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldr	r2, .L5775+0x14
	mov	r1, #0x2
	bl	GetMonData
	b	.L5773
.L5776:
	.align	2, 0
.L5775:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleCommunication
	.word	gStringVar1
	.word	0x4036
	.word	gStringVar2
.L5772:
	ldr	r4, .L5777
	ldr	r0, .L5777+0x4
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBoxNamePtr
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringCopy
	bl	GetCatchingBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r7
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldr	r2, .L5777+0x8
	mov	r1, #0x2
	bl	GetMonData
	ldr	r4, .L5777+0xc
	bl	GetPCBoxToSendMon
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBoxNamePtr
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringCopy
	ldr	r1, .L5777+0x10
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
.L5773:
	ldr	r0, .L5777+0x14
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L5771	@cond_branch
	ldr	r1, .L5777+0x10
	ldrb	r0, [r1, #0x5]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x5]
.L5771:
	bl	GetCatchingBattler
	ldr	r1, .L5777+0x18
	mov	r8, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r8
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L5777+0x1c
	add	r0, r0, r5
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	ldr	r4, .L5777+0x20
	strh	r0, [r4, #0x28]
	bl	GetCatchingBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	add	r2, r4, #0
	add	r2, r2, #0x2a
	mov	r1, #0x2
	bl	GetMonData
	bl	GetCatchingBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x26
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, #0xf
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r1, #0x3d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
	ldr	r1, .L5777+0x24
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5778:
	.align	2, 0
.L5777:
	.word	gStringVar1
	.word	0x4036
	.word	gStringVar2
	.word	gStringVar3
	.word	gBattleCommunication
	.word	0x8ab
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleResults
	.word	gBattlescriptCurrInstr
.Lfe296:
	.size	 Cmd_givecaughtmon,.Lfe296-Cmd_givecaughtmon
	.align	2, 0
	.type	 Cmd_trysetcaughtmondexflags,function
	.thumb_func
Cmd_trysetcaughtmondexflags:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	bl	GetCatchingBattler
	ldr	r6, .L5785
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L5785+0x4
	add	r0, r0, r4
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	mov	r8, r7
	bl	GetCatchingBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetMonData
	add	r4, r0, #0
	add	r0, r7, #0
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetSetPokedexFlag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L5784	@cond_branch
	ldr	r0, .L5785+0x8
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L5782	@cond_branch
	add	r0, r7, #0
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	add	r2, r4, #0
	bl	HandleSetPokedexFlag
.L5784:
	ldr	r3, .L5785+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5781
.L5786:
	.align	2, 0
.L5785:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	0x861
	.word	gBattlescriptCurrInstr
.L5782:
	mov	r0, r8
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	add	r2, r4, #0
	bl	HandleSetPokedexFlag
	ldr	r1, .L5787
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5781:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5788:
	.align	2, 0
.L5787:
	.word	gBattlescriptCurrInstr
.Lfe297:
	.size	 Cmd_trysetcaughtmondexflags,.Lfe297-Cmd_trysetcaughtmondexflags
	.align	2, 0
	.type	 Cmd_displaydexinfo,function
	.thumb_func
Cmd_displaydexinfo:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x4
	bl	GetCatchingBattler
	ldr	r1, .L5805
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L5805+0x4
	add	r0, r0, r1
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L5805+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bls	.LCB53926
	b	.L5790	@long jump
.LCB53926:
	lsl	r0, r0, #0x2
	ldr	r1, .L5805+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L5806:
	.align	2, 0
.L5805:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleCommunication
	.word	.L5801
	.align	2, 0
	.align	2, 0
.L5801:
	.word	.L5791
	.word	.L5792
	.word	.L5794
	.word	.L5796
	.word	.L5797
	.word	.L5799
.L5791:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L5803
.L5792:
	ldr	r0, .L5807
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB53967
	b	.L5790	@long jump
.LCB53967:
	bl	FreeAllWindowBuffers
	add	r0, r4, #0
	bl	SpeciesToNationalPokedexNum
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r4, .L5807+0x4
	bl	GetCatchingBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x5c
	mul	r0, r0, r6
	add	r1, r4, #0
	add	r1, r1, #0x58
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r8, r0
	bl	GetCatchingBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mul	r0, r0, r6
	add	r4, r4, #0x4c
	add	r0, r0, r4
	ldr	r2, [r0]
	add	r0, r5, #0
	mov	r1, r8
	bl	DisplayCaughtMonDexPage
	ldr	r1, .L5807+0x8
	strb	r0, [r1, #0x1]
	b	.L5804
.L5808:
	.align	2, 0
.L5807:
	.word	gPaletteFade
	.word	gBattleMons
	.word	gBattleCommunication
.L5794:
	ldr	r0, .L5809
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L5790	@cond_branch
	ldr	r0, .L5809+0x4
	ldr	r1, [r0, #0x4]
	ldr	r0, .L5809+0x8
	cmp	r1, r0
	bne	.L5790	@cond_branch
	ldr	r2, .L5809+0xc
	ldr	r4, .L5809+0x10
	ldrb	r1, [r4, #0x1]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L5790	@cond_branch
	ldr	r0, .L5809+0x14
	bl	SetVBlankCallback
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L5790
.L5810:
	.align	2, 0
.L5809:
	.word	gPaletteFade
	.word	gMain
	.word	BattleMainCB2
	.word	gTasks
	.word	gBattleCommunication
	.word	VBlankCB_Battle
.L5796:
	bl	InitBattleBgsVideo
	bl	LoadBattleTextboxAndBackground
	ldr	r1, .L5811
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	b	.L5803
.L5812:
	.align	2, 0
.L5811:
	.word	gBattle_BG3_X
.L5797:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L5790	@cond_branch
	ldr	r0, .L5813
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
.L5803:
	ldr	r1, .L5813+0x4
.L5804:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L5790
.L5814:
	.align	2, 0
.L5813:
	.word	0xffff
	.word	gBattleCommunication
.L5799:
	ldr	r0, .L5815
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L5790	@cond_branch
	ldr	r1, .L5815+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L5790:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L5816:
	.align	2, 0
.L5815:
	.word	gPaletteFade
	.word	gBattlescriptCurrInstr
.Lfe298:
	.size	 Cmd_displaydexinfo,.Lfe298-Cmd_displaydexinfo
	.align	2, 0
	.globl	HandleBattleWindow
	.type	 HandleBattleWindow,function
	.thumb_func
HandleBattleWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	ldr	r4, [sp, #0x40]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x10]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x1c]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	sl, r3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r9, r4
	mov	r1, #0x0
	add	r0, sp, #0xc
	strh	r1, [r0]
	ldr	r6, [sp, #0x10]
	cmp	r6, sl
	bgt	.L5819	@cond_branch
.L5821:
	mov	r5, r8
	add	r0, r6, #0x1
	str	r0, [sp, #0x18]
	ldr	r2, [sp, #0x1c]
	cmp	r5, r2
	bgt	.L5820	@cond_branch
	add	r4, sp, #0xc
	lsl	r7, r6, #0x18
	str	r7, [sp, #0x14]
.L5825:
	ldr	r0, [sp, #0x10]
	cmp	r6, r0
	bne	.L5826	@cond_branch
	cmp	r5, r8
	bne	.L5827	@cond_branch
	ldr	r0, .L5846
	b	.L5845
.L5847:
	.align	2, 0
.L5846:
	.word	0x1022
.L5827:
	ldr	r2, [sp, #0x1c]
	cmp	r5, r2
	bne	.L5829	@cond_branch
	ldr	r0, .L5848
	b	.L5845
.L5849:
	.align	2, 0
.L5848:
	.word	0x1024
.L5829:
	ldr	r0, .L5850
	b	.L5845
.L5851:
	.align	2, 0
.L5850:
	.word	0x1023
.L5826:
	cmp	r6, sl
	bne	.L5832	@cond_branch
	cmp	r5, r8
	bne	.L5833	@cond_branch
	ldr	r0, .L5852
	b	.L5845
.L5853:
	.align	2, 0
.L5852:
	.word	0x1028
.L5833:
	ldr	r7, [sp, #0x1c]
	cmp	r5, r7
	bne	.L5835	@cond_branch
	ldr	r0, .L5854
	b	.L5845
.L5855:
	.align	2, 0
.L5854:
	.word	0x102a
.L5835:
	ldr	r0, .L5856
	b	.L5845
.L5857:
	.align	2, 0
.L5856:
	.word	0x1029
.L5832:
	cmp	r5, r8
	bne	.L5838	@cond_branch
	ldr	r0, .L5858
	b	.L5845
.L5859:
	.align	2, 0
.L5858:
	.word	0x1025
.L5838:
	ldr	r0, [sp, #0x1c]
	cmp	r5, r0
	bne	.L5840	@cond_branch
	ldr	r0, .L5860
	b	.L5845
.L5861:
	.align	2, 0
.L5860:
	.word	0x1027
.L5840:
	ldr	r0, .L5862
.L5845:
	strh	r0, [r4]
	mov	r1, #0x1
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L5842	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4]
.L5842:
	mov	r2, r9
	lsr	r0, r2, #0x7
	lsl	r0, r0, #0x18
	lsl	r2, r5, #0x18
	lsr	r2, r2, #0x18
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r1, #0x11
	str	r1, [sp, #0x8]
	lsr	r0, r0, #0x18
	add	r1, sp, #0xc
	ldr	r7, [sp, #0x14]
	lsr	r3, r7, #0x18
	bl	CopyToBgTilemapBufferRect_ChangePalette
	add	r5, r5, #0x1
	ldr	r0, [sp, #0x1c]
	cmp	r5, r0
	ble	.L5825	@cond_branch
.L5820:
	ldr	r6, [sp, #0x18]
	cmp	r6, sl
	ble	.L5821	@cond_branch
.L5819:
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5863:
	.align	2, 0
.L5862:
	.word	0x1026
.Lfe299:
	.size	 HandleBattleWindow,.Lfe299-HandleBattleWindow
	.align	2, 0
	.globl	BattleCreateYesNoCursorAt
	.type	 BattleCreateYesNoCursorAt,function
	.thumb_func
BattleCreateYesNoCursorAt:
	push	{lr}
	add	sp, sp, #-0x10
	add	r3, r0, #0
	add	r0, sp, #0xc
	mov	r2, #0x1
	strh	r2, [r0]
	mov	r1, #0x2
	strh	r1, [r0, #0x2]
	lsl	r3, r3, #0x19
	mov	r0, #0x90
	lsl	r0, r0, #0x14
	add	r3, r3, r0
	lsr	r3, r3, #0x18
	str	r2, [sp]
	str	r1, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	add	r1, sp, #0xc
	mov	r2, #0x19
	bl	CopyToBgTilemapBufferRect_ChangePalette
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.Lfe300:
	.size	 BattleCreateYesNoCursorAt,.Lfe300-BattleCreateYesNoCursorAt
	.align	2, 0
	.globl	BattleDestroyYesNoCursorAt
	.type	 BattleDestroyYesNoCursorAt,function
	.thumb_func
BattleDestroyYesNoCursorAt:
	push	{lr}
	add	sp, sp, #-0x10
	add	r3, r0, #0
	add	r0, sp, #0xc
	ldr	r1, .L5866
	strh	r1, [r0]
	strh	r1, [r0, #0x2]
	lsl	r3, r3, #0x19
	mov	r0, #0x90
	lsl	r0, r0, #0x14
	add	r3, r3, r0
	lsr	r3, r3, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	add	r1, sp, #0xc
	mov	r2, #0x19
	bl	CopyToBgTilemapBufferRect_ChangePalette
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.L5867:
	.align	2, 0
.L5866:
	.word	0x1016
.Lfe301:
	.size	 BattleDestroyYesNoCursorAt,.Lfe301-BattleDestroyYesNoCursorAt
	.align	2, 0
	.type	 Cmd_trygivecaughtmonnick,function
	.thumb_func
Cmd_trygivecaughtmonnick:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	ldr	r0, .L5889
	ldrb	r1, [r0]
	add	r4, r0, #0
	cmp	r1, #0x4
	bls	.LCB54443
	b	.L5869	@long jump
.LCB54443:
	lsl	r0, r1, #0x2
	ldr	r1, .L5889+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L5890:
	.align	2, 0
.L5889:
	.word	gBattleCommunication
	.word	.L5886
	.align	2, 0
	.align	2, 0
.L5886:
	.word	.L5870
	.word	.L5871
	.word	.L5879
	.word	.L5881
	.word	.L5883
.L5870:
	mov	r4, #0x0
	str	r4, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r0, .L5891
	mov	r1, #0xc
	bl	BattlePutTextOnWindow
	ldr	r1, .L5891+0x4
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	strb	r4, [r1, #0x1]
	mov	r0, #0x0
	bl	BattleCreateYesNoCursorAt
	b	.L5869
.L5892:
	.align	2, 0
.L5891:
	.word	gText_BattleYesNoChoice
	.word	gBattleCommunication
.L5871:
	ldr	r0, .L5893
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L5872	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L5872	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x1]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L5872:
	ldr	r0, .L5893
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L5873	@cond_branch
	ldr	r4, .L5893+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L5873	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x1]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L5873:
	ldr	r0, .L5893
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L5874	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L5893+0x4
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L5888	@cond_branch
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	b	.L5869
.L5894:
	.align	2, 0
.L5893:
	.word	gMain
	.word	gBattleCommunication
.L5874:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB54594
	b	.L5869	@long jump
.LCB54594:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L5895
.L5888:
	mov	r0, #0x4
	strb	r0, [r1]
	b	.L5869
.L5896:
	.align	2, 0
.L5895:
	.word	gBattleCommunication
.L5879:
	ldr	r0, .L5897
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB54618
	b	.L5869	@long jump
.LCB54618:
	ldr	r0, .L5897+0x4
	mov	sl, r0
	ldr	r1, .L5897+0x8
	mov	r9, r1
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	mov	r2, #0x64
	mov	r8, r2
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r6, .L5897+0xc
	add	r0, r0, r6
	ldr	r1, .L5897+0x10
	ldr	r2, [r1]
	add	r2, r2, #0x6d
	mov	r1, #0x2
	bl	GetMonData
	bl	FreeAllWindowBuffers
	mov	r2, r9
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r6
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r2, r9
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r6
	bl	GetMonGender
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r2, r9
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r6
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetMonData
	add	r7, r0, #0
	mov	r2, r9
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r6
	mov	r1, #0x59
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L5897+0x10
	ldr	r1, [r2]
	add	r1, r1, #0x6d
	str	r7, [sp]
	ldr	r2, .L5897+0x14
	str	r2, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	add	r2, r5, #0
	add	r3, r4, #0
	bl	DoNamingScreen
	ldr	r1, .L5897+0x18
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L5869
.L5898:
	.align	2, 0
.L5897:
	.word	gPaletteFade
	.word	gBattlerPartyIndexes
	.word	gBattlerTarget
	.word	gEnemyParty
	.word	gBattleStruct
	.word	BattleMainCB2
	.word	gBattleCommunication
.L5881:
	ldr	r0, .L5899
	ldr	r1, [r0, #0x4]
	ldr	r0, .L5899+0x4
	cmp	r1, r0
	bne	.L5869	@cond_branch
	ldr	r0, .L5899+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L5869	@cond_branch
	ldr	r1, .L5899+0xc
	ldr	r0, .L5899+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L5899+0x14
	add	r0, r0, r1
	ldr	r1, .L5899+0x18
	ldr	r2, [r1]
	add	r2, r2, #0x6d
	mov	r1, #0x2
	bl	SetMonData
	b	.L5884
.L5900:
	.align	2, 0
.L5899:
	.word	gMain
	.word	BattleMainCB2
	.word	gPaletteFade
	.word	gBattlerPartyIndexes
	.word	gBattlerTarget
	.word	gEnemyParty
	.word	gBattleStruct
.L5883:
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	bne	.L5884	@cond_branch
	ldr	r1, .L5901
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L5869
.L5902:
	.align	2, 0
.L5901:
	.word	gBattlescriptCurrInstr
.L5884:
	ldr	r3, .L5903
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L5869:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5904:
	.align	2, 0
.L5903:
	.word	gBattlescriptCurrInstr
.Lfe302:
	.size	 Cmd_trygivecaughtmonnick,.Lfe302-Cmd_trygivecaughtmonnick
	.align	2, 0
	.type	 Cmd_subattackerhpbydmg,function
	.thumb_func
Cmd_subattackerhpbydmg:
	ldr	r2, .L5906
	ldr	r0, .L5906+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldr	r0, .L5906+0x8
	ldr	r2, [r0]
	ldrh	r0, [r1, #0x2a]
	sub	r0, r0, r2
	strh	r0, [r1, #0x2a]
	ldr	r1, .L5906+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L5907:
	.align	2, 0
.L5906:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.Lfe303:
	.size	 Cmd_subattackerhpbydmg,.Lfe303-Cmd_subattackerhpbydmg
	.align	2, 0
	.type	 Cmd_removeattackerstatus1,function
	.thumb_func
Cmd_removeattackerstatus1:
	ldr	r1, .L5909
	ldr	r0, .L5909+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r1, .L5909+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L5910:
	.align	2, 0
.L5909:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe304:
	.size	 Cmd_removeattackerstatus1,.Lfe304-Cmd_removeattackerstatus1
	.align	2, 0
	.type	 Cmd_finishaction,function
	.thumb_func
Cmd_finishaction:
	ldr	r1, .L5912
	mov	r0, #0xc
	strb	r0, [r1]
	bx	lr
.L5913:
	.align	2, 0
.L5912:
	.word	gCurrentActionFuncId
.Lfe305:
	.size	 Cmd_finishaction,.Lfe305-Cmd_finishaction
	.align	2, 0
	.type	 Cmd_finishturn,function
	.thumb_func
Cmd_finishturn:
	ldr	r1, .L5915
	mov	r0, #0xc
	strb	r0, [r1]
	ldr	r1, .L5915+0x4
	ldr	r0, .L5915+0x8
	ldrb	r0, [r0]
	strb	r0, [r1]
	bx	lr
.L5916:
	.align	2, 0
.L5915:
	.word	gCurrentActionFuncId
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
.Lfe306:
	.size	 Cmd_finishturn,.Lfe306-Cmd_finishturn
	.align	2, 0
	.type	 Cmd_trainerslideout,function
	.thumb_func
Cmd_trainerslideout:
	push	{r4, r5, lr}
	ldr	r5, .L5918
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerAtPosition
	ldr	r4, .L5918+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitTrainerSlideBack
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L5919:
	.align	2, 0
.L5918:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe307:
	.size	 Cmd_trainerslideout,.Lfe307-Cmd_trainerslideout
	.align	2, 0
	.type	 Cmd_settelekinesis,function
	.thumb_func
Cmd_settelekinesis:
	push	{r4, r5, lr}
	ldr	r1, .L5924
	ldr	r5, .L5924+0x4
	ldrb	r3, [r5]
	lsl	r0, r3, #0x2
	add	r4, r0, r1
	ldr	r2, [r4]
	ldr	r0, .L5924+0x8
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L5922	@cond_branch
	ldr	r0, .L5924+0xc
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L5922	@cond_branch
	ldr	r1, .L5924+0x10
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x5
	ldr	r1, .L5924+0x14
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L5921	@cond_branch
.L5922:
	ldr	r3, .L5924+0x18
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5923
.L5925:
	.align	2, 0
.L5924:
	.word	gStatuses3
	.word	gBattlerTarget
	.word	0xa00400
	.word	gFieldStatuses
	.word	gBattleMons
	.word	-0x320000
	.word	gBattlescriptCurrInstr
.L5921:
	mov	r0, #0x80
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	str	r2, [r4]
	ldr	r2, .L5926
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	add	r0, r0, #0x20
	mov	r1, #0x3
	strb	r1, [r0]
	ldr	r1, .L5926+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5923:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L5927:
	.align	2, 0
.L5926:
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
.Lfe308:
	.size	 Cmd_settelekinesis,.Lfe308-Cmd_settelekinesis
	.align	2, 0
	.type	 Cmd_swapstatstages,function
	.thumb_func
Cmd_swapstatstages:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r6, .L5929
	ldr	r0, [r6]
	ldrb	r2, [r0, #0x1]
	ldr	r3, .L5929+0x4
	ldr	r0, .L5929+0x8
	ldrb	r0, [r0]
	mov	r4, #0x5c
	mov	r1, r0
	mul	r1, r1, r4
	add	r1, r2, r1
	add	r3, r3, #0x18
	add	r1, r1, r3
	ldrb	r0, [r1]
	mov	r8, r0
	ldr	r5, .L5929+0xc
	ldrb	r0, [r5]
	mul	r0, r0, r4
	add	r0, r2, r0
	add	r0, r0, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r5]
	mul	r0, r0, r4
	add	r2, r2, r0
	add	r2, r2, r3
	mov	r0, r8
	strb	r0, [r2]
	ldr	r0, [r6]
	add	r0, r0, #0x2
	str	r0, [r6]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L5930:
	.align	2, 0
.L5929:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlerTarget
.Lfe309:
	.size	 Cmd_swapstatstages,.Lfe309-Cmd_swapstatstages
	.align	2, 0
	.type	 Cmd_averagestats,function
	.thumb_func
Cmd_averagestats:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L5932
	mov	r9, r0
	ldr	r6, [r0]
	ldrb	r3, [r6, #0x1]
	ldr	r0, .L5932+0x4
	ldrb	r0, [r0]
	mov	r5, #0x5c
	mov	r1, r0
	mul	r1, r1, r5
	lsl	r3, r3, #0x1
	add	r1, r1, r3
	ldr	r4, .L5932+0x8
	add	r1, r1, r4
	ldrh	r2, [r1]
	ldr	r7, .L5932+0xc
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r0, r0, r3
	add	r0, r0, r4
	ldrh	r0, [r0]
	add	r2, r2, r0
	lsr	r2, r2, #0x1
	strh	r2, [r1]
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r0, r0, r3
	add	r0, r0, r4
	strh	r2, [r0]
	add	r6, r6, #0x2
	mov	r0, r9
	str	r6, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5933:
	.align	2, 0
.L5932:
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattlerTarget
.Lfe310:
	.size	 Cmd_averagestats,.Lfe310-Cmd_averagestats
	.align	2, 0
	.type	 Cmd_jumpifoppositegenders,function
	.thumb_func
Cmd_jumpifoppositegenders:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L5939
	ldr	r0, .L5939+0x4
	ldrb	r0, [r0]
	mov	r6, #0x5c
	mov	r1, r0
	mul	r1, r1, r6
	add	r0, r1, r4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	add	r5, r4, #0
	add	r5, r5, #0x4c
	add	r1, r1, r5
	ldr	r1, [r1]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L5939+0x8
	ldrb	r0, [r0]
	mov	r1, r0
	mul	r1, r1, r6
	add	r4, r1, r4
	ldrh	r0, [r4]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	add	r1, r1, r5
	ldr	r1, [r1]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r7, #0
	bne	.L5937	@cond_branch
	cmp	r0, #0xfe
	beq	.L5936	@cond_branch
.L5937:
	cmp	r7, #0xfe
	bne	.L5935	@cond_branch
	cmp	r0, #0
	bne	.L5935	@cond_branch
.L5936:
	ldr	r3, .L5939+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5938
.L5940:
	.align	2, 0
.L5939:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L5935:
	ldr	r1, .L5941
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5938:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5942:
	.align	2, 0
.L5941:
	.word	gBattlescriptCurrInstr
.Lfe311:
	.size	 Cmd_jumpifoppositegenders,.Lfe311-Cmd_jumpifoppositegenders
	.align	2, 0
	.type	 Cmd_trygetbaddreamstarget,function
	.thumb_func
Cmd_trygetbaddreamstarget:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L5955
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L5955+0x4
	ldr	r1, .L5955+0x8
	ldrb	r0, [r5]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L5954	@cond_branch
	add	r4, r5, #0
	ldr	r7, .L5955+0xc
.L5947:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r6
	beq	.L5946	@cond_branch
	ldrb	r2, [r5]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r7
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L5950	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerAbility
	cmp	r0, #0xd5
	bne	.L5946	@cond_branch
.L5950:
	ldrb	r0, [r4]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L5945	@cond_branch
.L5946:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	add	r5, r4, #0
	ldr	r1, .L5955+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L5947	@cond_branch
.L5945:
	ldr	r0, .L5955+0x4
	ldr	r1, .L5955+0x8
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L5952	@cond_branch
.L5954:
	ldr	r3, .L5955+0x10
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5953
.L5956:
	.align	2, 0
.L5955:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBattleMons+0x50
	.word	gBattlescriptCurrInstr
.L5952:
	ldr	r1, .L5957
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5953:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5958:
	.align	2, 0
.L5957:
	.word	gBattlescriptCurrInstr
.Lfe312:
	.size	 Cmd_trygetbaddreamstarget,.Lfe312-Cmd_trygetbaddreamstarget
	.align	2, 0
	.type	 Cmd_tryworryseed,function
	.thumb_func
Cmd_tryworryseed:
	push	{lr}
	ldr	r2, .L5969
	ldr	r3, .L5969+0x4
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x20]
	cmp	r0, #0x79
	beq	.L5965	@cond_branch
	cmp	r0, #0x79
	bgt	.L5968	@cond_branch
	cmp	r0, #0xf
	beq	.L5965	@cond_branch
	cmp	r0, #0x36
	beq	.L5965	@cond_branch
	b	.L5966
.L5970:
	.align	2, 0
.L5969:
	.word	gBattleMons
	.word	gBattlerTarget
.L5968:
	cmp	r0, #0xb0
	beq	.L5965	@cond_branch
	cmp	r0, #0xd1
	bne	.L5966	@cond_branch
.L5965:
	ldr	r3, .L5971
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L5960
.L5972:
	.align	2, 0
.L5971:
	.word	gBattlescriptCurrInstr
.L5966:
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	mov	r1, #0xf
	strh	r1, [r0, #0x20]
	ldr	r1, .L5973
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L5960:
	pop	{r0}
	bx	r0
.L5974:
	.align	2, 0
.L5973:
	.word	gBattlescriptCurrInstr
.Lfe313:
	.size	 Cmd_tryworryseed,.Lfe313-Cmd_tryworryseed
	.align	2, 0
	.type	 Cmd_metalburstdamagecalculator,function
	.thumb_func
Cmd_metalburstdamagecalculator:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r6, .L5986
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L5986+0x4
	ldrb	r0, [r6]
	lsl	r1, r0, #0x4
	add	r0, r4, #0x4
	mov	r8, r0
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L5976	@cond_branch
	add	r0, r1, r4
	ldrb	r0, [r0, #0xc]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r7, r5
	beq	.L5976	@cond_branch
	ldr	r2, .L5986+0x8
	mov	r9, r2
	ldrb	r0, [r6]
	lsl	r1, r0, #0x4
	add	r0, r1, r4
	ldrb	r0, [r0, #0xc]
	mov	r6, #0x5c
	mul	r0, r0, r6
	add	r0, r0, r9
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L5976	@cond_branch
	ldr	r4, .L5986+0xc
	mov	r2, r8
	add	r0, r1, r2
	ldr	r1, [r0]
	mov	r0, #0x96
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__udivsi3
	str	r0, [r4]
	ldr	r1, .L5986+0x10
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.L5977	@cond_branch
	ldrb	r1, [r1, #0x9]
	mov	r0, r1
	mul	r0, r0, r6
	add	r0, r0, r9
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.L5984	@cond_branch
.L5977:
	ldr	r2, .L5986+0x14
	ldr	r1, .L5986+0x4
	ldr	r0, .L5986
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0xc]
	b	.L5985
.L5987:
	.align	2, 0
.L5986:
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	gSideTimers
	.word	gBattlerTarget
.L5976:
	ldr	r4, .L5988
	ldr	r6, .L5988+0x4
	ldrb	r0, [r6]
	lsl	r1, r0, #0x4
	mov	r0, #0x8
	add	r0, r0, r4
	mov	r8, r0
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L5980	@cond_branch
	add	r0, r1, r4
	ldrb	r0, [r0, #0xd]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r7, r5
	beq	.L5980	@cond_branch
	ldr	r7, .L5988+0x8
	ldrb	r0, [r6]
	lsl	r1, r0, #0x4
	add	r0, r1, r4
	ldrb	r0, [r0, #0xd]
	mov	r6, #0x5c
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L5980	@cond_branch
	ldr	r4, .L5988+0xc
	mov	r2, r8
	add	r0, r1, r2
	ldr	r1, [r0]
	mov	r0, #0x96
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__udivsi3
	str	r0, [r4]
	ldr	r1, .L5988+0x10
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.L5981	@cond_branch
	ldrb	r1, [r1, #0x9]
	mov	r0, r1
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L5981	@cond_branch
.L5984:
	ldr	r0, .L5988+0x14
	strb	r1, [r0]
	b	.L5982
.L5989:
	.align	2, 0
.L5988:
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	gSideTimers
	.word	gBattlerTarget
.L5981:
	ldr	r2, .L5990
	ldr	r1, .L5990+0x4
	ldr	r0, .L5990+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0xd]
.L5985:
	strb	r0, [r2]
.L5982:
	ldr	r1, .L5990+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L5979
.L5991:
	.align	2, 0
.L5990:
	.word	gBattlerTarget
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L5980:
	ldr	r2, .L5992
	ldr	r0, .L5992+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r3, .L5992+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L5979:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5993:
	.align	2, 0
.L5992:
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe314:
	.size	 Cmd_metalburstdamagecalculator,.Lfe314-Cmd_metalburstdamagecalculator
	.align	2, 0
	.type	 CriticalCapture,function
	.thumb_func
CriticalCapture:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x1
	bl	GetNationalPokedexCount
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x29
	bhi	.L5995	@cond_branch
	mov	r4, #0x0
	b	.L5996
.L5995:
	cmp	r1, #0xcf
	bhi	.L5997	@cond_branch
	lsr	r4, r4, #0x1
	b	.L5996
.L5997:
	mov	r0, #0xcf
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bls	.L5996	@cond_branch
	add	r0, r0, #0xcf
	cmp	r1, r0
	bhi	.L6001	@cond_branch
	mov	r0, #0x96
	b	.L6007
.L6001:
	mov	r0, #0xcf
	lsl	r0, r0, #0x2
	cmp	r1, r0
	bhi	.L6003	@cond_branch
	lsl	r4, r4, #0x1
	b	.L5996
.L6003:
	mov	r0, #0xfa
.L6007:
	mul	r0, r0, r4
	mov	r1, #0x64
	bl	__udivsi3
	add	r4, r0, #0
.L5996:
	add	r0, r4, #0
	mov	r1, #0x6
	bl	__udivsi3
	add	r4, r0, #0
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xff
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r4
	bcc	.L6005	@cond_branch
	mov	r0, #0x0
	b	.L6006
.L6005:
	mov	r0, #0x1
.L6006:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe315:
	.size	 CriticalCapture,.Lfe315-CriticalCapture
.text
	.align	2, 0

